// File: src/config/envFn.js

import dotenv from 'dotenv';
import dotenvExpand from 'dotenv-expand';
import { EnvData } from '../../../../../src/index/index.js';
import { EnvFnInterface, EnvSchema, ParsedEnv } from '../../../../../src/index/index.js';

function loadEnv(...filePaths: string[]): void {
	try {
		filePaths.forEach(filePath => {
			const env = dotenv.config({ path: filePath });

			if (env.error) {
				console.error(
					`Error loading environment variables from ${filePath}`
				);

				throw env.error;
			}

			dotenvExpand.expand(env);

			console.log(`Loaded environment variables from ${filePath}`);
		});

		console.log(`Successfully loaded environment variables! :3`);
		console.log(
			`Environment variables\n${JSON.stringify(process.env, null, 2)}`
		);
	} catch (error) {
		console.error(
			`Error loading environment variables! :(\nError: ${error}`
		);
		console.log(
			`Reading data from process.env before process application exit.\n${process.env}`
		);
		console.log(`Aborting application initialization process...`);

		process.exit(200);
	}
}

function parseEnv<T extends EnvSchema>(schema: T): ParsedEnv<T> & EnvData {
	const parsedEnv = {} as ParsedEnv<T>;

	for (const [key, config] of Object.entries(schema)) {
		const rawValue = process.env[key];

		if (rawValue === undefined || rawValue === null || rawValue === '') {
			if (config.nullable) {
				parsedEnv[key as keyof T] = null;

				continue;
			}

			if (config.default !== undefined) {
				parsedEnv[key as keyof T] =
					config.default as T[keyof T]['default'];

				continue;
			}

			console.error(`Missing required environment variable: ${key}`);

			process.exit(205);
		}

		switch (config.type) {
			case 'string':
				if (config.allowedValues) {
					const allowedValues = config.allowedValues as string[];

					if (!allowedValues.includes(rawValue)) {
						throw new Error(
							`Invalid value for ${key}. Allowed values: ${config.allowedValues.join(
								', '
							)}`
						);
					}
				}
				parsedEnv[key as keyof T] = rawValue;
				break;
			case 'number': {
				const parsedNumber = parseFloat(rawValue);

				if (isNaN(parsedNumber)) {
					if (
						config.nullable &&
						rawValue.trim().toLowerCase() === 'null'
					) {
						parsedEnv[key as keyof T] = null;
						break;
					}

					throw new Error(`Invalid number for ${key}: ${rawValue}`);
				}
				parsedEnv[key as keyof T] =
					parsedNumber as T[keyof T]['default'];
				break;
			}
			case 'boolean':
				parsedEnv[key as keyof T] = [
					'true',
					'True',
					'TRUE',
					'T',
					'1',
					'yes',
					'Yes',
					'YES',
					'Y'
				].includes(rawValue.toLowerCase());
				break;
			case 'array':
				parsedEnv[key as keyof T] = rawValue
					.split(',')
					.map(v => v.trim());
				break;

			default:
				console.error(`Unsupported type for ${key}: ${config.type}`);

				process.exit(206);
		}
	}

	return parsedEnv as ParsedEnv<T> & EnvData;
}

function printEnvVariables(keys: string[]): void {
	const unsetKeys: string[] = [];

	console.log('Environment Variables:');

	keys.forEach(key => {
		const value = process.env[key];

		if (value === undefined) {
			unsetKeys.push(key);
		} else {
			console.log(`${key}: ${value}`);
		}
	});

	if (unsetKeys.length > 0) {
		console.warn('\nMissing Environment Variables:');

		unsetKeys.forEach(key => console.warn(`${key}: (undefined)`));
	}
}

export const envFn: EnvFnInterface = {
	load: loadEnv,
	parse: parseEnv,
	print: printEnvVariables
};
