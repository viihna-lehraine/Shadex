import{d}from"./index-Bu01b8jX.js";import{p as h}from"./paletteConfig-DkWxuv4B.js";const f=h.adjustment,g=d.colors;function j(e,s,n){const{errors:a,log:u}=s;function o(t){return a.handleSync(()=>t>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,"Error occurred while applying gamma correction.")}function l(t){return a.handleSync(()=>{const r=g.rgb;return n.colorValue(t)?{value:{red:e.asByteRange(Math.round(Math.min(Math.max(0,t.value.red),1)*255)),green:e.asByteRange(Math.round(Math.min(Math.max(0,t.value.green),1)*255)),blue:e.asByteRange(Math.round(Math.min(Math.max(0,t.value.blue),1)*255))},format:"rgb"}:(u.error(`Invalid RGB value ${JSON.stringify(t)}`,"adjustmentUtils.clampRGB"),r)},"Error occurred while clamping RGB value.")}function i(t){return a.handleSync(()=>{if(!n.colorValue(t))return u.error("Invalid color valus for adjustment.","adjustmentUtils.sl"),t;const r=Math.min(Math.max(t.value.saturation+f.slaValue,0),100),m=Math.min(100);return{value:{hue:t.value.hue,saturation:e.asPercentile(r),lightness:e.asPercentile(m)},format:"hsl"}},"Error occurred while adjusting saturation and lightness.")}const c={applyGammaCorrection:o,clampRGB:l,sl:i};return a.handleSync(()=>c,"Error occurred while creating adjustment utils.")}export{j as adjustmentUtilitiesFactory};
