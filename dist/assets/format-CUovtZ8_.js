import{r as o,d as l}from"./index-Bu01b8jX.js";const v=l.colors;function $(n,c,h){const{data:{deepClone:g},typeGuards:a}=c,{errors:s,log:i}=h;function f(e){return s.handleSync(()=>{switch(e.format){case"cmyk":return`cmyk(${e.value.cyan}, ${e.value.magenta}, ${e.value.yellow}, ${e.value.key})`;case"hex":return String(e.value.hex);case"hsl":return`hsl(${Math.round(e.value.hue)},
								${Math.round(e.value.saturation)}%,
								${Math.round(e.value.lightness)}%)`;case"rgb":return`rgb(${e.value.red}, ${e.value.green}, ${e.value.blue})`;default:return console.error("Unexpected color format"),l.colors.hexCSS}},"Error formatting color as CSS"),l.colors.hexCSS}function m(e){return s.handleSync(()=>{const r=g(e);if(a.isHex(r))return{format:"hex",value:{hex:`${r.value.hex}`}};if(a.isColorStringMap(r))return i.info(`Already formatted as color string: ${JSON.stringify(e)}`,"formatColorAsStringMap"),r;if(a.isCMYK(r)){const t=n.formatPercentageValues(r.value);return{format:"cmyk",value:{cyan:`${t.cyan}%`,magenta:`${t.magenta}%`,yellow:`${t.yellow}%`,key:`${t.key}%`}}}else if(a.isHSL(r)){const t=n.formatPercentageValues(r.value);return{format:"hsl",value:{hue:`${t.hue}`,saturation:`${t.saturation}%`,lightness:`${t.lightness}%`}}}else if(a.isRGB(r)){const t=n.formatPercentageValues(r.value);return{format:"rgb",value:{red:`${t.red}`,green:`${t.green}`,blue:`${t.blue}`}}}else return i.warn(`Unsupported format: ${r}`,"formatColorAsStringMap"),v.hslString},"Error formatting color as string map"),l.colors.hexString}function y(e){return s.handleSync(()=>{e=e.trim().toLowerCase();const r=e.match(o.css.cmyk),t=e.match(o.css.hsl),u=e.match(o.css.rgb);return r?{value:{cyan:parseInt(r[1],10),magenta:parseInt(r[2],10),yellow:parseInt(r[3],10),key:parseInt(r[4],10)},format:"cmyk"}:e.startsWith("#")?{value:{hex:e.length===7?e:n.convertShortHexToLong(e)},format:"hex"}:t?{value:{hue:parseInt(t[1],10),saturation:parseInt(t[2],10),lightness:parseInt(t[3],10)},format:"hsl"}:u?{value:{red:parseInt(u[1],10),green:parseInt(u[2],10),blue:parseInt(u[3],10)},format:"rgb"}:null},"Error formatting CSS as color"),null}const S={formatColorAsCSS:f,formatColorAsStringMap:m,formatCSSAsColor:y};return s.handleSync(()=>S,"Error creating color formatting utilities sub-group.")}export{$ as colorFormattingUtilitiesFactory};
