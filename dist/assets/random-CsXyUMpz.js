const h=()=>({selectRandomFromWeights(e){return this.selectWeightedRandom(e.weights,e.values)},selectWeightedRandom(e,n){try{if(e.length!==n.length||e.length===0)throw new Error("Weights and values must have the same non-zero length.");const r=n.reduce((t,s,a)=>(t[a]=(t[a-1]??0)+s,t),[]),d=Math.random(),o=r.findIndex(t=>d<t);return e[o>=0?o:e.length-1]}catch(r){throw new Error(`[getWeightedRandomValue-ERR]: Error generating weighted random value: ${r instanceof Error?r.message:r}`)}}});export{h as randomHelpersFactory};
