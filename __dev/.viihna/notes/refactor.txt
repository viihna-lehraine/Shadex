// File: dev.viihna/refactor.txt

- 1/13/24

Key Observations from the File Structure:

    Modular Organization:
        Separate directories for dom, idb, palette, data, common, etc.
        Files like palette/main/types/* indicate specific palette logic encapsulation.

    IndexedDB Management:
        IDBManager.ts is dedicated to database operations, showing a focus on IndexedDB.

    Common Utilities:
        Files in common/utils and common/helpers suggest an effort to centralize reusable logic.

    Data Definitions:
        data/consts, data/defaults, and data/mode house defaults, constants, and modes.

Steps to Achieve Platform Agnosticism and Future-Proofing:
1. Abstract Application Logic

    Goal: Decouple business logic from platform-specific concerns (browser APIs, IndexedDB, etc.).
    Action:
        Use a service layer for database interactions (IDBManager) and ensure it’s abstract enough to be swapped with other storage mechanisms (e.g., SQLite for desktop).
        Provide interfaces for storage and data manipulation to allow easy replacement.

2. Centralize Configuration

    Goal: Use environment-based configurations for flexibility.
    Action:
        Keep all configurations in a single file (e.g., src/config/index.ts).
        For platform-specific versions (Electron or mobile), provide overrides.

3. Modular UI Components

    Goal: Build UI components that can be reused across web, desktop, and mobile.
    Action:
        Use a component library/framework like React to create encapsulated, reusable components.
        Leverage CSS-in-JS or a responsive utility framework like TailwindCSS for consistent design.

4. Unified Build and Deployment

    Goal: Minimize the effort required to build for multiple platforms.
    Action:
        Use Vite or a similar bundler for fast builds.
        Integrate Electron for the desktop version by embedding the web app in a browser view.
        For mobile, plan to use React Native or Capacitor for native-like performance.

5. IndexedDB Strategy for Web

    Ensure that IDBManager is generic and modular:
        Use IndexedDB for the web.
        Replace it with SQLite or file-based storage for Electron with minimal changes.

6. Consider Offline-First Design

    Goal: Ensure the app works offline for web and desktop users.
    Action:
        Cache static resources using service workers (e.g., Workbox).
        Sync data changes when the device is back online.

7. Prepare for Future Mobile Versions

    Goal: Minimize future rework for mobile development.
    Action:
        Build the web app as a Progressive Web App (PWA) to test mobile usability early.
        Use responsive design principles and avoid features that depend on large screens or specific input methods.

Immediate Steps for Refactoring:

    Abstract Database Access:
        Wrap all database logic in IDBManager.
        Define interfaces for data storage and retrieval.

    Refactor UI Logic:
        Ensure dom files use a clear separation of concerns:
            dom/base.ts for base DOM interactions.
            dom/index.ts to consolidate DOM utility exports.

    Centralize State Management:
        Use a state management library (e.g., Zustand or Redux) for consistency.

    Documentation:
        Document each module’s purpose and interaction points for easier onboarding and debugging.

#########################################################################################

Testing the Adapter:

    Ensure that all CRUD operations (get, put, delete, clear, getAll) work as expected with your IndexedDB implementation.
    Verify type safety in real use cases and handle edge cases like missing or invalid data.

Optimizing IDBManager:

    Refactor the IDBManager to use the IDBAdapter consistently.
    Simplify or modularize functionality within IDBManager for better maintainability.

Error Handling and Logging:

    Review and standardize error handling in both IDBAdapter and IDBManager.
    Add meaningful logs for debugging and monitoring.

Future Proofing:

    Add functionality to migrate or upgrade the schema when the database version changes.
    Abstract frequently used operations into reusable helper methods.

Unit Testing:

    Write unit tests for both IDBAdapter and IDBManager to validate their behavior independently.
