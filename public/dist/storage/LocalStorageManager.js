// File: storage/LocalStorageManager.js
export class LocalStorageManager {
    static instance = null;
    log;
    errors;
    constructor(services) {
        this.log = services.log;
        this.errors = services.errors;
    }
    static getInstance(services) {
        if (!LocalStorageManager.instance) {
            LocalStorageManager.instance = new LocalStorageManager(services);
        }
        return LocalStorageManager.instance;
    }
    async init() {
        this.log('Using LocalStorage as a fallback.', 'warn');
        return true;
    }
    async clear() {
        await this.errors.handleAsync(async () => localStorage.clear(), 'Failed to clear LocalStorage');
    }
    async getItem(key) {
        return this.errors.handleAsync(async () => {
            const value = localStorage.getItem(key);
            return value ? JSON.parse(value) : null;
        }, `Failed to get item ${key} from LocalStorage`);
    }
    async removeItem(key) {
        await this.errors.handleAsync(async () => localStorage.removeItem(key), `Failed to remove item ${key} from LocalStorage`);
    }
    async setItem(key, value) {
        await this.errors.handleAsync(async () => {
            localStorage.setItem(key, JSON.stringify(value));
            this.log(`Stored item: ${key}`);
        }, `Failed to store item ${key} in LocalStorage`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYWxTdG9yYWdlTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yYWdlL0xvY2FsU3RvcmFnZU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDO0FBT3ZDLE1BQU0sT0FBTyxtQkFBbUI7SUFDdkIsTUFBTSxDQUFDLFFBQVEsR0FBK0IsSUFBSSxDQUFDO0lBQ25ELEdBQUcsQ0FBMkI7SUFDOUIsTUFBTSxDQUE4QjtJQUU1QyxZQUFvQixRQUEyQjtRQUM5QyxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQy9CLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUN4QixRQUEyQjtRQUUzQixJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkMsbUJBQW1CLENBQUMsUUFBUSxHQUFHLElBQUksbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsQ0FBQztRQUVELE9BQU8sbUJBQW1CLENBQUMsUUFBUSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLO1FBQ2pCLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQzVCLEtBQUssSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUNoQyw4QkFBOEIsQ0FDOUIsQ0FBQztJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFJLEdBQVc7UUFDbEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUN6QyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekMsQ0FBQyxFQUFFLHNCQUFzQixHQUFHLG9CQUFvQixDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBVztRQUNsQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUM1QixLQUFLLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQ3hDLHlCQUF5QixHQUFHLG9CQUFvQixDQUNoRCxDQUFDO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBVyxFQUFFLEtBQWM7UUFDL0MsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUN4QyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUUsd0JBQXdCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztJQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3RvcmFnZS9Mb2NhbFN0b3JhZ2VNYW5hZ2VyLmpzXG5cbmltcG9ydCB7XG5cdExvY2FsU3RvcmFnZU1hbmFnZXJJbnRlcmZhY2UsXG5cdFNlcnZpY2VzSW50ZXJmYWNlXG59IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcblxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZU1hbmFnZXIgaW1wbGVtZW50cyBMb2NhbFN0b3JhZ2VNYW5hZ2VySW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IExvY2FsU3RvcmFnZU1hbmFnZXIgfCBudWxsID0gbnVsbDtcblx0cHJpdmF0ZSBsb2c6IFNlcnZpY2VzSW50ZXJmYWNlWydsb2cnXTtcblx0cHJpdmF0ZSBlcnJvcnM6IFNlcnZpY2VzSW50ZXJmYWNlWydlcnJvcnMnXTtcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKHNlcnZpY2VzOiBTZXJ2aWNlc0ludGVyZmFjZSkge1xuXHRcdHRoaXMubG9nID0gc2VydmljZXMubG9nO1xuXHRcdHRoaXMuZXJyb3JzID0gc2VydmljZXMuZXJyb3JzO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShcblx0XHRzZXJ2aWNlczogU2VydmljZXNJbnRlcmZhY2Vcblx0KTogTG9jYWxTdG9yYWdlTWFuYWdlciB7XG5cdFx0aWYgKCFMb2NhbFN0b3JhZ2VNYW5hZ2VyLmluc3RhbmNlKSB7XG5cdFx0XHRMb2NhbFN0b3JhZ2VNYW5hZ2VyLmluc3RhbmNlID0gbmV3IExvY2FsU3RvcmFnZU1hbmFnZXIoc2VydmljZXMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBMb2NhbFN0b3JhZ2VNYW5hZ2VyLmluc3RhbmNlO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGluaXQoKTogUHJvbWlzZTxib29sZWFuPiB7XG5cdFx0dGhpcy5sb2coJ1VzaW5nIExvY2FsU3RvcmFnZSBhcyBhIGZhbGxiYWNrLicsICd3YXJuJyk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgY2xlYXIoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgdGhpcy5lcnJvcnMuaGFuZGxlQXN5bmMoXG5cdFx0XHRhc3luYyAoKSA9PiBsb2NhbFN0b3JhZ2UuY2xlYXIoKSxcblx0XHRcdCdGYWlsZWQgdG8gY2xlYXIgTG9jYWxTdG9yYWdlJ1xuXHRcdCk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0SXRlbTxUPihrZXk6IHN0cmluZyk6IFByb21pc2U8VCB8IG51bGw+IHtcblx0XHRyZXR1cm4gdGhpcy5lcnJvcnMuaGFuZGxlQXN5bmMoYXN5bmMgKCkgPT4ge1xuXHRcdFx0Y29uc3QgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuXHRcdFx0cmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiBudWxsO1xuXHRcdH0sIGBGYWlsZWQgdG8gZ2V0IGl0ZW0gJHtrZXl9IGZyb20gTG9jYWxTdG9yYWdlYCk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGF3YWl0IHRoaXMuZXJyb3JzLmhhbmRsZUFzeW5jKFxuXHRcdFx0YXN5bmMgKCkgPT4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KSxcblx0XHRcdGBGYWlsZWQgdG8gcmVtb3ZlIGl0ZW0gJHtrZXl9IGZyb20gTG9jYWxTdG9yYWdlYFxuXHRcdCk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IHVua25vd24pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRhd2FpdCB0aGlzLmVycm9ycy5oYW5kbGVBc3luYyhhc3luYyAoKSA9PiB7XG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG5cdFx0XHR0aGlzLmxvZyhgU3RvcmVkIGl0ZW06ICR7a2V5fWApO1xuXHRcdH0sIGBGYWlsZWQgdG8gc3RvcmUgaXRlbSAke2tleX0gaW4gTG9jYWxTdG9yYWdlYCk7XG5cdH1cbn1cbiJdfQ==