{"version":3,"file":"IDBManager.js","sources":["../../../../src/storage/IDBManager.ts"],"sourcesContent":["// File: storage/IDBManager.js\n\nimport { ServicesInterface } from '../types/index.js';\nimport { data } from '../data/index.js';\n\nconst dbName = data.storage.idb.dbName;\nconst defaultVerson = data.storage.idb.defaultVersion;\nconst storeName = data.storage.idb.storeName;\n\nexport class IDBManager {\n\tprivate static instance: IDBManager | null = null;\n\tprivate defaultVersion: number;\n\tprivate version: number;\n\tprivate db: IDBDatabase | null = null;\n\tprivate log: ServicesInterface['log'];\n\n\tprivate constructor(services: ServicesInterface) {\n\t\tthis.defaultVersion = defaultVerson;\n\t\tthis.version = this.defaultVersion;\n\t\tthis.log = services.log;\n\t}\n\n\tpublic static getInstance(services: ServicesInterface): IDBManager {\n\t\tif (!IDBManager.instance) {\n\t\t\tIDBManager.instance = new IDBManager(services);\n\t\t}\n\n\t\treturn IDBManager.instance;\n\t}\n\n\tpublic async init(): Promise<boolean> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!window.indexedDB) {\n\t\t\t\tthis.log(\n\t\t\t\t\t'warn',\n\t\t\t\t\t'IndexedDB is not supported in this browser',\n\t\t\t\t\t'IDBManager.init()',\n\t\t\t\t\t2\n\t\t\t\t);\n\t\t\t\treject(new Error('IndexedDB is not supported'));\n\t\t\t\treturn resolve(false);\n\t\t\t}\n\n\t\t\tconsole.log('[IDBManager.init] Opening IndexedDB...');\n\t\t\tconst request = indexedDB.open(dbName, this.version);\n\n\t\t\trequest.onupgradeneeded = event => {\n\t\t\t\tconst db = (event.target as IDBOpenDBRequest).result;\n\t\t\t\tconsole.log(\n\t\t\t\t\t`[IDBManager.init] Upgrading database to version ${this.version}`\n\t\t\t\t);\n\n\t\t\t\tif (!db.objectStoreNames.contains(storeName)) {\n\t\t\t\t\tdb.createObjectStore(storeName, {\n\t\t\t\t\t\tkeyPath: 'id',\n\t\t\t\t\t\tautoIncrement: true\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`[IDBManager.init] Created object store: ${storeName}`\n\t\t\t\t\t);\n\t\t\t\t\tthis.log(\n\t\t\t\t\t\t'info',\n\t\t\t\t\t\t`Created object store: ${storeName}`,\n\t\t\t\t\t\t'IDBManager.init()',\n\t\t\t\t\t\t3\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tthis.db = (event.target as IDBOpenDBRequest).result;\n\t\t\t\tthis.db.onversionchange = () => {\n\t\t\t\t\tthis.db?.close();\n\t\t\t\t\tthis.log(\n\t\t\t\t\t\t'warn',\n\t\t\t\t\t\t'IndexedDB version changed, closing database',\n\t\t\t\t\t\t'IDBManager.init()'\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tif (this.db) {\n\t\t\t\t\tthis.log(\n\t\t\t\t\t\t'info',\n\t\t\t\t\t\t'IndexedDB initialized successfully',\n\t\t\t\t\t\t'IDBManager.init()',\n\t\t\t\t\t\t2\n\t\t\t\t\t);\n\t\t\t\t\tresolve(true);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\t'IndexedDB opened but db object is null',\n\t\t\t\t\t\t'IDBManager.init()'\n\t\t\t\t\t);\n\t\t\t\t\treject(new Error('IndexedDB opened but db object is null'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = event => {\n\t\t\t\tconst errorMessage =\n\t\t\t\t\t(event.target as IDBOpenDBRequest).error?.message ||\n\t\t\t\t\t'Unknown error';\n\t\t\t\tconsole.error(\n\t\t\t\t\t`[IDBManager.init] IndexedDB failed: ${errorMessage}`\n\t\t\t\t);\n\t\t\t\tthis.log(\n\t\t\t\t\t'error',\n\t\t\t\t\t`IndexedDB failed to initialize: ${errorMessage}`,\n\t\t\t\t\t'IDBManager.init()',\n\t\t\t\t\t2\n\t\t\t\t);\n\t\t\t\tresolve(false);\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic async clear(): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.getTransaction('readwrite');\n\t\t\tif (!store) return reject('IndexedDB is not initialized.');\n\n\t\t\tconst request = store.clear();\n\n\t\t\trequest.onsuccess = () => resolve();\n\t\t\trequest.onerror = () => reject();\n\t\t});\n\t}\n\n\tpublic async ensureDBReady(): Promise<void> {\n\t\twhile (!this.db) {\n\t\t\tthis.log(\n\t\t\t\t'warn',\n\t\t\t\t'Waiting for IndexedDB to initialize...',\n\t\t\t\t'IDBManager.ensureDBReady()'\n\t\t\t);\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 50));\n\t\t}\n\t}\n\n\tpublic async getItem<T>(key: string): Promise<T | null> {\n\t\tawait this.ensureDBReady();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.getTransaction('readonly');\n\t\t\tif (!store) {\n\t\t\t\tthis.log(\n\t\t\t\t\t'error',\n\t\t\t\t\t'IndexedDB transaction failed: Database is not initialized.',\n\t\t\t\t\t'IDBManager.getItem()'\n\t\t\t\t);\n\t\t\t\treturn reject(new Error('IndexedDB is not initialized.'));\n\t\t\t}\n\n\t\t\tconst request = store.get(key);\n\n\t\t\trequest.onsuccess = () => {\n\t\t\t\tconsole.log(`[IDBManager.getItem] Retrieved item: ${key}`);\n\t\t\t\tresolve(request.result?.value ?? null);\n\t\t\t};\n\n\t\t\trequest.onerror = event => {\n\t\t\t\tconst errorMessage =\n\t\t\t\t\t(event.target as IDBRequest).error?.message ||\n\t\t\t\t\t'Unknown error';\n\t\t\t\tconsole.error(\n\t\t\t\t\t`[IDBManager.getItem] Failed to retrieve ${key}: ${errorMessage}`\n\t\t\t\t);\n\t\t\t\tthis.log(\n\t\t\t\t\t'error',\n\t\t\t\t\t`Failed to retrieve item: ${key} - ${errorMessage}`,\n\t\t\t\t\t'IDBManager.getItem()'\n\t\t\t\t);\n\t\t\t\treject(null);\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic getTransaction(mode: IDBTransactionMode): IDBObjectStore | null {\n\t\tif (!this.db) return null;\n\t\tconst transaction = this.db.transaction(storeName, mode);\n\t\treturn transaction.objectStore(storeName);\n\t}\n\n\tpublic async removeItem(key: string): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.getTransaction('readwrite');\n\t\t\tif (!store) return reject('IndexedDB is not initialized.');\n\n\t\t\tconst request = store.delete(key);\n\n\t\t\trequest.onsuccess = () => resolve();\n\t\t\trequest.onerror = () => reject();\n\t\t});\n\t}\n\n\tpublic async setItem(key: string, value: unknown): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.getTransaction('readwrite');\n\t\t\tif (!store) {\n\t\t\t\tthis.log(\n\t\t\t\t\t'error',\n\t\t\t\t\t'IndexedDB transaction failed: Database is not initialized.',\n\t\t\t\t\t'IDBManager.setItem()'\n\t\t\t\t);\n\t\t\t\treturn reject(new Error('IndexedDB is not initialized.'));\n\t\t\t}\n\n\t\t\tconst request = store.put({ id: key, value });\n\n\t\t\trequest.onsuccess = () => {\n\t\t\t\tconsole.log(`[IDBManager.setItem] Stored item: ${key}`);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\trequest.onerror = event => {\n\t\t\t\tconst errorMessage =\n\t\t\t\t\t(event.target as IDBRequest).error?.message ||\n\t\t\t\t\t'Unknown error';\n\t\t\t\tconsole.error(\n\t\t\t\t\t`[IDBManager.setItem] Failed to store ${key}: ${errorMessage}`\n\t\t\t\t);\n\t\t\t\tthis.log(\n\t\t\t\t\t'error',\n\t\t\t\t\t`Failed to store item: ${key} - ${errorMessage}`,\n\t\t\t\t\t'IDBManager.setItem()'\n\t\t\t\t);\n\t\t\t\treject(event);\n\t\t\t};\n\t\t});\n\t}\n}\n"],"names":[],"mappings":"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"}