// File: storage/IDBManager.js
export class IDBManager {
    dbName;
    storeName;
    version;
    db = null;
    log;
    constructor(dbName, storeName, version, services) {
        this.dbName = dbName;
        this.storeName = storeName;
        this.version = version;
        this.log = services.app.log;
    }
    async init() {
        return new Promise((resolve, reject) => {
            if (!window.indexedDB) {
                this.log('warn', 'IndexedDB is not supported in this browser', 'IDBManager.init()', 2);
                reject(new Error('IndexedDB is not supported'));
                return resolve(false);
            }
            const request = indexedDB.open(this.dbName, this.version);
            request.onupgradeneeded = event => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains(this.storeName)) {
                    db.createObjectStore(this.storeName, {
                        keyPath: 'id',
                        autoIncrement: true
                    });
                    this.log('info', `Created object store: ${this.storeName}`, 'IDBManager.init()', 3);
                }
            };
            request.onsuccess = event => {
                this.db = event.target.result;
                this.log('info', 'IndexedDB initialized successfully', 'IDBManager.init()', 2);
            };
            request.onerror = event => {
                this.log('error', `IndexedDB failed to initialize: ${event.target.error}`, 'IDBManager.init()', 2);
                resolve(false);
            };
        });
    }
    async clear() {
        return new Promise((resolve, reject) => {
            const store = this.getTransaction('readwrite');
            if (!store)
                return reject('IndexedDB is not initialized.');
            const request = store.clear();
            request.onsuccess = () => resolve();
            request.onerror = () => reject();
        });
    }
    async getItem(key) {
        return new Promise((resolve, reject) => {
            const store = this.getTransaction('readonly');
            if (!store)
                return reject('IndexedDB is not initialized.');
            const request = store.get(key);
            request.onsuccess = () => resolve(request.result?.value ?? null);
            request.onerror = () => reject(null);
        });
    }
    getTransaction(mode) {
        if (!this.db)
            return null;
        const transaction = this.db.transaction(this.storeName, mode);
        return transaction.objectStore(this.storeName);
    }
    async removeItem(key) {
        return new Promise((resolve, reject) => {
            const store = this.getTransaction('readwrite');
            if (!store)
                return reject('IndexedDB is not initialized.');
            const request = store.delete(key);
            request.onsuccess = () => resolve();
            request.onerror = () => reject();
        });
    }
    async setItem(key, value) {
        return new Promise((resolve, reject) => {
            const store = this.getTransaction('readwrite');
            if (!store)
                return reject('IndexedDB is not initialized.');
            const request = store.put({ id: key, value });
            request.onsuccess = () => {
                this.log('info', `Stoed item: ${key} in IndexedDB`, 'IDBManager.setItem()', 3);
                resolve();
            };
            request.onerror = event => {
                this.log('error', `Failed to store item: ${key}`, 'IDBManager.setItem()');
                reject(event);
            };
        });
    }
}
//# sourceMappingURL=data:application/json;base64,