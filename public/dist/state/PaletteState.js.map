{"version":3,"file":"PaletteState.js","sources":["../../../../src/state/PaletteState.ts"],"sourcesContent":["// File: state/PaletteState.ts\n\nimport {\n\tAllColors,\n\tPaletteItem,\n\tPaletteStateInterface,\n\tServices,\n\tUtilities\n} from '../types/index.js';\nimport { StateManager } from './StateManager.js';\n\nconst caller = 'PaletteState';\n\nexport class PaletteState implements PaletteStateInterface {\n\t#errors: Services['errors'];\n\t#utils: Utilities;\n\n\tconstructor(\n\t\tprivate stateManager: StateManager,\n\t\tservices: Services,\n\t\tutils: Utilities\n\t) {\n\t\ttry {\n\t\t\tservices.log(`Constructing PaletteState instance`, {\n\t\t\t\tcaller: `${caller} constructor`\n\t\t\t});\n\n\t\t\tthis.#errors = services.errors;\n\t\t\tthis.#utils = utils;\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${caller} constructor]: ${error instanceof Error ? error.message : error}`\n\t\t\t);\n\t\t}\n\t}\n\n\tasync updatePaletteItemColor(\n\t\tcolumnID: number,\n\t\tnewColor: string\n\t): Promise<void> {\n\t\treturn this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\tconst currentState = await this.stateManager.getState();\n\t\t\t\tconst latestPalette = currentState.paletteHistory[0];\n\n\t\t\t\tif (!latestPalette) return;\n\n\t\t\t\t// find the PaletteItem corresponding to this column\n\t\t\t\tconst updatedItems = latestPalette.items.map(item => {\n\t\t\t\t\tif (item.itemID !== columnID) return item;\n\n\t\t\t\t\tconst parsedNewColor =\n\t\t\t\t\t\tthis.#utils.color.formatCSSAsColor(newColor);\n\t\t\t\t\tif (!parsedNewColor) throw new Error('Invalid color value');\n\n\t\t\t\t\t// ensure color is in HSL format\n\t\t\t\t\tconst hslColor =\n\t\t\t\t\t\tparsedNewColor.format === 'hsl'\n\t\t\t\t\t\t\t? parsedNewColor\n\t\t\t\t\t\t\t: this.#utils.color.convertToHSL(parsedNewColor);\n\n\t\t\t\t\t// generate all color representations (ensuring correct branded types)\n\t\t\t\t\tconst allColors: AllColors =\n\t\t\t\t\t\tthis.#utils.palette.generateAllColorValues(hslColor);\n\n\t\t\t\t\t// ensure CSS representations match expected format\n\t\t\t\t\tconst structuredCSS = {\n\t\t\t\t\t\tcmyk: this.#utils.color.formatColorAsCSS(\n\t\t\t\t\t\t\tallColors.cmyk\n\t\t\t\t\t\t),\n\t\t\t\t\t\thex: this.#utils.color.formatColorAsCSS(allColors.hex),\n\t\t\t\t\t\thsl: this.#utils.color.formatColorAsCSS(allColors.hsl),\n\t\t\t\t\t\thsv: this.#utils.color.formatColorAsCSS(allColors.hsv),\n\t\t\t\t\t\tlab: this.#utils.color.formatColorAsCSS(allColors.lab),\n\t\t\t\t\t\trgb: this.#utils.color.formatColorAsCSS(allColors.rgb),\n\t\t\t\t\t\txyz: this.#utils.color.formatColorAsCSS(allColors.xyz)\n\t\t\t\t\t};\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\tcolors: allColors,\n\t\t\t\t\t\tcss: structuredCSS\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\t// ensure column state is updated\n\t\t\t\tconst updatedColumns = updatedItems.map((item, index) => ({\n\t\t\t\t\tid: item.itemID,\n\t\t\t\t\tisLocked:\n\t\t\t\t\t\tcurrentState.paletteContainer.columns[index].isLocked,\n\t\t\t\t\tposition: index + 1,\n\t\t\t\t\tsize: currentState.paletteContainer.columns[index].size\n\t\t\t\t}));\n\n\t\t\t\t// update state history with type assertions\n\t\t\t\tthis.stateManager.updatePaletteColumns(updatedColumns, true, 3);\n\t\t\t\tthis.stateManager.updatePaletteHistory([\n\t\t\t\t\t{ ...latestPalette, items: updatedItems as PaletteItem[] },\n\t\t\t\t\t...currentState.paletteHistory.slice(1)\n\t\t\t\t]);\n\t\t\t},\n\t\t\t`[${caller}]: Failed to update palette item color.`,\n\t\t\t{ context: { columnID, newColor } }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"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"}