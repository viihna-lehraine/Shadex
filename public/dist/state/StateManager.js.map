{"version":3,"file":"StateManager.js","sources":["../../../../src/state/StateManager.ts"],"sourcesContent":["// File: state/StateManager.ts\n\nimport {\n\tHelpers,\n\tHistory,\n\tPalette,\n\tServices,\n\tState,\n\tStateManagerInterface,\n\tUtilities\n} from '../types/index.js';\nimport { Mutex } from '../common/services/Mutex.js';\nimport { Observer } from '../common/services/Observer.js';\nimport { StorageManager } from '../storage/StorageManager.js';\nimport {\n\tdefaults,\n\tdomConfig,\n\tdomIndex,\n\tenv,\n\tfeatureFlags\n} from '../config/index.js';\n\nconst caller = 'StateManager';\nconst defaultState = defaults.state;\nconst maxReadyAttempts = env.state.maxReadyAttempts;\n\nexport class StateManager implements StateManagerInterface {\n\tstatic #instance: StateManager | null = null;\n\n\t#dataLocks: Map<keyof State, Mutex> = new Map();\n\t#history: History;\n\t#observer: Observer<State>;\n\t#onStateLoadCallback: (() => void) | null = null;\n\t#saveThrottleTimer: NodeJS.Timeout | null = null;\n\t#state: State;\n\t#stateLock: Mutex;\n\t#storage: StorageManager;\n\t#undoStack: History;\n\n\t#log: Services['log'];\n\t#errors: Services['errors'];\n\t#helpers: Helpers;\n\t#services: Services;\n\t#utils: Utilities;\n\n\tprivate constructor(\n\t\thelpers: Helpers,\n\t\tservices: Services,\n\t\tutils: Utilities\n\t) {\n\t\ttry {\n\t\t\tservices.log(`Constructing StateManager instance.`, {\n\t\t\t\tcaller: `${caller} constructor`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\n\t\t\tthis.#log = services.log;\n\t\t\tthis.#errors = services.errors;\n\t\t\tthis.#helpers = helpers;\n\t\t\tthis.#services = services;\n\t\t\tthis.#utils = utils;\n\t\t\tthis.#storage = new StorageManager(services);\n\n\t\t\tthis.#state = {} as State;\n\t\t\tthis.#observer = new Observer<State>(\n\t\t\t\tthis.#state,\n\t\t\t\t{ delay: env.observer.debounce },\n\t\t\t\tthis.#helpers,\n\t\t\t\tthis.#services\n\t\t\t);\n\n\t\t\tObject.keys(this.#state).forEach(key => {\n\t\t\t\tthis.#observer.on(key as keyof State, (newVal, oldVal) => {\n\t\t\t\t\tthis.#log(\n\t\t\t\t\t\t`${key} updated. New: ${JSON.stringify(newVal)} | Old: ${JSON.stringify(oldVal)}`,\n\t\t\t\t\t\t{ caller: `${caller}.#observer`, level: 'debug' }\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.#state.paletteHistory = [];\n\t\t\tthis.#history = [this.#state];\n\t\t\tthis.#stateLock = new Mutex(services.errors, services.log);\n\t\t\tthis.#undoStack = [];\n\n\t\t\tthis.init()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.#saveStateAndLog('init', 3);\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tthis.#log('StateManager init failed.', {\n\t\t\t\t\t\tcaller: `${caller} constructor`,\n\t\t\t\t\t\tlevel: 'error'\n\t\t\t\t\t});\n\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${caller} constructor]: ${error instanceof Error ? error.message : error}`\n\t\t\t);\n\t\t}\n\t}\n\n\tstatic getInstance(\n\t\thelpers: Helpers,\n\t\tservices: Services,\n\t\tutils: Utilities\n\t): StateManager {\n\t\treturn services.errors.handleSync(() => {\n\t\t\tif (!StateManager.#instance) {\n\t\t\t\tservices.log(`Creating new StateManager instance.`, {\n\t\t\t\t\tcaller: `${caller}.getInstance`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tStateManager.#instance = new StateManager(\n\t\t\t\t\thelpers,\n\t\t\t\t\tservices,\n\t\t\t\t\tutils\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tservices.log(`Returning StateManager instance.`, {\n\t\t\t\tcaller: `${caller}.getInstance`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\n\t\t\treturn StateManager.#instance;\n\t\t}, `[${caller}]: Error getting StateManager instance.`);\n\t}\n\n\tasync init(): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tthis.#log('Initializing State Manager', {\n\t\t\t\tcaller: `${caller}.init`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\n\t\t\tawait this.#storage.init();\n\n\t\t\tif (featureFlags.loadStateFromStorage) {\n\t\t\t\tthis.#state =\n\t\t\t\t\t(await this.#errors.handleAsync(\n\t\t\t\t\t\t() => this.loadState(),\n\t\t\t\t\t\t`[${caller}]: Failed to load state. Generating initial state.`\n\t\t\t\t\t)) ?? this.#generateInitialState();\n\t\t\t} else {\n\t\t\t\tthis.#log(\n\t\t\t\t\t'State loading from storage is disabled via feature flag.',\n\t\t\t\t\t{\n\t\t\t\t\t\tcaller: `${caller}.init`,\n\t\t\t\t\t\tlevel: 'warn'\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tthis.#state = this.#generateInitialState();\n\t\t\t}\n\n\t\t\tthis.#log('StateManager initialized successfully.', {\n\t\t\t\tcaller: `${caller}.init`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\n\t\t\tawait this.#saveState();\n\t\t}, `[${caller}]: Failed to initialize State Manager.`);\n\t}\n\n\taddPaletteToHistory(palette: Palette): void {\n\t\treturn this.#errors.handleSync(\n\t\t\t() => {\n\t\t\t\tthis.#trackAction();\n\t\t\t\tthis.#state.paletteHistory.push(palette);\n\t\t\t\tthis.#saveStateAndLog('paletteHistory', 3);\n\t\t\t},\n\t\t\t`[${caller}]: Failed to add palette to history.`,\n\t\t\t{ context: { palette } }\n\t\t);\n\t}\n\n\tasync atomicUpdate(callback: (state: State) => void): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\treturn await this.#stateLock.runExclusive(async () => {\n\t\t\t\tcallback(this.#observer['data']);\n\n\t\t\t\tthis.#log('Performed atomic update.', {\n\t\t\t\t\tcaller: `${caller}.atomicUpdate`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tawait this.#saveState();\n\t\t\t});\n\t\t}, `[${caller}]: Failed to perform atomic update.`);\n\t}\n\n\tasync batchUpdate(\n\t\tcallback: (state: State) => Partial<State>\n\t): Promise<void> {\n\t\tawait this.#errors.handleAsync(async () => {\n\t\t\tawait this.#withWriteLock(async () => {\n\t\t\t\tconst partialUpdate = callback(this.#state);\n\n\t\t\t\tthis.#observer.batchUpdate(partialUpdate);\n\n\t\t\t\tthis.#log('Performed batch update.', {\n\t\t\t\t\tcaller: `${caller}.batchUpdate`,\n\t\t\t\t\tlevel: 'debug',\n\t\t\t\t\tverbosity: 2\n\t\t\t\t});\n\n\t\t\t\tawait this.#saveState();\n\t\t\t});\n\t\t}, `[${caller}]: Failed to perform batch update.`);\n\t}\n\n\tasync ensureStateReady(): Promise<void> {\n\t\treturn await this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\tlet attempts = 0;\n\n\t\t\t\twhile (!this.#state || !this.#state.paletteContainer) {\n\t\t\t\t\tif (attempts++ >= maxReadyAttempts) {\n\t\t\t\t\t\tthis.#log('State initialization timed out.', {\n\t\t\t\t\t\t\tcaller: `${caller}.ensureStateReady`,\n\t\t\t\t\t\t\tlevel: 'error'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthrow new Error('State initialization timed out.');\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.#log(\n\t\t\t\t\t\t`Waiting for state to initialize... (Attempt ${attempts})`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcaller: `${caller}.ensureStateReady`,\n\t\t\t\t\t\t\tlevel: 'debug'\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 50));\n\t\t\t\t}\n\n\t\t\t\tthis.#log('State is now initialized.', {\n\t\t\t\t\tcaller: `${caller}.ensureStateReady`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\t\t\t},\n\t\t\t`[${caller}]: Failed to ensure state readiness.`,\n\t\t\t{ context: { maxReadyAttempts } }\n\t\t);\n\t}\n\n\tasync getState(): Promise<State> {\n\t\treturn await (this.#errors.handleAsync(async () => {\n\t\t\treturn this.#withReadLock(() => {\n\t\t\t\tif (!this.#state)\n\t\t\t\t\tthis.#log('State accessed before initialization.', {\n\t\t\t\t\t\tcaller: `${caller}.getState`,\n\t\t\t\t\t\tlevel: 'warn'\n\t\t\t\t\t});\n\n\t\t\t\tif (!this.#state.preferences) {\n\t\t\t\t\tthis.#log(\n\t\t\t\t\t\t'State.preferences is undefined. Setting default preferences.',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcaller: `${caller}.getState`,\n\t\t\t\t\t\t\tlevel: 'warn'\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.#state.preferences = defaultState.preferences;\n\t\t\t\t}\n\n\t\t\t\treturn this.#helpers.data.clone(this.#state);\n\t\t\t});\n\t\t}, `[${caller}]: Error retrieving state`) ?? defaultState);\n\t}\n\n\tasync loadState(): Promise<State> {\n\t\tif (!featureFlags.loadStateFromStorage) {\n\t\t\tthis.#log(\n\t\t\t\t'loadState bypassed: feature flag is disabled. Generating initial state',\n\t\t\t\t{\n\t\t\t\t\tcaller: `${caller}.loadState`\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn this.#generateInitialState();\n\t\t}\n\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tthis.#log('Loading state...', {\n\t\t\t\tcaller: `${caller}.loadState`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\n\t\t\tconst storedState = await this.#storage.getItem<State>('appState');\n\n\t\t\tif (storedState) {\n\t\t\t\tthis.#state = storedState;\n\n\t\t\t\tthis.#log('Loaded stored state', {\n\t\t\t\t\tcaller: `${caller}.loadState`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tthis.#onStateLoadCallback?.();\n\n\t\t\t\treturn storedState;\n\t\t\t}\n\n\t\t\tthis.#log('No stored state found. Generating initial state.', {\n\t\t\t\tcaller: `${caller}.loadState`\n\t\t\t});\n\n\t\t\treturn this.#generateInitialState();\n\t\t}, `[${caller}]: Failed to load state.`);\n\t}\n\n\tlogContentionStats(): void {\n\t\tthis.#errors.handleSync(() => {\n\t\t\tconst contentionCount = this.#stateLock.getContentionCount();\n\t\t\tconst contentionRate = this.#stateLock.getContentionRate();\n\n\t\t\tthis.#log(\n\t\t\t\t`Current contention count: ${contentionCount}.\\nCurrent contention rate: ${contentionRate}.`,\n\t\t\t\t{\n\t\t\t\t\tcaller: `${caller}.logContentionStats`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t}\n\t\t\t);\n\t\t}, `[${caller}]: Failed to log contention stats`);\n\t}\n\n\tredo(): void {\n\t\treturn this.#errors.handleSync(\n\t\t\t() => {\n\t\t\t\tif (this.#undoStack.length > 0) {\n\t\t\t\t\tconst redoState = this.#undoStack.pop();\n\n\t\t\t\t\tif (!redoState) {\n\t\t\t\t\t\tthis.#log('Cannot redo: No redoState found.', {\n\t\t\t\t\t\t\tcaller: `${caller}.redo`,\n\t\t\t\t\t\t\tlevel: 'warn'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.#history.push(redoState);\n\t\t\t\t\tthis.#state = { ...redoState };\n\n\t\t\t\t\tthis.#log('Redo action performed.', {\n\t\t\t\t\t\tcaller: `${caller}.redo`,\n\t\t\t\t\t\tlevel: 'debug'\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.#saveStateAndLog('redo', 3);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('No state to redo.');\n\t\t\t\t}\n\t\t\t},\n\t\t\t`[${caller}]: Redo operation failed`,\n\t\t\t{ fallback: { redo: null } }\n\t\t);\n\t}\n\n\tasync resetState(): Promise<void> {\n\t\treturn await this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\tthis.#trackAction();\n\n\t\t\t\tthis.#state = defaultState;\n\n\t\t\t\tawait this.#saveState();\n\n\t\t\t\tthis.#log('App state has been reset', {\n\t\t\t\t\tcaller: `${caller}.resetState`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\t\t\t},\n\t\t\t`[${caller}]: Failed to reset state`,\n\t\t\t{ fallback: defaultState }\n\t\t);\n\t}\n\n\tsetOnStateLoad(callback: () => void): void {\n\t\treturn this.#errors.handleSync(() => {\n\t\t\tthis.#onStateLoadCallback = callback;\n\t\t}, `[${caller}]: Failed to set onStateLoad callback`);\n\t}\n\n\tasync setState(newState: State, track: boolean = true): Promise<void> {\n\t\treturn await this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\treturn await this.#withWriteLock(async () => {\n\t\t\t\t\tif (track) this.#trackAction();\n\n\t\t\t\t\tthis.#observer.batchUpdate(newState);\n\n\t\t\t\t\tthis.#state = newState;\n\n\t\t\t\t\tthis.#log('State updated.', {\n\t\t\t\t\t\tcaller: `${caller}.setState`,\n\t\t\t\t\t\tlevel: 'debug'\n\t\t\t\t\t});\n\n\t\t\t\t\tawait this.#saveState();\n\n\t\t\t\t\tthis.logContentionStats();\n\t\t\t\t});\n\t\t\t},\n\t\t\t`[${caller}]: Failed to set state.`,\n\t\t\t{ context: { newState, track } }\n\t\t);\n\t}\n\n\tundo(): void {\n\t\tthis.#errors.handleSync(() => {\n\t\t\tif (this.#history.length <= 1) {\n\t\t\t\tthis.#log('No previous state to revert to.', {\n\t\t\t\t\tcaller: `${caller}.undo`\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousState = this.#history.pop();\n\t\t\tif (!previousState) return;\n\n\t\t\tthis.#undoStack.push(this.#helpers.data.clone(this.#state)); // for redo\n\n\t\t\tthis.#state = previousState;\n\t\t\tthis.#observer.batchUpdate(previousState);\n\n\t\t\tthis.#log('Undo action performed.', {\n\t\t\t\tcaller: `${caller}.undo`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\n\t\t\tthis.#saveStateAndLog('undo', 3);\n\t\t}, `[${caller}]: Undo operation failed`);\n\t}\n\n\tupdateAppModeState(appMode: State['appMode'], track: boolean): void {\n\t\treturn this.#errors.handleSync(\n\t\t\t() => {\n\t\t\t\tif (track) this.#trackAction();\n\n\t\t\t\tthis.#state.appMode = appMode;\n\n\t\t\t\tthis.#log(`Updated appMode: ${appMode}`, {\n\t\t\t\t\tcaller: `${caller}.updateAppModeState`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tthis.#saveStateAndLog('appMode', 3);\n\t\t\t},\n\t\t\t`[${caller}]: Failed to update app mode state`,\n\t\t\t{ context: { appMode, track } }\n\t\t);\n\t}\n\n\tasync updateLockedProperty<K extends keyof State>(\n\t\tkey: K,\n\t\tvalue: State[K]\n\t): Promise<void> {\n\t\treturn this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\tconst lock = this.#getLockForKey(key);\n\n\t\t\t\tawait lock.runExclusive(async () => {\n\t\t\t\t\tthis.#observer.set(key, value);\n\n\t\t\t\t\tthis.#log(\n\t\t\t\t\t\t`Updated ${String(this.#helpers.data.clone(key))} with locked property.`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcaller: `${caller}.updateLockedProperty`,\n\t\t\t\t\t\t\tlevel: 'debug'\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tawait this.#saveState();\n\n\t\t\t\t\tthis.logContentionStats();\n\t\t\t\t});\n\t\t\t},\n\t\t\t`[${caller}]: Failed to update locked property`,\n\t\t\t{ context: { key, value } }\n\t\t);\n\t}\n\n\tupdatePaletteColumns(\n\t\tcolumns: State['paletteContainer']['columns'],\n\t\ttrack: boolean,\n\t\tverbosity: number\n\t): void {\n\t\treturn this.#errors.handleSync(\n\t\t\t() => {\n\t\t\t\tif (!this.#state || !this.#state.paletteContainer) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`[${caller}]: updatePaletteColumns called before state initialization.`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!this.#helpers.dom.getElement<HTMLDivElement>(\n\t\t\t\t\t\tdomIndex.ids.divs.paletteContainer\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.#log('Palette Container not found in the DOM.', {\n\t\t\t\t\t\tcaller: `${caller}.updatePaletteColumns`,\n\t\t\t\t\t\tlevel: 'warn'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (track) this.#trackAction();\n\n\t\t\t\tthis.#state.paletteContainer.columns = columns;\n\n\t\t\t\tthis.#log(`Updated paletteContainer columns`, {\n\t\t\t\t\tcaller: `${caller}.updatePaletteColumns`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tthis.#saveStateAndLog('paletteColumns', verbosity);\n\n\t\t\t\tthis.logContentionStats();\n\t\t\t},\n\t\t\t`[${caller}]: Failed to update palette columns.`,\n\t\t\t{ context: { columns, track, verbosity } }\n\t\t);\n\t}\n\n\tupdatePaletteColumnSize(columnID: number, newSize: number): void {\n\t\treturn this.#errors.handleSync(\n\t\t\t() => {\n\t\t\t\tconst columns = this.#state.paletteContainer.columns;\n\t\t\t\tconst columnIndex = columns.findIndex(\n\t\t\t\t\tcol => col.id === columnID\n\t\t\t\t);\n\t\t\t\tif (columnIndex === -1) return;\n\n\t\t\t\tconst minSize = domConfig.minColumnSize;\n\t\t\t\tconst maxSize = domConfig.maxColumnSize;\n\t\t\t\tconst adjustedSize = Math.max(\n\t\t\t\t\tminSize,\n\t\t\t\t\tMath.min(newSize, maxSize)\n\t\t\t\t);\n\n\t\t\t\tconst sizeDifference = adjustedSize - columns[columnIndex].size;\n\t\t\t\tcolumns[columnIndex].size = adjustedSize;\n\n\t\t\t\tconst unlockedColumns = columns.filter(\n\t\t\t\t\t(col, index) => index !== columnIndex && !col.isLocked\n\t\t\t\t);\n\t\t\t\tconst distributionAmount =\n\t\t\t\t\tsizeDifference / unlockedColumns.length;\n\t\t\t\tunlockedColumns.forEach(\n\t\t\t\t\tcol => (col.size -= distributionAmount)\n\t\t\t\t);\n\n\t\t\t\tconst finalTotalSize = columns.reduce(\n\t\t\t\t\t(sum, col) => sum + col.size,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tconst correctionFactor = 100 / finalTotalSize;\n\t\t\t\tcolumns.forEach(col => (col.size *= correctionFactor));\n\n\t\t\t\tthis.#log(`Updated column size`, {\n\t\t\t\t\tcaller: `${caller}}.updatePaletteColumnSize`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tthis.#saveStateAndLog('paletteColumnSize', 3);\n\n\t\t\t\tthis.logContentionStats();\n\t\t\t},\n\t\t\t`[${caller}]: Failed to update palette column size.`,\n\t\t\t{ context: { columnID, newSize } }\n\t\t);\n\t}\n\n\tupdatePaletteHistory(updatedHistory: Palette[]): void {\n\t\treturn this.#errors.handleSync(\n\t\t\t() => {\n\t\t\t\tthis.#trackAction();\n\n\t\t\t\tthis.#state.paletteHistory = updatedHistory;\n\n\t\t\t\tthis.#saveState();\n\n\t\t\t\tthis.#log('Updated palette history', {\n\t\t\t\t\tcaller: `${caller}.updatePaletteHistory`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tthis.logContentionStats();\n\t\t\t},\n\t\t\t`[${caller}: Failed to update palette history.`,\n\t\t\t{ context: { updatedHistory } }\n\t\t);\n\t}\n\n\tupdateSelections(\n\t\tselections: Partial<State['selections']>,\n\t\ttrack: boolean\n\t): void {\n\t\treturn this.#errors.handleSync(\n\t\t\t() => {\n\t\t\t\tif (track) this.#trackAction();\n\n\t\t\t\tthis.#observer.set('selections', {\n\t\t\t\t\t...this.#observer.get('selections'),\n\t\t\t\t\t...selections\n\t\t\t\t});\n\n\t\t\t\tthis.#log(`Updated selections`, {\n\t\t\t\t\tcaller: `${caller}]: .updateSelections`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tthis.#saveStateAndLog('selections', 2);\n\n\t\t\t\tthis.logContentionStats();\n\t\t\t},\n\t\t\t`[${caller}]: Failed to update selections.`,\n\t\t\t{ context: { selections, track } }\n\t\t);\n\t}\n\n\t#generateInitialState(): State {\n\t\treturn (\n\t\t\tthis.#errors.handleSync(() => {\n\t\t\t\tthis.#log('Generating initial state.', {\n\t\t\t\t\tcaller: `${caller}.#generateInitialState`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tconst columns = this.#utils.dom.scanPaletteColumns() ?? [];\n\n\t\t\t\tif (!columns) {\n\t\t\t\t\tthis.#log('No palette columns found!', {\n\t\t\t\t\t\tcaller: `${caller}.#generateInitialState`,\n\t\t\t\t\t\tlevel: 'error'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.#log(`Scanned palette columns.`, {\n\t\t\t\t\tcaller: `${caller}.#generateInitialState`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\n\t\t\t\tthis.logContentionStats();\n\n\t\t\t\treturn {\n\t\t\t\t\tappMode: 'edit',\n\t\t\t\t\tpaletteContainer: { columns },\n\t\t\t\t\tpaletteHistory: [],\n\t\t\t\t\tpreferences: {\n\t\t\t\t\t\tcolorSpace: 'hsl',\n\t\t\t\t\t\tdistributionType: 'soft',\n\t\t\t\t\t\tmaxHistory: 20,\n\t\t\t\t\t\tmaxPaletteHistory: 10,\n\t\t\t\t\t\ttheme: 'light'\n\t\t\t\t\t},\n\t\t\t\t\tselections: {\n\t\t\t\t\t\tpaletteColumnCount: columns.length,\n\t\t\t\t\t\tpaletteType: 'complementary',\n\t\t\t\t\t\ttargetedColumnPosition: 1\n\t\t\t\t\t},\n\t\t\t\t\ttimestamp: this.#helpers.data.getFormattedTimestamp()\n\t\t\t\t};\n\t\t\t}, `[${caller}]: Failed to generate initial state`) ?? ({} as State)\n\t\t);\n\t}\n\n\t#getLockForKey(key: keyof State): Mutex {\n\t\tif (!this.#dataLocks.has(key)) {\n\t\t\tthis.#dataLocks.set(key, new Mutex(this.#errors, this.#log));\n\t\t}\n\n\t\treturn this.#dataLocks.get(key)!;\n\t}\n\n\t#saveStateAndLog(property: string, verbosity?: number): void {\n\t\tthis.#log(`StateManager Updated ${property}`, {\n\t\t\tcaller: `${caller}.#saveStateAndLog`,\n\t\t\tverbosity: verbosity ?? 0\n\t\t});\n\n\t\tthis.#saveState();\n\t}\n\n\tasync #saveState(throttle: boolean = true): Promise<void> {\n\t\tconst saveOperation = async (attempts = 0): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait this.#storage.setItem('appState', this.#state);\n\n\t\t\t\tthis.#log('State saved to storage.', {\n\t\t\t\t\tcaller: `${caller}.#saveState`,\n\t\t\t\t\tlevel: 'debug'\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tif (attempts < env.state.maxSaveRetries) {\n\t\t\t\t\tthis.#log(\n\t\t\t\t\t\t`Save attempt ${attempts + 1} failed. Retrying...`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcaller: `${caller}.#saveState`,\n\t\t\t\t\t\t\tlevel: 'warn'\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tawait saveOperation(attempts + 1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.#log('Max save attempts reached. Save failed.', {\n\t\t\t\t\t\tcaller: `${caller}.#saveState`,\n\t\t\t\t\t\tlevel: 'error'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (throttle) {\n\t\t\tif (this.#saveThrottleTimer) {\n\t\t\t\tclearTimeout(this.#saveThrottleTimer);\n\t\t\t}\n\n\t\t\tthis.#saveThrottleTimer = setTimeout(\n\t\t\t\t() => saveOperation(),\n\t\t\t\tenv.state.saveThrottleDelay\n\t\t\t);\n\t\t} else {\n\t\t\tawait saveOperation();\n\t\t}\n\t}\n\n\t// push a copy of the current state before making changes\n\t#trackAction(): void {\n\t\treturn this.#errors.handleSync(() => {\n\t\t\tconst clonedState = this.#helpers.data.clone(this.#state);\n\n\t\t\tthis.#history.push(clonedState);\n\n\t\t\tif (this.#history.length > env.app.historyLimit)\n\t\t\t\tthis.#history.shift();\n\t\t}, `[${caller}]: Failed to track action.`);\n\t}\n\n\tasync withPropertyLock<K extends keyof State, T>(\n\t\tkey: K,\n\t\tcallback: (stateProperty: State[K]) => Promise<T>\n\t): Promise<T> {\n\t\treturn this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\tconst lock = this.#getLockForKey(key);\n\t\t\t\tconst acquired = await lock.acquireWriteWithTimeout(\n\t\t\t\t\tenv.mutex.timeout\n\t\t\t\t);\n\n\t\t\t\tif (!acquired) {\n\t\t\t\t\tthis.#log(\n\t\t\t\t\t\t`Lock acquisition timed out for property: ${String(key)}`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcaller: `${caller}.withPropertyLock`,\n\t\t\t\t\t\t\tlevel: 'warn'\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Timeout acquiring lock for property ${String(key)}.`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\treturn await callback(this.#state[key]);\n\t\t\t\t} finally {\n\t\t\t\t\tawait lock.release();\n\t\t\t\t}\n\t\t\t},\n\t\t\t`[${caller}: Failed to acquire property lock`,\n\t\t\t{ context: { key } }\n\t\t);\n\t}\n\n\tasync #withReadLock<T>(callback: () => T): Promise<T> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst acquired = await this.#stateLock.acquireReadWithTimeout(\n\t\t\t\tenv.mutex.timeout\n\t\t\t);\n\n\t\t\tif (!acquired) throw new Error('Read lock acquisition timed out.');\n\n\t\t\ttry {\n\t\t\t\treturn callback();\n\t\t\t} finally {\n\t\t\t\tawait this.#stateLock.release();\n\t\t\t}\n\t\t}, `[${caller}]: Failed to acquire read lock`);\n\t}\n\n\tasync #withWriteLock<T>(callback: () => Promise<T>): Promise<T> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst acquired = await this.#stateLock.acquireWriteWithTimeout(\n\t\t\t\tenv.mutex.timeout\n\t\t\t);\n\n\t\t\tif (!acquired) throw new Error('Write lock acquisition timed out.');\n\n\t\t\ttry {\n\t\t\t\treturn await callback();\n\t\t\t} finally {\n\t\t\t\tawait this.#stateLock.release();\n\t\t\t}\n\t\t}, `[${caller}]: Failed to acquire write lock`);\n\t}\n}\n"],"names":[],"mappings":"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"}