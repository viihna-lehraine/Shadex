{"version":3,"file":"PaletteStateService.js","sources":["../../../../src/state/PaletteStateService.ts"],"sourcesContent":["// File: state/PaletteState.ts\n\nimport { PaletteStateContract, Services } from '../types/index.js';\nimport { StateManager } from './StateManager.js';\nimport { domConfig } from '../config/index.js';\n\nconst caller = 'PaletteState';\n\nexport class PaletteStateService implements PaletteStateContract {\n\tstatic #instance: PaletteStateService | null = null;\n\n\t#errors: Services['errors'];\n\t#log: Services['log'];\n\t#stateManager: StateManager;\n\n\tprivate constructor(services: Services, stateManager: StateManager) {\n\t\ttry {\n\t\t\tservices.log.info(\n\t\t\t\t`Constructing PaletteState instance`,\n\t\t\t\t`${caller} constructor`\n\t\t\t);\n\n\t\t\tthis.#errors = services.errors;\n\t\t\tthis.#log = services.log;\n\t\t\tthis.#stateManager = stateManager;\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${caller} constructor]: ${error instanceof Error ? error.message : error}`\n\t\t\t);\n\t\t}\n\t}\n\n\tstatic getInstance(\n\t\tservices: Services,\n\t\tstateManager: StateManager\n\t): PaletteStateService {\n\t\treturn services.errors.handleSync(() => {\n\t\t\tif (!PaletteStateService.#instance) {\n\t\t\t\tservices.log.debug(\n\t\t\t\t\t'Creating PaletteState instance',\n\t\t\t\t\t`${caller}.getInstance`\n\t\t\t\t);\n\t\t\t\tPaletteStateService.#instance = new PaletteStateService(\n\t\t\t\t\tservices,\n\t\t\t\t\tstateManager\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn PaletteStateService.#instance;\n\t\t}, `[${caller}.getInstance]: Failed to create PaletteState instance.`);\n\t}\n\n\tasync handleColumnLock(columnID: number): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst state = await this.#stateManager.getState();\n\t\t\tconst updatedColumns = state.paletteContainer.columns.map(col =>\n\t\t\t\tcol.id === columnID ? { ...col, isLocked: !col.isLocked } : col\n\t\t\t);\n\n\t\t\tthis.#stateManager.updatePaletteColumns(updatedColumns, true);\n\t\t}, `[${caller}]: Failed to toggle lock for column ${columnID}`);\n\t}\n\n\tasync handleColumnResize(columnID: number, newSize: number): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst currentState = await this.#stateManager.getState();\n\t\t\tconst columns = currentState.paletteContainer.columns;\n\t\t\tconst columnIndex = columns.findIndex(col => col.id === columnID);\n\n\t\t\tif (columnIndex === -1) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t`Column with ID ${columnID} not found.`,\n\t\t\t\t\t`${caller}.handleColumnResize`\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst adjustedSize = Math.max(\n\t\t\t\tdomConfig.minColumnSize,\n\t\t\t\tMath.min(newSize, domConfig.maxColumnSize)\n\t\t\t);\n\n\t\t\tconst sizeDiff = adjustedSize - columns[columnIndex].size;\n\n\t\t\t// created new columns array with updated columns\n\t\t\tconst updatedColumns = columns.map(col => {\n\t\t\t\tif (col.id === columnID) {\n\t\t\t\t\treturn { ...col, size: adjustedSize };\n\t\t\t\t}\n\t\t\t\treturn col;\n\t\t\t});\n\n\t\t\t// distribute size difference among locked columns\n\t\t\tconst unlockedColumns = updatedColumns.filter(\n\t\t\t\tcol => col.id !== columnID && !col.isLocked\n\t\t\t);\n\t\t\tconst distributeAmount =\n\t\t\t\tunlockedColumns.length > 0 ? sizeDiff / unlockedColumns.length : 0;\n\n\t\t\tconst resizedColumns = updatedColumns.map(col => {\n\t\t\t\tif (col.id !== columnID && !col.isLocked) {\n\t\t\t\t\treturn { ...col, size: col.size - distributeAmount };\n\t\t\t\t}\n\n\t\t\t\treturn col;\n\t\t\t});\n\n\t\t\t// normalize sizes to total 100%\n\t\t\tconst totalSize = resizedColumns.reduce((sum, col) => sum + col.size, 0);\n\t\t\tconst normalizedColumns = resizedColumns.map(col => ({\n\t\t\t\t...col,\n\t\t\t\tsize: col.size * (100 / totalSize)\n\t\t\t}));\n\n\t\t\tthis.#stateManager.updatePaletteColumns(normalizedColumns, true);\n\t\t}, `[${caller}]: Failed to resize column ${columnID}`);\n\t}\n\n\tasync swapColumns(draggedID: number, targetID: number): Promise<void> {\n\t\treturn await this.#errors.handleAsync(async () => {\n\t\t\tconst currentState = await this.#stateManager.getState();\n\t\t\tconst columns = currentState.paletteContainer.columns;\n\n\t\t\tconst draggedColumn = columns.find(col => col.id === draggedID);\n\t\t\tconst targetColumn = columns.find(col => col.id === targetID);\n\n\t\t\tif (!draggedColumn || !targetColumn) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t`Failed to swap columns: Column ID ${draggedID} or ${targetID} not found.`,\n\t\t\t\t\t`${caller}.swapColumns`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// create updated columns with immutably swapped positions\n\t\t\tconst updatedColumns = columns.map(col => {\n\t\t\t\tif (col.id === draggedID)\n\t\t\t\t\treturn { ...col, position: targetColumn.position };\n\t\t\t\tif (col.id === targetID)\n\t\t\t\t\treturn { ...col, position: draggedColumn.position };\n\t\t\t\treturn col;\n\t\t\t});\n\n\t\t\t// sort columns based on updated positions\n\t\t\tconst sortedColumns = [...updatedColumns].sort(\n\t\t\t\t(a, b) => a.position - b.position\n\t\t\t);\n\n\t\t\t// update state with the new column order\n\t\t\tthis.#stateManager.updatePaletteColumns(sortedColumns, true);\n\n\t\t\tthis.#log.debug(\n\t\t\t\t`Swapped columns ${draggedID} and ${targetID}. New order: ${sortedColumns.map(col => col.id).join(', ')}`,\n\t\t\t\t`${caller}.swapColumns`\n\t\t\t);\n\t\t}, `Failed to swap columns ${draggedID} and ${targetID}`);\n\t}\n\n\tasync updateColumnSize(columnID: number, newSize: number): Promise<void> {\n\t\tconst currentState = await this.#stateManager.getState();\n\t\tconst { columns } = currentState.paletteContainer;\n\n\t\tconst columnIndex = columns.findIndex(col => col.id === columnID);\n\t\tif (columnIndex === -1) return;\n\n\t\tconst minSize = domConfig.minColumnSize;\n\t\tconst maxSize = domConfig.maxColumnSize;\n\t\tconst adjustedSize = Math.max(minSize, Math.min(newSize, maxSize));\n\n\t\tconst updatedColumns = columns.map(col =>\n\t\t\tcol.id === columnID ? { ...col, size: adjustedSize } : col\n\t\t);\n\n\t\tawait this.#stateManager.batchUpdate({\n\t\t\tpaletteContainer: {\n\t\t\t\t...currentState.paletteContainer,\n\t\t\t\tcolumns: updatedColumns\n\t\t\t}\n\t\t});\n\t}\n}\n"],"names":[],"mappings":";;;;AAAA;AAMA,MAAM,MAAM,GAAG,cAAc;MAEhB,mBAAmB,CAAA;AAC/B,IAAA,OAAO,SAAS,GAA+B,IAAI;AAEnD,IAAA,OAAO;AACP,IAAA,IAAI;AACJ,IAAA,aAAa;IAEb,WAAoB,CAAA,QAAkB,EAAE,YAA0B,EAAA;AACjE,QAAA,IAAI;YACH,QAAQ,CAAC,GAAG,CAAC,IAAI,CAChB,CAAoC,kCAAA,CAAA,EACpC,CAAG,EAAA,MAAM,CAAc,YAAA,CAAA,CACvB;AAED,YAAA,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,MAAM;AAC9B,YAAA,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG;AACxB,YAAA,IAAI,CAAC,aAAa,GAAG,YAAY;;QAChC,OAAO,KAAK,EAAE;YACf,MAAM,IAAI,KAAK,CACd,CAAA,CAAA,EAAI,MAAM,CAAkB,eAAA,EAAA,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAE,CAAA,CAC5E;;;AAIH,IAAA,OAAO,WAAW,CACjB,QAAkB,EAClB,YAA0B,EAAA;AAE1B,QAAA,OAAO,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,MAAK;AACtC,YAAA,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE;gBACnC,QAAQ,CAAC,GAAG,CAAC,KAAK,CACjB,gCAAgC,EAChC,CAAG,EAAA,MAAM,CAAc,YAAA,CAAA,CACvB;gBACD,mBAAmB,CAAC,SAAS,GAAG,IAAI,mBAAmB,CACtD,QAAQ,EACR,YAAY,CACZ;;YAGF,OAAO,mBAAmB,CAAC,SAAS;AACrC,SAAC,EAAE,CAAA,CAAA,EAAI,MAAM,CAAA,sDAAA,CAAwD,CAAC;;IAGvE,MAAM,gBAAgB,CAAC,QAAgB,EAAA;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAW;YAC1C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;AACjD,YAAA,MAAM,cAAc,GAAG,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAC5D,GAAG,CAAC,EAAE,KAAK,QAAQ,GAAG,EAAE,GAAG,GAAG,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,GAAG,CAC/D;YAED,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,cAAc,EAAE,IAAI,CAAC;AAC9D,SAAC,EAAE,CAAI,CAAA,EAAA,MAAM,uCAAuC,QAAQ,CAAA,CAAE,CAAC;;AAGhE,IAAA,MAAM,kBAAkB,CAAC,QAAgB,EAAE,OAAe,EAAA;QACzD,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAW;YAC1C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;AACxD,YAAA,MAAM,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,OAAO;AACrD,YAAA,MAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ,CAAC;AAEjE,YAAA,IAAI,WAAW,KAAK,EAAE,EAAE;AACvB,gBAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CACb,CAAA,eAAA,EAAkB,QAAQ,CAAA,WAAA,CAAa,EACvC,CAAA,EAAG,MAAM,CAAA,mBAAA,CAAqB,CAC9B;gBAED;;YAGD,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAC5B,SAAS,CAAC,aAAa,EACvB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,aAAa,CAAC,CAC1C;YAED,MAAM,QAAQ,GAAG,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI;;YAGzD,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,IAAG;AACxC,gBAAA,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ,EAAE;oBACxB,OAAO,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE;;AAEtC,gBAAA,OAAO,GAAG;AACX,aAAC,CAAC;;YAGF,MAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAC5C,GAAG,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ,IAAI,CAAC,GAAG,CAAC,QAAQ,CAC3C;AACD,YAAA,MAAM,gBAAgB,GACrB,eAAe,CAAC,MAAM,GAAG,CAAC,GAAG,QAAQ,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC;YAEnE,MAAM,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,IAAG;gBAC/C,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;AACzC,oBAAA,OAAO,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG,gBAAgB,EAAE;;AAGrD,gBAAA,OAAO,GAAG;AACX,aAAC,CAAC;;YAGF,MAAM,SAAS,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;YACxE,MAAM,iBAAiB,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK;AACpD,gBAAA,GAAG,GAAG;gBACN,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,GAAG,GAAG,SAAS;AACjC,aAAA,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,IAAI,CAAC;AACjE,SAAC,EAAE,CAAI,CAAA,EAAA,MAAM,8BAA8B,QAAQ,CAAA,CAAE,CAAC;;AAGvD,IAAA,MAAM,WAAW,CAAC,SAAiB,EAAE,QAAgB,EAAA;QACpD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAW;YAChD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;AACxD,YAAA,MAAM,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,OAAO;AAErD,YAAA,MAAM,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,KAAK,SAAS,CAAC;AAC/D,YAAA,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ,CAAC;AAE7D,YAAA,IAAI,CAAC,aAAa,IAAI,CAAC,YAAY,EAAE;AACpC,gBAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CACb,CAAqC,kCAAA,EAAA,SAAS,CAAO,IAAA,EAAA,QAAQ,aAAa,EAC1E,CAAA,EAAG,MAAM,CAAA,YAAA,CAAc,CACvB;gBACD;;;YAID,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,IAAG;AACxC,gBAAA,IAAI,GAAG,CAAC,EAAE,KAAK,SAAS;oBACvB,OAAO,EAAE,GAAG,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC,QAAQ,EAAE;AACnD,gBAAA,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ;oBACtB,OAAO,EAAE,GAAG,GAAG,EAAE,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAE;AACpD,gBAAA,OAAO,GAAG;AACX,aAAC,CAAC;;YAGF,MAAM,aAAa,GAAG,CAAC,GAAG,cAAc,CAAC,CAAC,IAAI,CAC7C,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CACjC;;YAGD,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,aAAa,EAAE,IAAI,CAAC;AAE5D,YAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CACd,CAAmB,gBAAA,EAAA,SAAS,CAAQ,KAAA,EAAA,QAAQ,CAAgB,aAAA,EAAA,aAAa,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EACzG,CAAA,EAAG,MAAM,CAAA,YAAA,CAAc,CACvB;AACF,SAAC,EAAE,CAA0B,uBAAA,EAAA,SAAS,QAAQ,QAAQ,CAAA,CAAE,CAAC;;AAG1D,IAAA,MAAM,gBAAgB,CAAC,QAAgB,EAAE,OAAe,EAAA;QACvD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;AACxD,QAAA,MAAM,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC,gBAAgB;AAEjD,QAAA,MAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ,CAAC;QACjE,IAAI,WAAW,KAAK,EAAE;YAAE;AAExB,QAAA,MAAM,OAAO,GAAG,SAAS,CAAC,aAAa;AACvC,QAAA,MAAM,OAAO,GAAG,SAAS,CAAC,aAAa;AACvC,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAElE,QAAA,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,IACrC,GAAG,CAAC,EAAE,KAAK,QAAQ,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,GAAG,CAC1D;AAED,QAAA,MAAM,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;AACpC,YAAA,gBAAgB,EAAE;gBACjB,GAAG,YAAY,CAAC,gBAAgB;AAChC,gBAAA,OAAO,EAAE;AACT;AACD,SAAA,CAAC;;;;;;"}