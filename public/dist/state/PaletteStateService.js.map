{"version":3,"file":"PaletteStateService.js","sources":["../../../../src/state/PaletteStateService.ts"],"sourcesContent":["// File: state/PaletteState.ts\n\nimport {\n\tHelpers,\n\tPaletteStateContract,\n\tPaletteType,\n\tServices,\n\tState,\n\tUtilities\n} from '../types/index.js';\nimport { StateManager } from './StateManager.js';\nimport { domConfig, domIndex } from '../config/index.js';\n\nconst caller = 'PaletteState';\n\nexport class PaletteStateService implements PaletteStateContract {\n\tstatic #instance: PaletteStateService | null = null;\n\n\t#errors: Services['errors'];\n\t#getElement: Helpers['dom']['getElement'];\n\t#getAllElements: Helpers['dom']['getAllElements'];\n\t#helpers: Helpers;\n\t#log: Services['log'];\n\t#validateColorInput: Utilities['validate']['colorInput'];\n\t#stateManager: StateManager;\n\t#utils: Utilities;\n\n\tprivate constructor(\n\t\thelpers: Helpers,\n\t\tservices: Services,\n\t\tstateManager: StateManager,\n\t\tutils: Utilities\n\t) {\n\t\ttry {\n\t\t\tservices.log.info(\n\t\t\t\t`Constructing PaletteState instance`,\n\t\t\t\t`${caller} constructor`\n\t\t\t);\n\n\t\t\tthis.#errors = services.errors;\n\t\t\tthis.#getElement = helpers.dom.getElement;\n\t\t\tthis.#getAllElements = helpers.dom.getAllElements;\n\t\t\tthis.#helpers = helpers;\n\t\t\tthis.#log = services.log;\n\t\t\tthis.#stateManager = stateManager;\n\t\t\tthis.#validateColorInput = utils.validate.colorInput;\n\t\t\tthis.#utils = utils;\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${caller} constructor]: ${error instanceof Error ? error.message : error}`\n\t\t\t);\n\t\t}\n\t}\n\n\tstatic getInstance(\n\t\thelpers: Helpers,\n\t\tservices: Services,\n\t\tstateManager: StateManager,\n\t\tutils: Utilities\n\t): PaletteStateService {\n\t\treturn services.errors.handleSync(() => {\n\t\t\tif (!PaletteStateService.#instance) {\n\t\t\t\tservices.log.debug(\n\t\t\t\t\t`Creating ${caller} instance`,\n\t\t\t\t\t`${caller}.getInstance`\n\t\t\t\t);\n\t\t\t\tPaletteStateService.#instance = new PaletteStateService(\n\t\t\t\t\thelpers,\n\t\t\t\t\tservices,\n\t\t\t\t\tstateManager,\n\t\t\t\t\tutils\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn PaletteStateService.#instance;\n\t\t}, `[${caller}.getInstance]: Failed to create PaletteState instance.`);\n\t}\n\n\tasync handleColumnLock(columnID: number): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst paletteContainer = this.#stateManager.get(\n\t\t\t\t'paletteContainer'\n\t\t\t) as State['paletteContainer'];\n\t\t\tconst updatedColumns = paletteContainer.columns.map(col =>\n\t\t\t\tcol.id === columnID ? { ...col, isLocked: !col.isLocked } : col\n\t\t\t);\n\n\t\t\tawait this.#stateManager.batchUpdate({\n\t\t\t\tpaletteContainer: {\n\t\t\t\t\t...paletteContainer,\n\t\t\t\t\tcolumns: updatedColumns\n\t\t\t\t}\n\t\t\t});\n\t\t}, `[${caller}.handleColumnLock]: Failed to toggle lock for column ${columnID}`);\n\t}\n\n\tasync handleColumnResize(columnID: number, newSize: number): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst paletteContainer = this.#stateManager.get(\n\t\t\t\t'paletteContainer'\n\t\t\t) as State['paletteContainer'];\n\t\t\tconst columns = paletteContainer.columns;\n\t\t\tconst columnIndex = columns.findIndex(col => col.id === columnID);\n\n\t\t\tif (columnIndex === -1) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t`Column with ID ${columnID} not found.`,\n\t\t\t\t\t`${caller}.handleColumnResize`\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst adjustedSize = Math.max(\n\t\t\t\tdomConfig.minColumnSize,\n\t\t\t\tMath.min(newSize, domConfig.maxColumnSize)\n\t\t\t);\n\n\t\t\tconst sizeDiff = adjustedSize - columns[columnIndex].size;\n\n\t\t\t// created new columns array with updated columns\n\t\t\tconst updatedColumns = columns.map(col => {\n\t\t\t\tif (col.id === columnID) {\n\t\t\t\t\treturn { ...col, size: adjustedSize };\n\t\t\t\t}\n\t\t\t\treturn col;\n\t\t\t});\n\n\t\t\t// distribute size difference among locked columns\n\t\t\tconst unlockedColumns = updatedColumns.filter(\n\t\t\t\tcol => col.id !== columnID && !col.isLocked\n\t\t\t);\n\t\t\tconst distributeAmount =\n\t\t\t\tunlockedColumns.length > 0 ? sizeDiff / unlockedColumns.length : 0;\n\n\t\t\tconst resizedColumns = updatedColumns.map(col => {\n\t\t\t\tif (col.id !== columnID && !col.isLocked) {\n\t\t\t\t\treturn { ...col, size: col.size - distributeAmount };\n\t\t\t\t}\n\n\t\t\t\treturn col;\n\t\t\t});\n\n\t\t\t// normalize sizes to total 100%\n\t\t\tconst totalSize = resizedColumns.reduce((sum, col) => sum + col.size, 0);\n\t\t\tconst normalizedColumns = resizedColumns.map(col => ({\n\t\t\t\t...col,\n\t\t\t\tsize: col.size * (100 / totalSize)\n\t\t\t}));\n\n\t\t\tawait this.#stateManager.batchUpdate({\n\t\t\t\tpaletteContainer: {\n\t\t\t\t\t...paletteContainer,\n\t\t\t\t\tcolumns: normalizedColumns\n\t\t\t\t}\n\t\t\t});\n\t\t}, `[${caller}.handleColumnResize]: Failed to resize column ${columnID}`);\n\t}\n\n\tasync scanPaletteColumnColors(): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst paletteContainer = this.#getElement(\n\t\t\t\tdomIndex.ids.divs.paletteContainer\n\t\t\t);\n\t\t\tif (!paletteContainer) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t`No palette container found in State.`,\n\t\t\t\t\t`${caller}.scanPaletteColumnColors`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst columnElements = Array.from(\n\t\t\t\tthis.#getAllElements<HTMLDivElement>(domIndex.classes.paletteColumn)\n\t\t\t) as HTMLElement[];\n\n\t\t\tif (columnElements.length === 0) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t'No palette columns found in the DOM.',\n\t\t\t\t\t`${caller}.scanPaletteColumnColors`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst extractedColumns = columnElements.map((column, index) => {\n\t\t\t\tconst columnID = index + 1; // sequential IDs based on order\n\n\t\t\t\t// get the input element for the color\n\t\t\t\tconst inputElement = column.querySelector(\n\t\t\t\t\t`input.color-display`\n\t\t\t\t) as HTMLInputElement | null;\n\n\t\t\t\tif (!inputElement) {\n\t\t\t\t\tthis.#log.warn(\n\t\t\t\t\t\t`No color input found in column ID ${columnID}.`,\n\t\t\t\t\t\t`${caller}.scanPaletteColumnColors`\n\t\t\t\t\t);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst inputValue = inputElement.value.trim();\n\n\t\t\t\t// validate the color\n\t\t\t\tif (!this.#validateColorInput(inputValue)) {\n\t\t\t\t\tthis.#log.warn(\n\t\t\t\t\t\t`Invalid color detected in column ID ${columnID}: \"${inputValue}\"`,\n\t\t\t\t\t\t`${caller}.scanPaletteColumnColors`\n\t\t\t\t\t);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Apply background color to the column\n\t\t\t\tcolumn.style.backgroundColor = inputValue;\n\t\t\t\tconst parsedColor = this.#utils.color.formatCSSAsColor(inputValue);\n\t\t\t\tif (!parsedColor) {\n\t\t\t\t\tthis.#log.warn(\n\t\t\t\t\t\t`Failed to parse color value \"${inputValue}\" for column ID ${columnID}.`,\n\t\t\t\t\t\t`${caller}.scanPaletteColumnColors`\n\t\t\t\t\t);\n\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst hslColor =\n\t\t\t\t\tparsedColor.format === 'hsl'\n\t\t\t\t\t\t? parsedColor\n\t\t\t\t\t\t: this.#utils.color.convertToHSL(parsedColor);\n\n\t\t\t\tconst allColors = this.#utils.palette.generateAllColorValues(hslColor);\n\t\t\t\tconst structuredColors = {\n\t\t\t\t\tcmyk: allColors.cmyk.value,\n\t\t\t\t\thex: allColors.hex.value,\n\t\t\t\t\thsl: allColors.hsl.value,\n\t\t\t\t\thsv: allColors.hsv.value,\n\t\t\t\t\tlab: allColors.lab.value,\n\t\t\t\t\trgb: allColors.rgb.value,\n\t\t\t\t\txyz: allColors.xyz.value\n\t\t\t\t};\n\t\t\t\tconst structuredCSS = {\n\t\t\t\t\tcmyk: this.#utils.color.formatColorAsCSS(allColors.cmyk),\n\t\t\t\t\thex: this.#utils.color.formatColorAsCSS(allColors.hex),\n\t\t\t\t\thsl: this.#utils.color.formatColorAsCSS(allColors.hsl),\n\t\t\t\t\thsv: this.#utils.color.formatColorAsCSS(allColors.hsv),\n\t\t\t\t\tlab: this.#utils.color.formatColorAsCSS(allColors.lab),\n\t\t\t\t\trgb: this.#utils.color.formatColorAsCSS(allColors.rgb),\n\t\t\t\t\txyz: this.#utils.color.formatColorAsCSS(allColors.xyz)\n\t\t\t\t};\n\n\t\t\t\treturn {\n\t\t\t\t\tid: columnID,\n\t\t\t\t\tposition: columnID, // maintain order from DOM\n\t\t\t\t\tisLocked: column.classList.contains('locked'),\n\t\t\t\t\tsize: 100 / columnElements.length, // even distribution for now\n\t\t\t\t\tcolor: structuredColors,\n\t\t\t\t\tcss: structuredCSS\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// remove any null values if elements were missing\n\t\t\tconst validColumns = extractedColumns.filter(\n\t\t\t\t(col): col is NonNullable<typeof col> => col !== null\n\t\t\t);\n\n\t\t\tif (validColumns.length === 0) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t'No valid colors extracted from the DOM.',\n\t\t\t\t\t`${caller}.scanPaletteColumnColors`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// construct a new palette object based on extracted colors\n\t\t\tconst newPalette = {\n\t\t\t\tid: `custom_${crypto.randomUUID()}`,\n\t\t\t\titems: validColumns.map(col => ({\n\t\t\t\t\titemID: col.id,\n\t\t\t\t\tcolors: col.color,\n\t\t\t\t\tcss: col.css\n\t\t\t\t})),\n\t\t\t\tmetadata: {\n\t\t\t\t\tcolumnCount: validColumns.length,\n\t\t\t\t\tlimitDark: false,\n\t\t\t\t\tlimitGray: false,\n\t\t\t\t\tlimitLight: false,\n\t\t\t\t\ttimestamp: this.#helpers.data.getFormattedTimestamp(),\n\t\t\t\t\ttype: 'custom' as PaletteType\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// update State with scanned colors\n\t\t\tawait this.#stateManager.batchUpdate({\n\t\t\t\tpaletteContainer: {\n\t\t\t\t\tcolumns: validColumns.map(({ color, ...col }) => col)\n\t\t\t\t},\n\t\t\t\tpaletteHistory: [newPalette]\n\t\t\t});\n\n\t\t\tthis.#log.debug(\n\t\t\t\t`Scanned ${validColumns.length} colors from the DOM and updated state.`,\n\t\t\t\t`${caller}.scanPaletteColumnColors`\n\t\t\t);\n\t\t}, `[${caller}.scanPaletteColumnColors]: Scan failed!`);\n\t}\n\n\tasync swapColumns(draggedID: number, targetID: number): Promise<void> {\n\t\treturn await this.#errors.handleAsync(async () => {\n\t\t\tconst paletteContainer = this.#stateManager.get(\n\t\t\t\t'paletteContainer'\n\t\t\t) as State['paletteContainer'];\n\t\t\tconst columns = paletteContainer.columns;\n\n\t\t\tconst draggedColumn = columns.find(col => col.id === draggedID);\n\t\t\tconst targetColumn = columns.find(col => col.id === targetID);\n\n\t\t\tif (!draggedColumn || !targetColumn) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t`Failed to swap columns: Column ID ${draggedID} or ${targetID} not found.`,\n\t\t\t\t\t`${caller}.swapColumns`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// create updated columns with immutably swapped positions\n\t\t\tconst updatedColumns = columns.map(col => {\n\t\t\t\tif (col.id === draggedID)\n\t\t\t\t\treturn { ...col, position: targetColumn.position };\n\t\t\t\tif (col.id === targetID)\n\t\t\t\t\treturn { ...col, position: draggedColumn.position };\n\t\t\t\treturn col;\n\t\t\t});\n\n\t\t\t// sort columns based on updated positions\n\t\t\tconst sortedColumns = [...updatedColumns].sort(\n\t\t\t\t(a, b) => a.position - b.position\n\t\t\t);\n\n\t\t\t// update state with the new column order\n\t\t\tthis.#stateManager.batchUpdate({\n\t\t\t\tpaletteContainer: {\n\t\t\t\t\t...paletteContainer,\n\t\t\t\t\tcolumns: sortedColumns\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.#log.debug(\n\t\t\t\t`Swapped columns ${draggedID} and ${targetID}. New order: ${sortedColumns.map(col => col.id).join(', ')}`,\n\t\t\t\t`${caller}.swapColumns`\n\t\t\t);\n\t\t}, `[${caller}.swapColumns]: Failed to swap columns with IDs ${draggedID} and ${targetID}`);\n\t}\n\n\tasync updateColumnSize(columnID: number, newSize: number): Promise<void> {\n\t\treturn await this.#errors.handleAsync(async () => {\n\t\t\tconst paletteContainer = this.#stateManager.get(\n\t\t\t\t'paletteContainer'\n\t\t\t) as State['paletteContainer'];\n\t\t\tconst { columns } = paletteContainer;\n\t\t\tconst columnIndex = columns.findIndex(col => col.id === columnID);\n\t\t\tif (columnIndex === -1) return;\n\n\t\t\tconst minSize = domConfig.minColumnSize;\n\t\t\tconst maxSize = domConfig.maxColumnSize;\n\t\t\tconst adjustedSize = Math.max(minSize, Math.min(newSize, maxSize));\n\n\t\t\tconst updatedColumns = columns.map(col =>\n\t\t\t\tcol.id === columnID ? { ...col, size: adjustedSize } : col\n\t\t\t);\n\n\t\t\tawait this.#stateManager.batchUpdate({\n\t\t\t\tpaletteContainer: {\n\t\t\t\t\t...paletteContainer,\n\t\t\t\t\tcolumns: updatedColumns\n\t\t\t\t}\n\t\t\t});\n\t\t}, `[${caller}.updateColumnSize]: Failed to update size for column ${columnID}`);\n\t}\n}\n"],"names":[],"mappings":"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"}