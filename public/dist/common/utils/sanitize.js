// File: common/utils/sanitize.js
export function createSanitationUtils(utils) {
    function sanitizeInput(str) {
        return str.replace(/[&<>"'`/=():]/g, char => ({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;',
            '`': '&#x60;',
            '/': '&#x2F;',
            '=': '&#x3D;',
            '(': '&#40;',
            ')': '&#41;',
            ':': '&#58;'
        })[char] || char);
    }
    return {
        sanitizeInput,
        getSafeQueryParam(param) {
            const urlParams = new URLSearchParams(window.location.search);
            const rawValue = urlParams.get(param);
            return rawValue ? sanitizeInput(rawValue) : null;
        },
        lab(value, output) {
            if (output === 'l') {
                return utils.brand.asLAB_L(Math.round(Math.min(Math.max(value, 0), 100)));
            }
            else if (output === 'a') {
                return utils.brand.asLAB_A(Math.round(Math.min(Math.max(value, -125), 125)));
            }
            else if (output === 'b') {
                return utils.brand.asLAB_B(Math.round(Math.min(Math.max(value, -125), 125)));
            }
            else
                throw new Error('Unable to return LAB value');
        },
        percentile(value) {
            const rawPercentile = Math.round(Math.min(Math.max(value, 0), 100));
            return utils.brand.asPercentile(rawPercentile);
        },
        radial(value) {
            const rawRadial = Math.round(Math.min(Math.max(value, 0), 360)) & 360;
            return utils.brand.asRadial(rawRadial);
        },
        rgb(value) {
            const rawByteRange = Math.round(Math.min(Math.max(value, 0), 255));
            return utils.color.toColorValueRange(rawByteRange, 'ByteRange');
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbW9uL3V0aWxzL3Nhbml0aXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQWFqQyxNQUFNLFVBQVUscUJBQXFCLENBQ3BDLEtBQXlCO0lBRXpCLFNBQVMsYUFBYSxDQUFDLEdBQVc7UUFDakMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUNqQixnQkFBZ0IsRUFDaEIsSUFBSSxDQUFDLEVBQUUsQ0FDTixDQUFDO1lBQ0EsR0FBRyxFQUFFLE9BQU87WUFDWixHQUFHLEVBQUUsTUFBTTtZQUNYLEdBQUcsRUFBRSxNQUFNO1lBQ1gsR0FBRyxFQUFFLFFBQVE7WUFDYixHQUFHLEVBQUUsUUFBUTtZQUNiLEdBQUcsRUFBRSxRQUFRO1lBQ2IsR0FBRyxFQUFFLFFBQVE7WUFDYixHQUFHLEVBQUUsUUFBUTtZQUNiLEdBQUcsRUFBRSxPQUFPO1lBQ1osR0FBRyxFQUFFLE9BQU87WUFDWixHQUFHLEVBQUUsT0FBTztTQUNaLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQ2pCLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTztRQUNOLGFBQWE7UUFDYixpQkFBaUIsQ0FBQyxLQUFhO1lBQzlCLE1BQU0sU0FBUyxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV0QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbEQsQ0FBQztRQUNELEdBQUcsQ0FBQyxLQUFhLEVBQUUsTUFBdUI7WUFDekMsSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQ3BCLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUM3QyxDQUFDO1lBQ0gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDM0IsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FDaEQsQ0FBQztZQUNILENBQUM7aUJBQU0sSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQzNCLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQ2hELENBQUM7WUFDSCxDQUFDOztnQkFBTSxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDdEQsQ0FBQztRQUNELFVBQVUsQ0FBQyxLQUFhO1lBQ3ZCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRXBFLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFhO1lBQ25CLE1BQU0sU0FBUyxHQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUVyRCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFDRCxHQUFHLENBQUMsS0FBYTtZQUNoQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUVuRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7S0FDRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGNvbW1vbi91dGlscy9zYW5pdGl6ZS5qc1xuXG5pbXBvcnQge1xuXHRCeXRlUmFuZ2UsXG5cdExBQl9BLFxuXHRMQUJfQixcblx0TEFCX0wsXG5cdFBlcmNlbnRpbGUsXG5cdFJhZGlhbCxcblx0U2FuaXRhdGlvblV0aWxzSW50ZXJmYWNlLFxuXHRVdGlsaXRpZXNJbnRlcmZhY2Vcbn0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2FuaXRhdGlvblV0aWxzKFxuXHR1dGlsczogVXRpbGl0aWVzSW50ZXJmYWNlXG4pOiBTYW5pdGF0aW9uVXRpbHNJbnRlcmZhY2Uge1xuXHRmdW5jdGlvbiBzYW5pdGl6ZUlucHV0KHN0cjogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoXG5cdFx0XHQvWyY8PlwiJ2AvPSgpOl0vZyxcblx0XHRcdGNoYXIgPT5cblx0XHRcdFx0KHtcblx0XHRcdFx0XHQnJic6ICcmYW1wOycsXG5cdFx0XHRcdFx0JzwnOiAnJmx0OycsXG5cdFx0XHRcdFx0Jz4nOiAnJmd0OycsXG5cdFx0XHRcdFx0J1wiJzogJyZxdW90OycsXG5cdFx0XHRcdFx0XCInXCI6ICcmIzAzOTsnLFxuXHRcdFx0XHRcdCdgJzogJyYjeDYwOycsXG5cdFx0XHRcdFx0Jy8nOiAnJiN4MkY7Jyxcblx0XHRcdFx0XHQnPSc6ICcmI3gzRDsnLFxuXHRcdFx0XHRcdCcoJzogJyYjNDA7Jyxcblx0XHRcdFx0XHQnKSc6ICcmIzQxOycsXG5cdFx0XHRcdFx0JzonOiAnJiM1ODsnXG5cdFx0XHRcdH0pW2NoYXJdIHx8IGNoYXJcblx0XHQpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzYW5pdGl6ZUlucHV0LFxuXHRcdGdldFNhZmVRdWVyeVBhcmFtKHBhcmFtOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcblx0XHRcdGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG5cdFx0XHRjb25zdCByYXdWYWx1ZSA9IHVybFBhcmFtcy5nZXQocGFyYW0pO1xuXG5cdFx0XHRyZXR1cm4gcmF3VmFsdWUgPyBzYW5pdGl6ZUlucHV0KHJhd1ZhbHVlKSA6IG51bGw7XG5cdFx0fSxcblx0XHRsYWIodmFsdWU6IG51bWJlciwgb3V0cHV0OiAnbCcgfCAnYScgfCAnYicpOiBMQUJfTCB8IExBQl9BIHwgTEFCX0Ige1xuXHRcdFx0aWYgKG91dHB1dCA9PT0gJ2wnKSB7XG5cdFx0XHRcdHJldHVybiB1dGlscy5icmFuZC5hc0xBQl9MKFxuXHRcdFx0XHRcdE1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIDApLCAxMDApKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIGlmIChvdXRwdXQgPT09ICdhJykge1xuXHRcdFx0XHRyZXR1cm4gdXRpbHMuYnJhbmQuYXNMQUJfQShcblx0XHRcdFx0XHRNYXRoLnJvdW5kKE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCAtMTI1KSwgMTI1KSlcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSBpZiAob3V0cHV0ID09PSAnYicpIHtcblx0XHRcdFx0cmV0dXJuIHV0aWxzLmJyYW5kLmFzTEFCX0IoXG5cdFx0XHRcdFx0TWF0aC5yb3VuZChNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgLTEyNSksIDEyNSkpXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmV0dXJuIExBQiB2YWx1ZScpO1xuXHRcdH0sXG5cdFx0cGVyY2VudGlsZSh2YWx1ZTogbnVtYmVyKTogUGVyY2VudGlsZSB7XG5cdFx0XHRjb25zdCByYXdQZXJjZW50aWxlID0gTWF0aC5yb3VuZChNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgMCksIDEwMCkpO1xuXG5cdFx0XHRyZXR1cm4gdXRpbHMuYnJhbmQuYXNQZXJjZW50aWxlKHJhd1BlcmNlbnRpbGUpO1xuXHRcdH0sXG5cdFx0cmFkaWFsKHZhbHVlOiBudW1iZXIpOiBSYWRpYWwge1xuXHRcdFx0Y29uc3QgcmF3UmFkaWFsID1cblx0XHRcdFx0TWF0aC5yb3VuZChNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgMCksIDM2MCkpICYgMzYwO1xuXG5cdFx0XHRyZXR1cm4gdXRpbHMuYnJhbmQuYXNSYWRpYWwocmF3UmFkaWFsKTtcblx0XHR9LFxuXHRcdHJnYih2YWx1ZTogbnVtYmVyKTogQnl0ZVJhbmdlIHtcblx0XHRcdGNvbnN0IHJhd0J5dGVSYW5nZSA9IE1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIDApLCAyNTUpKTtcblxuXHRcdFx0cmV0dXJuIHV0aWxzLmNvbG9yLnRvQ29sb3JWYWx1ZVJhbmdlKHJhd0J5dGVSYW5nZSwgJ0J5dGVSYW5nZScpO1xuXHRcdH1cblx0fTtcbn1cbiJdfQ==