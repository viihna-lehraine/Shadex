// File: common/utils/palette.js
import { coreUtils } from '../core.js';
import { createLogger } from '../../logger/index.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const thisModule = 'common/utils/palette.js';
const logger = await createLogger();
function createObject(args) {
    return {
        id: `${args.type}_${args.paletteID}`,
        items: args.items,
        metadata: {
            name: '',
            timestamp: coreUtils.getFormattedTimestamp(),
            swatches: args.swatches,
            type: args.type,
            flags: {
                limitDark: args.limitDark,
                limitGray: args.limitGray,
                limitLight: args.limitLight
            }
        }
    };
}
export async function populateOutputBox(color, boxNumber) {
    const thisMethod = 'populateOutputBox()';
    try {
        const clonedColor = coreUtils.guards.isColor(color)
            ? coreUtils.base.clone(color)
            : await coreUtils.convert.colorStringToColor(color);
        if (!coreUtils.validate.colorValues(clonedColor)) {
            if (logMode.error)
                logger.error('Invalid color values.', `${thisModule} > ${thisMethod}`);
            return;
        }
        const colorTextOutputBox = document.getElementById(`color-text-output-box-${boxNumber}`);
        if (!colorTextOutputBox)
            return;
        const stringifiedColor = await coreUtils.convert.colorToCSSColorString(clonedColor);
        if (logMode.verbosity > 1)
            logger.info(`Adding CSS-formatted color to DOM ${stringifiedColor}`, `${thisModule} > ${thisMethod}`);
        colorTextOutputBox.value = stringifiedColor;
        colorTextOutputBox.setAttribute('data-format', color.format);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Failed to populate color text output box: ${error}`, `${thisModule} > ${thisMethod}`);
        return;
    }
}
export const paletteUtils = {
    createObject,
    populateOutputBox
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvcGFsZXR0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7QUFTaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN2QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsSUFBSSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRTdCLE1BQU0sVUFBVSxHQUFHLHlCQUF5QixDQUFDO0FBRTdDLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsU0FBUyxZQUFZLENBQUMsSUFBaUI7SUFDdEMsT0FBTztRQUNOLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNwQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7UUFDakIsUUFBUSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEVBQUU7WUFDUixTQUFTLEVBQUUsU0FBUyxDQUFDLHFCQUFxQixFQUFFO1lBQzVDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixLQUFLLEVBQUU7Z0JBQ04sU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUN6QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTthQUMzQjtTQUNEO0tBQ0QsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGlCQUFpQixDQUN0QyxLQUFnQyxFQUNoQyxTQUFpQjtJQUVqQixNQUFNLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQztJQUV6QyxJQUFJLENBQUM7UUFDSixNQUFNLFdBQVcsR0FBVSxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDekQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUM3QixDQUFDLENBQUMsTUFBTSxTQUFTLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ2xELElBQUksT0FBTyxDQUFDLEtBQUs7Z0JBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsdUJBQXVCLEVBQ3ZCLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO1lBRUgsT0FBTztRQUNSLENBQUM7UUFFRCxNQUFNLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQ2pELHlCQUF5QixTQUFTLEVBQUUsQ0FDVCxDQUFDO1FBRTdCLElBQUksQ0FBQyxrQkFBa0I7WUFBRSxPQUFPO1FBRWhDLE1BQU0sZ0JBQWdCLEdBQ3JCLE1BQU0sU0FBUyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU1RCxJQUFJLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQztZQUN4QixNQUFNLENBQUMsSUFBSSxDQUNWLHFDQUFxQyxnQkFBZ0IsRUFBRSxFQUN2RCxHQUFHLFVBQVUsTUFBTSxVQUFVLEVBQUUsQ0FDL0IsQ0FBQztRQUVILGtCQUFrQixDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQztRQUM1QyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsNkNBQTZDLEtBQUssRUFBRSxFQUNwRCxHQUFHLFVBQVUsTUFBTSxVQUFVLEVBQUUsQ0FDL0IsQ0FBQztRQUVILE9BQU87SUFDUixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBaUQ7SUFDekUsWUFBWTtJQUNaLGlCQUFpQjtDQUNSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBjb21tb24vdXRpbHMvcGFsZXR0ZS5qc1xuXG5pbXBvcnQge1xuXHRDb2xvcixcblx0Q29sb3JfU3RyaW5nUHJvcHMsXG5cdENvbW1vbkZuX01hc3RlckludGVyZmFjZSxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUFyZ3Ncbn0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXgnO1xuaW1wb3J0IHsgY29yZVV0aWxzIH0gZnJvbSAnLi4vY29yZS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uLy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5cbmNvbnN0IHRoaXNNb2R1bGUgPSAnY29tbW9uL3V0aWxzL3BhbGV0dGUuanMnO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KGFyZ3M6IFBhbGV0dGVBcmdzKTogUGFsZXR0ZSB7XG5cdHJldHVybiB7XG5cdFx0aWQ6IGAke2FyZ3MudHlwZX1fJHthcmdzLnBhbGV0dGVJRH1gLFxuXHRcdGl0ZW1zOiBhcmdzLml0ZW1zLFxuXHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRuYW1lOiAnJyxcblx0XHRcdHRpbWVzdGFtcDogY29yZVV0aWxzLmdldEZvcm1hdHRlZFRpbWVzdGFtcCgpLFxuXHRcdFx0c3dhdGNoZXM6IGFyZ3Muc3dhdGNoZXMsXG5cdFx0XHR0eXBlOiBhcmdzLnR5cGUsXG5cdFx0XHRmbGFnczoge1xuXHRcdFx0XHRsaW1pdERhcms6IGFyZ3MubGltaXREYXJrLFxuXHRcdFx0XHRsaW1pdEdyYXk6IGFyZ3MubGltaXRHcmF5LFxuXHRcdFx0XHRsaW1pdExpZ2h0OiBhcmdzLmxpbWl0TGlnaHRcblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3B1bGF0ZU91dHB1dEJveChcblx0Y29sb3I6IENvbG9yIHwgQ29sb3JfU3RyaW5nUHJvcHMsXG5cdGJveE51bWJlcjogbnVtYmVyXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgdGhpc01ldGhvZCA9ICdwb3B1bGF0ZU91dHB1dEJveCgpJztcblxuXHR0cnkge1xuXHRcdGNvbnN0IGNsb25lZENvbG9yOiBDb2xvciA9IGNvcmVVdGlscy5ndWFyZHMuaXNDb2xvcihjb2xvcilcblx0XHRcdD8gY29yZVV0aWxzLmJhc2UuY2xvbmUoY29sb3IpXG5cdFx0XHQ6IGF3YWl0IGNvcmVVdGlscy5jb252ZXJ0LmNvbG9yU3RyaW5nVG9Db2xvcihjb2xvcik7XG5cblx0XHRpZiAoIWNvcmVVdGlscy52YWxpZGF0ZS5jb2xvclZhbHVlcyhjbG9uZWRDb2xvcikpIHtcblx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0J0ludmFsaWQgY29sb3IgdmFsdWVzLicsXG5cdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgY29sb3JUZXh0T3V0cHV0Qm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0XHRgY29sb3ItdGV4dC1vdXRwdXQtYm94LSR7Ym94TnVtYmVyfWBcblx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsO1xuXG5cdFx0aWYgKCFjb2xvclRleHRPdXRwdXRCb3gpIHJldHVybjtcblxuXHRcdGNvbnN0IHN0cmluZ2lmaWVkQ29sb3IgPVxuXHRcdFx0YXdhaXQgY29yZVV0aWxzLmNvbnZlcnQuY29sb3JUb0NTU0NvbG9yU3RyaW5nKGNsb25lZENvbG9yKTtcblxuXHRcdGlmIChsb2dNb2RlLnZlcmJvc2l0eSA+IDEpXG5cdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0YEFkZGluZyBDU1MtZm9ybWF0dGVkIGNvbG9yIHRvIERPTSAke3N0cmluZ2lmaWVkQ29sb3J9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0KTtcblxuXHRcdGNvbG9yVGV4dE91dHB1dEJveC52YWx1ZSA9IHN0cmluZ2lmaWVkQ29sb3I7XG5cdFx0Y29sb3JUZXh0T3V0cHV0Qm94LnNldEF0dHJpYnV0ZSgnZGF0YS1mb3JtYXQnLCBjb2xvci5mb3JtYXQpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIHBvcHVsYXRlIGNvbG9yIHRleHQgb3V0cHV0IGJveDogJHtlcnJvcn1gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwYWxldHRlVXRpbHM6IENvbW1vbkZuX01hc3RlckludGVyZmFjZVsndXRpbHMnXVsncGFsZXR0ZSddID0ge1xuXHRjcmVhdGVPYmplY3QsXG5cdHBvcHVsYXRlT3V0cHV0Qm94XG59IGFzIGNvbnN0O1xuIl19