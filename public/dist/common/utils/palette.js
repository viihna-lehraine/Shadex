// File: common/utils/palette.js
import { coreUtils } from '../core.js';
import { createLogger } from '../../logger/index.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const thisModule = 'common/utils/palette.js';
const logger = await createLogger();
function createObject(type, items, swatches, paletteID, limitDark, limitGray, limitLight) {
    return {
        id: `${type}_${paletteID}`,
        items,
        metadata: {
            name: '',
            timestamp: coreUtils.getFormattedTimestamp(),
            swatches,
            type,
            flags: {
                limitDarkness: limitDark,
                limitGrayness: limitGray,
                limitLightness: limitLight
            }
        }
    };
}
export async function populateOutputBox(color, boxNumber) {
    const thisMethod = 'populateOutputBox()';
    try {
        const clonedColor = coreUtils.guards.isColor(color)
            ? coreUtils.base.clone(color)
            : await coreUtils.convert.colorStringToColor(color);
        if (!coreUtils.validate.colorValues(clonedColor)) {
            if (logMode.error)
                logger.error('Invalid color values.', `${thisModule} > ${thisMethod}`);
            return;
        }
        const colorTextOutputBox = document.getElementById(`color-text-output-box-${boxNumber}`);
        if (!colorTextOutputBox)
            return;
        const stringifiedColor = await coreUtils.convert.colorToCSSColorString(clonedColor);
        if (logMode.verbosity > 1)
            logger.info(`Adding CSS-formatted color to DOM ${stringifiedColor}`, `${thisModule} > ${thisMethod}`);
        colorTextOutputBox.value = stringifiedColor;
        colorTextOutputBox.setAttribute('data-format', color.format);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Failed to populate color text output box: ${error}`, `${thisModule} > ${thisMethod}`);
        return;
    }
}
export const paletteUtils = {
    createObject,
    populateOutputBox
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvcGFsZXR0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7QUFTaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN2QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsSUFBSSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRTdCLE1BQU0sVUFBVSxHQUFHLHlCQUF5QixDQUFDO0FBRTdDLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsU0FBUyxZQUFZLENBQ3BCLElBQVksRUFDWixLQUFvQixFQUNwQixRQUFnQixFQUNoQixTQUFpQixFQUNqQixTQUFrQixFQUNsQixTQUFrQixFQUNsQixVQUFtQjtJQUVuQixPQUFPO1FBQ04sRUFBRSxFQUFFLEdBQUcsSUFBSSxJQUFJLFNBQVMsRUFBRTtRQUMxQixLQUFLO1FBQ0wsUUFBUSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEVBQUU7WUFDUixTQUFTLEVBQUUsU0FBUyxDQUFDLHFCQUFxQixFQUFFO1lBQzVDLFFBQVE7WUFDUixJQUFJO1lBQ0osS0FBSyxFQUFFO2dCQUNOLGFBQWEsRUFBRSxTQUFTO2dCQUN4QixhQUFhLEVBQUUsU0FBUztnQkFDeEIsY0FBYyxFQUFFLFVBQVU7YUFDMUI7U0FDRDtLQUNELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FDdEMsS0FBZ0MsRUFDaEMsU0FBaUI7SUFFakIsTUFBTSxVQUFVLEdBQUcscUJBQXFCLENBQUM7SUFFekMsSUFBSSxDQUFDO1FBQ0osTUFBTSxXQUFXLEdBQVUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ3pELENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDN0IsQ0FBQyxDQUFDLE1BQU0sU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUNsRCxJQUFJLE9BQU8sQ0FBQyxLQUFLO2dCQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLHVCQUF1QixFQUN2QixHQUFHLFVBQVUsTUFBTSxVQUFVLEVBQUUsQ0FDL0IsQ0FBQztZQUVILE9BQU87UUFDUixDQUFDO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUNqRCx5QkFBeUIsU0FBUyxFQUFFLENBQ1QsQ0FBQztRQUU3QixJQUFJLENBQUMsa0JBQWtCO1lBQUUsT0FBTztRQUVoQyxNQUFNLGdCQUFnQixHQUNyQixNQUFNLFNBQVMsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFNUQsSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FDVixxQ0FBcUMsZ0JBQWdCLEVBQUUsRUFDdkQsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7UUFFSCxrQkFBa0IsQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUM7UUFDNUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLDZDQUE2QyxLQUFLLEVBQUUsRUFDcEQsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7UUFFSCxPQUFPO0lBQ1IsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQWlEO0lBQ3pFLFlBQVk7SUFDWixpQkFBaUI7Q0FDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogY29tbW9uL3V0aWxzL3BhbGV0dGUuanNcblxuaW1wb3J0IHtcblx0Q29sb3IsXG5cdENvbG9yX1N0cmluZ1Byb3BzLFxuXHRDb21tb25Gbl9NYXN0ZXJJbnRlcmZhY2UsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4JztcbmltcG9ydCB7IGNvcmVVdGlscyB9IGZyb20gJy4uL2NvcmUuanMnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnLi4vLi4vbG9nZ2VyL2luZGV4LmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi8uLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5jb25zdCB0aGlzTW9kdWxlID0gJ2NvbW1vbi91dGlscy9wYWxldHRlLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdChcblx0dHlwZTogc3RyaW5nLFxuXHRpdGVtczogUGFsZXR0ZUl0ZW1bXSxcblx0c3dhdGNoZXM6IG51bWJlcixcblx0cGFsZXR0ZUlEOiBudW1iZXIsXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuXG4pOiBQYWxldHRlIHtcblx0cmV0dXJuIHtcblx0XHRpZDogYCR7dHlwZX1fJHtwYWxldHRlSUR9YCxcblx0XHRpdGVtcyxcblx0XHRtZXRhZGF0YToge1xuXHRcdFx0bmFtZTogJycsXG5cdFx0XHR0aW1lc3RhbXA6IGNvcmVVdGlscy5nZXRGb3JtYXR0ZWRUaW1lc3RhbXAoKSxcblx0XHRcdHN3YXRjaGVzLFxuXHRcdFx0dHlwZSxcblx0XHRcdGZsYWdzOiB7XG5cdFx0XHRcdGxpbWl0RGFya25lc3M6IGxpbWl0RGFyayxcblx0XHRcdFx0bGltaXRHcmF5bmVzczogbGltaXRHcmF5LFxuXHRcdFx0XHRsaW1pdExpZ2h0bmVzczogbGltaXRMaWdodFxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvcHVsYXRlT3V0cHV0Qm94KFxuXHRjb2xvcjogQ29sb3IgfCBDb2xvcl9TdHJpbmdQcm9wcyxcblx0Ym94TnVtYmVyOiBudW1iZXJcbik6IFByb21pc2U8dm9pZD4ge1xuXHRjb25zdCB0aGlzTWV0aG9kID0gJ3BvcHVsYXRlT3V0cHV0Qm94KCknO1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQ29sb3I6IENvbG9yID0gY29yZVV0aWxzLmd1YXJkcy5pc0NvbG9yKGNvbG9yKVxuXHRcdFx0PyBjb3JlVXRpbHMuYmFzZS5jbG9uZShjb2xvcilcblx0XHRcdDogYXdhaXQgY29yZVV0aWxzLmNvbnZlcnQuY29sb3JTdHJpbmdUb0NvbG9yKGNvbG9yKTtcblxuXHRcdGlmICghY29yZVV0aWxzLnZhbGlkYXRlLmNvbG9yVmFsdWVzKGNsb25lZENvbG9yKSkge1xuXHRcdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHQnSW52YWxpZCBjb2xvciB2YWx1ZXMuJyxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHRcdCk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBjb2xvclRleHRPdXRwdXRCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcblx0XHRcdGBjb2xvci10ZXh0LW91dHB1dC1ib3gtJHtib3hOdW1iZXJ9YFxuXHRcdCkgYXMgSFRNTElucHV0RWxlbWVudCB8IG51bGw7XG5cblx0XHRpZiAoIWNvbG9yVGV4dE91dHB1dEJveCkgcmV0dXJuO1xuXG5cdFx0Y29uc3Qgc3RyaW5naWZpZWRDb2xvciA9XG5cdFx0XHRhd2FpdCBjb3JlVXRpbHMuY29udmVydC5jb2xvclRvQ1NTQ29sb3JTdHJpbmcoY2xvbmVkQ29sb3IpO1xuXG5cdFx0aWYgKGxvZ01vZGUudmVyYm9zaXR5ID4gMSlcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRgQWRkaW5nIENTUy1mb3JtYXR0ZWQgY29sb3IgdG8gRE9NICR7c3RyaW5naWZpZWRDb2xvcn1gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHQpO1xuXG5cdFx0Y29sb3JUZXh0T3V0cHV0Qm94LnZhbHVlID0gc3RyaW5naWZpZWRDb2xvcjtcblx0XHRjb2xvclRleHRPdXRwdXRCb3guc2V0QXR0cmlidXRlKCdkYXRhLWZvcm1hdCcsIGNvbG9yLmZvcm1hdCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gcG9wdWxhdGUgY29sb3IgdGV4dCBvdXRwdXQgYm94OiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdCk7XG5cblx0XHRyZXR1cm47XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHBhbGV0dGVVdGlsczogQ29tbW9uRm5fTWFzdGVySW50ZXJmYWNlWyd1dGlscyddWydwYWxldHRlJ10gPSB7XG5cdGNyZWF0ZU9iamVjdCxcblx0cG9wdWxhdGVPdXRwdXRCb3hcbn0gYXMgY29uc3Q7XG4iXX0=