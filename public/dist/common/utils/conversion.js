// File: common/utils/conversion.js
import { coreConversionUtils } from '../convert.js';
import { createLogger } from '../../logger/index.js';
import { coreUtils } from '../core.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const thisModule = 'common/utils/conversion.js';
const logger = await createLogger();
function getConversionFn(from, to) {
    const thisMethod = 'getConversionFn()';
    try {
        const fnName = `${from}To${to[0].toUpperCase() + to.slice(1)}`;
        if (!(fnName in conversionUtils))
            return undefined;
        const conversionFn = conversionUtils[fnName];
        return (value) => structuredClone(conversionFn(value));
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error getting conversion function: ${error}`, `${thisModule} > ${thisMethod}`);
        return undefined;
    }
}
function genAllColorValues(color) {
    const thisMethod = 'genAllColorValues()';
    const result = {};
    try {
        const clonedColor = coreUtils.base.clone(color);
        if (!coreUtils.validate.colorValues(clonedColor)) {
            if (logMode.error)
                logger.error(`Invalid color: ${JSON.stringify(clonedColor)}`, `${thisModule} > ${thisMethod}`);
            return {};
        }
        result.cmyk = coreConversionUtils.hslTo(clonedColor, 'cmyk');
        result.hex = coreConversionUtils.hslTo(clonedColor, 'hex');
        result.hsl = clonedColor;
        result.hsv = coreConversionUtils.hslTo(clonedColor, 'hsv');
        result.lab = coreConversionUtils.hslTo(clonedColor, 'lab');
        result.rgb = coreConversionUtils.hslTo(clonedColor, 'rgb');
        result.sl = coreConversionUtils.hslTo(clonedColor, 'sl');
        result.sv = coreConversionUtils.hslTo(clonedColor, 'sv');
        result.xyz = coreConversionUtils.hslTo(clonedColor, 'xyz');
        return result;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating all color values: ${error}`, `${thisModule} > ${thisMethod}`);
        return {};
    }
}
export const conversionUtils = {
    genAllColorValues,
    getConversionFn
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFnQm5DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxJQUFJLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXRELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFN0IsTUFBTSxVQUFVLEdBQUcsNEJBQTRCLENBQUM7QUFFaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxTQUFTLGVBQWUsQ0FJdkIsSUFBVSxFQUNWLEVBQU07SUFFTixNQUFNLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQztJQUV2QyxJQUFJLENBQUM7UUFDSixNQUFNLE1BQU0sR0FDWCxHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBa0MsQ0FBQztRQUVqRixJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksZUFBZSxDQUFDO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFFbkQsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FFaEIsQ0FBQztRQUU1QixPQUFPLENBQUMsS0FBK0IsRUFBMEIsRUFBRSxDQUNsRSxlQUFlLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLHNDQUFzQyxLQUFLLEVBQUUsRUFDN0MsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7UUFFSCxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsS0FBVTtJQUNwQyxNQUFNLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQztJQUN6QyxNQUFNLE1BQU0sR0FBK0IsRUFBRSxDQUFDO0lBRTlDLElBQUksQ0FBQztRQUNKLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWhELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ2xELElBQUksT0FBTyxDQUFDLEtBQUs7Z0JBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsa0JBQWtCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFDL0MsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7WUFFSCxPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFTLENBQUM7UUFDckUsTUFBTSxDQUFDLEdBQUcsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ2xFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQVEsQ0FBQztRQUNsRSxNQUFNLENBQUMsR0FBRyxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDbEUsTUFBTSxDQUFDLEdBQUcsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ2xFLE1BQU0sQ0FBQyxFQUFFLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQU8sQ0FBQztRQUMvRCxNQUFNLENBQUMsRUFBRSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFPLENBQUM7UUFDL0QsTUFBTSxDQUFDLEdBQUcsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBRWxFLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLHNDQUFzQyxLQUFLLEVBQUUsRUFDN0MsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7UUFFSCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUMzQjtJQUNDLGlCQUFpQjtJQUNqQixlQUFlO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGNvbW1vbi91dGlscy9jb252ZXJzaW9uLmpzXG5cbmltcG9ydCB7XG5cdENNWUssXG5cdENvbG9yRGF0YUFzc2VydGlvbixcblx0Q29sb3JEYXRhRXh0ZW5kZWQsXG5cdENvbW1vbkZuX01hc3RlckludGVyZmFjZSxcblx0SGV4LFxuXHRIU0wsXG5cdEhTVixcblx0TEFCLFxuXHRSR0IsXG5cdFNMLFxuXHRTVixcblx0WFlaXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmVDb252ZXJzaW9uVXRpbHMgfSBmcm9tICcuLi9jb252ZXJ0LmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uL2xvZ2dlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlVXRpbHMgfSBmcm9tICcuLi9jb3JlLmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi8uLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5jb25zdCB0aGlzTW9kdWxlID0gJ2NvbW1vbi91dGlscy9jb252ZXJzaW9uLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmZ1bmN0aW9uIGdldENvbnZlcnNpb25Gbjxcblx0RnJvbSBleHRlbmRzIGtleW9mIENvbG9yRGF0YUFzc2VydGlvbixcblx0VG8gZXh0ZW5kcyBrZXlvZiBDb2xvckRhdGFBc3NlcnRpb25cbj4oXG5cdGZyb206IEZyb20sXG5cdHRvOiBUb1xuKTogKCh2YWx1ZTogQ29sb3JEYXRhQXNzZXJ0aW9uW0Zyb21dKSA9PiBDb2xvckRhdGFBc3NlcnRpb25bVG9dKSB8IHVuZGVmaW5lZCB7XG5cdGNvbnN0IHRoaXNNZXRob2QgPSAnZ2V0Q29udmVyc2lvbkZuKCknO1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgZm5OYW1lID1cblx0XHRcdGAke2Zyb219VG8ke3RvWzBdLnRvVXBwZXJDYXNlKCkgKyB0by5zbGljZSgxKX1gIGFzIGtleW9mIHR5cGVvZiBjb252ZXJzaW9uVXRpbHM7XG5cblx0XHRpZiAoIShmbk5hbWUgaW4gY29udmVyc2lvblV0aWxzKSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdGNvbnN0IGNvbnZlcnNpb25GbiA9IGNvbnZlcnNpb25VdGlsc1tmbk5hbWVdIGFzIHVua25vd24gYXMgKFxuXHRcdFx0aW5wdXQ6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXVxuXHRcdCkgPT4gQ29sb3JEYXRhQXNzZXJ0aW9uW1RvXTtcblxuXHRcdHJldHVybiAodmFsdWU6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXSk6IENvbG9yRGF0YUFzc2VydGlvbltUb10gPT5cblx0XHRcdHN0cnVjdHVyZWRDbG9uZShjb252ZXJzaW9uRm4odmFsdWUpKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcilcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVycm9yIGdldHRpbmcgY29udmVyc2lvbiBmdW5jdGlvbjogJHtlcnJvcn1gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxufVxuXG5mdW5jdGlvbiBnZW5BbGxDb2xvclZhbHVlcyhjb2xvcjogSFNMKTogUGFydGlhbDxDb2xvckRhdGFFeHRlbmRlZD4ge1xuXHRjb25zdCB0aGlzTWV0aG9kID0gJ2dlbkFsbENvbG9yVmFsdWVzKCknO1xuXHRjb25zdCByZXN1bHQ6IFBhcnRpYWw8Q29sb3JEYXRhRXh0ZW5kZWQ+ID0ge307XG5cblx0dHJ5IHtcblx0XHRjb25zdCBjbG9uZWRDb2xvciA9IGNvcmVVdGlscy5iYXNlLmNsb25lKGNvbG9yKTtcblxuXHRcdGlmICghY29yZVV0aWxzLnZhbGlkYXRlLmNvbG9yVmFsdWVzKGNsb25lZENvbG9yKSkge1xuXHRcdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRgSW52YWxpZCBjb2xvcjogJHtKU09OLnN0cmluZ2lmeShjbG9uZWRDb2xvcil9YCxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHRcdCk7XG5cblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHRyZXN1bHQuY215ayA9IGNvcmVDb252ZXJzaW9uVXRpbHMuaHNsVG8oY2xvbmVkQ29sb3IsICdjbXlrJykgYXMgQ01ZSztcblx0XHRyZXN1bHQuaGV4ID0gY29yZUNvbnZlcnNpb25VdGlscy5oc2xUbyhjbG9uZWRDb2xvciwgJ2hleCcpIGFzIEhleDtcblx0XHRyZXN1bHQuaHNsID0gY2xvbmVkQ29sb3I7XG5cdFx0cmVzdWx0LmhzdiA9IGNvcmVDb252ZXJzaW9uVXRpbHMuaHNsVG8oY2xvbmVkQ29sb3IsICdoc3YnKSBhcyBIU1Y7XG5cdFx0cmVzdWx0LmxhYiA9IGNvcmVDb252ZXJzaW9uVXRpbHMuaHNsVG8oY2xvbmVkQ29sb3IsICdsYWInKSBhcyBMQUI7XG5cdFx0cmVzdWx0LnJnYiA9IGNvcmVDb252ZXJzaW9uVXRpbHMuaHNsVG8oY2xvbmVkQ29sb3IsICdyZ2InKSBhcyBSR0I7XG5cdFx0cmVzdWx0LnNsID0gY29yZUNvbnZlcnNpb25VdGlscy5oc2xUbyhjbG9uZWRDb2xvciwgJ3NsJykgYXMgU0w7XG5cdFx0cmVzdWx0LnN2ID0gY29yZUNvbnZlcnNpb25VdGlscy5oc2xUbyhjbG9uZWRDb2xvciwgJ3N2JykgYXMgU1Y7XG5cdFx0cmVzdWx0Lnh5eiA9IGNvcmVDb252ZXJzaW9uVXRpbHMuaHNsVG8oY2xvbmVkQ29sb3IsICd4eXonKSBhcyBYWVo7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgRXJyb3IgZ2VuZXJhdGluZyBhbGwgY29sb3IgdmFsdWVzOiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdCk7XG5cblx0XHRyZXR1cm4ge307XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGNvbnZlcnNpb25VdGlsczogQ29tbW9uRm5fTWFzdGVySW50ZXJmYWNlWyd1dGlscyddWydjb252ZXJzaW9uJ10gPVxuXHR7XG5cdFx0Z2VuQWxsQ29sb3JWYWx1ZXMsXG5cdFx0Z2V0Q29udmVyc2lvbkZuXG5cdH0gYXMgY29uc3Q7XG4iXX0=