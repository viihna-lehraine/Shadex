// File: src/common/utils/conversion.js
import { convert } from '../convert/index.js';
import { createLogger } from '../../logger/index.js';
import { core } from '../core/index.js';
import { mode } from '../data/base.js';
const logger = await createLogger();
const logMode = mode.logging;
function getConversionFn(from, to) {
    try {
        const fnName = `${from}To${to[0].toUpperCase() + to.slice(1)}`;
        if (!(fnName in convert))
            return undefined;
        const conversionFn = convert[fnName];
        return (value) => structuredClone(conversionFn(value));
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error getting conversion function: ${error}`, 'common > utils > conversion > getConversionFn()');
        return undefined;
    }
}
function genAllColorValues(color) {
    const result = {};
    try {
        const clonedColor = core.base.clone(color);
        if (!core.validate.colorValues(clonedColor)) {
            if (logMode.error)
                logger.error(`Invalid color: ${JSON.stringify(clonedColor)}`, 'common > utils > conversion > genAllColorValues()');
            return {};
        }
        result.cmyk = convert.hslTo(clonedColor, 'cmyk');
        result.hex = convert.hslTo(clonedColor, 'hex');
        result.hsl = clonedColor;
        result.hsv = convert.hslTo(clonedColor, 'hsv');
        result.lab = convert.hslTo(clonedColor, 'lab');
        result.rgb = convert.hslTo(clonedColor, 'rgb');
        result.sl = convert.hslTo(clonedColor, 'sl');
        result.sv = convert.hslTo(clonedColor, 'sv');
        result.xyz = convert.hslTo(clonedColor, 'xyz');
        return result;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating all color values: ${error}`, 'common > utils > conversion > genAllColorValues()');
        return {};
    }
}
export const conversion = {
    genAllColorValues,
    getConversionFn
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7QUFnQnZDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFN0IsU0FBUyxlQUFlLENBSXZCLElBQVUsRUFDVixFQUFNO0lBRU4sSUFBSSxDQUFDO1FBQ0osTUFBTSxNQUFNLEdBQ1gsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQTBCLENBQUM7UUFFekUsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRTNDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBRVIsQ0FBQztRQUU1QixPQUFPLENBQUMsS0FBK0IsRUFBMEIsRUFBRSxDQUNsRSxlQUFlLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLHNDQUFzQyxLQUFLLEVBQUUsRUFDN0MsaURBQWlELENBQ2pELENBQUM7UUFFSCxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsS0FBVTtJQUNwQyxNQUFNLE1BQU0sR0FBK0IsRUFBRSxDQUFDO0lBRTlDLElBQUksQ0FBQztRQUNKLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQzdDLElBQUksT0FBTyxDQUFDLEtBQUs7Z0JBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsa0JBQWtCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFDL0MsbURBQW1ELENBQ25ELENBQUM7WUFFSCxPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBUyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDdEQsTUFBTSxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUM7UUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQVEsQ0FBQztRQUN0RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDdEQsTUFBTSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQU8sQ0FBQztRQUNuRCxNQUFNLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBTyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFFdEQsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsc0NBQXNDLEtBQUssRUFBRSxFQUM3QyxtREFBbUQsQ0FDbkQsQ0FBQztRQUVILE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQ3RCO0lBQ0MsaUJBQWlCO0lBQ2pCLGVBQWU7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NvbW1vbi91dGlscy9jb252ZXJzaW9uLmpzXG5cbmltcG9ydCB7XG5cdENNWUssXG5cdENvbG9yRGF0YUFzc2VydGlvbixcblx0Q29sb3JEYXRhRXh0ZW5kZWQsXG5cdENvbW1vbkZ1bmN0aW9uc01hc3RlckludGVyZmFjZSxcblx0SGV4LFxuXHRIU0wsXG5cdEhTVixcblx0TEFCLFxuXHRSR0IsXG5cdFNMLFxuXHRTVixcblx0WFlaXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuLi9jb252ZXJ0L2luZGV4LmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uL2xvZ2dlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vY29yZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBtb2RlIH0gZnJvbSAnLi4vZGF0YS9iYXNlLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5cbmZ1bmN0aW9uIGdldENvbnZlcnNpb25Gbjxcblx0RnJvbSBleHRlbmRzIGtleW9mIENvbG9yRGF0YUFzc2VydGlvbixcblx0VG8gZXh0ZW5kcyBrZXlvZiBDb2xvckRhdGFBc3NlcnRpb25cbj4oXG5cdGZyb206IEZyb20sXG5cdHRvOiBUb1xuKTogKCh2YWx1ZTogQ29sb3JEYXRhQXNzZXJ0aW9uW0Zyb21dKSA9PiBDb2xvckRhdGFBc3NlcnRpb25bVG9dKSB8IHVuZGVmaW5lZCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgZm5OYW1lID1cblx0XHRcdGAke2Zyb219VG8ke3RvWzBdLnRvVXBwZXJDYXNlKCkgKyB0by5zbGljZSgxKX1gIGFzIGtleW9mIHR5cGVvZiBjb252ZXJ0O1xuXG5cdFx0aWYgKCEoZm5OYW1lIGluIGNvbnZlcnQpKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0Y29uc3QgY29udmVyc2lvbkZuID0gY29udmVydFtmbk5hbWVdIGFzIHVua25vd24gYXMgKFxuXHRcdFx0aW5wdXQ6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXVxuXHRcdCkgPT4gQ29sb3JEYXRhQXNzZXJ0aW9uW1RvXTtcblxuXHRcdHJldHVybiAodmFsdWU6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXSk6IENvbG9yRGF0YUFzc2VydGlvbltUb10gPT5cblx0XHRcdHN0cnVjdHVyZWRDbG9uZShjb252ZXJzaW9uRm4odmFsdWUpKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcilcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVycm9yIGdldHRpbmcgY29udmVyc2lvbiBmdW5jdGlvbjogJHtlcnJvcn1gLFxuXHRcdFx0XHQnY29tbW9uID4gdXRpbHMgPiBjb252ZXJzaW9uID4gZ2V0Q29udmVyc2lvbkZuKCknXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxufVxuXG5mdW5jdGlvbiBnZW5BbGxDb2xvclZhbHVlcyhjb2xvcjogSFNMKTogUGFydGlhbDxDb2xvckRhdGFFeHRlbmRlZD4ge1xuXHRjb25zdCByZXN1bHQ6IFBhcnRpYWw8Q29sb3JEYXRhRXh0ZW5kZWQ+ID0ge307XG5cblx0dHJ5IHtcblx0XHRjb25zdCBjbG9uZWRDb2xvciA9IGNvcmUuYmFzZS5jbG9uZShjb2xvcik7XG5cblx0XHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoY2xvbmVkQ29sb3IpKSB7XG5cdFx0XHRpZiAobG9nTW9kZS5lcnJvcilcblx0XHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRcdGBJbnZhbGlkIGNvbG9yOiAke0pTT04uc3RyaW5naWZ5KGNsb25lZENvbG9yKX1gLFxuXHRcdFx0XHRcdCdjb21tb24gPiB1dGlscyA+IGNvbnZlcnNpb24gPiBnZW5BbGxDb2xvclZhbHVlcygpJ1xuXHRcdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0cmVzdWx0LmNteWsgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnY215aycpIGFzIENNWUs7XG5cdFx0cmVzdWx0LmhleCA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdoZXgnKSBhcyBIZXg7XG5cdFx0cmVzdWx0LmhzbCA9IGNsb25lZENvbG9yO1xuXHRcdHJlc3VsdC5oc3YgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnaHN2JykgYXMgSFNWO1xuXHRcdHJlc3VsdC5sYWIgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnbGFiJykgYXMgTEFCO1xuXHRcdHJlc3VsdC5yZ2IgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAncmdiJykgYXMgUkdCO1xuXHRcdHJlc3VsdC5zbCA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdzbCcpIGFzIFNMO1xuXHRcdHJlc3VsdC5zdiA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdzdicpIGFzIFNWO1xuXHRcdHJlc3VsdC54eXogPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAneHl6JykgYXMgWFlaO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcilcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVycm9yIGdlbmVyYXRpbmcgYWxsIGNvbG9yIHZhbHVlczogJHtlcnJvcn1gLFxuXHRcdFx0XHQnY29tbW9uID4gdXRpbHMgPiBjb252ZXJzaW9uID4gZ2VuQWxsQ29sb3JWYWx1ZXMoKSdcblx0XHRcdCk7XG5cblx0XHRyZXR1cm4ge307XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGNvbnZlcnNpb246IENvbW1vbkZ1bmN0aW9uc01hc3RlckludGVyZmFjZVsndXRpbHMnXVsnY29udmVyc2lvbiddID1cblx0e1xuXHRcdGdlbkFsbENvbG9yVmFsdWVzLFxuXHRcdGdldENvbnZlcnNpb25GblxuXHR9IGFzIGNvbnN0O1xuIl19