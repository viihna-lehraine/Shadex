// File: common/utils/adjust.js
import { data } from '../../config/index.js';
const adjustments = data.config.adjustments;
const defaultColors = data.defaults.colors;
const math = data.math;
export function createAdjustmentUtils(services, utils) {
    return {
        applyGammaCorrection(value) {
            const log = services.log;
            try {
                return value > 0.0031308
                    ? 1.055 * Math.pow(value, 1 / 2.4) - 0.055
                    : 12.92 * value;
            }
            catch (error) {
                log(`Error applying gamma correction: ${error}`, 'error');
                return value;
            }
        },
        clampRGB(rgb) {
            const log = services.log;
            const defaultRGB = defaultColors.rgb;
            if (!utils.validate.colorValue(rgb)) {
                log(`Invalid RGB value ${JSON.stringify(rgb)}`, 'error');
                return defaultRGB;
            }
            try {
                return {
                    value: {
                        red: utils.brand.asByteRange(Math.round(Math.min(Math.max(0, rgb.value.red), 1) * 255)),
                        green: utils.brand.asByteRange(Math.round(Math.min(Math.max(0, rgb.value.green), 1) * 255)),
                        blue: utils.brand.asByteRange(Math.round(Math.min(Math.max(0, rgb.value.blue), 1) * 255))
                    },
                    format: 'rgb'
                };
            }
            catch (error) {
                log(`Error clamping RGB values: ${error}`, 'error');
                return rgb;
            }
        },
        clampXYZ(value, maxValue) {
            return Math.max(0, Math.min(maxValue + math.epsilon, value));
        },
        normalizeXYZ(value, reference) {
            return value / reference;
        },
        sl(color) {
            const log = services.log;
            try {
                if (!utils.validate.colorValue(color)) {
                    log('Invalid color valus for adjustment.', 'error');
                    return color;
                }
                const adjustedSaturation = Math.min(Math.max(color.value.saturation + adjustments.slaValue, 0), 100);
                const adjustedLightness = Math.min(100);
                return {
                    value: {
                        hue: color.value.hue,
                        saturation: utils.brand.asPercentile(adjustedSaturation),
                        lightness: utils.brand.asPercentile(adjustedLightness)
                    },
                    format: 'hsl'
                };
            }
            catch (error) {
                log(`Error adjusting saturation and lightness: ${error}`, 'error');
                return color;
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRqdXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlscy9hZGp1c3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBUy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUU3QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUM1QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUMzQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBRXZCLE1BQU0sVUFBVSxxQkFBcUIsQ0FDcEMsUUFBMkIsRUFDM0IsS0FBeUI7SUFFekIsT0FBTztRQUNOLG9CQUFvQixDQUFDLEtBQWE7WUFDakMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUV6QixJQUFJLENBQUM7Z0JBQ0osT0FBTyxLQUFLLEdBQUcsU0FBUztvQkFDdkIsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSztvQkFDMUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbEIsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2hCLEdBQUcsQ0FBQyxvQ0FBb0MsS0FBSyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBRTFELE9BQU8sS0FBSyxDQUFDO1lBQ2QsQ0FBQztRQUNGLENBQUM7UUFDRCxRQUFRLENBQUMsR0FBUTtZQUNoQixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3pCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7WUFFckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxF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RyxDQUNGLDZDQUE2QyxLQUFLLEVBQUUsRUFDcEQsT0FBTyxDQUNQLENBQUM7Z0JBRUYsT0FBTyxLQUFLLENBQUM7WUFDZCxDQUFDO1FBQ0YsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogY29tbW9uL3V0aWxzL2FkanVzdC5qc1xuXG5pbXBvcnQge1xuXHRBZGp1c3RtZW50VXRpbHNJbnRlcmZhY2UsXG5cdEhTTCxcblx0UkdCLFxuXHRTZXJ2aWNlc0ludGVyZmFjZSxcblx0VXRpbGl0aWVzSW50ZXJmYWNlXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi8uLi9jb25maWcvaW5kZXguanMnO1xuXG5jb25zdCBhZGp1c3RtZW50cyA9IGRhdGEuY29uZmlnLmFkanVzdG1lbnRzO1xuY29uc3QgZGVmYXVsdENvbG9ycyA9IGRhdGEuZGVmYXVsdHMuY29sb3JzO1xuY29uc3QgbWF0aCA9IGRhdGEubWF0aDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFkanVzdG1lbnRVdGlscyhcblx0c2VydmljZXM6IFNlcnZpY2VzSW50ZXJmYWNlLFxuXHR1dGlsczogVXRpbGl0aWVzSW50ZXJmYWNlXG4pOiBBZGp1c3RtZW50VXRpbHNJbnRlcmZhY2Uge1xuXHRyZXR1cm4ge1xuXHRcdGFwcGx5R2FtbWFDb3JyZWN0aW9uKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuXHRcdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPiAwLjAwMzEzMDhcblx0XHRcdFx0XHQ/IDEuMDU1ICogTWF0aC5wb3codmFsdWUsIDEgLyAyLjQpIC0gMC4wNTVcblx0XHRcdFx0XHQ6IDEyLjkyICogdmFsdWU7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRsb2coYEVycm9yIGFwcGx5aW5nIGdhbW1hIGNvcnJlY3Rpb246ICR7ZXJyb3J9YCwgJ2Vycm9yJyk7XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y2xhbXBSR0IocmdiOiBSR0IpOiBSR0Ige1xuXHRcdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXHRcdFx0Y29uc3QgZGVmYXVsdFJHQiA9IGRlZmF1bHRDb2xvcnMucmdiO1xuXG5cdFx0XHRpZiAoIXV0aWxzLnZhbGlkYXRlLmNvbG9yVmFsdWUocmdiKSkge1xuXHRcdFx0XHRsb2coYEludmFsaWQgUkdCIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkocmdiKX1gLCAnZXJyb3InKTtcblxuXHRcdFx0XHRyZXR1cm4gZGVmYXVsdFJHQjtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdFx0cmVkOiB1dGlscy5icmFuZC5hc0J5dGVSYW5nZShcblx0XHRcdFx0XHRcdFx0TWF0aC5yb3VuZChcblx0XHRcdFx0XHRcdFx0XHRNYXRoLm1pbihNYXRoLm1heCgwLCByZ2IudmFsdWUucmVkKSwgMSkgKiAyNTVcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdGdyZWVuOiB1dGlscy5icmFuZC5hc0J5dGVSYW5nZShcblx0XHRcdFx0XHRcdFx0TWF0aC5yb3VuZChcblx0XHRcdFx0XHRcdFx0XHRNYXRoLm1pbihNYXRoLm1heCgwLCByZ2IudmFsdWUuZ3JlZW4pLCAxKSAqIDI1NVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0Ymx1ZTogdXRpbHMuYnJhbmQuYXNCeXRlUmFuZ2UoXG5cdFx0XHRcdFx0XHRcdE1hdGgucm91bmQoXG5cdFx0XHRcdFx0XHRcdFx0TWF0aC5taW4oTWF0aC5tYXgoMCwgcmdiLnZhbHVlLmJsdWUpLCAxKSAqIDI1NVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRmb3JtYXQ6ICdyZ2InXG5cdFx0XHRcdH07XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRsb2coYEVycm9yIGNsYW1waW5nIFJHQiB2YWx1ZXM6ICR7ZXJyb3J9YCwgJ2Vycm9yJyk7XG5cblx0XHRcdFx0cmV0dXJuIHJnYjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNsYW1wWFlaKHZhbHVlOiBudW1iZXIsIG1heFZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuXHRcdFx0cmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKG1heFZhbHVlICsgbWF0aC5lcHNpbG9uLCB2YWx1ZSkpO1xuXHRcdH0sXG5cdFx0bm9ybWFsaXplWFlaKHZhbHVlOiBudW1iZXIsIHJlZmVyZW5jZTogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRcdHJldHVybiB2YWx1ZSAvIHJlZmVyZW5jZTtcblx0XHR9LFxuXHRcdHNsKGNvbG9yOiBIU0wpOiBIU0wge1xuXHRcdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIXV0aWxzLnZhbGlkYXRlLmNvbG9yVmFsdWUoY29sb3IpKSB7XG5cdFx0XHRcdFx0bG9nKCdJbnZhbGlkIGNvbG9yIHZhbHVzIGZvciBhZGp1c3RtZW50LicsICdlcnJvcicpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGNvbG9yO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgYWRqdXN0ZWRTYXR1cmF0aW9uID0gTWF0aC5taW4oXG5cdFx0XHRcdFx0TWF0aC5tYXgoY29sb3IudmFsdWUuc2F0dXJhdGlvbiArIGFkanVzdG1lbnRzLnNsYVZhbHVlLCAwKSxcblx0XHRcdFx0XHQxMDBcblx0XHRcdFx0KTtcblx0XHRcdFx0Y29uc3QgYWRqdXN0ZWRMaWdodG5lc3MgPSBNYXRoLm1pbigxMDApO1xuXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRcdGh1ZTogY29sb3IudmFsdWUuaHVlLFxuXHRcdFx0XHRcdFx0c2F0dXJhdGlvbjpcblx0XHRcdFx0XHRcdFx0dXRpbHMuYnJhbmQuYXNQZXJjZW50aWxlKGFkanVzdGVkU2F0dXJhdGlvbiksXG5cdFx0XHRcdFx0XHRsaWdodG5lc3M6IHV0aWxzLmJyYW5kLmFzUGVyY2VudGlsZShhZGp1c3RlZExpZ2h0bmVzcylcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdFx0fTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGxvZyhcblx0XHRcdFx0XHRgRXJyb3IgYWRqdXN0aW5nIHNhdHVyYXRpb24gYW5kIGxpZ2h0bmVzczogJHtlcnJvcn1gLFxuXHRcdFx0XHRcdCdlcnJvcidcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRyZXR1cm4gY29sb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuIl19