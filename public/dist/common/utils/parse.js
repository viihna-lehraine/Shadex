// File: common/utils/parse.js
import { data } from '../../config/index.js';
const regex = data.config.regex.dom;
export function createParsingUtils(services, utils) {
    return {
        checkbox(id) {
            const log = services.log;
            const checkbox = document.getElementById(id);
            if (!checkbox) {
                log(`Checkbox element ${id} not found`, 'warn');
            }
            return checkbox ? checkbox.checked : undefined;
        },
        colorInput(input) {
            const log = services.log;
            const colorStr = input.value.trim().toLowerCase();
            const hexMatch = colorStr.match(regex.hex);
            const hslMatch = colorStr.match(regex.hsl);
            const rgbMatch = colorStr.match(regex.rgb);
            if (hexMatch) {
                let hex = hexMatch[1];
                if (hex.length === 3) {
                    hex = hex
                        .split('')
                        .map(c => c + c)
                        .join('');
                }
                return {
                    format: 'hex',
                    value: { hex: utils.brand.asHexSet(`#${hex}`) }
                };
            }
            if (hslMatch) {
                return {
                    format: 'hsl',
                    value: {
                        hue: utils.brand.asRadial(parseInt(hslMatch[1], 10)),
                        saturation: utils.brand.asPercentile(parseFloat(hslMatch[2])),
                        lightness: utils.brand.asPercentile(parseFloat(hslMatch[3]))
                    }
                };
            }
            if (rgbMatch) {
                return {
                    format: 'rgb',
                    value: {
                        red: utils.brand.asByteRange(parseInt(rgbMatch[1], 10)),
                        green: utils.brand.asByteRange(parseInt(rgbMatch[2], 10)),
                        blue: utils.brand.asByteRange(parseInt(rgbMatch[3], 10))
                    }
                };
            }
            // handle named colors
            const testElement = document.createElement('div');
            testElement.style.color = colorStr;
            if (testElement.style.color !== '') {
                const ctx = document.createElement('canvas').getContext('2d');
                if (ctx) {
                    ctx.fillStyle = colorStr;
                    const rgb = ctx.fillStyle.match(/\d+/g)?.map(Number);
                    if (rgb && rgb.length === 3) {
                        return {
                            format: 'rgb',
                            value: {
                                red: utils.brand.asByteRange(rgb[0]),
                                green: utils.brand.asByteRange(rgb[1]),
                                blue: utils.brand.asByteRange(rgb[2])
                            }
                        };
                    }
                }
            }
            log(`Invalid color input: ${colorStr}`, 'warn');
            return null;
        },
        dropdownSelection(id, validOptions) {
            const log = services.log;
            const dropdown = document.getElementById(id);
            if (!dropdown)
                return;
            const selectedValue = dropdown.value;
            if (!validOptions.includes(selectedValue)) {
                log(`Invalid selection in ${id}: "${selectedValue}" is not one of ${validOptions.join(', ')}`, 'warn');
            }
            return validOptions.includes(selectedValue)
                ? selectedValue
                : undefined;
        },
        numberInput(input, min, max) {
            const log = services.log;
            const value = parseFloat(input.value.trim());
            if (isNaN(value)) {
                log(`Invalid number input: ${input.value}`, 'warn');
            }
            if (isNaN(value))
                return null;
            if (min !== undefined && value < min)
                return min;
            if (max !== undefined && value > max)
                return max;
            return value;
        },
        textInput(input, regex) {
            const log = services.log;
            const text = input.value.trim();
            if (regex && !regex.test(text)) {
                log(`Invalid text input: ${text}`, 'warn');
                return null;
            }
            return text || null;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbW9uL3V0aWxzL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQVU5QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFN0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxrQkFBa0IsQ0FDakMsUUFBMkIsRUFDM0IsS0FBeUI7SUFFekIsT0FBTztRQUNOLFFBQVEsQ0FBQyxFQUFVO1lBQ2xCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFFekIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FDdkMsRUFBRSxDQUN5QixDQUFDO1lBRTdCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDZixHQUFHLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELENBQUM7WUFFRCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ2hELENBQUM7UUFDRCxVQUFVLENBQUMsS0FBdUI7WUFDakMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUV6QixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FB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QUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2xCLEdBQUcsQ0FBQyx5QkFBeUIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3JELENBQUM7WUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQUUsT0FBTyxJQUFJLENBQUM7WUFFOUIsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEtBQUssR0FBRyxHQUFHO2dCQUFFLE9BQU8sR0FBRyxDQUFDO1lBQ2pELElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxLQUFLLEdBQUcsR0FBRztnQkFBRSxPQUFPLEdBQUcsQ0FBQztZQUVqRCxPQUFPLEtBQUssQ0FBQztRQUNkLENBQUM7UUFDRCxTQUFTLENBQUMsS0FBdUIsRUFBRSxLQUFjO1lBQ2hELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFFekIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVoQyxJQUFJLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDaEMsR0FBRyxDQUFDLHVCQUF1QixJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFFM0MsT0FBTyxJQUFJLENBQUM7WUFDYixDQUFDO1lBRUQsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDO1FBQ3JCLENBQUM7S0FDRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGNvbW1vbi91dGlscy9wYXJzZS5qc1xuXG5pbXBvcnQge1xuXHRIZXgsXG5cdEhTTCxcblx0UGFyc2VVdGlsc0ludGVyZmFjZSxcblx0UkdCLFxuXHRTZXJ2aWNlc0ludGVyZmFjZSxcblx0VXRpbGl0aWVzSW50ZXJmYWNlXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi8uLi9jb25maWcvaW5kZXguanMnO1xuXG5jb25zdCByZWdleCA9IGRhdGEuY29uZmlnLnJlZ2V4LmRvbTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhcnNpbmdVdGlscyhcblx0c2VydmljZXM6IFNlcnZpY2VzSW50ZXJmYWNlLFxuXHR1dGlsczogVXRpbGl0aWVzSW50ZXJmYWNlXG4pOiBQYXJzZVV0aWxzSW50ZXJmYWNlIHtcblx0cmV0dXJuIHtcblx0XHRjaGVja2JveChpZDogc3RyaW5nKTogYm9vbGVhbiB8IHZvaWQge1xuXHRcdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXG5cdFx0XHRjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuXHRcdFx0XHRpZFxuXHRcdFx0KSBhcyBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbDtcblxuXHRcdFx0aWYgKCFjaGVja2JveCkge1xuXHRcdFx0XHRsb2coYENoZWNrYm94IGVsZW1lbnQgJHtpZH0gbm90IGZvdW5kYCwgJ3dhcm4nKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNoZWNrYm94ID8gY2hlY2tib3guY2hlY2tlZCA6IHVuZGVmaW5lZDtcblx0XHR9LFxuXHRcdGNvbG9ySW5wdXQoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpOiBIZXggfCBIU0wgfCBSR0IgfCBudWxsIHtcblx0XHRcdGNvbnN0IGxvZyA9IHNlcnZpY2VzLmxvZztcblxuXHRcdFx0Y29uc3QgY29sb3JTdHIgPSBpbnB1dC52YWx1ZS50cmltKCkudG9Mb3dlckNhc2UoKTtcblx0XHRcdGNvbnN0IGhleE1hdGNoID0gY29sb3JTdHIubWF0Y2gocmVnZXguaGV4KTtcblx0XHRcdGNvbnN0IGhzbE1hdGNoID0gY29sb3JTdHIubWF0Y2gocmVnZXguaHNsKTtcblx0XHRcdGNvbnN0IHJnYk1hdGNoID0gY29sb3JTdHIubWF0Y2gocmVnZXgucmdiKTtcblxuXHRcdFx0aWYgKGhleE1hdGNoKSB7XG5cdFx0XHRcdGxldCBoZXggPSBoZXhNYXRjaFsxXTtcblx0XHRcdFx0aWYgKGhleC5sZW5ndGggPT09IDMpIHtcblx0XHRcdFx0XHRoZXggPSBoZXhcblx0XHRcdFx0XHRcdC5zcGxpdCgnJylcblx0XHRcdFx0XHRcdC5tYXAoYyA9PiBjICsgYylcblx0XHRcdFx0XHRcdC5qb2luKCcnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGZvcm1hdDogJ2hleCcsXG5cdFx0XHRcdFx0dmFsdWU6IHsgaGV4OiB1dGlscy5icmFuZC5hc0hleFNldChgIyR7aGV4fWApIH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGhzbE1hdGNoKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Zm9ybWF0OiAnaHNsJyxcblx0XHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdFx0aHVlOiB1dGlscy5icmFuZC5hc1JhZGlhbChwYXJzZUludChoc2xNYXRjaFsxXSwgMTApKSxcblx0XHRcdFx0XHRcdHNhdHVyYXRpb246IHV0aWxzLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdChoc2xNYXRjaFsyXSlcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRsaWdodG5lc3M6IHV0aWxzLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdChoc2xNYXRjaFszXSlcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChyZ2JNYXRjaCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGZvcm1hdDogJ3JnYicsXG5cdFx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRcdHJlZDogdXRpbHMuYnJhbmQuYXNCeXRlUmFuZ2UocGFyc2VJbnQocmdiTWF0Y2hbMV0sIDEwKSksXG5cdFx0XHRcdFx0XHRncmVlbjogdXRpbHMuYnJhbmQuYXNCeXRlUmFuZ2UoXG5cdFx0XHRcdFx0XHRcdHBhcnNlSW50KHJnYk1hdGNoWzJdLCAxMClcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRibHVlOiB1dGlscy5icmFuZC5hc0J5dGVSYW5nZShwYXJzZUludChyZ2JNYXRjaFszXSwgMTApKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaGFuZGxlIG5hbWVkIGNvbG9yc1xuXHRcdFx0Y29uc3QgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdHRlc3RFbGVtZW50LnN0eWxlLmNvbG9yID0gY29sb3JTdHI7XG5cblx0XHRcdGlmICh0ZXN0RWxlbWVudC5zdHlsZS5jb2xvciAhPT0gJycpIHtcblx0XHRcdFx0Y29uc3QgY3R4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcblxuXHRcdFx0XHRpZiAoY3R4KSB7XG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGNvbG9yU3RyO1xuXG5cdFx0XHRcdFx0Y29uc3QgcmdiID0gY3R4LmZpbGxTdHlsZS5tYXRjaCgvXFxkKy9nKT8ubWFwKE51bWJlcik7XG5cblx0XHRcdFx0XHRpZiAocmdiICYmIHJnYi5sZW5ndGggPT09IDMpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdGZvcm1hdDogJ3JnYicsXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0XHRcdFx0cmVkOiB1dGlscy5icmFuZC5hc0J5dGVSYW5nZShyZ2JbMF0pLFxuXHRcdFx0XHRcdFx0XHRcdGdyZWVuOiB1dGlscy5icmFuZC5hc0J5dGVSYW5nZShyZ2JbMV0pLFxuXHRcdFx0XHRcdFx0XHRcdGJsdWU6IHV0aWxzLmJyYW5kLmFzQnl0ZVJhbmdlKHJnYlsyXSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bG9nKGBJbnZhbGlkIGNvbG9yIGlucHV0OiAke2NvbG9yU3RyfWAsICd3YXJuJyk7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0ZHJvcGRvd25TZWxlY3Rpb24oaWQ6IHN0cmluZywgdmFsaWRPcHRpb25zOiBzdHJpbmdbXSk6IHN0cmluZyB8IHZvaWQge1xuXHRcdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXG5cdFx0XHRjb25zdCBkcm9wZG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuXHRcdFx0XHRpZFxuXHRcdFx0KSBhcyBIVE1MU2VsZWN0RWxlbWVudCB8IG51bGw7XG5cblx0XHRcdGlmICghZHJvcGRvd24pIHJldHVybjtcblxuXHRcdFx0Y29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IGRyb3Bkb3duLnZhbHVlO1xuXG5cdFx0XHRpZiAoIXZhbGlkT3B0aW9ucy5pbmNsdWRlcyhzZWxlY3RlZFZhbHVlKSkge1xuXHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0YEludmFsaWQgc2VsZWN0aW9uIGluICR7aWR9OiBcIiR7c2VsZWN0ZWRWYWx1ZX1cIiBpcyBub3Qgb25lIG9mICR7dmFsaWRPcHRpb25zLmpvaW4oXG5cdFx0XHRcdFx0XHQnLCAnXG5cdFx0XHRcdFx0KX1gLFxuXHRcdFx0XHRcdCd3YXJuJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsaWRPcHRpb25zLmluY2x1ZGVzKHNlbGVjdGVkVmFsdWUpXG5cdFx0XHRcdD8gc2VsZWN0ZWRWYWx1ZVxuXHRcdFx0XHQ6IHVuZGVmaW5lZDtcblx0XHR9LFxuXHRcdG51bWJlcklucHV0KFxuXHRcdFx0aW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsXG5cdFx0XHRtaW4/OiBudW1iZXIsXG5cdFx0XHRtYXg/OiBudW1iZXJcblx0XHQpOiBudW1iZXIgfCBudWxsIHtcblx0XHRcdGNvbnN0IGxvZyA9IHNlcnZpY2VzLmxvZztcblxuXHRcdFx0Y29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KGlucHV0LnZhbHVlLnRyaW0oKSk7XG5cblx0XHRcdGlmIChpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0bG9nKGBJbnZhbGlkIG51bWJlciBpbnB1dDogJHtpbnB1dC52YWx1ZX1gLCAnd2FybicpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNOYU4odmFsdWUpKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0aWYgKG1pbiAhPT0gdW5kZWZpbmVkICYmIHZhbHVlIDwgbWluKSByZXR1cm4gbWluO1xuXHRcdFx0aWYgKG1heCAhPT0gdW5kZWZpbmVkICYmIHZhbHVlID4gbWF4KSByZXR1cm4gbWF4O1xuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fSxcblx0XHR0ZXh0SW5wdXQoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIHJlZ2V4PzogUmVnRXhwKTogc3RyaW5nIHwgbnVsbCB7XG5cdFx0XHRjb25zdCBsb2cgPSBzZXJ2aWNlcy5sb2c7XG5cblx0XHRcdGNvbnN0IHRleHQgPSBpbnB1dC52YWx1ZS50cmltKCk7XG5cblx0XHRcdGlmIChyZWdleCAmJiAhcmVnZXgudGVzdCh0ZXh0KSkge1xuXHRcdFx0XHRsb2coYEludmFsaWQgdGV4dCBpbnB1dDogJHt0ZXh0fWAsICd3YXJuJyk7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0IHx8IG51bGw7XG5cdFx0fVxuXHR9O1xufVxuIl19