// File: common/utils/errors.js
import { createLogger } from '../../logger/index.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const thisModule = 'common/utils/errors.ts';
const logger = await createLogger();
async function handleAsync(action, errorMessage, context) {
    const thisMethod = 'handleAsync()';
    try {
        return await action();
    }
    catch (error) {
        if (logMode.error)
            if (error instanceof Error) {
                logger.error(`${errorMessage}: ${error.message}. Context: ${context}`, `${thisModule} > ${thisMethod}`);
            }
            else {
                logger.error(`${errorMessage}: ${error}. Context: ${context}`, `${thisModule} > ${thisMethod}`);
            }
        return null;
    }
}
export const errorUtils = {
    handleAsync
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlscy9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBRy9CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsUUFBUSxJQUFJLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXRELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFN0IsTUFBTSxVQUFVLEdBQUcsd0JBQXdCLENBQUM7QUFFNUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxLQUFLLFVBQVUsV0FBVyxDQUN6QixNQUF3QixFQUN4QixZQUFvQixFQUNwQixPQUFpQztJQUVqQyxNQUFNLFVBQVUsR0FBRyxlQUFlLENBQUM7SUFFbkMsSUFBSSxDQUFDO1FBQ0osT0FBTyxNQUFNLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEIsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFLENBQUM7Z0JBQzVCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsR0FBRyxZQUFZLEtBQUssS0FBSyxDQUFDLE9BQU8sY0FBYyxPQUFPLEVBQUUsRUFDeEQsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7WUFDSCxDQUFDO2lCQUFNLENBQUM7Z0JBQ1AsTUFBTSxDQUFDLEtBQUssQ0FDWCxHQUFHLFlBQVksS0FBSyxLQUFLLGNBQWMsT0FBTyxFQUFFLEVBQ2hELEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO1lBQ0gsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQWdEO0lBQ3RFLFdBQVc7Q0FDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogY29tbW9uL3V0aWxzL2Vycm9ycy5qc1xuXG5pbXBvcnQgeyBDb21tb25Gbl9NYXN0ZXJJbnRlcmZhY2UgfSBmcm9tICcuLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uLy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5cbmNvbnN0IHRoaXNNb2R1bGUgPSAnY29tbW9uL3V0aWxzL2Vycm9ycy50cyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVBc3luYzxUPihcblx0YWN0aW9uOiAoKSA9PiBQcm9taXNlPFQ+LFxuXHRlcnJvck1lc3NhZ2U6IHN0cmluZyxcblx0Y29udGV4dD86IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4pOiBQcm9taXNlPFQgfCBudWxsPiB7XG5cdGNvbnN0IHRoaXNNZXRob2QgPSAnaGFuZGxlQXN5bmMoKSc7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gYXdhaXQgYWN0aW9uKCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0YCR7ZXJyb3JNZXNzYWdlfTogJHtlcnJvci5tZXNzYWdlfS4gQ29udGV4dDogJHtjb250ZXh0fWAsXG5cdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRcdGAke2Vycm9yTWVzc2FnZX06ICR7ZXJyb3J9LiBDb250ZXh0OiAke2NvbnRleHR9YCxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgZXJyb3JVdGlsczogQ29tbW9uRm5fTWFzdGVySW50ZXJmYWNlWyd1dGlscyddWydlcnJvcnMnXSA9IHtcblx0aGFuZGxlQXN5bmNcbn07XG4iXX0=