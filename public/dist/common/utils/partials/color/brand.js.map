{"version":3,"file":"brand.js","sources":["../../../../../../../src/common/utils/partials/color/brand.ts"],"sourcesContent":["// File: common/utils/partials/color/brand.ts\n\nimport {\n\tCMYK,\n\tCMYKStringMap,\n\tColor,\n\tColorBrandUtils,\n\tColorStringMap,\n\tHelpers,\n\tHex,\n\tHexStringMap,\n\tHSL,\n\tHSLStringMap,\n\tHSV,\n\tHSVStringMap,\n\tLAB,\n\tLABStringMap,\n\tRGB,\n\tRGBStringMap,\n\tSL,\n\tSV,\n\tUtilities,\n\tXYZ,\n\tXYZStringMap\n} from '../../../../types/index.js';\nimport { defaults } from '../../../../config/index.js';\n\nconst defaultColors = defaults.colors;\n\nexport function colorBrandingUtilsFactory(\n\thelpers: Helpers, utils: Utilities\n): ColorBrandUtils {\n\tconst { clone, parseValue } = helpers.data;\n\tconst { brand } = utils;\n\n\treturn {\n\t\tbrandCMYKStringMapValue(\n\t\t\tcmyk: CMYKStringMap['value']\n\t\t): CMYK['value'] {\n\t\t\treturn {\n\t\t\t\tcyan: brand.asPercentile(parseFloat(cmyk.cyan) / 100),\n\t\t\t\tmagenta: brand.asPercentile(parseFloat(cmyk.magenta) / 100),\n\t\t\t\tyellow: brand.asPercentile(parseFloat(cmyk.yellow) / 100),\n\t\t\t\tkey: brand.asPercentile(parseFloat(cmyk.key) / 100)\n\t\t\t};\n\t\t},\n\t\tbrandColorStringMap(color: ColorStringMap): Color {\n\t\t\tconst clonedColor = clone(color);\n\n\t\t\tconst newValue = Object.entries(clonedColor.value).reduce(\n\t\t\t\t(acc, [key, val]) => {\n\t\t\t\t\tacc[key as keyof (typeof clonedColor)['value']] =\n\t\t\t\t\t\tparseValue(val) as never;\n\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t{} as Record<keyof (typeof clonedColor)['value'], number>\n\t\t\t);\n\n\t\t\tswitch (clonedColor.format) {\n\t\t\t\tcase 'cmyk':\n\t\t\t\t\treturn { format: 'cmyk', value: newValue as CMYK['value'] };\n\t\t\t\tcase 'hsl':\n\t\t\t\t\treturn { format: 'hsl', value: newValue as HSL['value'] };\n\t\t\t\tcase 'hsv':\n\t\t\t\t\treturn { format: 'hsv', value: newValue as HSV['value'] };\n\t\t\t\tcase 'sl':\n\t\t\t\t\treturn { format: 'sl', value: newValue as SL['value'] };\n\t\t\t\tcase 'sv':\n\t\t\t\t\treturn { format: 'sv', value: newValue as SV['value'] };\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('Unsupported format for colorStringToColor');\n\n\t\t\t\t\tconst unbrandedHSL = defaultColors.hsl;\n\n\t\t\t\t\tconst brandedHue = utils.brand.asRadial(\n\t\t\t\t\t\tunbrandedHSL.value.hue\n\t\t\t\t\t);\n\t\t\t\t\tconst brandedSaturation = utils.brand.asPercentile(\n\t\t\t\t\t\tunbrandedHSL.value.saturation\n\t\t\t\t\t);\n\t\t\t\t\tconst brandedLightness = utils.brand.asPercentile(\n\t\t\t\t\t\tunbrandedHSL.value.lightness\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\thue: brandedHue,\n\t\t\t\t\t\t\tsaturation: brandedSaturation,\n\t\t\t\t\t\t\tlightness: brandedLightness\n\t\t\t\t\t\t},\n\t\t\t\t\t\tformat: 'hsl'\n\t\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tbrandHexStringMapValue(hex: HexStringMap['value']): Hex['value'] {\n\t\t\treturn { hex: utils.brand.asHexSet(hex.hex) };\n\t\t},\n\t\tbrandHSLStringMapValue(\n\t\t\thsl: HSLStringMap['value']\n\t\t): HSL['value'] {\n\t\t\treturn {\n\t\t\t\thue: utils.brand.asRadial(parseFloat(hsl.hue)),\n\t\t\t\tsaturation: utils.brand.asPercentile(\n\t\t\t\t\tparseFloat(hsl.saturation) / 100\n\t\t\t\t),\n\t\t\t\tlightness: utils.brand.asPercentile(\n\t\t\t\t\tparseFloat(hsl.lightness) / 100\n\t\t\t\t)\n\t\t\t};\n\t\t},\n\t\tbrandHSVStringMapValue(\n\t\t\thsv: HSVStringMap['value']\n\t\t): HSV['value'] {\n\t\t\treturn {\n\t\t\t\thue: utils.brand.asRadial(parseFloat(hsv.hue)),\n\t\t\t\tsaturation: utils.brand.asPercentile(\n\t\t\t\t\tparseFloat(hsv.saturation) / 100\n\t\t\t\t),\n\t\t\t\tvalue: utils.brand.asPercentile(parseFloat(hsv.value) / 100)\n\t\t\t};\n\t\t},\n\t\tbrandLABStringMapValue(\n\t\t\tlab: LABStringMap['value']\n\t\t): LAB['value'] {\n\t\t\treturn {\n\t\t\t\tl: utils.brand.asLAB_L(parseFloat(lab.l)),\n\t\t\t\ta: utils.brand.asLAB_A(parseFloat(lab.a)),\n\t\t\t\tb: utils.brand.asLAB_B(parseFloat(lab.b))\n\t\t\t};\n\t\t},\n\t\tbrandRGBStringMapValue(\n\t\t\trgb: RGBStringMap['value']\n\t\t): RGB['value'] {\n\t\t\treturn {\n\t\t\t\tred: utils.brand.asByteRange(parseFloat(rgb.red)),\n\t\t\t\tgreen: utils.brand.asByteRange(parseFloat(rgb.green)),\n\t\t\t\tblue: utils.brand.asByteRange(parseFloat(rgb.blue))\n\t\t\t};\n\t\t},\n\t\tbrandXYZStringMapValue(xyz: XYZStringMap['value']): XYZ['value'] {\n\t\t\treturn {\n\t\t\t\tx: utils.brand.asXYZ_X(parseFloat(xyz.x)),\n\t\t\t\ty: utils.brand.asXYZ_Y(parseFloat(xyz.y)),\n\t\t\t\tz: utils.brand.asXYZ_Z(parseFloat(xyz.z))\n\t\t\t};\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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"}