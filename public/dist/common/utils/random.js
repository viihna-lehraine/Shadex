// File: common/utils/random.js
import { coreUtils } from '../core.js';
import { createLogger } from '../../logger/index.js';
import { defaultData as defaults } from '../../data/defaults.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const thisModule = 'common/utils/random.js';
const logger = await createLogger();
function hsl() {
    const thisMethod = 'hsl()';
    try {
        const hsl = {
            value: {
                hue: coreUtils.sanitize.radial(Math.floor(Math.random() * 360)),
                saturation: coreUtils.sanitize.percentile(Math.floor(Math.random() * 101)),
                lightness: coreUtils.sanitize.percentile(Math.floor(Math.random() * 101))
            },
            format: 'hsl'
        };
        if (!coreUtils.validate.colorValues(hsl)) {
            if (logMode.error)
                logger.error(`Invalid random HSL color value ${JSON.stringify(hsl)}`, `${thisModule} > ${thisMethod}`);
            const unbrandedHSL = coreUtils.base.clone(defaults.colors.base.unbranded.hsl);
            return coreUtils.brandColor.asHSL(unbrandedHSL);
        }
        if (logMode.debug && logMode.verbosity > 1)
            logger.info(`Generated randomHSL: ${JSON.stringify(hsl)}`, `${thisModule} > ${thisMethod}`);
        return hsl;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating random HSL color: ${error}`, `${thisModule} > ${thisMethod}`);
        const unbrandedHSL = coreUtils.base.clone(defaults.colors.base.unbranded.hsl);
        return coreUtils.brandColor.asHSL(unbrandedHSL);
    }
}
function sl() {
    const thisMethod = 'sl()';
    try {
        const sl = {
            value: {
                saturation: coreUtils.sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100))),
                lightness: coreUtils.sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100)))
            },
            format: 'sl'
        };
        if (!coreUtils.validate.colorValues(sl)) {
            if (logMode.error)
                logger.error(`Invalid random SV color value ${JSON.stringify(sl)}`, `${thisModule} > ${thisMethod}`);
            const unbrandedSL = coreUtils.base.clone(defaults.colors.base.unbranded.sl);
            return coreUtils.brandColor.asSL(unbrandedSL);
        }
        if (logMode.debug && logMode.verbosity > 2)
            logger.debug(`Generated randomSL: ${JSON.stringify(sl)}`, `${thisModule} > ${thisMethod}`);
        return sl;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating random SL color: ${error}`, `${thisModule} > ${thisMethod}`);
        const unbrandedSL = coreUtils.base.clone(defaults.colors.base.unbranded.sl);
        return coreUtils.brandColor.asSL(unbrandedSL);
    }
}
export const randomUtils = {
    hsl,
    sl
};
//# sourceMappingURL=data:application/json;base64,