{"version":3,"file":"palette.js","sources":["../../../../../src/common/helpers/palette.ts"],"sourcesContent":["// File: common/helpers/palette.js\n\nimport {\n\tConstsDataInterface,\n\tHSL,\n\tPaletteUtilHelpersInterface,\n\tServicesInterface,\n\tUtilitiesInterface\n} from '../../types/index.js';\nimport { constsData as consts } from '../../data/consts.js';\n\nconst probabilityConsts = consts.probabilities;\n\nexport function createPaletteHelpers(\n\tservices: ServicesInterface,\n\tutils: UtilitiesInterface\n): PaletteUtilHelpersInterface {\n\tfunction isHSLTooDark(hsl: HSL): boolean {\n\t\tconst log = services.app.log;\n\n\t\tif (!utils.validate.colorValue(hsl)) {\n\t\t\tlog(\n\t\t\t\t'error',\n\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}`,\n\t\t\t\t'paletteUtils.isHSLTooDark()'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn utils.core.clone(hsl).value.lightness < consts.thresholds.dark;\n\t}\n\n\tfunction isHSLTooGray(hsl: HSL): boolean {\n\t\tconst log = services.app.log;\n\n\t\tif (!utils.validate.colorValue(hsl)) {\n\t\t\tlog(\n\t\t\t\t'error',\n\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}`,\n\t\t\t\t'paletteUtils.isHSLTooGray()'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn utils.core.clone(hsl).value.saturation < consts.thresholds.gray;\n\t}\n\n\tfunction isHSLTooLight(hsl: HSL): boolean {\n\t\tconst log = services.app.log;\n\n\t\tif (!utils.validate.colorValue(hsl)) {\n\t\t\tlog(\n\t\t\t\t'error',\n\t\t\t\t'Invalid HSL value ${JSON.stringify(hsl)}',\n\t\t\t\t'paletteUtils.isHSLTooLight()'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn utils.core.clone(hsl).value.lightness > consts.thresholds.light;\n\t}\n\n\treturn {\n\t\tisHSLTooDark,\n\t\tisHSLTooGray,\n\t\tisHSLTooLight,\n\t\tgetWeightedRandomInterval(\n\t\t\tdistributionType: keyof ConstsDataInterface['probabilities']\n\t\t): number {\n\t\t\tconst log = services.app.log;\n\n\t\t\ttry {\n\t\t\t\t// select appropriate type\n\t\t\t\tconst { weights, values } = probabilityConsts[distributionType];\n\n\t\t\t\t// compute cumulative probabilities\n\t\t\t\tconst cumulativeProbabilities: number[] = values.reduce(\n\t\t\t\t\t(acc: number[], prob: number, i: number) => {\n\t\t\t\t\t\tacc[i] = (acc[i - 1] || 0) + prob;\n\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t},\n\t\t\t\t\t[]\n\t\t\t\t);\n\t\t\t\tconst random = Math.random();\n\n\t\t\t\t// find corresponding weighted value\n\t\t\t\tfor (let i = 0; i < cumulativeProbabilities.length; i++) {\n\t\t\t\t\tif (random < cumulativeProbabilities[i]) return weights[i];\n\t\t\t\t}\n\n\t\t\t\t// fallback in case of error\n\t\t\t\treturn weights[weights.length - 1];\n\t\t\t} catch (error) {\n\t\t\t\tlog(\n\t\t\t\t\t'error',\n\t\t\t\t\t`Error generating weighted random interval: ${error}`,\n\t\t\t\t\t'paletteUtils.getWeightedRandomInterval()'\n\t\t\t\t);\n\n\t\t\t\treturn 50; // default fallback value\n\t\t\t}\n\t\t},\n\t\tisHSLInBounds(hsl: HSL): boolean {\n\t\t\tconst log = services.app.log;\n\n\t\t\tif (!utils.validate.colorValue(hsl)) {\n\t\t\t\tlog(\n\t\t\t\t\t'error',\n\t\t\t\t\t`isColorInBounds: Invalid HSL value ${JSON.stringify(hsl)}`,\n\t\t\t\t\t'paletteUtils.isHSLInBounds()'\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isHSLTooDark(hsl) || isHSLTooGray(hsl) || isHSLTooLight(hsl);\n\t\t}\n\t};\n}\n"],"names":["consts"],"mappings":"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"}