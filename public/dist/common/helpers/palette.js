// File: common/helpers/palette.js
import { data } from '../../config/index.js';
const config = data.config;
const probabilityConsts = config.probabilities;
export function createPaletteHelpers(services, utils) {
    function isHSLTooDark(hsl) {
        const log = services.log;
        if (!utils.validate.colorValue(hsl)) {
            log(`Invalid HSL value ${JSON.stringify(hsl)}`, 'error');
            return false;
        }
        return utils.core.clone(hsl).value.lightness < config.thresholds.dark;
    }
    function isHSLTooGray(hsl) {
        const log = services.log;
        if (!utils.validate.colorValue(hsl)) {
            log(`Invalid HSL value ${JSON.stringify(hsl)}`, 'error');
            return false;
        }
        return utils.core.clone(hsl).value.saturation < config.thresholds.gray;
    }
    function isHSLTooLight(hsl) {
        const log = services.log;
        if (!utils.validate.colorValue(hsl)) {
            log('Invalid HSL value ${JSON.stringify(hsl)}', 'error');
            return false;
        }
        return utils.core.clone(hsl).value.lightness > config.thresholds.light;
    }
    return {
        isHSLTooDark,
        isHSLTooGray,
        isHSLTooLight,
        getWeightedRandomInterval(distributionType) {
            const log = services.log;
            try {
                // select appropriate type
                const { weights, values } = probabilityConsts[distributionType];
                // compute cumulative probabilities
                const cumulativeProbabilities = values.reduce((acc, prob, i) => {
                    acc[i] = (acc[i - 1] || 0) + prob;
                    return acc;
                }, []);
                const random = Math.random();
                // find corresponding weighted value
                for (let i = 0; i < cumulativeProbabilities.length; i++) {
                    if (random < cumulativeProbabilities[i])
                        return weights[i];
                }
                // fallback in case of error
                return weights[weights.length - 1];
            }
            catch (error) {
                log(`Error generating weighted random interval: ${error}`, 'error');
                return 50; // default fallback value
            }
        },
        isHSLInBounds(hsl) {
            const log = services.log;
            if (!utils.validate.colorValue(hsl)) {
                log(`Invalid HSL value ${JSON.stringify(hsl)}`, 'error');
                return false;
            }
            return isHSLTooDark(hsl) || isHSLTooGray(hsl) || isHSLTooLight(hsl);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vaGVscGVycy9wYWxldHRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQVNsQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQixNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFL0MsTUFBTSxVQUFVLG9CQUFvQixDQUNuQyxRQUEyQixFQUMzQixLQUF5QjtJQUV6QixTQUFTLFlBQVksQ0FBQyxHQUFRO1FBQzdCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFFekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDckMsR0FBRyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFekQsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxTQUFTLFlBQVksQ0FBQyxHQUFRO1FBQzdCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFFekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDckMsR0FBRyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFekQsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxTQUFTLGFBQWEsQ0FBQyxHQUFRO1FBQzlCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFFekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDckMsR0FBRyxDQUFDLDBDQUEwQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXpELE9BQU8sS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUN4RSxDQUFDO0lBRUQsT0FBTztRQUNOLFlBQVk7UUFDWixZQUFZO1FBQ1osYUFBYTtRQUNiLHlCQUF5QixDQUN4QixnQkFBbUQ7WUFFbkQsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUV6QixJQUFJLENBQUM7Z0JBQ0osMEJBQTBCO2dCQUMxQixNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBRWhFLG1DQUFtQztnQkFDbkMsTUFBTSx1QkFBdUIsR0FBYSxNQUFNLENBQUMsTUFBTSxDQUN0RCxDQUFDLEdBQWEsRUFBRSxJQUFZLEVBQUUsQ0FBUyxFQUFFLEVBQUU7b0JBQzFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUVsQyxPQUFPLEdBQUcsQ0FBQztnQkFDWixDQUFDLEVBQ0QsRUFBRSxDQUNGLENBQUM7Z0JBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUU3QixvQ0FBb0M7Z0JBQ3BDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDekQsSUFBSSxNQUFNLEdBQUcsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO3dCQUFFLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1RCxDQUFDO2dCQUVELDRCQUE0QjtnQkFDNUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNwQyxDQUFDO1lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztnQkFDaEIsR0FBRyxDQUNGLDhDQUE4QyxLQUFLLEVBQUUsRUFDckQsT0FBTyxDQUNQLENBQUM7Z0JBRUYsT0FBTyxFQUFFLENBQUMsQ0FBQyx5QkFBeUI7WUFDckMsQ0FBQztRQUNGLENBQUM7UUFDRCxhQUFhLENBQUMsR0FBUTtZQUNyQixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBRXpCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNyQyxHQUFHLENBQUMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFFekQsT0FBTyxLQUFLLENBQUM7WUFDZCxDQUFDO1lBRUQsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRSxDQUFDO0tBQ0QsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBjb21tb24vaGVscGVycy9wYWxldHRlLmpzXG5cbmltcG9ydCB7XG5cdENvbmZpZ0RhdGEsXG5cdEhTTCxcblx0UGFsZXR0ZUhlbHBlcnNJbnRlcmZhY2UsXG5cdFNlcnZpY2VzSW50ZXJmYWNlLFxuXHRVdGlsaXRpZXNJbnRlcmZhY2Vcbn0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uLy4uL2NvbmZpZy9pbmRleC5qcyc7XG5cbmNvbnN0IGNvbmZpZyA9IGRhdGEuY29uZmlnO1xuY29uc3QgcHJvYmFiaWxpdHlDb25zdHMgPSBjb25maWcucHJvYmFiaWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGVIZWxwZXJzKFxuXHRzZXJ2aWNlczogU2VydmljZXNJbnRlcmZhY2UsXG5cdHV0aWxzOiBVdGlsaXRpZXNJbnRlcmZhY2Vcbik6IFBhbGV0dGVIZWxwZXJzSW50ZXJmYWNlIHtcblx0ZnVuY3Rpb24gaXNIU0xUb29EYXJrKGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXG5cdFx0aWYgKCF1dGlscy52YWxpZGF0ZS5jb2xvclZhbHVlKGhzbCkpIHtcblx0XHRcdGxvZyhgSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWAsICdlcnJvcicpO1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHV0aWxzLmNvcmUuY2xvbmUoaHNsKS52YWx1ZS5saWdodG5lc3MgPCBjb25maWcudGhyZXNob2xkcy5kYXJrO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNIU0xUb29HcmF5KGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXG5cdFx0aWYgKCF1dGlscy52YWxpZGF0ZS5jb2xvclZhbHVlKGhzbCkpIHtcblx0XHRcdGxvZyhgSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWAsICdlcnJvcicpO1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHV0aWxzLmNvcmUuY2xvbmUoaHNsKS52YWx1ZS5zYXR1cmF0aW9uIDwgY29uZmlnLnRocmVzaG9sZHMuZ3JheTtcblx0fVxuXG5cdGZ1bmN0aW9uIGlzSFNMVG9vTGlnaHQoaHNsOiBIU0wpOiBib29sZWFuIHtcblx0XHRjb25zdCBsb2cgPSBzZXJ2aWNlcy5sb2c7XG5cblx0XHRpZiAoIXV0aWxzLnZhbGlkYXRlLmNvbG9yVmFsdWUoaHNsKSkge1xuXHRcdFx0bG9nKCdJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9JywgJ2Vycm9yJyk7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXRpbHMuY29yZS5jbG9uZShoc2wpLnZhbHVlLmxpZ2h0bmVzcyA+IGNvbmZpZy50aHJlc2hvbGRzLmxpZ2h0O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpc0hTTFRvb0RhcmssXG5cdFx0aXNIU0xUb29HcmF5LFxuXHRcdGlzSFNMVG9vTGlnaHQsXG5cdFx0Z2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbChcblx0XHRcdGRpc3RyaWJ1dGlvblR5cGU6IGtleW9mIENvbmZpZ0RhdGFbJ3Byb2JhYmlsaXRpZXMnXVxuXHRcdCk6IG51bWJlciB7XG5cdFx0XHRjb25zdCBsb2cgPSBzZXJ2aWNlcy5sb2c7XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIHNlbGVjdCBhcHByb3ByaWF0ZSB0eXBlXG5cdFx0XHRcdGNvbnN0IHsgd2VpZ2h0cywgdmFsdWVzIH0gPSBwcm9iYWJpbGl0eUNvbnN0c1tkaXN0cmlidXRpb25UeXBlXTtcblxuXHRcdFx0XHQvLyBjb21wdXRlIGN1bXVsYXRpdmUgcHJvYmFiaWxpdGllc1xuXHRcdFx0XHRjb25zdCBjdW11bGF0aXZlUHJvYmFiaWxpdGllczogbnVtYmVyW10gPSB2YWx1ZXMucmVkdWNlKFxuXHRcdFx0XHRcdChhY2M6IG51bWJlcltdLCBwcm9iOiBudW1iZXIsIGk6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRcdFx0YWNjW2ldID0gKGFjY1tpIC0gMV0gfHwgMCkgKyBwcm9iO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gYWNjO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0W11cblx0XHRcdFx0KTtcblx0XHRcdFx0Y29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdFx0XHQvLyBmaW5kIGNvcnJlc3BvbmRpbmcgd2VpZ2h0ZWQgdmFsdWVcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjdW11bGF0aXZlUHJvYmFiaWxpdGllcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChyYW5kb20gPCBjdW11bGF0aXZlUHJvYmFiaWxpdGllc1tpXSkgcmV0dXJuIHdlaWdodHNbaV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBmYWxsYmFjayBpbiBjYXNlIG9mIGVycm9yXG5cdFx0XHRcdHJldHVybiB3ZWlnaHRzW3dlaWdodHMubGVuZ3RoIC0gMV07XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0YEVycm9yIGdlbmVyYXRpbmcgd2VpZ2h0ZWQgcmFuZG9tIGludGVydmFsOiAke2Vycm9yfWAsXG5cdFx0XHRcdFx0J2Vycm9yJ1xuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdHJldHVybiA1MDsgLy8gZGVmYXVsdCBmYWxsYmFjayB2YWx1ZVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aXNIU0xJbkJvdW5kcyhoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRcdFx0Y29uc3QgbG9nID0gc2VydmljZXMubG9nO1xuXG5cdFx0XHRpZiAoIXV0aWxzLnZhbGlkYXRlLmNvbG9yVmFsdWUoaHNsKSkge1xuXHRcdFx0XHRsb2coYEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gLCAnZXJyb3InKTtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpc0hTTFRvb0RhcmsoaHNsKSB8fCBpc0hTTFRvb0dyYXkoaHNsKSB8fCBpc0hTTFRvb0xpZ2h0KGhzbCk7XG5cdFx0fVxuXHR9O1xufVxuIl19