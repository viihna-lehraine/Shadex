{"version":3,"file":"Semaphore.js","sources":["../../../../../src/common/services/Semaphore.ts"],"sourcesContent":["// File: common/services/Semaphore.ts\n\nimport { SemaphoreInterface, Services } from '../../types/index.js';\nimport { config } from '../../config/index.js';\n\nconst caller = 'Semaphore';\nconst maxLocks = config.env.semaphoreMaxLocks;\nconst timeout = config.env.semaphoreTimeout;\n\nexport class Semaphore implements SemaphoreInterface {\n\t#isLocked: boolean = false;\n\t#waitingQueue: (() => void)[] = [];\n\t#lockCount: number = 0;\n\t#errors: Services['errors'];\n\t#log: Services['log'];\n\n\tconstructor(errors: Services['errors'], log: Services['log']) {\n\t\tlog('Constructing Semaphore instance.', {\n\t\t\tcaller: `${caller} constructor`\n\t\t});\n\t\tthis.#errors = errors;\n\t\tthis.#log = log;\n\t}\n\n\tasync acquire(): Promise<void> {\n\t\treturn this.#errors.handleAndReturn(() => {\n\t\t\tthis.#log('Semaphore acquiring lock.', {\n\t\t\t\tcaller: `${caller}.acquire`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\n\t\t\tif (this.#lockCount >= maxLocks) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot acquire lock. Maximum number of locks (${maxLocks}) reached.`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tconst timer = setTimeout(\n\t\t\t\t\t() =>\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t`Lock acquisition timed out after ${timeout} ms`\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\ttimeout\n\t\t\t\t);\n\n\t\t\t\tconst tryAcquire = () => {\n\t\t\t\t\tif (!this.#isLocked) {\n\t\t\t\t\t\tclearTimeout(timer);\n\n\t\t\t\t\t\tthis.#isLocked = true;\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.#waitingQueue.push(tryAcquire);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttryAcquire();\n\n\t\t\t\tthis.#lockCount++;\n\t\t\t});\n\t\t}, 'Error acquiring semaphore lock.');\n\t}\n\n\trelease(): void {\n\t\treturn this.#errors.handleAndReturn(() => {\n\t\t\tthis.#log('Semaphore releasing lock.', {\n\t\t\t\tcaller: `${caller}.release`,\n\t\t\t\tlevel: 'debug'\n\t\t\t});\n\t\t\tif (!this.#isLocked) {\n\t\t\t\tthrow new Error(\"Cannot release a lock that isn't acquired.\");\n\t\t\t}\n\n\t\t\tthis.#isLocked = false;\n\n\t\t\tconst next = this.#waitingQueue.shift();\n\n\t\t\tthis.#lockCount--;\n\t\t\tif (next) {\n\t\t\t\tnext();\n\t\t\t}\n\t\t}, 'Error releasing semaphore lock.') as void;\n\t}\n}\n"],"names":[],"mappings":";;AAAA;AAKA,MAAM,MAAM,GAAG,WAAW;AAC1B,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB;AAC7C,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,gBAAgB;MAE9B,SAAS,CAAA;IACrB,SAAS,GAAY,KAAK;IAC1B,aAAa,GAAmB,EAAE;IAClC,UAAU,GAAW,CAAC;AACtB,IAAA,OAAO;AACP,IAAA,IAAI;IAEJ,WAAY,CAAA,MAA0B,EAAE,GAAoB,EAAA;QAC3D,GAAG,CAAC,kCAAkC,EAAE;YACvC,MAAM,EAAE,CAAG,EAAA,MAAM,CAAc,YAAA;AAC/B,SAAA,CAAC;AACF,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM;AACrB,QAAA,IAAI,CAAC,IAAI,GAAG,GAAG;;AAGhB,IAAA,MAAM,OAAO,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,MAAK;AACxC,YAAA,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBACtC,MAAM,EAAE,CAAG,EAAA,MAAM,CAAU,QAAA,CAAA;AAC3B,gBAAA,KAAK,EAAE;AACP,aAAA,CAAC;AAEF,YAAA,IAAI,IAAI,CAAC,UAAU,IAAI,QAAQ,EAAE;AAChC,gBAAA,MAAM,IAAI,KAAK,CACd,iDAAiD,QAAQ,CAAA,UAAA,CAAY,CACrE;;YAGF,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,KAAI;gBAC5C,MAAM,KAAK,GAAG,UAAU,CACvB,MACC,MAAM,CACL,IAAI,KAAK,CACR,CAAA,iCAAA,EAAoC,OAAO,CAAK,GAAA,CAAA,CAChD,CACD,EACF,OAAO,CACP;gBAED,MAAM,UAAU,GAAG,MAAK;AACvB,oBAAA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;wBACpB,YAAY,CAAC,KAAK,CAAC;AAEnB,wBAAA,IAAI,CAAC,SAAS,GAAG,IAAI;AAErB,wBAAA,OAAO,EAAE;;yBACH;AACN,wBAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC;;AAErC,iBAAC;AAED,gBAAA,UAAU,EAAE;gBAEZ,IAAI,CAAC,UAAU,EAAE;AAClB,aAAC,CAAC;SACF,EAAE,iCAAiC,CAAC;;IAGtC,OAAO,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,MAAK;AACxC,YAAA,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBACtC,MAAM,EAAE,CAAG,EAAA,MAAM,CAAU,QAAA,CAAA;AAC3B,gBAAA,KAAK,EAAE;AACP,aAAA,CAAC;AACF,YAAA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACpB,gBAAA,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC;;AAG9D,YAAA,IAAI,CAAC,SAAS,GAAG,KAAK;YAEtB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;YAEvC,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,IAAI,EAAE;AACT,gBAAA,IAAI,EAAE;;SAEP,EAAE,iCAAiC,CAAS;;AAE9C;;;;"}