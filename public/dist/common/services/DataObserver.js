// File: common/services/DataObserver.js
export class DataObserver {
    data;
    listeners = {};
    constructor(initialData) {
        this.data = new Proxy(initialData, {
            set: (obj, prop, value) => {
                if (typeof prop === 'string' && prop in obj) {
                    const typedProp = prop;
                    const oldValue = obj[typedProp];
                    obj[typedProp] = value;
                    console.log(`[Proxy] ${prop} changed from`, oldValue, 'to', value);
                    this.notify(prop, value, oldValue);
                }
                return true;
            },
            deleteProperty: (obj, prop) => {
                if (typeof prop === 'string' && prop in obj) {
                    const typedProp = prop;
                    console.log(`[Proxy] ${typedProp} deleted.`);
                    this.notify(typedProp, undefined, obj[typedProp]);
                    delete obj[typedProp];
                }
                return true;
            }
        });
    }
    get(prop) {
        return this.data[prop];
    }
    // subscribe to property changes
    on(prop, callback) {
        if (!this.listeners[prop])
            this.listeners[prop] = [];
        this.listeners[prop].push(callback);
    }
    set(prop, value) {
        this.data[prop] = value;
    }
    // notify listeners when a property changes
    notify(prop, newValue, oldValue) {
        this.listeners[prop]?.forEach(callback => callback(newValue, oldValue));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YU9ic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi9zZXJ2aWNlcy9EYXRhT2JzZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBSXhDLE1BQU0sT0FBTyxZQUFZO0lBR2hCLElBQUksQ0FBSTtJQUNSLFNBQVMsR0FDaEIsRUFBNkMsQ0FBQztJQUUvQyxZQUFZLFdBQWM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDbEMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQXFCLEVBQUUsS0FBYyxFQUFFLEVBQUU7Z0JBQ25ELElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFDN0MsTUFBTSxTQUFTLEdBQUcsSUFBZSxDQUFDO29CQUNsQyxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBRWhDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFtQixDQUFDO29CQUVyQyxPQUFPLENBQUMsR0FBRyxDQUNWLFdBQVcsSUFBYyxlQUFlLEVBQ3hDLFFBQVEsRUFDUixJQUFJLEVBQ0osS0FBSyxDQUNMLENBQUM7b0JBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDbEQsQ0FBQztnQkFFRCxPQUFPLElBQUksQ0FBQztZQUNiLENBQUM7WUFDRCxjQUFjLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBcUIsRUFBRSxFQUFFO2dCQUM5QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7b0JBQzdDLE1BQU0sU0FBUyxHQUFHLElBQWUsQ0FBQztvQkFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLFNBQW1CLFdBQVcsQ0FBQyxDQUFDO29CQUN2RCxJQUFJLENBQUMsTUFBTSxDQUNWLFNBQW1CLEVBQ25CLFNBQXVCLEVBQ3ZCLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FDZCxDQUFDO29CQUNGLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN2QixDQUFDO2dCQUVELE9BQU8sSUFBSSxDQUFDO1lBQ2IsQ0FBQztTQUNELENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTSxHQUFHLENBQW9CLElBQU87UUFDcEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxnQ0FBZ0M7SUFDekIsRUFBRSxDQUFvQixJQUFPLEVBQUUsUUFBd0I7UUFDN0QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQXNCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFTSxHQUFHLENBQW9CLElBQU8sRUFBRSxLQUFXO1FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFRCwyQ0FBMkM7SUFDbkMsTUFBTSxDQUFvQixJQUFPLEVBQUUsUUFBYyxFQUFFLFFBQWM7UUFDeEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogY29tbW9uL3NlcnZpY2VzL0RhdGFPYnNlcnZlci5qc1xuXG5pbXBvcnQgeyBEYXRhT2JzZXJ2ZXJDbGFzc0ludGVyZmFjZSwgTGlzdGVuZXIgfSBmcm9tICcuLi8uLi90eXBlcy9pbmRleC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBEYXRhT2JzZXJ2ZXI8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+PlxuXHRpbXBsZW1lbnRzIERhdGFPYnNlcnZlckNsYXNzSW50ZXJmYWNlPFQ+XG57XG5cdHByaXZhdGUgZGF0YTogVDtcblx0cHJpdmF0ZSBsaXN0ZW5lcnM6IFBhcnRpYWw8UmVjb3JkPGtleW9mIFQsIExpc3RlbmVyPFRba2V5b2YgVF0+W10+PiA9XG5cdFx0e30gYXMgUmVjb3JkPGtleW9mIFQsIExpc3RlbmVyPFRba2V5b2YgVF0+W10+O1xuXG5cdGNvbnN0cnVjdG9yKGluaXRpYWxEYXRhOiBUKSB7XG5cdFx0dGhpcy5kYXRhID0gbmV3IFByb3h5KGluaXRpYWxEYXRhLCB7XG5cdFx0XHRzZXQ6IChvYmosIHByb3A6IHN0cmluZyB8IHN5bWJvbCwgdmFsdWU6IHVua25vd24pID0+IHtcblx0XHRcdFx0aWYgKHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJyAmJiBwcm9wIGluIG9iaikge1xuXHRcdFx0XHRcdGNvbnN0IHR5cGVkUHJvcCA9IHByb3AgYXMga2V5b2YgVDtcblx0XHRcdFx0XHRjb25zdCBvbGRWYWx1ZSA9IG9ialt0eXBlZFByb3BdO1xuXG5cdFx0XHRcdFx0b2JqW3R5cGVkUHJvcF0gPSB2YWx1ZSBhcyBUW2tleW9mIFRdO1xuXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXG5cdFx0XHRcdFx0XHRgW1Byb3h5XSAke3Byb3AgYXMgc3RyaW5nfSBjaGFuZ2VkIGZyb21gLFxuXHRcdFx0XHRcdFx0b2xkVmFsdWUsXG5cdFx0XHRcdFx0XHQndG8nLFxuXHRcdFx0XHRcdFx0dmFsdWVcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHRoaXMubm90aWZ5KHByb3AsIHZhbHVlIGFzIFRba2V5b2YgVF0sIG9sZFZhbHVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblx0XHRcdGRlbGV0ZVByb3BlcnR5OiAob2JqLCBwcm9wOiBzdHJpbmcgfCBzeW1ib2wpID0+IHtcblx0XHRcdFx0aWYgKHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJyAmJiBwcm9wIGluIG9iaikge1xuXHRcdFx0XHRcdGNvbnN0IHR5cGVkUHJvcCA9IHByb3AgYXMga2V5b2YgVDtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhgW1Byb3h5XSAke3R5cGVkUHJvcCBhcyBzdHJpbmd9IGRlbGV0ZWQuYCk7XG5cdFx0XHRcdFx0dGhpcy5ub3RpZnkoXG5cdFx0XHRcdFx0XHR0eXBlZFByb3AgYXMgc3RyaW5nLFxuXHRcdFx0XHRcdFx0dW5kZWZpbmVkIGFzIFRba2V5b2YgVF0sXG5cdFx0XHRcdFx0XHRvYmpbdHlwZWRQcm9wXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0ZGVsZXRlIG9ialt0eXBlZFByb3BdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihwcm9wOiBLKTogVFtLXSB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0YVtwcm9wXTtcblx0fVxuXG5cdC8vIHN1YnNjcmliZSB0byBwcm9wZXJ0eSBjaGFuZ2VzXG5cdHB1YmxpYyBvbjxLIGV4dGVuZHMga2V5b2YgVD4ocHJvcDogSywgY2FsbGJhY2s6IExpc3RlbmVyPFRbS10+KTogdm9pZCB7XG5cdFx0aWYgKCF0aGlzLmxpc3RlbmVyc1twcm9wXSkgdGhpcy5saXN0ZW5lcnNbcHJvcF0gPSBbXTtcblx0XHQodGhpcy5saXN0ZW5lcnNbcHJvcF0gYXMgTGlzdGVuZXI8VFtLXT5bXSkucHVzaChjYWxsYmFjayk7XG5cdH1cblxuXHRwdWJsaWMgc2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihwcm9wOiBLLCB2YWx1ZTogVFtLXSk6IHZvaWQge1xuXHRcdHRoaXMuZGF0YVtwcm9wXSA9IHZhbHVlO1xuXHR9XG5cblx0Ly8gbm90aWZ5IGxpc3RlbmVycyB3aGVuIGEgcHJvcGVydHkgY2hhbmdlc1xuXHRwcml2YXRlIG5vdGlmeTxLIGV4dGVuZHMga2V5b2YgVD4ocHJvcDogSywgbmV3VmFsdWU6IFRbS10sIG9sZFZhbHVlOiBUW0tdKSB7XG5cdFx0dGhpcy5saXN0ZW5lcnNbcHJvcF0/LmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sobmV3VmFsdWUsIG9sZFZhbHVlKSk7XG5cdH1cbn1cbiJdfQ==