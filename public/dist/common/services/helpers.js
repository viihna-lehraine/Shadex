// File: common/services/helpers.ts
// File: common/utils/getCallerInfo.ts
export const getCallerInfo = () => {
    const stack = new Error().stack;
    if (stack) {
        const stackLines = stack.split('\n');
        for (const line of stackLines) {
            if (!line.includes('AppLogger') &&
                !line.includes('ErrorHandler') &&
                !line.includes('createServices') &&
                line.includes('at ')) {
                const match = line.match(/at\s+(.*)\s+\((.*):(\d+):(\d+)\)/) ||
                    line.match(/at\s+(.*):(\d+):(\d+)/);
                if (match) {
                    return match[1]
                        ? `${match[1]} (${match[2]}:${match[3]})`
                        : `${match[2]}:${match[3]}`;
                }
            }
        }
    }
    return 'UNKNOWN CALLER';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vc2VydmljZXMvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFFbkMsc0NBQXNDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFXLEVBQUU7SUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFFaEMsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNYLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsS0FBSyxNQUFNLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUMvQixJQUNDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7Z0JBQzNCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7Z0JBQzlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFDbkIsQ0FBQztnQkFDRixNQUFNLEtBQUssR0FDVixJQUFJLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDO29CQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7Z0JBRXJDLElBQUksS0FBSyxFQUFFLENBQUM7b0JBQ1gsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDO3dCQUNkLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHO3dCQUN6QyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQzlCLENBQUM7WUFDRixDQUFDO1FBQ0YsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLGdCQUFnQixDQUFDO0FBQ3pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGNvbW1vbi9zZXJ2aWNlcy9oZWxwZXJzLnRzXG5cbi8vIEZpbGU6IGNvbW1vbi91dGlscy9nZXRDYWxsZXJJbmZvLnRzXG5cbmV4cG9ydCBjb25zdCBnZXRDYWxsZXJJbmZvID0gKCk6IHN0cmluZyA9PiB7XG5cdGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG5cblx0aWYgKHN0YWNrKSB7XG5cdFx0Y29uc3Qgc3RhY2tMaW5lcyA9IHN0YWNrLnNwbGl0KCdcXG4nKTtcblx0XHRmb3IgKGNvbnN0IGxpbmUgb2Ygc3RhY2tMaW5lcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbGluZS5pbmNsdWRlcygnQXBwTG9nZ2VyJykgJiZcblx0XHRcdFx0IWxpbmUuaW5jbHVkZXMoJ0Vycm9ySGFuZGxlcicpICYmXG5cdFx0XHRcdCFsaW5lLmluY2x1ZGVzKCdjcmVhdGVTZXJ2aWNlcycpICYmXG5cdFx0XHRcdGxpbmUuaW5jbHVkZXMoJ2F0ICcpXG5cdFx0XHQpIHtcblx0XHRcdFx0Y29uc3QgbWF0Y2ggPVxuXHRcdFx0XHRcdGxpbmUubWF0Y2goL2F0XFxzKyguKilcXHMrXFwoKC4qKTooXFxkKyk6KFxcZCspXFwpLykgfHxcblx0XHRcdFx0XHRsaW5lLm1hdGNoKC9hdFxccysoLiopOihcXGQrKTooXFxkKykvKTtcblxuXHRcdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hbMV1cblx0XHRcdFx0XHRcdD8gYCR7bWF0Y2hbMV19ICgke21hdGNoWzJdfToke21hdGNoWzNdfSlgXG5cdFx0XHRcdFx0XHQ6IGAke21hdGNoWzJdfToke21hdGNoWzNdfWA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gJ1VOS05PV04gQ0FMTEVSJztcbn07XG4iXX0=