{"version":3,"file":"logger.js","sources":["../../../../../src/common/factories/logger.ts"],"sourcesContent":["// File: common/factories/logger.js\n\nimport { MutationLog } from '../../types/index.js';\nimport { AppLogger } from '../logger/AppLogger.js';\nimport { modeData as mode } from '../../data/mode.js';\n\nconst debugLevel = mode.debugLevel;\n\nexport const createLogger = async () => {\n\tconsole.log('[FACTORIES.logger] Loading createLogger...');\n\tconst appLogger = AppLogger.getInstance();\n\tconsole.log(\n\t\t`[FACTORIES.logger] AppLogger.getInstance() returned:`,\n\t\tappLogger\n\t);\n\n\treturn {\n\t\tdebug: (message: string, caller?: string) =>\n\t\t\tappLogger.log(message, 'debug', debugLevel, caller),\n\t\tinfo: (message: string, caller?: string) =>\n\t\t\tappLogger.log(message, 'info', debugLevel, caller),\n\t\twarn: (message: string, caller?: string) =>\n\t\t\tappLogger.log(message, 'warn', debugLevel, caller),\n\t\terror: (message: string, caller?: string) =>\n\t\t\tappLogger.log(message, 'error', debugLevel, caller),\n\t\tmutation: (\n\t\t\tdata: MutationLog,\n\t\t\tlogCallback: (data: MutationLog) => void,\n\t\t\tcaller?: string\n\t\t) => {\n\t\t\tappLogger.logMutation(data, logCallback);\n\n\t\t\tif (caller) {\n\t\t\t\tappLogger.log(\n\t\t\t\t\t`Mutation logged by ${caller}`,\n\t\t\t\t\t'debug',\n\t\t\t\t\tdebugLevel\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport const createAsyncLogger = async () => {\n\tconst debugLevel = mode.debugLevel;\n\tconst appLogger = AppLogger.getInstance();\n\n\treturn {\n\t\tdebug: (message: string, caller?: string) =>\n\t\t\tappLogger.logAsync(message, 'debug', debugLevel, caller),\n\t\tinfo: (message: string, caller?: string) =>\n\t\t\tappLogger.logAsync(message, 'info', debugLevel, caller),\n\t\twarn: (message: string, caller?: string) =>\n\t\t\tappLogger.logAsync(message, 'warn', debugLevel, caller),\n\t\terror: (message: string, caller?: string) =>\n\t\t\tappLogger.logAsync(message, 'error', debugLevel, caller),\n\t\tmutation: (\n\t\t\tdata: MutationLog,\n\t\t\tlogCallback: (data: MutationLog) => void,\n\t\t\tcaller?: string\n\t\t) => {\n\t\t\tappLogger.logMutation(data, logCallback);\n\n\t\t\tif (caller) {\n\t\t\t\tappLogger.logAsync(\n\t\t\t\t\t`Mutation logged by ${caller}`,\n\t\t\t\t\t'debug',\n\t\t\t\t\tdebugLevel\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n};\n"],"names":["mode"],"mappings":";;;AAAA;AAMA,MAAM,UAAU,GAAGA,QAAI,CAAC,UAAU;AAErB,MAAA,YAAY,GAAG,YAAW;AACtC,IAAA,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC;AACzD,IAAA,MAAM,SAAS,GAAG,SAAS,CAAC,WAAW,EAAE;AACzC,IAAA,OAAO,CAAC,GAAG,CACV,sDAAsD,EACtD,SAAS,CACT;IAED,OAAO;AACN,QAAA,KAAK,EAAE,CAAC,OAAe,EAAE,MAAe,KACvC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC;AACpD,QAAA,IAAI,EAAE,CAAC,OAAe,EAAE,MAAe,KACtC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,CAAC;AACnD,QAAA,IAAI,EAAE,CAAC,OAAe,EAAE,MAAe,KACtC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,CAAC;AACnD,QAAA,KAAK,EAAE,CAAC,OAAe,EAAE,MAAe,KACvC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC;QACpD,QAAQ,EAAE,CACT,IAAiB,EACjB,WAAwC,EACxC,MAAe,KACZ;AACH,YAAA,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC;YAExC,IAAI,MAAM,EAAE;gBACX,SAAS,CAAC,GAAG,CACZ,CAAsB,mBAAA,EAAA,MAAM,CAAE,CAAA,EAC9B,OAAO,EACP,UAAU,CACV;;;KAGH;AACF;;;;"}