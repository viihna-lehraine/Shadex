{"version":3,"file":"services.js","sources":["../../../../../src/common/factories/services.ts"],"sourcesContent":["// File: common/factories/services.js\n\nimport { ServicesInterface } from '../../types/index.js';\nimport { createErrorHandler } from './errorHandler.js';\nimport { createLogger } from './logger.js';\nimport { data } from '../../data/index.js';\n\nconst mode = data.mode;\n\nexport async function createServices(): Promise<ServicesInterface> {\n\tconsole.log('[FACTORIES.service] Loading createServices...');\n\n\tconst logger = await createLogger();\n\tconst errors = await createErrorHandler();\n\n\tif (!logger || !errors) {\n\t\tthrow new Error(\n\t\t\t'[FACTORIES.service] Logger or ErrorHandler failed to initialize.'\n\t\t);\n\t}\n\n\t// Define logging function\n\tconst log: ServicesInterface['log'] = (\n\t\tlevel,\n\t\tmessage,\n\t\tmethod,\n\t\tverbosityRequirement\n\t) => {\n\t\tif (\n\t\t\tmode.logging[level] &&\n\t\t\tmode.logging.verbosity >= (verbosityRequirement ?? 0)\n\t\t) {\n\t\t\tlogger[level](message, method);\n\t\t}\n\n\t\tif (level === 'error' && mode.showAlerts) {\n\t\t\talert(message);\n\t\t}\n\t};\n\n\t// Return flattened services object\n\treturn { log, errors };\n}\n"],"names":[],"mappings":";;;;AAAA;AAOA,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI;AAEf,eAAe,cAAc,GAAA;AACnC,IAAA,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC;AAE5D,IAAA,MAAM,MAAM,GAAG,MAAM,YAAY,EAAE;AACnC,IAAA,MAAM,MAAM,GAAG,MAAM,kBAAkB,EAAE;AAEzC,IAAA,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;AACvB,QAAA,MAAM,IAAI,KAAK,CACd,kEAAkE,CAClE;;;IAIF,MAAM,GAAG,GAA6B,CACrC,KAAK,EACL,OAAO,EACP,MAAM,EACN,oBAAoB,KACjB;AACH,QAAA,IACC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YACnB,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,oBAAoB,IAAI,CAAC,CAAC,EACpD;YACD,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC;;AAMhC,KAAC;;AAGD,IAAA,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE;AACvB;;;;"}