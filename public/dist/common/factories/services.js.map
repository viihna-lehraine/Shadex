{"version":3,"file":"services.js","sources":["../../../../../src/common/factories/services.ts"],"sourcesContent":["// File: common/factories/services.ts\n\nimport { ServicesInterface } from '../../types/index.js';\nimport { AppLogger } from '../services/AppLogger.js';\nimport { ErrorHandler } from '../services/ErrorHandler.js';\nimport { config } from '../../config/index.js';\nimport { getCallerInfo } from '../services/helpers.js';\n\nconst mode = config.mode;\n\nexport function createServices(): ServicesInterface {\n\tconsole.log('[FACTORIES.service] Loading createServices...');\n\n\tconst logger = AppLogger.getInstance();\n\tconst errors = ErrorHandler.getInstance(logger);\n\n\tif (!logger || !errors) {\n\t\tthrow new Error(\n\t\t\t'[FACTORIES.service] Logger or ErrorHandler failed to initialize.'\n\t\t);\n\t}\n\n\tconst log: ServicesInterface['log'] = (\n\t\tmessage: string,\n\t\tlevel: 'debug' | 'info' | 'warn' | 'error' = 'info',\n\t\tverbosityRequirement: number = 0\n\t) => {\n\t\tif (mode.log[level] && mode.log.verbosity >= verbosityRequirement) {\n\t\t\tconst caller = getCallerInfo();\n\t\t\tlogger.log(message, level, caller);\n\t\t}\n\n\t\tif (level === 'error' && mode.showAlerts) {\n\t\t\talert(message);\n\t\t}\n\t};\n\n\treturn { log, errors };\n}\n"],"names":[],"mappings":";;;;;AAAA;AAQA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI;SAER,cAAc,GAAA;AAC7B,IAAA,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC;AAE5D,IAAA,MAAM,MAAM,GAAG,SAAS,CAAC,WAAW,EAAE;IACtC,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC;AAE/C,IAAA,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;AACvB,QAAA,MAAM,IAAI,KAAK,CACd,kEAAkE,CAClE;;IAGF,MAAM,GAAG,GAA6B,CACrC,OAAe,EACf,KAA6C,GAAA,MAAM,EACnD,oBAAA,GAA+B,CAAC,KAC7B;AACH,QAAA,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,oBAAoB,EAAE;AAClE,YAAA,MAAM,MAAM,GAAG,aAAa,EAAE;YAC9B,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC;;AAMpC,KAAC;AAED,IAAA,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE;AACvB;;;;"}