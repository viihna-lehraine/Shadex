// File: common/factories/utils.js
import { coreUtils } from '../utils/core.js';
import { typeGuards as typeGuardUtils } from '../utils/typeGuards.js';
export async function createUtils(helpers, services) {
    const utilities = {};
    // load independent utility groups
    utilities.core = coreUtils;
    utilities.typeGuards = typeGuardUtils;
    // dynamically import factories without calling them
    const { createAdjustmentUtils } = await import('../utils/adjust.js');
    const { createAppUtils } = await import('../utils/app.js');
    const { createBrandingUtils } = await import('../utils/brand.js');
    const { createColorUtils } = await import('../utils/color.js');
    const { createDOMUtils } = await import('../utils/dom.js');
    const { createFormattingUtils } = await import('../utils/format.js');
    const { createPaletteUtils } = await import('../utils/palette.js');
    const { createParsingUtils } = await import('../utils/parse.js');
    const { createSanitationUtils } = await import('../utils/sanitize.js');
    const { createValidationUtils } = await import('../utils/validate.js');
    utilities.adjust = createAdjustmentUtils(services, utilities);
    utilities.app = createAppUtils(services, utilities);
    utilities.brand = createBrandingUtils(utilities);
    utilities.color = createColorUtils(helpers, services, utilities);
    utilities.dom = createDOMUtils(services, utilities);
    utilities.format = createFormattingUtils(services, utilities);
    utilities.palette = createPaletteUtils(services, utilities);
    utilities.parse = createParsingUtils(services, utilities);
    utilities.sanitize = createSanitationUtils(utilities);
    utilities.validate = createValidationUtils(utilities);
    return utilities;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbW9uL2ZhY3Rvcmllcy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFPbEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLElBQUksY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdEUsTUFBTSxDQUFDLEtBQUssVUFBVSxXQUFXLENBQ2hDLE9BQXlCLEVBQ3pCLFFBQTJCO0lBRTNCLE1BQU0sU0FBUyxHQUFHLEVBQXdCLENBQUM7SUFFM0Msa0NBQWtDO0lBQ2xDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0lBQzNCLFNBQVMsQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDO0lBRXRDLG9EQUFvRDtJQUNwRCxNQUFNLEVBQUUscUJBQXFCLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNELE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbEUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUMvRCxNQUFNLEVBQUUsY0FBYyxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMzRCxNQUFNLEVBQUUscUJBQXFCLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDbkUsTUFBTSxFQUFFLGtCQUFrQixFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFFdkUsU0FBUyxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsU0FBUyxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BELFNBQVMsQ0FBQyxLQUFLLEdBQUcsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakQsU0FBUyxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pFLFNBQVMsQ0FBQyxHQUFHLEdBQUcsY0FBYyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNwRCxTQUFTLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5RCxTQUFTLENBQUMsT0FBTyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1RCxTQUFTLENBQUMsS0FBSyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxRCxTQUFTLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RELFNBQVMsQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdEQsT0FBTyxTQUErQixDQUFDO0FBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBjb21tb24vZmFjdG9yaWVzL3V0aWxzLmpzXG5cbmltcG9ydCB7XG5cdEhlbHBlcnNJbnRlcmZhY2UsXG5cdFNlcnZpY2VzSW50ZXJmYWNlLFxuXHRVdGlsaXRpZXNJbnRlcmZhY2Vcbn0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgY29yZVV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvY29yZS5qcyc7XG5pbXBvcnQgeyB0eXBlR3VhcmRzIGFzIHR5cGVHdWFyZFV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvdHlwZUd1YXJkcy5qcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVVdGlscyhcblx0aGVscGVyczogSGVscGVyc0ludGVyZmFjZSxcblx0c2VydmljZXM6IFNlcnZpY2VzSW50ZXJmYWNlXG4pOiBQcm9taXNlPFV0aWxpdGllc0ludGVyZmFjZT4ge1xuXHRjb25zdCB1dGlsaXRpZXMgPSB7fSBhcyBVdGlsaXRpZXNJbnRlcmZhY2U7XG5cblx0Ly8gbG9hZCBpbmRlcGVuZGVudCB1dGlsaXR5IGdyb3Vwc1xuXHR1dGlsaXRpZXMuY29yZSA9IGNvcmVVdGlscztcblx0dXRpbGl0aWVzLnR5cGVHdWFyZHMgPSB0eXBlR3VhcmRVdGlscztcblxuXHQvLyBkeW5hbWljYWxseSBpbXBvcnQgZmFjdG9yaWVzIHdpdGhvdXQgY2FsbGluZyB0aGVtXG5cdGNvbnN0IHsgY3JlYXRlQWRqdXN0bWVudFV0aWxzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3V0aWxzL2FkanVzdC5qcycpO1xuXHRjb25zdCB7IGNyZWF0ZUFwcFV0aWxzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3V0aWxzL2FwcC5qcycpO1xuXHRjb25zdCB7IGNyZWF0ZUJyYW5kaW5nVXRpbHMgfSA9IGF3YWl0IGltcG9ydCgnLi4vdXRpbHMvYnJhbmQuanMnKTtcblx0Y29uc3QgeyBjcmVhdGVDb2xvclV0aWxzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3V0aWxzL2NvbG9yLmpzJyk7XG5cdGNvbnN0IHsgY3JlYXRlRE9NVXRpbHMgfSA9IGF3YWl0IGltcG9ydCgnLi4vdXRpbHMvZG9tLmpzJyk7XG5cdGNvbnN0IHsgY3JlYXRlRm9ybWF0dGluZ1V0aWxzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3V0aWxzL2Zvcm1hdC5qcycpO1xuXHRjb25zdCB7IGNyZWF0ZVBhbGV0dGVVdGlscyB9ID0gYXdhaXQgaW1wb3J0KCcuLi91dGlscy9wYWxldHRlLmpzJyk7XG5cdGNvbnN0IHsgY3JlYXRlUGFyc2luZ1V0aWxzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3V0aWxzL3BhcnNlLmpzJyk7XG5cdGNvbnN0IHsgY3JlYXRlU2FuaXRhdGlvblV0aWxzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3V0aWxzL3Nhbml0aXplLmpzJyk7XG5cdGNvbnN0IHsgY3JlYXRlVmFsaWRhdGlvblV0aWxzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3V0aWxzL3ZhbGlkYXRlLmpzJyk7XG5cblx0dXRpbGl0aWVzLmFkanVzdCA9IGNyZWF0ZUFkanVzdG1lbnRVdGlscyhzZXJ2aWNlcywgdXRpbGl0aWVzKTtcblx0dXRpbGl0aWVzLmFwcCA9IGNyZWF0ZUFwcFV0aWxzKHNlcnZpY2VzLCB1dGlsaXRpZXMpO1xuXHR1dGlsaXRpZXMuYnJhbmQgPSBjcmVhdGVCcmFuZGluZ1V0aWxzKHV0aWxpdGllcyk7XG5cdHV0aWxpdGllcy5jb2xvciA9IGNyZWF0ZUNvbG9yVXRpbHMoaGVscGVycywgc2VydmljZXMsIHV0aWxpdGllcyk7XG5cdHV0aWxpdGllcy5kb20gPSBjcmVhdGVET01VdGlscyhzZXJ2aWNlcywgdXRpbGl0aWVzKTtcblx0dXRpbGl0aWVzLmZvcm1hdCA9IGNyZWF0ZUZvcm1hdHRpbmdVdGlscyhzZXJ2aWNlcywgdXRpbGl0aWVzKTtcblx0dXRpbGl0aWVzLnBhbGV0dGUgPSBjcmVhdGVQYWxldHRlVXRpbHMoc2VydmljZXMsIHV0aWxpdGllcyk7XG5cdHV0aWxpdGllcy5wYXJzZSA9IGNyZWF0ZVBhcnNpbmdVdGlscyhzZXJ2aWNlcywgdXRpbGl0aWVzKTtcblx0dXRpbGl0aWVzLnNhbml0aXplID0gY3JlYXRlU2FuaXRhdGlvblV0aWxzKHV0aWxpdGllcyk7XG5cdHV0aWxpdGllcy52YWxpZGF0ZSA9IGNyZWF0ZVZhbGlkYXRpb25VdGlscyh1dGlsaXRpZXMpO1xuXG5cdHJldHVybiB1dGlsaXRpZXMgYXMgVXRpbGl0aWVzSW50ZXJmYWNlO1xufVxuIl19