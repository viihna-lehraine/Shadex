// File: types/data.js
import { data } from '../data/index.js';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const sets = data.sets;
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"data.js","sourceRoot":"","sources":["../../../src/types/data.ts"],"names":[],"mappings":"AAAA,sBAAsB;AAEtB,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAExC,6DAA6D;AAC7D,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC","sourcesContent":["// File: types/data.js\n\nimport { data } from '../data/index.js';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst sets = data.sets;\n\n// ******** 1. APP CONFIGURATION ********\n\nexport type AppModeData = 'dev' | 'prod';\n\ninterface PaletteRangeShiftProperties {\n\thue: number;\n\tsat: number;\n\tlight: number;\n}\n\nexport interface ConfigData {\n\tadjustments: {\n\t\tslaValue: number;\n\t};\n\tappLimits: {\n\t\thistory: number;\n\t\tpaletteHistory: number;\n\t};\n\tdebounce: {\n\t\tbtn: number;\n\t\tinput: number;\n\t};\n\tpaletteRanges: {\n\t\tshift: {\n\t\t\tcomp: PaletteRangeShiftProperties;\n\t\t\tdiadic: PaletteRangeShiftProperties;\n\t\t\thexad: PaletteRangeShiftProperties;\n\t\t\trandom: PaletteRangeShiftProperties;\n\t\t\tsplitComp: PaletteRangeShiftProperties;\n\t\t\ttetra: PaletteRangeShiftProperties;\n\t\t\ttriad: PaletteRangeShiftProperties;\n\t\t};\n\t};\n\tprobabilities: {\n\t\tbase: {\n\t\t\tvalues: readonly number[];\n\t\t\tweights: readonly number[];\n\t\t};\n\t\tchaotic: {\n\t\t\tvalues: readonly number[];\n\t\t\tweights: readonly number[];\n\t\t};\n\t\tsoft: {\n\t\t\tvalues: readonly number[];\n\t\t\tweights: readonly number[];\n\t\t};\n\t\tstrong: {\n\t\t\tvalues: readonly number[];\n\t\t\tweights: readonly number[];\n\t\t};\n\t};\n\tregex: {\n\t\tbrand: {\n\t\t\thex: RegExp;\n\t\t};\n\t\tcolors: {\n\t\t\tcmyk: RegExp;\n\t\t\thex: RegExp;\n\t\t\thsl: RegExp;\n\t\t\thsv: RegExp;\n\t\t\tlab: RegExp;\n\t\t\trgb: RegExp;\n\t\t\txyz: RegExp;\n\t\t};\n\t\tcss: {\n\t\t\tcmyk: RegExp;\n\t\t\thsl: RegExp;\n\t\t\thsv: RegExp;\n\t\t\tlab: RegExp;\n\t\t\trgb: RegExp;\n\t\t\txyz: RegExp;\n\t\t};\n\t\tdom: {\n\t\t\thex: RegExp;\n\t\t\thsl: RegExp;\n\t\t\trgb: RegExp;\n\t\t};\n\t\tuserInput: {\n\t\t\thex: RegExp;\n\t\t\thsl: RegExp;\n\t\t\trgb: RegExp;\n\t\t};\n\t\tvalidation: {\n\t\t\thex: RegExp;\n\t\t\thexComponent: RegExp;\n\t\t};\n\t};\n\tthresholds: {\n\t\tdark: number;\n\t\tgray: number;\n\t\tlight: number;\n\t};\n\ttimers: {\n\t\tcopyButtonTextTimeout: number;\n\t\ttoast: number;\n\t\ttooltipFadeIn: number;\n\t\ttooltipFadeOut: number;\n\t};\n\tui: {\n\t\tminColumnSize: 5;\n\t\tmaxColumnSize: 70;\n\t};\n}\n\nexport interface DefaultData {\n\tcolors: {\n\t\tcmyk: CMYK;\n\t\thex: Hex;\n\t\thsl: HSL;\n\t\thsv: HSV;\n\t\tlab: LAB;\n\t\trgb: RGB;\n\t\tsl: SL;\n\t\tsv: SV;\n\t\txyz: XYZ;\n\t\tunbranded: {\n\t\t\tcmyk: UnbrandedCMYK;\n\t\t\thex: UnbrandedHex;\n\t\t\thsl: UnbrandedHSL;\n\t\t\thsv: UnbrandedHSV;\n\t\t\tlab: UnbrandedLAB;\n\t\t\trgb: UnbrandedRGB;\n\t\t\tsl: UnbrandedSL;\n\t\t\tsv: UnbrandedSV;\n\t\t\txyz: UnbrandedXYZ;\n\t\t};\n\t\tstrings: {\n\t\t\tcmyk: CMYKStringObject;\n\t\t\thex: HexStringObject;\n\t\t\thsl: HSLStringObject;\n\t\t\thsv: HSVStringObject;\n\t\t\tlab: LABStringObject;\n\t\t\trgb: RGBStringObject;\n\t\t\tsl: SLStringObject;\n\t\t\tsv: SVStringObject;\n\t\t\txyz: XYZStringObject;\n\t\t};\n\t\tcss: {\n\t\t\tcmyk: string;\n\t\t\thex: string;\n\t\t\thsl: string;\n\t\t\thsv: string;\n\t\t\tlab: string;\n\t\t\trgb: string;\n\t\t\tsl: string;\n\t\t\tsv: string;\n\t\t\txyz: string;\n\t\t};\n\t};\n\tmutation: MutationLog;\n\tpalette: Palette;\n\tpaletteItem: PaletteItem;\n\tpaletteOptions: SelectedPaletteOptions;\n\tstate: State;\n\tunbrandedPalette: UnbrandedPalette;\n\tunbrandedPaletteItem: UnbrandedPaletteItem;\n}\n\nexport interface DOMClasses {\n\tcolorDisplay: string;\n\tcolorInput: string;\n\tcolorInputBtn: string;\n\tcolorInputModal: string;\n\tcolorStripe: string;\n\tcolorSwatch: string;\n\tdragHandle: string;\n\thidden: string;\n\tlockBtn: string;\n\tlocked: string;\n\tmodal: string;\n\tmodalTrigger: string;\n\tpaletteColumn: string;\n\tresizeHandle: string;\n\ttooltipContainer: string;\n\ttooltipTrigger: string;\n}\n\nexport interface DOMDynamicIDs {\n\tdivs: {\n\t\tglobalTooltip: string;\n\t};\n}\n\nexport interface DOM_IDs {\n\tbtns: {\n\t\tdesaturate: string;\n\t\texport: string;\n\t\tgenerate: string;\n\t\thelpMenu: string;\n\t\thistoryMenu: string;\n\t\timport: string;\n\t\tsaturate: string;\n\t\tshowAsCMYK: string;\n\t\tshowAsHex: string;\n\t\tshowAsHSL: string;\n\t\tshowAsHSV: string;\n\t\tshowAsLAB: string;\n\t\tshowAsRGB: string;\n\t};\n\tdivs: {\n\t\thelpMenu: string;\n\t\thistoryMenu: string;\n\t\tpaletteContainer: string;\n\t\tpaletteHistory: string;\n\t};\n\tinputs: {\n\t\tcolumnCount: string;\n\t\tlimitDarkChkbx: string;\n\t\tlimitGrayChkbx: string;\n\t\tlimitLightChkbx: string;\n\t\tpaletteColumn: string;\n\t\tpaletteType: string;\n\t};\n}\n\nexport interface DOMData {\n\tclasses: DOMClasses;\n\tdynamicIDs: DOMDynamicIDs;\n\tids: DOM_IDs;\n}\n\nexport interface DOMElements {\n\tbtns: {\n\t\tdesaturate: HTMLButtonElement;\n\t\texport: HTMLButtonElement;\n\t\tgenerate: HTMLButtonElement;\n\t\thelpMenu: HTMLButtonElement;\n\t\thistoryMenu: HTMLButtonElement;\n\t\timport: HTMLButtonElement;\n\t\tsaturate: HTMLButtonElement;\n\t\tshowAsCMYK: HTMLButtonElement;\n\t\tshowAsHex: HTMLButtonElement;\n\t\tshowAsHSL: HTMLButtonElement;\n\t\tshowAsHSV: HTMLButtonElement;\n\t\tshowAsLAB: HTMLButtonElement;\n\t\tshowAsRGB: HTMLButtonElement;\n\t};\n\tdivs: {\n\t\thelpMenu: HTMLDivElement;\n\t\thistoryMenu: HTMLDivElement;\n\t\tpaletteContainer: HTMLDivElement;\n\t\tpaletteHistory: HTMLDivElement;\n\t};\n\tinputs: {\n\t\tcolumnCount: HTMLInputElement;\n\t\tlimitDarkChkbx: HTMLInputElement;\n\t\tlimitGrayChkbx: HTMLInputElement;\n\t\tlimitLightChkbx: HTMLInputElement;\n\t\tpaletteColumn: HTMLInputElement;\n\t\tpaletteType: HTMLInputElement;\n\t};\n}\n\nexport interface MathData {\n\tepsilon: number;\n\tlimits: {\n\t\tmaxX: number;\n\t\tmaxY: number;\n\t\tmaxZ: number;\n\t\tminX: number;\n\t\tminY: number;\n\t\tminZ: number;\n\t};\n}\n\nexport interface ModeData {\n\tdebug: boolean;\n\tdebugLevel: 0 | 1 | 2 | 3 | 4 | 5;\n\tenv: 'dev' | 'prod' | 'test';\n\texposeToWindow: boolean;\n\tlogging: {\n\t\targs: boolean;\n\t\tclicks: boolean;\n\t\tdebug: boolean;\n\t\terror: boolean;\n\t\tinfo: boolean;\n\t\tverbosity: 0 | 1 | 2 | 3 | 4 | 5;\n\t\twarn: boolean;\n\t};\n\tshowAlerts: boolean;\n\tstackTrace: boolean;\n}\n\nexport interface StorageData {\n\tidb: {\n\t\tdbName: string;\n\t\tdefaultVersion: number;\n\t\tstoreName: string;\n\t};\n}\n\nexport interface DataInterface {\n\tconfig: ConfigData;\n\tdefaults: DefaultData;\n\tdom: DOMData;\n\tmath: MathData;\n\tmode: ModeData;\n\tsets: SetsData;\n\tstorage: StorageData;\n}\n\n// ******** 2. SET DECLARATIONS ********\n\nexport type ByteRange = number & { __brand: 'ByteRange' };\n\nexport type HexSet = string & { __brand: 'HexSet' };\n\nexport type LAB_L = number & { __brand: 'LAB_L' };\n\nexport type LAB_A = number & { __brand: 'LAB_A' };\n\nexport type LAB_B = number & { __brand: 'LAB_B' };\n\nexport type Percentile = number & { __brand: 'Percentile' };\n\nexport type Radial = number & { __brand: 'Radial' };\n\nexport type XYZ_X = number & { __brand: 'XYZ_X' };\n\nexport type XYZ_Y = number & { __brand: 'XYZ_Y' };\n\nexport type XYZ_Z = number & { __brand: 'XYZ_Z' };\n\nexport type RangeKeyMap = {\n\tByteRange: ByteRange;\n\tHexSet: HexSet;\n\tLAB_L: LAB_L;\n\tLAB_A: LAB_A;\n\tLAB_B: LAB_B;\n\tPercentile: Percentile;\n\tRadial: Radial;\n\tXYZ_X: XYZ_X;\n\tXYZ_Y: XYZ_Y;\n\tXYZ_Z: XYZ_Z;\n};\n\nexport type ColorValueRange = RangeKeyMap[keyof RangeKeyMap];\n\nexport type NumericRangeKey = {\n\t[K in keyof typeof sets]: (typeof sets)[K] extends readonly [number, number]\n\t\t? K\n\t\t: never;\n}[keyof typeof sets & string];\n\nexport interface SetsData {\n\tByteRange: readonly [0, 255];\n\tHexSet: 'HexSet';\n\tLAB_L: readonly [0, 100];\n\tLAB_A: readonly [-128, 127];\n\tLAB_B: readonly [-128, 127];\n\tPercentile: readonly [0, 100];\n\tRadial: readonly [0, 360];\n\tXYZ_X: readonly [number, number];\n\tXYZ_Y: readonly [number, number];\n\tXYZ_Z: readonly [number, number];\n}\n\nexport type Sets = typeof sets;\n\n// ******** 3. BRANDED COLORS ********\n\nexport type CMYK = {\n\tvalue: {\n\t\tcyan: Percentile;\n\t\tmagenta: Percentile;\n\t\tyellow: Percentile;\n\t\tkey: Percentile;\n\t};\n\tformat: 'cmyk';\n};\n\nexport type Hex = {\n\tvalue: {\n\t\thex: HexSet;\n\t};\n\tformat: 'hex';\n};\n\nexport type HSL = {\n\tvalue: {\n\t\thue: Radial;\n\t\tsaturation: Percentile;\n\t\tlightness: Percentile;\n\t};\n\tformat: 'hsl';\n};\n\nexport type HSV = {\n\tvalue: {\n\t\thue: Radial;\n\t\tsaturation: Percentile;\n\t\tvalue: Percentile;\n\t};\n\tformat: 'hsv';\n};\n\nexport type LAB = {\n\tvalue: {\n\t\tl: LAB_L;\n\t\ta: LAB_A;\n\t\tb: LAB_B;\n\t};\n\tformat: 'lab';\n};\n\nexport type RGB = {\n\tvalue: {\n\t\tred: ByteRange;\n\t\tgreen: ByteRange;\n\t\tblue: ByteRange;\n\t};\n\tformat: 'rgb';\n};\n\nexport type SL = {\n\tvalue: {\n\t\tsaturation: Percentile;\n\t\tlightness: Percentile;\n\t};\n\tformat: 'sl';\n};\n\nexport type SV = {\n\tvalue: {\n\t\tsaturation: Percentile;\n\t\tvalue: Percentile;\n\t};\n\tformat: 'sv';\n};\n\nexport type XYZ = {\n\tvalue: {\n\t\tx: XYZ_X;\n\t\ty: XYZ_Y;\n\t\tz: XYZ_Z;\n\t};\n\tformat: 'xyz';\n};\n\n// ******** 4. COLORS (UNBRANDED PROPERTIES AS STRINGS) ********\n\nexport type CMYKStringObject = {\n\tvalue: {\n\t\tcyan: string;\n\t\tmagenta: string;\n\t\tyellow: string;\n\t\tkey: string;\n\t};\n\tformat: 'cmyk';\n};\n\nexport type HexStringObject = {\n\tvalue: {\n\t\thex: string;\n\t};\n\tformat: 'hex';\n};\n\nexport type HSLStringObject = {\n\tvalue: {\n\t\thue: string;\n\t\tsaturation: string;\n\t\tlightness: string;\n\t};\n\tformat: 'hsl';\n};\n\nexport type HSVStringObject = {\n\tvalue: {\n\t\thue: string;\n\t\tsaturation: string;\n\t\tvalue: string;\n\t};\n\tformat: 'hsv';\n};\n\nexport type LABStringObject = {\n\tvalue: {\n\t\tl: string;\n\t\ta: string;\n\t\tb: string;\n\t};\n\tformat: 'lab';\n};\n\nexport type RGBStringObject = {\n\tvalue: {\n\t\tred: string;\n\t\tgreen: string;\n\t\tblue: string;\n\t};\n\tformat: 'rgb';\n};\n\nexport type SLStringObject = {\n\tvalue: {\n\t\tsaturation: string;\n\t\tlightness: string;\n\t};\n\tformat: 'sl';\n};\n\nexport type SVStringObject = {\n\tvalue: {\n\t\tsaturation: string;\n\t\tvalue: string;\n\t};\n\tformat: 'sv';\n};\n\nexport type XYZStringObject = {\n\tvalue: {\n\t\tx: string;\n\t\ty: string;\n\t\tz: string;\n\t};\n\tformat: 'xyz';\n};\n\n// ******** 5. COLORS (UNBRANDED NUMERIC PROPERTIES) ********\n\nexport type UnbrandedCMYK = {\n\tvalue: {\n\t\tcyan: number;\n\t\tmagenta: number;\n\t\tyellow: number;\n\t\tkey: number;\n\t};\n\tformat: 'cmyk';\n};\n\nexport type UnbrandedHex = {\n\tvalue: {\n\t\thex: string;\n\t};\n\tformat: 'hex';\n};\n\nexport type UnbrandedHSL = {\n\tvalue: {\n\t\thue: number;\n\t\tsaturation: number;\n\t\tlightness: number;\n\t};\n\tformat: 'hsl';\n};\n\nexport type UnbrandedHSV = {\n\tvalue: {\n\t\thue: number;\n\t\tsaturation: number;\n\t\tvalue: number;\n\t};\n\tformat: 'hsv';\n};\n\nexport type UnbrandedLAB = {\n\tvalue: {\n\t\tl: number;\n\t\ta: number;\n\t\tb: number;\n\t};\n\tformat: 'lab';\n};\n\nexport type UnbrandedRGB = {\n\tvalue: {\n\t\tred: number;\n\t\tgreen: number;\n\t\tblue: number;\n\t};\n\tformat: 'rgb';\n};\n\nexport type UnbrandedSL = {\n\tvalue: {\n\t\tsaturation: number;\n\t\tlightness: number;\n\t};\n\tformat: 'sl';\n};\n\nexport type UnbrandedSV = {\n\tvalue: {\n\t\tsaturation: number;\n\t\tvalue: number;\n\t};\n\tformat: 'sv';\n};\n\nexport type UnbrandedXYZ = {\n\tvalue: {\n\t\tx: number;\n\t\ty: number;\n\t\tz: number;\n\t};\n\tformat: 'xyz';\n};\n\n// ******** 6. COMPOSITE COLOR INTERFACES AND TYPES ********\n\nexport interface AllColors {\n\tcmyk: CMYK;\n\thex: Hex;\n\thsl: HSL;\n\thsv: HSV;\n\tlab: LAB;\n\trgb: RGB;\n\tsl: SL;\n\tsv: SV;\n\txyz: XYZ;\n}\n\nexport type Color = CMYK | Hex | HSL | HSV | LAB | RGB | SL | SV | XYZ;\n\nexport interface ColorData {\n\tcmyk?: CMYK;\n\thex?: Hex;\n\thsl?: HSL;\n\thsv?: HSV;\n\tlab?: LAB;\n\trgb?: RGB;\n\txyz?: XYZ;\n}\n\nexport interface ColorDataAssertion {\n\tcmyk: CMYK;\n\thex: Hex;\n\thsl: HSL;\n\thsv: HSV;\n\tlab: LAB;\n\trgb: RGB;\n\txyz: XYZ;\n}\n\nexport interface ColorDataExtended extends ColorData {\n\tsl?: SL;\n\tsv?: SV;\n}\n\nexport type ColorFormat = keyof ColorSpace | 'sl' | 'sv';\n\nexport type ColorSpace = 'cmyk' | 'hex' | 'hsl' | 'hsv' | 'lab' | 'rgb' | 'xyz';\n\nexport type ColorSpaceExtended = ColorSpace | 'sl' | 'sv';\n\nexport type ColorStringObject =\n\t| CMYKStringObject\n\t| HexStringObject\n\t| HSLStringObject\n\t| HSVStringObject\n\t| LABStringObject\n\t| RGBStringObject\n\t| SLStringObject\n\t| SVStringObject\n\t| XYZStringObject;\n\nexport type UnbrandedColor =\n\t| UnbrandedCMYK\n\t| UnbrandedHex\n\t| UnbrandedHSL\n\t| UnbrandedHSV\n\t| UnbrandedLAB\n\t| UnbrandedRGB\n\t| UnbrandedSL\n\t| UnbrandedSV\n\t| UnbrandedXYZ;\n\n// ******** 7. OTHER APPLICATION TYPES AND INTERFACES ********\n\nexport interface ColorInputElement extends HTMLInputElement {\n\tcolorValues?: Color;\n}\n\nexport type History = State[];\n\nexport interface MutationLog {\n\ttimestamp: string;\n\tkey: string;\n\taction: 'add' | 'delete' | 'update';\n\tnewValue: unknown;\n\toldValue: unknown;\n\torigin: string;\n}\n\nexport interface Palette {\n\tid: string;\n\titems: PaletteItem[]; // [ color1, color2, color3, color4 ]\n\tmetadata: {\n\t\tname?: string;\n\t\tcolumnCount: number;\n\t\tflags: {\n\t\t\tlimitDark: boolean;\n\t\t\tlimitGray: boolean;\n\t\t\tlimitLight: boolean;\n\t\t};\n\t\ttimestamp: string;\n\t\ttype: PaletteType;\n\t};\n}\n\nexport type PaletteType =\n\t| 'analogous'\n\t| 'complementary'\n\t| 'custom'\n\t| 'diadic'\n\t| 'monochromatic'\n\t| 'hexadic'\n\t| 'random'\n\t| 'split-complementary'\n\t| 'tetradic'\n\t| 'triadic';\n\nexport interface PaletteItem {\n\titemID: number;\n\tcolors: {\n\t\tcmyk: CMYK['value'];\n\t\thex: Hex['value'];\n\t\thsl: HSL['value'];\n\t\thsv: HSV['value'];\n\t\tlab: LAB['value'];\n\t\trgb: RGB['value'];\n\t\txyz: XYZ['value'];\n\t};\n\tcss: {\n\t\tcmyk: string;\n\t\thex: string;\n\t\thsl: string;\n\t\thsv: string;\n\t\tlab: string;\n\t\trgb: string;\n\t\txyz: string;\n\t};\n}\n\nexport interface SelectedPaletteOptions {\n\tcolumnCount: number;\n\tdistributionType: keyof ConfigData['probabilities'];\n\tlimitDark: boolean;\n\tlimitGray: boolean;\n\tlimitLight: boolean;\n\tpaletteType: PaletteType;\n}\n\nexport interface State {\n\tappMode: 'edit' | 'export' | 'preview';\n\tpaletteHistory: Palette[];\n\tpaletteContainer: {\n\t\tcolumns: {\n\t\t\tid: number;\n\t\t\tisLocked: boolean;\n\t\t\tposition: number;\n\t\t\tsize: number;\n\t\t}[];\n\t};\n\tpreferences: {\n\t\tcolorSpace: ColorSpace;\n\t\tdistributionType: keyof ConfigData['probabilities'];\n\t\tmaxHistory: number;\n\t\tmaxPaletteHistory: number;\n\t\ttheme: 'light' | 'dark';\n\t};\n\tselections: {\n\t\tpaletteColumnCount: number;\n\t\tpaletteType: PaletteType;\n\t\ttargetedColumnPosition: number;\n\t};\n\ttimestamp: string;\n}\n\nexport interface UnbrandedPaletteItem {\n\titemID: number;\n\tcolors: {\n\t\tcmyk: UnbrandedCMYK['value'];\n\t\thex: UnbrandedHex['value'];\n\t\thsl: UnbrandedHSL['value'];\n\t\thsv: UnbrandedHSV['value'];\n\t\tlab: UnbrandedLAB['value'];\n\t\trgb: UnbrandedRGB['value'];\n\t\txyz: UnbrandedXYZ['value'];\n\t};\n\tcss: {\n\t\tcmyk: string;\n\t\thex: string;\n\t\thsl: string;\n\t\thsv: string;\n\t\tlab: string;\n\t\trgb: string;\n\t\txyz: string;\n\t};\n}\n\nexport interface UnbrandedPalette {\n\tid: string;\n\titems: UnbrandedPaletteItem[];\n\tmetadata: {\n\t\tname?: string;\n\t\tcolumnCount: number;\n\t\tflags: {\n\t\t\tlimitDark: boolean;\n\t\t\tlimitGray: boolean;\n\t\t\tlimitLight: boolean;\n\t\t};\n\t\ttimestamp: string;\n\t\ttype: PaletteType;\n\t};\n}\n\n// ******** 8. GENERICS ********\n\nexport type Listener<T> = (newValue: T, oldValue: T) => void;\n"]}