// File: types/config.ts
import { config } from '../config/index.js';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const sets = config.sets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3R5cGVzL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0I7QUFFeEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTVDLDZEQUE2RDtBQUM3RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogdHlwZXMvY29uZmlnLnRzXG5cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9pbmRleC5qcyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmNvbnN0IHNldHMgPSBjb25maWcuc2V0cztcblxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLy8gKioqKioqKioqKioqKioqKioqKiAxLiBET00gSU5ERVggKioqKioqKioqKioqKioqKioqKioqKlxuLy8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuZXhwb3J0IGludGVyZmFjZSBET01JbmRleCB7XG5cdGNsYXNzZXM6IHtcblx0XHRjb2xvckRpc3BsYXk6IHN0cmluZztcblx0XHRjb2xvcklucHV0OiBzdHJpbmc7XG5cdFx0Y29sb3JJbnB1dEJ0bjogc3RyaW5nO1xuXHRcdGNvbG9ySW5wdXRNb2RhbDogc3RyaW5nO1xuXHRcdGNvbG9yU3RyaXBlOiBzdHJpbmc7XG5cdFx0Y29sb3JTd2F0Y2g6IHN0cmluZztcblx0XHRkcmFnSGFuZGxlOiBzdHJpbmc7XG5cdFx0aGlkZGVuOiBzdHJpbmc7XG5cdFx0bG9ja0J0bjogc3RyaW5nO1xuXHRcdGxvY2tlZDogc3RyaW5nO1xuXHRcdG1vZGFsOiBzdHJpbmc7XG5cdFx0bW9kYWxUcmlnZ2VyOiBzdHJpbmc7XG5cdFx0cGFsZXR0ZUNvbHVtbjogc3RyaW5nO1xuXHRcdHJlc2l6ZUhhbmRsZTogc3RyaW5nO1xuXHRcdHRvb2x0aXBDb250YWluZXI6IHN0cmluZztcblx0XHR0b29sdGlwVHJpZ2dlcjogc3RyaW5nO1xuXHR9O1xuXHRkeW5hbWljSURzOiB7IGdsb2JhbFRvb2x0aXBEaXY6IHN0cmluZyB9O1xuXHRpZHM6IHtcblx0XHRidG5zOiB7XG5cdFx0XHRkZXNhdHVyYXRlOiBzdHJpbmc7XG5cdFx0XHRleHBvcnQ6IHN0cmluZztcblx0XHRcdGdlbmVyYXRlOiBzdHJpbmc7XG5cdFx0XHRoZWxwTWVudTogc3RyaW5nO1xuXHRcdFx0aGlzdG9yeU1lbnU6IHN0cmluZztcblx0XHRcdGltcG9ydDogc3RyaW5nO1xuXHRcdFx0c2F0dXJhdGU6IHN0cmluZztcblx0XHRcdHNob3dBc0NNWUs6IHN0cmluZztcblx0XHRcdHNob3dBc0hleDogc3RyaW5nO1xuXHRcdFx0c2hvd0FzSFNMOiBzdHJpbmc7XG5cdFx0XHRzaG93QXNIU1Y6IHN0cmluZztcblx0XHRcdHNob3dBc0xBQjogc3RyaW5nO1xuXHRcdFx0c2hvd0FzUkdCOiBzdHJpbmc7XG5cdFx0fTtcblx0XHRkaXZzOiB7XG5cdFx0XHRoZWxwTWVudTogc3RyaW5nO1xuXHRcdFx0aGlzdG9yeU1lbnU6IHN0cmluZztcblx0XHRcdHBhbGV0dGVDb250YWluZXI6IHN0cmluZztcblx0XHRcdHBhbGV0dGVIaXN0b3J5OiBzdHJpbmc7XG5cdFx0fTtcblx0XHRpbnB1dHM6IHtcblx0XHRcdGNvbHVtbkNvdW50OiBzdHJpbmc7XG5cdFx0XHRsaW1pdERhcmtDaGtieDogc3RyaW5nO1xuXHRcdFx0bGltaXRHcmF5Q2hrYng6IHN0cmluZztcblx0XHRcdGxpbWl0TGlnaHRDaGtieDogc3RyaW5nO1xuXHRcdFx0cGFsZXR0ZUNvbHVtbjogc3RyaW5nO1xuXHRcdFx0cGFsZXR0ZVR5cGU6IHN0cmluZztcblx0XHR9O1xuXHR9O1xufVxuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vLyAqKioqKioqKioqKioqKioqIDIuIERPTSBDT05GSUdVUkFSVElPTiAqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgaW50ZXJmYWNlIERPTUNvbmZpZyB7XG5cdGJ0bkRlYm91bmNlOiBudW1iZXI7XG5cdGNvcHlCdXR0b25UZXh0VGltZW91dDogbnVtYmVyO1xuXHRpbnB1dERlYm91bmNlOiBudW1iZXI7XG5cdG1pbkNvbHVtblNpemU6IDU7XG5cdG1heENvbHVtblNpemU6IDcwO1xuXHR0b2FzdFRpbWVyOiBudW1iZXI7XG5cdHRvb2x0aXBGYWRlSW46IG51bWJlcjtcblx0dG9vbHRpcEZhZGVPdXQ6IG51bWJlcjtcbn1cblxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLy8gKioqKioqKioqKioqKioqKiAzLiBQQUxFVFRFIENPTkZJR1VSQVJUSU9OICoqKioqKioqKioqKipcbi8vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvYmFiaWxpdHlQcm9wZXJ0aWVzIHtcblx0dmFsdWVzOiByZWFkb25seSBudW1iZXJbXTtcblx0d2VpZ2h0czogcmVhZG9ubHkgbnVtYmVyW107XG59XG5cbmludGVyZmFjZSBQYWxldHRlU2hpZnRSYW5nZSB7XG5cdGh1ZTogbnVtYmVyO1xuXHRzYXQ6IG51bWJlcjtcblx0bGlnaHQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlQ29uZmlnIHtcblx0YWRqdXN0bWVudDoge1xuXHRcdHNsYVZhbHVlOiBudW1iZXI7XG5cdH07XG5cdHByb2JhYmlsaXRpZXM6IHtcblx0XHRiYXNlOiBQcm9iYWJpbGl0eVByb3BlcnRpZXM7XG5cdFx0Y2hhb3RpYzogUHJvYmFiaWxpdHlQcm9wZXJ0aWVzO1xuXHRcdHNvZnQ6IFByb2JhYmlsaXR5UHJvcGVydGllcztcblx0XHRzdHJvbmc6IFByb2JhYmlsaXR5UHJvcGVydGllcztcblx0fTtcblx0c2hpZnRSYW5nZXM6IFJlY29yZDxQYWxldHRlVHlwZSwgUGFsZXR0ZVNoaWZ0UmFuZ2U+O1xuXHR0aHJlc2hvbGRzOiB7XG5cdFx0ZGFyazogbnVtYmVyO1xuXHRcdGdyYXk6IG51bWJlcjtcblx0XHRsaWdodDogbnVtYmVyO1xuXHR9O1xufVxuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLy8gKioqKioqKioqKioqKioqKioqKiA0LiBSRUdFWCAqKioqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuZXhwb3J0IGludGVyZmFjZSBSZWdleENvbmZpZyB7XG5cdGJyYW5kOiB7XG5cdFx0aGV4OiBSZWdFeHA7XG5cdH07XG5cdGNvbG9yczoge1xuXHRcdGNteWs6IFJlZ0V4cDtcblx0XHRoZXg6IFJlZ0V4cDtcblx0XHRoc2w6IFJlZ0V4cDtcblx0XHRoc3Y6IFJlZ0V4cDtcblx0XHRsYWI6IFJlZ0V4cDtcblx0XHRyZ2I6IFJlZ0V4cDtcblx0XHR4eXo6IFJlZ0V4cDtcblx0fTtcblx0Y3NzOiB7XG5cdFx0Y215azogUmVnRXhwO1xuXHRcdGhzbDogUmVnRXhwO1xuXHRcdGhzdjogUmVnRXhwO1xuXHRcdGxhYjogUmVnRXhwO1xuXHRcdHJnYjogUmVnRXhwO1xuXHRcdHh5ejogUmVnRXhwO1xuXHR9O1xuXHRkb206IHtcblx0XHRoZXg6IFJlZ0V4cDtcblx0XHRoc2w6IFJlZ0V4cDtcblx0XHRyZ2I6IFJlZ0V4cDtcblx0fTtcblx0c3RhY2tUcmFjZToge1xuXHRcdHdpdGhGbjogUmVnRXhwO1xuXHRcdHdpdGhvdXRGbjogUmVnRXhwO1xuXHR9O1xuXHR1c2VySW5wdXQ6IHtcblx0XHRoZXg6IFJlZ0V4cDtcblx0XHRoc2w6IFJlZ0V4cDtcblx0XHRyZ2I6IFJlZ0V4cDtcblx0fTtcblx0dmFsaWRhdGlvbjoge1xuXHRcdGhleDogUmVnRXhwO1xuXHRcdGhleENvbXBvbmVudDogUmVnRXhwO1xuXHR9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVudkRhdGEge1xuXHRhcHBIaXN0b3J5TGltaXQ6IG51bWJlcjtcblx0YXBwUGFsZXR0ZUhpc3RvcnlMaW1pdDogbnVtYmVyO1xuXHRvYnNlcnZlckRlYm91bmNlOiBudW1iZXI7XG5cdHNlbWFwaG9yZU1heExvY2tzOiBudW1iZXI7XG5cdHNlbWFwaG9yZVRpbWVvdXQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmF0aW9uIHtcblx0ZW52OiBFbnZEYXRhO1xuXHRtYXRoOiB7XG5cdFx0ZXBzaWxvbjogbnVtYmVyO1xuXHRcdG1heFhZWl9YOiBudW1iZXI7XG5cdFx0bWF4WFlaX1k6IG51bWJlcjtcblx0XHRtYXhYWVpfWjogbnVtYmVyO1xuXHRcdG1pblhZWl9YOiBudW1iZXI7XG5cdFx0bWluWFlaX1k6IG51bWJlcjtcblx0XHRtaW5YWVpfWjogbnVtYmVyO1xuXHR9O1xuXHRtb2RlOiB7XG5cdFx0ZGVidWdMZXZlbDogMCB8IDEgfCAyIHwgMyB8IDQgfCA1O1xuXHRcdGVudjogJ2RldicgfCAncHJvZCcgfCAndGVzdCc7XG5cdFx0ZXhwb3NlQ2xhc3NlczogYm9vbGVhbjtcblx0XHRsb2c6IHtcblx0XHRcdGRlYnVnOiBib29sZWFuO1xuXHRcdFx0ZXJyb3I6IGJvb2xlYW47XG5cdFx0XHRpbmZvOiBib29sZWFuO1xuXHRcdFx0dmVyYm9zaXR5OiAwIHwgMSB8IDIgfCAzIHwgNCB8IDU7XG5cdFx0XHR3YXJuOiBib29sZWFuO1xuXHRcdH07XG5cdFx0c2hvd0FsZXJ0czogYm9vbGVhbjtcblx0XHRzdGFja1RyYWNlOiBib29sZWFuO1xuXHR9O1xuXHRzZXRzOiB7XG5cdFx0Qnl0ZVJhbmdlOiByZWFkb25seSBbMCwgMjU1XTtcblx0XHRIZXhTZXQ6ICdIZXhTZXQnO1xuXHRcdExBQl9MOiByZWFkb25seSBbMCwgMTAwXTtcblx0XHRMQUJfQTogcmVhZG9ubHkgWy0xMjgsIDEyN107XG5cdFx0TEFCX0I6IHJlYWRvbmx5IFstMTI4LCAxMjddO1xuXHRcdFBlcmNlbnRpbGU6IHJlYWRvbmx5IFswLCAxMDBdO1xuXHRcdFJhZGlhbDogcmVhZG9ubHkgWzAsIDM2MF07XG5cdFx0WFlaX1g6IHJlYWRvbmx5IFtudW1iZXIsIG51bWJlcl07XG5cdFx0WFlaX1k6IHJlYWRvbmx5IFtudW1iZXIsIG51bWJlcl07XG5cdFx0WFlaX1o6IHJlYWRvbmx5IFtudW1iZXIsIG51bWJlcl07XG5cdH07XG5cdHN0b3JhZ2U6IHtcblx0XHRpZGJEQk5hbWU6IHN0cmluZztcblx0XHRpZGJEZWZhdWx0VmVyc2lvbjogbnVtYmVyO1xuXHRcdGlkYlN0b3JlTmFtZTogc3RyaW5nO1xuXHR9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRzIHtcblx0Y29sb3JzOiB7XG5cdFx0Y215azogQ01ZSztcblx0XHRoZXg6IEhleDtcblx0XHRoc2w6IEhTTDtcblx0XHRoc3Y6IEhTVjtcblx0XHRsYWI6IExBQjtcblx0XHRyZ2I6IFJHQjtcblx0XHRzbDogU0w7XG5cdFx0c3Y6IFNWO1xuXHRcdHh5ejogWFlaO1xuXHRcdGNteWtOdW06IENNWUtOdW1NYXA7XG5cdFx0aHNsTnVtOiBIU0xOdW1NYXA7XG5cdFx0aHN2TnVtOiBIU1ZOdW1NYXA7XG5cdFx0bGFiTnVtOiBMQUJOdW1NYXA7XG5cdFx0cmdiTnVtOiBSR0JOdW1NYXA7XG5cdFx0c2xOdW06IFNMTnVtTWFwO1xuXHRcdHN2TnVtOiBTVk51bU1hcDtcblx0XHR4eXpOdW06IFhZWk51bU1hcDtcblx0XHRjbXlrU3RyaW5nOiBDTVlLU3RyaW5nTWFwO1xuXHRcdGhleFN0cmluZzogSGV4U3RyaW5nTWFwO1xuXHRcdGhzbFN0cmluZzogSFNMU3RyaW5nTWFwO1xuXHRcdGhzdlN0cmluZzogSFNWU3RyaW5nTWFwO1xuXHRcdGxhYlN0cmluZzogTEFCU3RyaW5nTWFwO1xuXHRcdHJnYlN0cmluZzogUkdCU3RyaW5nTWFwO1xuXHRcdHNsU3RyaW5nOiBTTFN0cmluZ01hcDtcblx0XHRzdlN0cmluZzogU1ZTdHJpbmdNYXA7XG5cdFx0eHl6U3RyaW5nOiBYWVpTdHJpbmdNYXA7XG5cdFx0Y215a0NTUzogc3RyaW5nO1xuXHRcdGhleENTUzogc3RyaW5nO1xuXHRcdGhzbENTUzogc3RyaW5nO1xuXHRcdGhzdkNTUzogc3RyaW5nO1xuXHRcdGxhYkNTUzogc3RyaW5nO1xuXHRcdHJnYkNTUzogc3RyaW5nO1xuXHRcdHNsQ1NTOiBzdHJpbmc7XG5cdFx0c3ZDU1M6IHN0cmluZztcblx0XHR4eXpDU1M6IHN0cmluZztcblx0fTtcblx0bXV0YXRpb246IE11dGF0aW9uTG9nO1xuXHRvYnNlcnZlckRhdGE6IERlZmF1bHRPYnNlcnZlckRhdGE7XG5cdHBhbGV0dGU6IFBhbGV0dGU7XG5cdHBhbGV0dGVJdGVtOiBQYWxldHRlSXRlbTtcblx0cGFsZXR0ZU9wdGlvbnM6IFNlbGVjdGVkUGFsZXR0ZU9wdGlvbnM7XG5cdHN0YXRlOiBTdGF0ZTtcblx0dW5icmFuZGVkUGFsZXR0ZTogVW5icmFuZGVkUGFsZXR0ZTtcblx0dW5icmFuZGVkUGFsZXR0ZUl0ZW06IFVuYnJhbmRlZFBhbGV0dGVJdGVtO1xufVxuXG5leHBvcnQgdHlwZSBEZWZhdWx0T2JzZXJ2ZXJEYXRhID0geyBjb3VudDogbnVtYmVyOyBuYW1lOiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgTWF0aERhdGEgPSBDb25maWd1cmF0aW9uWydtYXRoJ107XG5cbmV4cG9ydCB0eXBlIE1vZGVEYXRhID0gQ29uZmlndXJhdGlvblsnbW9kZSddO1xuXG5leHBvcnQgdHlwZSBTZXRzRGF0YSA9IENvbmZpZ3VyYXRpb25bJ3NldHMnXTtcblxuZXhwb3J0IHR5cGUgU3RvcmFnZURhdGEgPSBDb25maWd1cmF0aW9uWydzdG9yYWdlJ107XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLy8gKioqKioqKioqKioqKioqKioqKiA1LiBTRVQgREVDTEFSQVRJT05TICoqKioqKioqKioqKioqKioqKipcbi8vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuZXhwb3J0IHR5cGUgQnl0ZVJhbmdlID0gbnVtYmVyICYgeyBfX2JyYW5kOiAnQnl0ZVJhbmdlJyB9O1xuXG5leHBvcnQgdHlwZSBIZXhTZXQgPSBzdHJpbmcgJiB7IF9fYnJhbmQ6ICdIZXhTZXQnIH07XG5cbmV4cG9ydCB0eXBlIExBQl9MID0gbnVtYmVyICYgeyBfX2JyYW5kOiAnTEFCX0wnIH07XG5cbmV4cG9ydCB0eXBlIExBQl9BID0gbnVtYmVyICYgeyBfX2JyYW5kOiAnTEFCX0EnIH07XG5cbmV4cG9ydCB0eXBlIExBQl9CID0gbnVtYmVyICYgeyBfX2JyYW5kOiAnTEFCX0InIH07XG5cbmV4cG9ydCB0eXBlIFBlcmNlbnRpbGUgPSBudW1iZXIgJiB7IF9fYnJhbmQ6ICdQZXJjZW50aWxlJyB9O1xuXG5leHBvcnQgdHlwZSBSYWRpYWwgPSBudW1iZXIgJiB7IF9fYnJhbmQ6ICdSYWRpYWwnIH07XG5cbmV4cG9ydCB0eXBlIFhZWl9YID0gbnVtYmVyICYgeyBfX2JyYW5kOiAnWFlaX1gnIH07XG5cbmV4cG9ydCB0eXBlIFhZWl9ZID0gbnVtYmVyICYgeyBfX2JyYW5kOiAnWFlaX1knIH07XG5cbmV4cG9ydCB0eXBlIFhZWl9aID0gbnVtYmVyICYgeyBfX2JyYW5kOiAnWFlaX1onIH07XG5cbmV4cG9ydCB0eXBlIFJhbmdlS2V5TWFwID0ge1xuXHRCeXRlUmFuZ2U6IEJ5dGVSYW5nZTtcblx0SGV4U2V0OiBIZXhTZXQ7XG5cdExBQl9MOiBMQUJfTDtcblx0TEFCX0E6IExBQl9BO1xuXHRMQUJfQjogTEFCX0I7XG5cdFBlcmNlbnRpbGU6IFBlcmNlbnRpbGU7XG5cdFJhZGlhbDogUmFkaWFsO1xuXHRYWVpfWDogWFlaX1g7XG5cdFhZWl9ZOiBYWVpfWTtcblx0WFlaX1o6IFhZWl9aO1xufTtcblxuZXhwb3J0IHR5cGUgQ29sb3JWYWx1ZVJhbmdlID0gUmFuZ2VLZXlNYXBba2V5b2YgUmFuZ2VLZXlNYXBdO1xuXG5leHBvcnQgdHlwZSBOdW1lcmljUmFuZ2VLZXkgPSB7XG5cdFtLIGluIGtleW9mIHR5cGVvZiBzZXRzXTogKHR5cGVvZiBzZXRzKVtLXSBleHRlbmRzIHJlYWRvbmx5IFtudW1iZXIsIG51bWJlcl1cblx0XHQ/IEtcblx0XHQ6IG5ldmVyO1xufVtrZXlvZiB0eXBlb2Ygc2V0cyAmIHN0cmluZ107XG5cbmV4cG9ydCB0eXBlIE51bWVyaWNCcmFuZGVkVHlwZSA9XG5cdHwgQnl0ZVJhbmdlXG5cdHwgTEFCX0Fcblx0fCBMQUJfQlxuXHR8IExBQl9MXG5cdHwgUGVyY2VudGlsZVxuXHR8IFJhZGlhbFxuXHR8IFhZWl9YXG5cdHwgWFlaX1lcblx0fCBYWVpfWjtcblxuZXhwb3J0IHR5cGUgU2V0cyA9IHR5cGVvZiBzZXRzO1xuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8vICoqKioqKioqKioqKioqKioqIDYuIEJSQU5ERUQgQ09MT1JTICoqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbmV4cG9ydCB0eXBlIENNWUsgPSB7XG5cdHZhbHVlOiB7XG5cdFx0Y3lhbjogUGVyY2VudGlsZTtcblx0XHRtYWdlbnRhOiBQZXJjZW50aWxlO1xuXHRcdHllbGxvdzogUGVyY2VudGlsZTtcblx0XHRrZXk6IFBlcmNlbnRpbGU7XG5cdH07XG5cdGZvcm1hdDogJ2NteWsnO1xufTtcblxuZXhwb3J0IHR5cGUgSGV4ID0ge1xuXHR2YWx1ZTogeyBoZXg6IEhleFNldCB9O1xuXHRmb3JtYXQ6ICdoZXgnO1xufTtcblxuZXhwb3J0IHR5cGUgSFNMID0ge1xuXHR2YWx1ZTogeyBodWU6IFJhZGlhbDsgc2F0dXJhdGlvbjogUGVyY2VudGlsZTsgbGlnaHRuZXNzOiBQZXJjZW50aWxlIH07XG5cdGZvcm1hdDogJ2hzbCc7XG59O1xuXG5leHBvcnQgdHlwZSBIU1YgPSB7XG5cdHZhbHVlOiB7IGh1ZTogUmFkaWFsOyBzYXR1cmF0aW9uOiBQZXJjZW50aWxlOyB2YWx1ZTogUGVyY2VudGlsZSB9O1xuXHRmb3JtYXQ6ICdoc3YnO1xufTtcblxuZXhwb3J0IHR5cGUgTEFCID0ge1xuXHR2YWx1ZTogeyBsOiBMQUJfTDsgYTogTEFCX0E7IGI6IExBQl9CIH07XG5cdGZvcm1hdDogJ2xhYic7XG59O1xuXG5leHBvcnQgdHlwZSBSR0IgPSB7XG5cdHZhbHVlOiB7IHJlZDogQnl0ZVJhbmdlOyBncmVlbjogQnl0ZVJhbmdlOyBibHVlOiBCeXRlUmFuZ2UgfTtcblx0Zm9ybWF0OiAncmdiJztcbn07XG5cbmV4cG9ydCB0eXBlIFNMID0ge1xuXHR2YWx1ZTogeyBzYXR1cmF0aW9uOiBQZXJjZW50aWxlOyBsaWdodG5lc3M6IFBlcmNlbnRpbGUgfTtcblx0Zm9ybWF0OiAnc2wnO1xufTtcblxuZXhwb3J0IHR5cGUgU1YgPSB7XG5cdHZhbHVlOiB7IHNhdHVyYXRpb246IFBlcmNlbnRpbGU7IHZhbHVlOiBQZXJjZW50aWxlIH07XG5cdGZvcm1hdDogJ3N2Jztcbn07XG5cbmV4cG9ydCB0eXBlIFhZWiA9IHtcblx0dmFsdWU6IHsgeDogWFlaX1g7IHk6IFhZWl9ZOyB6OiBYWVpfWiB9O1xuXHRmb3JtYXQ6ICd4eXonO1xufTtcblxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vLyAqKioqKioqKiA3LiBDT0xPUlMgKFVOQlJBTkRFRCBQUk9QRVJUSUVTIEFTIFNUUklOR1MpICoqKioqKioqKioqKlxuLy8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgdHlwZSBDTVlLU3RyaW5nTWFwID0ge1xuXHR2YWx1ZTogeyBjeWFuOiBzdHJpbmc7IG1hZ2VudGE6IHN0cmluZzsgeWVsbG93OiBzdHJpbmc7IGtleTogc3RyaW5nIH07XG5cdGZvcm1hdDogJ2NteWsnO1xufTtcblxuZXhwb3J0IHR5cGUgSGV4U3RyaW5nTWFwID0ge1xuXHR2YWx1ZTogeyBoZXg6IHN0cmluZyB9O1xuXHRmb3JtYXQ6ICdoZXgnO1xufTtcblxuZXhwb3J0IHR5cGUgSFNMU3RyaW5nTWFwID0ge1xuXHR2YWx1ZTogeyBodWU6IHN0cmluZzsgc2F0dXJhdGlvbjogc3RyaW5nOyBsaWdodG5lc3M6IHN0cmluZyB9O1xuXHRmb3JtYXQ6ICdoc2wnO1xufTtcblxuZXhwb3J0IHR5cGUgSFNWU3RyaW5nTWFwID0ge1xuXHR2YWx1ZTogeyBodWU6IHN0cmluZzsgc2F0dXJhdGlvbjogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH07XG5cdGZvcm1hdDogJ2hzdic7XG59O1xuXG5leHBvcnQgdHlwZSBMQUJTdHJpbmdNYXAgPSB7XG5cdHZhbHVlOiB7IGw6IHN0cmluZzsgYTogc3RyaW5nOyBiOiBzdHJpbmcgfTtcblx0Zm9ybWF0OiAnbGFiJztcbn07XG5cbmV4cG9ydCB0eXBlIFJHQlN0cmluZ01hcCA9IHtcblx0dmFsdWU6IHsgcmVkOiBzdHJpbmc7IGdyZWVuOiBzdHJpbmc7IGJsdWU6IHN0cmluZyB9O1xuXHRmb3JtYXQ6ICdyZ2InO1xufTtcblxuZXhwb3J0IHR5cGUgU0xTdHJpbmdNYXAgPSB7XG5cdHZhbHVlOiB7IHNhdHVyYXRpb246IHN0cmluZzsgbGlnaHRuZXNzOiBzdHJpbmcgfTtcblx0Zm9ybWF0OiAnc2wnO1xufTtcblxuZXhwb3J0IHR5cGUgU1ZTdHJpbmdNYXAgPSB7XG5cdHZhbHVlOiB7IHNhdHVyYXRpb246IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9O1xuXHRmb3JtYXQ6ICdzdic7XG59O1xuXG5leHBvcnQgdHlwZSBYWVpTdHJpbmdNYXAgPSB7XG5cdHZhbHVlOiB7IHg6IHN0cmluZzsgeTogc3RyaW5nOyB6OiBzdHJpbmcgfTtcblx0Zm9ybWF0OiAneHl6Jztcbn07XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vLyAqKioqKioqKioqKiogOC4gQ09MT1JTIChVTkJSQU5ERUQgTlVNRVJJQyBQUk9QRVJUSUVTKSAqKioqKioqKioqKipcbi8vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgdHlwZSBDTVlLTnVtTWFwID0ge1xuXHR2YWx1ZTogeyBjeWFuOiBudW1iZXI7IG1hZ2VudGE6IG51bWJlcjsgeWVsbG93OiBudW1iZXI7IGtleTogbnVtYmVyIH07XG5cdGZvcm1hdDogJ2NteWsnO1xufTtcblxuZXhwb3J0IHR5cGUgSGV4TnVtTWFwID0ge1xuXHR2YWx1ZTogeyBoZXg6IHN0cmluZyB9O1xuXHRmb3JtYXQ6ICdoZXgnO1xufTtcblxuZXhwb3J0IHR5cGUgSFNMTnVtTWFwID0ge1xuXHR2YWx1ZTogeyBodWU6IG51bWJlcjsgc2F0dXJhdGlvbjogbnVtYmVyOyBsaWdodG5lc3M6IG51bWJlciB9O1xuXHRmb3JtYXQ6ICdoc2wnO1xufTtcblxuZXhwb3J0IHR5cGUgSFNWTnVtTWFwID0ge1xuXHR2YWx1ZTogeyBodWU6IG51bWJlcjsgc2F0dXJhdGlvbjogbnVtYmVyOyB2YWx1ZTogbnVtYmVyIH07XG5cdGZvcm1hdDogJ2hzdic7XG59O1xuXG5leHBvcnQgdHlwZSBMQUJOdW1NYXAgPSB7XG5cdHZhbHVlOiB7IGw6IG51bWJlcjsgYTogbnVtYmVyOyBiOiBudW1iZXIgfTtcblx0Zm9ybWF0OiAnbGFiJztcbn07XG5cbmV4cG9ydCB0eXBlIFJHQk51bU1hcCA9IHtcblx0dmFsdWU6IHsgcmVkOiBudW1iZXI7IGdyZWVuOiBudW1iZXI7IGJsdWU6IG51bWJlciB9O1xuXHRmb3JtYXQ6ICdyZ2InO1xufTtcblxuZXhwb3J0IHR5cGUgU0xOdW1NYXAgPSB7XG5cdHZhbHVlOiB7IHNhdHVyYXRpb246IG51bWJlcjsgbGlnaHRuZXNzOiBudW1iZXIgfTtcblx0Zm9ybWF0OiAnc2wnO1xufTtcblxuZXhwb3J0IHR5cGUgU1ZOdW1NYXAgPSB7XG5cdHZhbHVlOiB7IHNhdHVyYXRpb246IG51bWJlcjsgdmFsdWU6IG51bWJlciB9O1xuXHRmb3JtYXQ6ICdzdic7XG59O1xuXG5leHBvcnQgdHlwZSBYWVpOdW1NYXAgPSB7XG5cdHZhbHVlOiB7XG5cdFx0eDogbnVtYmVyO1xuXHRcdHk6IG51bWJlcjtcblx0XHR6OiBudW1iZXI7XG5cdH07XG5cdGZvcm1hdDogJ3h5eic7XG59O1xuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vLyAqKioqKioqKioqKiogOS4gQ09NUE9TSVRFIENPTE9SIElOVEVSRkFDRVMgQU5EIFRZUEVTICoqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgaW50ZXJmYWNlIEFsbENvbG9ycyB7XG5cdGNteWs6IENNWUs7XG5cdGhleDogSGV4O1xuXHRoc2w6IEhTTDtcblx0aHN2OiBIU1Y7XG5cdGxhYjogTEFCO1xuXHRyZ2I6IFJHQjtcblx0c2w6IFNMO1xuXHRzdjogU1Y7XG5cdHh5ejogWFlaO1xufVxuXG5leHBvcnQgdHlwZSBDb2xvciA9IENNWUsgfCBIZXggfCBIU0wgfCBIU1YgfCBMQUIgfCBSR0IgfCBTTCB8IFNWIHwgWFlaO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yRGF0YSB7XG5cdGNteWs/OiBDTVlLO1xuXHRoZXg/OiBIZXg7XG5cdGhzbD86IEhTTDtcblx0aHN2PzogSFNWO1xuXHRsYWI/OiBMQUI7XG5cdHJnYj86IFJHQjtcblx0eHl6PzogWFlaO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yRGF0YUFzc2VydGlvbiB7XG5cdGNteWs6IENNWUs7XG5cdGhleDogSGV4O1xuXHRoc2w6IEhTTDtcblx0aHN2OiBIU1Y7XG5cdGxhYjogTEFCO1xuXHRyZ2I6IFJHQjtcblx0eHl6OiBYWVo7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sb3JEYXRhRXh0ZW5kZWQgZXh0ZW5kcyBDb2xvckRhdGEge1xuXHRzbD86IFNMO1xuXHRzdj86IFNWO1xufVxuXG5leHBvcnQgdHlwZSBDb2xvckZvcm1hdCA9XG5cdHwgJ2NteWsnXG5cdHwgJ2hleCdcblx0fCAnaHNsJ1xuXHR8ICdoc3YnXG5cdHwgJ2xhYidcblx0fCAncmdiJ1xuXHR8ICdzbCdcblx0fCAnc3YnXG5cdHwgJ3h5eic7XG5cbmV4cG9ydCB0eXBlIENvbG9yRm9ybWF0TWFwID0ge1xuXHRjbXlrOiBDTVlLO1xuXHRoZXg6IEhleDtcblx0aHNsOiBIU0w7XG5cdGhzdjogSFNWO1xuXHRsYWI6IExBQjtcblx0cmdiOiBSR0I7XG5cdHNsOiBTTDtcblx0c3Y6IFNWO1xuXHR4eXo6IFhZWjtcbn07XG5cbmV4cG9ydCB0eXBlIENvbG9yU3BhY2UgPSAnY215aycgfCAnaGV4JyB8ICdoc2wnIHwgJ2hzdicgfCAnbGFiJyB8ICdyZ2InIHwgJ3h5eic7XG5cbmV4cG9ydCB0eXBlIENvbG9yU3BhY2VFeHRlbmRlZCA9IENvbG9yU3BhY2UgfCAnc2wnIHwgJ3N2JztcblxuZXhwb3J0IHR5cGUgQ29sb3JTdHJpbmdNYXAgPVxuXHR8IENNWUtTdHJpbmdNYXBcblx0fCBIZXhTdHJpbmdNYXBcblx0fCBIU0xTdHJpbmdNYXBcblx0fCBIU1ZTdHJpbmdNYXBcblx0fCBMQUJTdHJpbmdNYXBcblx0fCBSR0JTdHJpbmdNYXBcblx0fCBTTFN0cmluZ01hcFxuXHR8IFNWU3RyaW5nTWFwXG5cdHwgWFlaU3RyaW5nTWFwO1xuXG5leHBvcnQgdHlwZSBDb2xvck51bU1hcCA9XG5cdHwgQ01ZS051bU1hcFxuXHR8IEhleE51bU1hcFxuXHR8IEhTTE51bU1hcFxuXHR8IEhTVk51bU1hcFxuXHR8IExBQk51bU1hcFxuXHR8IFJHQk51bU1hcFxuXHR8IFNMTnVtTWFwXG5cdHwgU1ZOdW1NYXBcblx0fCBYWVpOdW1NYXA7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8vICoqKioqKioqIDEwLiBPVEhFUiBBUFBMSUNBVElPTiBUWVBFUyBBTkQgSU5URVJGQUNFUyAqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgaW50ZXJmYWNlIENvbG9ySW5wdXRFbGVtZW50IGV4dGVuZHMgSFRNTElucHV0RWxlbWVudCB7XG5cdGNvbG9yVmFsdWVzPzogQ29sb3I7XG59XG5cbmV4cG9ydCB0eXBlIEhpc3RvcnkgPSBTdGF0ZVtdO1xuXG5leHBvcnQgaW50ZXJmYWNlIE11dGF0aW9uTG9nIHtcblx0dGltZXN0YW1wOiBzdHJpbmc7XG5cdGtleTogc3RyaW5nO1xuXHRhY3Rpb246ICdhZGQnIHwgJ2RlbGV0ZScgfCAndXBkYXRlJztcblx0bmV3VmFsdWU6IHVua25vd247XG5cdG9sZFZhbHVlOiB1bmtub3duO1xuXHRvcmlnaW46IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlIHtcblx0aWQ6IHN0cmluZztcblx0aXRlbXM6IFBhbGV0dGVJdGVtW107XG5cdG1ldGFkYXRhOiB7XG5cdFx0bmFtZT86IHN0cmluZztcblx0XHRjb2x1bW5Db3VudDogbnVtYmVyO1xuXHRcdGxpbWl0RGFyazogYm9vbGVhbjtcblx0XHRsaW1pdEdyYXk6IGJvb2xlYW47XG5cdFx0bGltaXRMaWdodDogYm9vbGVhbjtcblx0XHR0aW1lc3RhbXA6IHN0cmluZztcblx0XHR0eXBlOiBQYWxldHRlVHlwZTtcblx0fTtcbn1cblxuZXhwb3J0IHR5cGUgUGFsZXR0ZVR5cGUgPVxuXHR8ICdhbmFsb2dvdXMnXG5cdHwgJ2NvbXBsZW1lbnRhcnknXG5cdHwgJ2N1c3RvbSdcblx0fCAnZGlhZGljJ1xuXHR8ICdtb25vY2hyb21hdGljJ1xuXHR8ICdoZXhhZGljJ1xuXHR8ICdyYW5kb20nXG5cdHwgJ3NwbGl0Q29tcGxlbWVudGFyeSdcblx0fCAndGV0cmFkaWMnXG5cdHwgJ3RyaWFkaWMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhbGV0dGVJdGVtIHtcblx0aXRlbUlEOiBudW1iZXI7XG5cdGNvbG9yczoge1xuXHRcdGNteWs6IENNWUtbJ3ZhbHVlJ107XG5cdFx0aGV4OiBIZXhbJ3ZhbHVlJ107XG5cdFx0aHNsOiBIU0xbJ3ZhbHVlJ107XG5cdFx0aHN2OiBIU1ZbJ3ZhbHVlJ107XG5cdFx0bGFiOiBMQUJbJ3ZhbHVlJ107XG5cdFx0cmdiOiBSR0JbJ3ZhbHVlJ107XG5cdFx0eHl6OiBYWVpbJ3ZhbHVlJ107XG5cdH07XG5cdGNzczoge1xuXHRcdGNteWs6IHN0cmluZztcblx0XHRoZXg6IHN0cmluZztcblx0XHRoc2w6IHN0cmluZztcblx0XHRoc3Y6IHN0cmluZztcblx0XHRsYWI6IHN0cmluZztcblx0XHRyZ2I6IHN0cmluZztcblx0XHR4eXo6IHN0cmluZztcblx0fTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RlZFBhbGV0dGVPcHRpb25zIHtcblx0Y29sdW1uQ291bnQ6IG51bWJlcjtcblx0ZGlzdHJpYnV0aW9uVHlwZToga2V5b2YgUGFsZXR0ZUNvbmZpZ1sncHJvYmFiaWxpdGllcyddO1xuXHRsaW1pdERhcms6IGJvb2xlYW47XG5cdGxpbWl0R3JheTogYm9vbGVhbjtcblx0bGltaXRMaWdodDogYm9vbGVhbjtcblx0cGFsZXR0ZVR5cGU6IFBhbGV0dGVUeXBlO1xufVxuXG5leHBvcnQgdHlwZSBBcHBNb2RlRGF0YSA9ICdkZXYnIHwgJ3Byb2QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIHtcblx0YXBwTW9kZTogJ2VkaXQnIHwgJ2V4cG9ydCcgfCAncHJldmlldyc7XG5cdHBhbGV0dGVIaXN0b3J5OiBQYWxldHRlW107XG5cdHBhbGV0dGVDb250YWluZXI6IHtcblx0XHRjb2x1bW5zOiB7XG5cdFx0XHRpZDogbnVtYmVyO1xuXHRcdFx0aXNMb2NrZWQ6IGJvb2xlYW47XG5cdFx0XHRwb3NpdGlvbjogbnVtYmVyO1xuXHRcdFx0c2l6ZTogbnVtYmVyO1xuXHRcdH1bXTtcblx0fTtcblx0cHJlZmVyZW5jZXM6IHtcblx0XHRjb2xvclNwYWNlOiBDb2xvclNwYWNlO1xuXHRcdGRpc3RyaWJ1dGlvblR5cGU6IGtleW9mIFBhbGV0dGVDb25maWdbJ3Byb2JhYmlsaXRpZXMnXTtcblx0XHRtYXhIaXN0b3J5OiBudW1iZXI7XG5cdFx0bWF4UGFsZXR0ZUhpc3Rvcnk6IG51bWJlcjtcblx0XHR0aGVtZTogJ2xpZ2h0JyB8ICdkYXJrJztcblx0fTtcblx0c2VsZWN0aW9uczoge1xuXHRcdHBhbGV0dGVDb2x1bW5Db3VudDogbnVtYmVyO1xuXHRcdHBhbGV0dGVUeXBlOiBQYWxldHRlVHlwZTtcblx0XHR0YXJnZXRlZENvbHVtblBvc2l0aW9uOiBudW1iZXI7XG5cdH07XG5cdHRpbWVzdGFtcDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuYnJhbmRlZFBhbGV0dGVJdGVtIHtcblx0aXRlbUlEOiBudW1iZXI7XG5cdGNvbG9yczoge1xuXHRcdGNteWs6IENNWUtOdW1NYXBbJ3ZhbHVlJ107XG5cdFx0aGV4OiBIZXhOdW1NYXBbJ3ZhbHVlJ107XG5cdFx0aHNsOiBIU0xOdW1NYXBbJ3ZhbHVlJ107XG5cdFx0aHN2OiBIU1ZOdW1NYXBbJ3ZhbHVlJ107XG5cdFx0bGFiOiBMQUJOdW1NYXBbJ3ZhbHVlJ107XG5cdFx0cmdiOiBSR0JOdW1NYXBbJ3ZhbHVlJ107XG5cdFx0eHl6OiBYWVpOdW1NYXBbJ3ZhbHVlJ107XG5cdH07XG5cdGNzczoge1xuXHRcdGNteWs6IHN0cmluZztcblx0XHRoZXg6IHN0cmluZztcblx0XHRoc2w6IHN0cmluZztcblx0XHRoc3Y6IHN0cmluZztcblx0XHRsYWI6IHN0cmluZztcblx0XHRyZ2I6IHN0cmluZztcblx0XHR4eXo6IHN0cmluZztcblx0fTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVbmJyYW5kZWRQYWxldHRlIHtcblx0aWQ6IHN0cmluZztcblx0aXRlbXM6IFVuYnJhbmRlZFBhbGV0dGVJdGVtW107XG5cdG1ldGFkYXRhOiB7XG5cdFx0bmFtZT86IHN0cmluZztcblx0XHRjb2x1bW5Db3VudDogbnVtYmVyO1xuXHRcdGxpbWl0RGFyazogYm9vbGVhbjtcblx0XHRsaW1pdEdyYXk6IGJvb2xlYW47XG5cdFx0bGltaXRMaWdodDogYm9vbGVhbjtcblx0XHR0aW1lc3RhbXA6IHN0cmluZztcblx0XHR0eXBlOiBQYWxldHRlVHlwZTtcblx0fTtcbn1cblxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vLyAqKioqKioqKioqKioqKioqKioqKiogMTEuIEdFTkVSSUNTICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgdHlwZSBMaXN0ZW5lcjxUPiA9IChuZXdWYWx1ZTogVCwgb2xkVmFsdWU6IFQpID0+IHZvaWQ7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLy8vICoqKioqKioqKioqKioqKioqKiogMTIuIERPTSBFTEVNRU5UUyAqKioqKioqKioqKioqKioqKioqXG4vLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgaW50ZXJmYWNlIFVudmFsaWRhdGVkRE9NRWxlbWVudHMge1xuXHRidG5zOiB7XG5cdFx0ZGVzYXR1cmF0ZTogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdGV4cG9ydDogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdGdlbmVyYXRlOiBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw7XG5cdFx0aGVscE1lbnU6IEhUTUxCdXR0b25FbGVtZW50IHwgbnVsbDtcblx0XHRoaXN0b3J5TWVudTogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdGltcG9ydDogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdHNhdHVyYXRlOiBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw7XG5cdFx0c2hvd0FzQ01ZSzogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdHNob3dBc0hleDogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdHNob3dBc0hTTDogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdHNob3dBc0hTVjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdHNob3dBc0xBQjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHRcdHNob3dBc1JHQjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXHR9O1xuXHRkaXZzOiB7XG5cdFx0aGVscE1lbnU6IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcblx0XHRoaXN0b3J5TWVudTogSFRNTERpdkVsZW1lbnQgfCBudWxsO1xuXHRcdHBhbGV0dGVDb250YWluZXI6IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcblx0XHRwYWxldHRlSGlzdG9yeTogSFRNTERpdkVsZW1lbnQgfCBudWxsO1xuXHR9O1xuXHRpbnB1dHM6IHtcblx0XHRjb2x1bW5Db3VudDogSFRNTElucHV0RWxlbWVudCB8IG51bGw7XG5cdFx0bGltaXREYXJrQ2hrYng6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsO1xuXHRcdGxpbWl0R3JheUNoa2J4OiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbDtcblx0XHRsaW1pdExpZ2h0Q2hrYng6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsO1xuXHRcdHBhbGV0dGVDb2x1bW46IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsO1xuXHRcdHBhbGV0dGVUeXBlOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbDtcblx0fTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBET01FbGVtZW50cyB7XG5cdGJ0bnM6IHtcblx0XHRkZXNhdHVyYXRlOiBIVE1MQnV0dG9uRWxlbWVudDtcblx0XHRleHBvcnQ6IEhUTUxCdXR0b25FbGVtZW50O1xuXHRcdGdlbmVyYXRlOiBIVE1MQnV0dG9uRWxlbWVudDtcblx0XHRoZWxwTWVudTogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cdFx0aGlzdG9yeU1lbnU6IEhUTUxCdXR0b25FbGVtZW50O1xuXHRcdGltcG9ydDogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cdFx0c2F0dXJhdGU6IEhUTUxCdXR0b25FbGVtZW50O1xuXHRcdHNob3dBc0NNWUs6IEhUTUxCdXR0b25FbGVtZW50O1xuXHRcdHNob3dBc0hleDogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cdFx0c2hvd0FzSFNMOiBIVE1MQnV0dG9uRWxlbWVudDtcblx0XHRzaG93QXNIU1Y6IEhUTUxCdXR0b25FbGVtZW50O1xuXHRcdHNob3dBc0xBQjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cdFx0c2hvd0FzUkdCOiBIVE1MQnV0dG9uRWxlbWVudDtcblx0fTtcblx0ZGl2czoge1xuXHRcdGhlbHBNZW51OiBIVE1MRGl2RWxlbWVudDtcblx0XHRoaXN0b3J5TWVudTogSFRNTERpdkVsZW1lbnQ7XG5cdFx0cGFsZXR0ZUNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG5cdFx0cGFsZXR0ZUhpc3Rvcnk6IEhUTUxEaXZFbGVtZW50O1xuXHR9O1xuXHRpbnB1dHM6IHtcblx0XHRjb2x1bW5Db3VudDogSFRNTElucHV0RWxlbWVudDtcblx0XHRsaW1pdERhcmtDaGtieDogSFRNTElucHV0RWxlbWVudDtcblx0XHRsaW1pdEdyYXlDaGtieDogSFRNTElucHV0RWxlbWVudDtcblx0XHRsaW1pdExpZ2h0Q2hrYng6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0cGFsZXR0ZUNvbHVtbjogSFRNTElucHV0RWxlbWVudDtcblx0XHRwYWxldHRlVHlwZTogSFRNTElucHV0RWxlbWVudDtcblx0fTtcbn1cbiJdfQ==