// File: types/config.ts
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/types/config.ts"],"names":[],"mappings":"AAAA,wBAAwB","sourcesContent":["// File: types/config.ts\n\nimport { sets } from '../config/index.js';\n\nexport interface DOMIndex {\n\tclasses: {\n\t\tcolorDisplay: string;\n\t\tcolorInput: string;\n\t\tcolorInputBtn: string;\n\t\tcolorInputModal: string;\n\t\tcolorStripe: string;\n\t\tcolorSwatch: string;\n\t\tdragHandle: string;\n\t\thidden: string;\n\t\tlockBtn: string;\n\t\tlocked: string;\n\t\tmodal: string;\n\t\tmodalTrigger: string;\n\t\tpaletteColumn: string;\n\t\tresizeHandle: string;\n\t\ttooltipContainer: string;\n\t\ttooltipTrigger: string;\n\t};\n\tdynamicIDs: { globalTooltipDiv: string };\n\tids: {\n\t\tbtns: {\n\t\t\tdesaturate: string;\n\t\t\texport: string;\n\t\t\tgenerate: string;\n\t\t\thelpMenu: string;\n\t\t\thistoryMenu: string;\n\t\t\timport: string;\n\t\t\tsaturate: string;\n\t\t\tshowAsCMYK: string;\n\t\t\tshowAsHex: string;\n\t\t\tshowAsHSL: string;\n\t\t\tshowAsHSV: string;\n\t\t\tshowAsLAB: string;\n\t\t\tshowAsRGB: string;\n\t\t};\n\t\tdivs: {\n\t\t\thelpMenu: string;\n\t\t\thistoryMenu: string;\n\t\t\tpaletteContainer: string;\n\t\t\tpaletteHistory: string;\n\t\t};\n\t\tinputs: {\n\t\t\tcolumnCount: string;\n\t\t\tlimitDarkChkbx: string;\n\t\t\tlimitGrayChkbx: string;\n\t\t\tlimitLightChkbx: string;\n\t\t\tpaletteColumn: string;\n\t\t\tpaletteType: string;\n\t\t};\n\t};\n}\n\n// ********************************************************\n/// ******************************************************\n//// **************** 2. DOM CONFIGURARTION *************\n/// ******************************************************\n// ********************************************************\n\nexport interface DOMConfig {\n\tbtnDebounce: number;\n\tcopyButtonTextTimeout: number;\n\tinputDebounce: number;\n\tminColumnSize: 5;\n\tmaxColumnSize: 70;\n\ttoastTimer: number;\n\ttooltipFadeIn: number;\n\ttooltipFadeOut: number;\n}\n\n// ***********************************************************\n/// *********************************************************\n//// **************** 3. PALETTE CONFIGURARTION *************\n/// *********************************************************\n// ***********************************************************\n\nexport interface ProbabilityProperties {\n\tvalues: readonly number[];\n\tweights: readonly number[];\n}\n\ninterface PaletteShiftRange {\n\thue: number;\n\tsat: number;\n\tlight: number;\n}\n\nexport interface PaletteConfig {\n\tadjustment: {\n\t\tslaValue: number;\n\t};\n\tprobabilities: {\n\t\tbase: ProbabilityProperties;\n\t\tchaotic: ProbabilityProperties;\n\t\tsoft: ProbabilityProperties;\n\t\tstrong: ProbabilityProperties;\n\t};\n\tshiftRanges: Record<PaletteType, PaletteShiftRange>;\n\tthresholds: {\n\t\tdark: number;\n\t\tgray: number;\n\t\tlight: number;\n\t};\n}\n\n// ****************************************************\n/// **************************************************\n//// ************ 5. ENVIRONMENT DATA ***************\n/// **************************************************\n// ****************************************************\n\nexport interface Environment {\n\tapp: {\n\t\thistoryLimit: number;\n\t\tpaletteHistoryLimit: number;\n\t};\n\tidb: {\n\t\tretryDelay: number;\n\t};\n\tmutex: {\n\t\tcontentionHistoryLimit: number;\n\t\ttimeout: number;\n\t};\n\tobserver: {\n\t\tdebounce: number;\n\t};\n\tstate: {\n\t\tmaxReadyAttempts: number;\n\t\tmaxSaveRetries: number;\n\t\tsaveThrottleDelay: number;\n\t};\n}\n\n// ****************************************************\n/// **************************************************\n//// ******************* 4. REGEX *******************\n/// **************************************************\n// ****************************************************\n\nexport interface RegexConfig {\n\tbrand: {\n\t\thex: RegExp;\n\t};\n\tcolors: {\n\t\tcmyk: RegExp;\n\t\thex: RegExp;\n\t\thsl: RegExp;\n\t\thsv: RegExp;\n\t\tlab: RegExp;\n\t\trgb: RegExp;\n\t\txyz: RegExp;\n\t};\n\tcss: {\n\t\tcmyk: RegExp;\n\t\thsl: RegExp;\n\t\thsv: RegExp;\n\t\tlab: RegExp;\n\t\trgb: RegExp;\n\t\txyz: RegExp;\n\t};\n\tdom: {\n\t\thex: RegExp;\n\t\thsl: RegExp;\n\t\trgb: RegExp;\n\t};\n\tstackTrace: {\n\t\tanon: RegExp;\n\t\tchrome: RegExp;\n\t\telectron: RegExp;\n\t\tfallback: RegExp;\n\t\tfirefox: RegExp;\n\t\tnode: RegExp;\n\t\tsafari: RegExp;\n\t\tworkers: RegExp;\n\t};\n\tuserInput: {\n\t\thex: RegExp;\n\t\thsl: RegExp;\n\t\trgb: RegExp;\n\t};\n\tvalidation: {\n\t\thex: RegExp;\n\t\thexComponent: RegExp;\n\t};\n}\n\nexport interface Configuration {\n\tmath: {\n\t\tepsilon: number;\n\t\tmaxXYZ_X: number;\n\t\tmaxXYZ_Y: number;\n\t\tmaxXYZ_Z: number;\n\t\tminXYZ_X: number;\n\t\tminXYZ_Y: number;\n\t\tminXYZ_Z: number;\n\t};\n\tmode: {\n\t\tdebugLevel: 0 | 1 | 2 | 3 | 4 | 5;\n\t\tenv: 'dev' | 'prod' | 'test';\n\t\texposeClasses: boolean;\n\t\tlog: {\n\t\t\tdebug: boolean;\n\t\t\terror: boolean;\n\t\t\tinfo: boolean;\n\t\t\tverbosity: 0 | 1 | 2 | 3 | 4 | 5;\n\t\t\twarn: boolean;\n\t\t};\n\t\tshowAlerts: boolean;\n\t\tstackTrace: boolean;\n\t};\n\tstorage: {\n\t\tidbDBName: string;\n\t\tidbDefaultVersion: number;\n\t\tidbStoreName: string;\n\t};\n}\n\nexport interface Defaults {\n\tcolors: {\n\t\tcmyk: CMYK;\n\t\thex: Hex;\n\t\thsl: HSL;\n\t\thsv: HSV;\n\t\tlab: LAB;\n\t\trgb: RGB;\n\t\tsl: SL;\n\t\tsv: SV;\n\t\txyz: XYZ;\n\t\tcmykNum: CMYKNumMap;\n\t\thslNum: HSLNumMap;\n\t\thsvNum: HSVNumMap;\n\t\tlabNum: LABNumMap;\n\t\trgbNum: RGBNumMap;\n\t\tslNum: SLNumMap;\n\t\tsvNum: SVNumMap;\n\t\txyzNum: XYZNumMap;\n\t\tcmykString: CMYKStringMap;\n\t\thexString: HexStringMap;\n\t\thslString: HSLStringMap;\n\t\thsvString: HSVStringMap;\n\t\tlabString: LABStringMap;\n\t\trgbString: RGBStringMap;\n\t\tslString: SLStringMap;\n\t\tsvString: SVStringMap;\n\t\txyzString: XYZStringMap;\n\t\tcmykCSS: string;\n\t\thexCSS: string;\n\t\thslCSS: string;\n\t\thsvCSS: string;\n\t\tlabCSS: string;\n\t\trgbCSS: string;\n\t\tslCSS: string;\n\t\tsvCSS: string;\n\t\txyzCSS: string;\n\t};\n\tmutation: MutationLog;\n\tpalette: Palette;\n\tpaletteItem: PaletteItem;\n\tpaletteOptions: SelectedPaletteOptions;\n\tstate: State;\n\tunbrandedPalette: UnbrandedPalette;\n\tunbrandedPaletteItem: UnbrandedPaletteItem;\n}\n\nexport type MathData = Configuration['math'];\n\nexport type ModeData = Configuration['mode'];\n\nexport interface SetsData {\n\tByteRange: readonly [0, 255];\n\tHexSet: 'HexSet';\n\tLAB_L: readonly [0, 100];\n\tLAB_A: readonly [-128, 127];\n\tLAB_B: readonly [-128, 127];\n\tPercentile: readonly [0, 100];\n\tRadial: readonly [0, 360];\n\tXYZ_X: readonly [number, number];\n\tXYZ_Y: readonly [number, number];\n\tXYZ_Z: readonly [number, number];\n}\n\nexport type StorageData = Configuration['storage'];\n\n// ***************************************************************\n/// *************************************************************\n//// ******************* 5. SET DECLARATIONS *******************\n/// *************************************************************\n// ***************************************************************\n\nexport type ByteRange = number & { __brand: 'ByteRange' };\n\nexport type HexSet = string & { __brand: 'HexSet' };\n\nexport type LAB_L = number & { __brand: 'LAB_L' };\n\nexport type LAB_A = number & { __brand: 'LAB_A' };\n\nexport type LAB_B = number & { __brand: 'LAB_B' };\n\nexport type Percentile = number & { __brand: 'Percentile' };\n\nexport type Radial = number & { __brand: 'Radial' };\n\nexport type XYZ_X = number & { __brand: 'XYZ_X' };\n\nexport type XYZ_Y = number & { __brand: 'XYZ_Y' };\n\nexport type XYZ_Z = number & { __brand: 'XYZ_Z' };\n\nexport type RangeKeyMap = {\n\tByteRange: ByteRange;\n\tHexSet: HexSet;\n\tLAB_L: LAB_L;\n\tLAB_A: LAB_A;\n\tLAB_B: LAB_B;\n\tPercentile: Percentile;\n\tRadial: Radial;\n\tXYZ_X: XYZ_X;\n\tXYZ_Y: XYZ_Y;\n\tXYZ_Z: XYZ_Z;\n};\n\nexport type ColorValueRange = RangeKeyMap[keyof RangeKeyMap];\n\nexport type NumericRangeKey = {\n\t[K in keyof typeof sets]: (typeof sets)[K] extends readonly [number, number]\n\t\t? K\n\t\t: never;\n}[keyof typeof sets & string];\n\nexport type NumericBrandedType =\n\t| ByteRange\n\t| LAB_A\n\t| LAB_B\n\t| LAB_L\n\t| Percentile\n\t| Radial\n\t| XYZ_X\n\t| XYZ_Y\n\t| XYZ_Z;\n\nexport type Sets = typeof sets;\n\n// *********************************************************\n/// *******************************************************\n//// ***************** 6. BRANDED COLORS *****************\n/// *******************************************************\n// *********************************************************\n\nexport type CMYK = {\n\tvalue: {\n\t\tcyan: Percentile;\n\t\tmagenta: Percentile;\n\t\tyellow: Percentile;\n\t\tkey: Percentile;\n\t};\n\tformat: 'cmyk';\n};\n\nexport type Hex = {\n\tvalue: { hex: HexSet };\n\tformat: 'hex';\n};\n\nexport type HSL = {\n\tvalue: { hue: Radial; saturation: Percentile; lightness: Percentile };\n\tformat: 'hsl';\n};\n\nexport type HSV = {\n\tvalue: { hue: Radial; saturation: Percentile; value: Percentile };\n\tformat: 'hsv';\n};\n\nexport type LAB = {\n\tvalue: { l: LAB_L; a: LAB_A; b: LAB_B };\n\tformat: 'lab';\n};\n\nexport type RGB = {\n\tvalue: { red: ByteRange; green: ByteRange; blue: ByteRange };\n\tformat: 'rgb';\n};\n\nexport type SL = {\n\tvalue: { saturation: Percentile; lightness: Percentile };\n\tformat: 'sl';\n};\n\nexport type SV = {\n\tvalue: { saturation: Percentile; value: Percentile };\n\tformat: 'sv';\n};\n\nexport type XYZ = {\n\tvalue: { x: XYZ_X; y: XYZ_Y; z: XYZ_Z };\n\tformat: 'xyz';\n};\n\n// *********************************************************************\n/// *******************************************************************\n//// ******** 7. COLORS (UNBRANDED PROPERTIES AS STRINGS) ************\n/// *******************************************************************\n// *********************************************************************\n\nexport type CMYKStringMap = {\n\tvalue: { cyan: string; magenta: string; yellow: string; key: string };\n\tformat: 'cmyk';\n};\n\nexport type HexStringMap = {\n\tvalue: { hex: string };\n\tformat: 'hex';\n};\n\nexport type HSLStringMap = {\n\tvalue: { hue: string; saturation: string; lightness: string };\n\tformat: 'hsl';\n};\n\nexport type HSVStringMap = {\n\tvalue: { hue: string; saturation: string; value: string };\n\tformat: 'hsv';\n};\n\nexport type LABStringMap = {\n\tvalue: { l: string; a: string; b: string };\n\tformat: 'lab';\n};\n\nexport type RGBStringMap = {\n\tvalue: { red: string; green: string; blue: string };\n\tformat: 'rgb';\n};\n\nexport type SLStringMap = {\n\tvalue: { saturation: string; lightness: string };\n\tformat: 'sl';\n};\n\nexport type SVStringMap = {\n\tvalue: { saturation: string; value: string };\n\tformat: 'sv';\n};\n\nexport type XYZStringMap = {\n\tvalue: { x: string; y: string; z: string };\n\tformat: 'xyz';\n};\n\n// **********************************************************************\n/// ********************************************************************\n//// ************ 8. COLORS (UNBRANDED NUMERIC PROPERTIES) ************\n/// ********************************************************************\n// **********************************************************************\n\nexport type CMYKNumMap = {\n\tvalue: { cyan: number; magenta: number; yellow: number; key: number };\n\tformat: 'cmyk';\n};\n\nexport type HexNumMap = {\n\tvalue: { hex: string };\n\tformat: 'hex';\n};\n\nexport type HSLNumMap = {\n\tvalue: { hue: number; saturation: number; lightness: number };\n\tformat: 'hsl';\n};\n\nexport type HSVNumMap = {\n\tvalue: { hue: number; saturation: number; value: number };\n\tformat: 'hsv';\n};\n\nexport type LABNumMap = {\n\tvalue: { l: number; a: number; b: number };\n\tformat: 'lab';\n};\n\nexport type RGBNumMap = {\n\tvalue: { red: number; green: number; blue: number };\n\tformat: 'rgb';\n};\n\nexport type SLNumMap = {\n\tvalue: { saturation: number; lightness: number };\n\tformat: 'sl';\n};\n\nexport type SVNumMap = {\n\tvalue: { saturation: number; value: number };\n\tformat: 'sv';\n};\n\nexport type XYZNumMap = {\n\tvalue: {\n\t\tx: number;\n\t\ty: number;\n\t\tz: number;\n\t};\n\tformat: 'xyz';\n};\n\n// ***********************************************************************\n/// *********************************************************************\n//// ************ 9. COMPOSITE COLOR INTERFACES AND TYPES **************\n/// *********************************************************************\n// ***********************************************************************\n\nexport interface AllColors {\n\tcmyk: CMYK;\n\thex: Hex;\n\thsl: HSL;\n\thsv: HSV;\n\tlab: LAB;\n\trgb: RGB;\n\tsl: SL;\n\tsv: SV;\n\txyz: XYZ;\n}\n\nexport type Color = CMYK | Hex | HSL | HSV | LAB | RGB | SL | SV | XYZ;\n\nexport interface ColorData {\n\tcmyk?: CMYK;\n\thex?: Hex;\n\thsl?: HSL;\n\thsv?: HSV;\n\tlab?: LAB;\n\trgb?: RGB;\n\txyz?: XYZ;\n}\n\nexport interface ColorDataAssertion {\n\tcmyk: CMYK;\n\thex: Hex;\n\thsl: HSL;\n\thsv: HSV;\n\tlab: LAB;\n\trgb: RGB;\n\txyz: XYZ;\n}\n\nexport interface ColorDataExtended extends ColorData {\n\tsl?: SL;\n\tsv?: SV;\n}\n\nexport type ColorFormat =\n\t| 'cmyk'\n\t| 'hex'\n\t| 'hsl'\n\t| 'hsv'\n\t| 'lab'\n\t| 'rgb'\n\t| 'sl'\n\t| 'sv'\n\t| 'xyz';\n\nexport type ColorFormatMap = {\n\tcmyk: CMYK;\n\thex: Hex;\n\thsl: HSL;\n\thsv: HSV;\n\tlab: LAB;\n\trgb: RGB;\n\tsl: SL;\n\tsv: SV;\n\txyz: XYZ;\n};\n\nexport type ColorSpace = 'cmyk' | 'hex' | 'hsl' | 'hsv' | 'lab' | 'rgb' | 'xyz';\n\nexport type ColorSpaceExtended = ColorSpace | 'sl' | 'sv';\n\nexport type ColorStringMap =\n\t| CMYKStringMap\n\t| HexStringMap\n\t| HSLStringMap\n\t| HSVStringMap\n\t| LABStringMap\n\t| RGBStringMap\n\t| SLStringMap\n\t| SVStringMap\n\t| XYZStringMap;\n\nexport type ColorNumMap =\n\t| CMYKNumMap\n\t| HexNumMap\n\t| HSLNumMap\n\t| HSVNumMap\n\t| LABNumMap\n\t| RGBNumMap\n\t| SLNumMap\n\t| SVNumMap\n\t| XYZNumMap;\n\n// *****************************************************************\n/// ***************************************************************\n//// ******** 10. OTHER APPLICATION TYPES AND INTERFACES **********\n/// ***************************************************************\n// *****************************************************************\n\nexport interface ColorInputElement extends HTMLInputElement {\n\tcolorValues?: Color;\n}\n\nexport type History = State[];\n\nexport interface MutationLog {\n\ttimestamp: string;\n\tkey: string;\n\taction: 'add' | 'delete' | 'update';\n\tnewValue: unknown;\n\toldValue: unknown;\n\torigin: string;\n}\n\nexport interface Palette {\n\tid: string;\n\titems: PaletteItem[];\n\tmetadata: {\n\t\tname?: string;\n\t\tcolumnCount: number;\n\t\tlimitDark: boolean;\n\t\tlimitGray: boolean;\n\t\tlimitLight: boolean;\n\t\ttimestamp: string;\n\t\ttype: PaletteType;\n\t};\n}\n\nexport type PaletteType =\n\t| 'analogous'\n\t| 'complementary'\n\t| 'custom'\n\t| 'diadic'\n\t| 'monochromatic'\n\t| 'hexadic'\n\t| 'random'\n\t| 'splitComplementary'\n\t| 'tetradic'\n\t| 'triadic';\n\nexport interface PaletteItem {\n\titemID: number;\n\tcolors: {\n\t\tcmyk: CMYK['value'];\n\t\thex: Hex['value'];\n\t\thsl: HSL['value'];\n\t\thsv: HSV['value'];\n\t\tlab: LAB['value'];\n\t\trgb: RGB['value'];\n\t\txyz: XYZ['value'];\n\t};\n\tcss: {\n\t\tcmyk: string;\n\t\thex: string;\n\t\thsl: string;\n\t\thsv: string;\n\t\tlab: string;\n\t\trgb: string;\n\t\txyz: string;\n\t};\n}\n\nexport interface SelectedPaletteOptions {\n\tcolumnCount: number;\n\tdistributionType: keyof PaletteConfig['probabilities'];\n\tlimitDark: boolean;\n\tlimitGray: boolean;\n\tlimitLight: boolean;\n\tpaletteType: PaletteType;\n}\n\nexport type AppModeData = 'dev' | 'prod';\n\nexport interface State {\n\tappMode: 'edit' | 'export' | 'preview';\n\tpaletteHistory: Palette[];\n\tpaletteContainer: {\n\t\tcolumns: {\n\t\t\tid: number;\n\t\t\tisLocked: boolean;\n\t\t\tposition: number;\n\t\t\tsize: number;\n\t\t}[];\n\t};\n\tpreferences: {\n\t\tcolorSpace: ColorSpace;\n\t\tdistributionType: keyof PaletteConfig['probabilities'];\n\t\tmaxHistory: number;\n\t\tmaxPaletteHistory: number;\n\t\ttheme: 'light' | 'dark';\n\t};\n\tselections: {\n\t\tpaletteColumnCount: number;\n\t\tpaletteType: PaletteType;\n\t\ttargetedColumnPosition: number;\n\t};\n\ttimestamp: string;\n\t[key: string]: unknown;\n}\n\nexport interface UnbrandedPaletteItem {\n\titemID: number;\n\tcolors: {\n\t\tcmyk: CMYKNumMap['value'];\n\t\thex: HexNumMap['value'];\n\t\thsl: HSLNumMap['value'];\n\t\thsv: HSVNumMap['value'];\n\t\tlab: LABNumMap['value'];\n\t\trgb: RGBNumMap['value'];\n\t\txyz: XYZNumMap['value'];\n\t};\n\tcss: {\n\t\tcmyk: string;\n\t\thex: string;\n\t\thsl: string;\n\t\thsv: string;\n\t\tlab: string;\n\t\trgb: string;\n\t\txyz: string;\n\t};\n}\n\nexport interface UnbrandedPalette {\n\tid: string;\n\titems: UnbrandedPaletteItem[];\n\tmetadata: {\n\t\tname?: string;\n\t\tcolumnCount: number;\n\t\tlimitDark: boolean;\n\t\tlimitGray: boolean;\n\t\tlimitLight: boolean;\n\t\ttimestamp: string;\n\t\ttype: PaletteType;\n\t};\n}\n\n// ******************************************************************\n/// ****************************************************************\n//// ********************* 11. GENERICS ***************************\n/// ****************************************************************\n// ******************************************************************\n\nexport type Listener<T> = (newValue: T, oldValue: T) => void;\n\n// ***********************************************************\n/// *********************************************************\n//// ******************* 12. DOM ELEMENTS *******************\n/// *********************************************************\n// ***********************************************************\n\nexport interface UnvalidatedDOMElements {\n\tbtns: {\n\t\tdesaturate: HTMLButtonElement | null;\n\t\texport: HTMLButtonElement | null;\n\t\tgenerate: HTMLButtonElement | null;\n\t\thelpMenu: HTMLButtonElement | null;\n\t\thistoryMenu: HTMLButtonElement | null;\n\t\timport: HTMLButtonElement | null;\n\t\tsaturate: HTMLButtonElement | null;\n\t\tshowAsCMYK: HTMLButtonElement | null;\n\t\tshowAsHex: HTMLButtonElement | null;\n\t\tshowAsHSL: HTMLButtonElement | null;\n\t\tshowAsHSV: HTMLButtonElement | null;\n\t\tshowAsLAB: HTMLButtonElement | null;\n\t\tshowAsRGB: HTMLButtonElement | null;\n\t};\n\tdivs: {\n\t\thelpMenu: HTMLDivElement | null;\n\t\thistoryMenu: HTMLDivElement | null;\n\t\tpaletteContainer: HTMLDivElement | null;\n\t\tpaletteHistory: HTMLDivElement | null;\n\t};\n\tinputs: {\n\t\tcolumnCount: HTMLInputElement | null;\n\t\tlimitDarkChkbx: HTMLInputElement | null;\n\t\tlimitGrayChkbx: HTMLInputElement | null;\n\t\tlimitLightChkbx: HTMLInputElement | null;\n\t\tpaletteColumn: HTMLInputElement | null;\n\t\tpaletteType: HTMLInputElement | null;\n\t};\n}\n\nexport interface DOMElements {\n\tbtns: {\n\t\tdesaturate: HTMLButtonElement;\n\t\texport: HTMLButtonElement;\n\t\tgenerate: HTMLButtonElement;\n\t\thelpMenu: HTMLButtonElement;\n\t\thistoryMenu: HTMLButtonElement;\n\t\timport: HTMLButtonElement;\n\t\tsaturate: HTMLButtonElement;\n\t\tshowAsCMYK: HTMLButtonElement;\n\t\tshowAsHex: HTMLButtonElement;\n\t\tshowAsHSL: HTMLButtonElement;\n\t\tshowAsHSV: HTMLButtonElement;\n\t\tshowAsLAB: HTMLButtonElement;\n\t\tshowAsRGB: HTMLButtonElement;\n\t};\n\tdivs: {\n\t\thelpMenu: HTMLDivElement;\n\t\thistoryMenu: HTMLDivElement;\n\t\tpaletteContainer: HTMLDivElement;\n\t\tpaletteHistory: HTMLDivElement;\n\t};\n\tinputs: {\n\t\tcolumnCount: HTMLInputElement;\n\t\tlimitDarkChkbx: HTMLInputElement;\n\t\tlimitGrayChkbx: HTMLInputElement;\n\t\tlimitLightChkbx: HTMLInputElement;\n\t\tpaletteColumn: HTMLInputElement;\n\t\tpaletteType: HTMLInputElement;\n\t};\n}\n"]}