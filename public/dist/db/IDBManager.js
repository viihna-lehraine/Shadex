// File: db/IDBManager.js
import { configData as config } from '../data/config.js';
import { commonFn } from '../common/index.js';
import { createLogger } from '../logger/index.js';
import { initializeDB } from './initialize.js';
import { modeData as mode } from '../data/mode.js';
const thisModule = 'db/IDBManager.js';
const logger = await createLogger();
export class IDBManager {
    static instance = null;
    dbPromise;
    dbData = config.db;
    mode = mode;
    logMode = mode.logging;
    cache = {};
    defaultKeys = config.db.DEFAULT_KEYS;
    defaultSettings = config.db.DEFAULT_SETTINGS;
    storeNames = config.db.STORE_NAMES;
    utils;
    constructor() {
        this.dbPromise = initializeDB();
        this.dbData = this.dbData;
        this.defaultKeys = config.db.DEFAULT_KEYS;
        this.defaultSettings = config.db.DEFAULT_SETTINGS;
        this.storeNames = config.db.STORE_NAMES;
        this.mode = mode;
        this.utils = commonFn.utils;
    }
    //
    ///
    //// * * * * * * * * * * * * * * * * * * * * * *
    ///// * * * * * * STATIC METHODS * * * * * * *
    //// * * * * * * * * * * * * * * * * * * * * * *
    ///
    //
    static async getInstance() {
        if (!this.instance) {
            this.instance = new IDBManager();
            await this.instance.dbPromise;
        }
        return this.instance;
    }
    static resetInstance() {
        this.instance = null;
    }
    //
    ///
    //// * * * * * * * * * * * * * * * * * * * * * *
    ///// * * * * * * * PUBLIC METHODS * * * * * * *
    //// * * * * * * * * * * * * * * * * * * * * * *
    ///
    //
    createMutationLogger(obj, key) {
        const self = this;
        return new Proxy(obj, {
            set(target, property, value) {
                const oldValue = target[property];
                const success = Reflect.set(target, property, value);
                if (success) {
                    const mutationLog = {
                        timestamp: new Date().toISOString(),
                        key,
                        action: 'update',
                        newValue: { [property]: value },
                        oldValue: { [property]: oldValue },
                        origin: 'Proxy'
                    };
                    self.log('debug', `Mutation detected: ${JSON.stringify(mutationLog)}`, `createMutationLogger()`, 2);
                    self.persistMutation(mutationLog).catch(err => {
                        if (self.logMode.error)
                            self.log('error', `Failed to persist mutation: ${err.message}`, 'createMutationLogger()');
                    });
                }
                return success;
            }
        });
    }
    async deleteDatabase() {
        await this.utils.errors.handleAsync(async () => {
            const dbName = 'paletteDB';
            const dbExists = await new Promise(resolve => {
                const request = indexedDB.open(dbName);
                request.onsuccess = () => {
                    request.result.close();
                    resolve(true);
                };
                request.onerror = () => resolve(false);
            });
            if (dbExists) {
                const deleteRequest = indexedDB.deleteDatabase(dbName);
                deleteRequest.onsuccess = () => {
                    this.log('debug', `Database "${dbName}" deleted successfully.`, `deleteDatabase()`, 1);
                };
                deleteRequest.onerror = event => {
                    this.log('error', `Error deleting database "${dbName}":\nEvent: ${event}`, `deleteDatabase()`);
                };
                deleteRequest.onblocked = () => {
                    this.log('warn', `Delete operation blocked. Ensure no open connections to "${dbName}".`, `deleteDatabase()`, 1);
                    if (this.mode.showAlerts)
                        alert(`Unable to delete database "${dbName}" because it is in use. Please close all other tabs or windows accessing this database and try again.`);
                    if (this.mode.stackTrace)
                        console.trace(`Blocked call stack:`);
                };
            }
            else {
                if (this.logMode.warn && this.logMode.verbosity >= 3)
                    this.log('warn', `Database "${dbName}" does not exist.`, `deleteDatabase()`);
            }
        }, 'IDBManager.deleteDatabase(): Error deleting database');
    }
    async deleteEntries(store, keys) {
        await this.withDB(async (db) => {
            const storeRef = db
                .transaction(store, 'readwrite')
                .objectStore(store);
            for (const key of keys) {
                if ((await this.handleData(store, key, 'get')) !== null) {
                    await storeRef.delete(key);
                }
            }
        });
    }
    async getCurrentPaletteID() {
        return this.handleData(this.storeNames.SETTINGS, this.getDefaultKey('APP_SETTINGS'), 'get').then(settings => settings?.lastPaletteID ?? 0);
    }
    async getCachedSettings() {
        if (!this.cache.settings)
            this.cache.settings = await this.getSettings();
        return this.cache.settings;
    }
    async getNextTableID() {
        const lastTableID = (await this.handleData(this.storeNames.SETTINGS, this.getDefaultKey('APP_SETTINGS'), 'get'))?.lastTableID ?? 0;
        const nextID = lastTableID + 1;
        await this.updateData(this.storeNames.SETTINGS, this.getDefaultKey('APP_SETTINGS'), s => ({ ...s, lastTableID: nextID }));
        return `palette_${nextID}`;
    }
    async getMutations() {
        return this.handleData(this.storeNames.MUTATIONS, 'mutation_logs', 'get').then(mutations => mutations ?? []);
    }
    async getPaletteHistory() {
        return ((await this.handleData(this.storeNames.SETTINGS, 'paletteHistory', 'get'))?.palettes ?? []);
    }
    async getSettings() {
        return {
            ...this.defaultSettings,
            ...(await this.handleData(this.storeNames.SETTINGS, this.getDefaultKey('APP_SETTINGS'), 'get'))
        };
    }
    async getStore(storeName, mode) {
        return this.withDB(async (db) => db.transaction(storeName, mode).objectStore(storeName));
    }
    async persistMutation(data) {
        return this.withDB(async (db) => {
            await db.put('mutations', data);
            this.log('debug', `Persisted mutation: ${JSON.stringify(data)}`, 'persistMutation', 4);
        });
    }
    async resetDatabase() {
        await this.withDB(async (db) => {
            await Promise.all(Object.values(this.storeNames).map(store => db
                .transaction(store, 'readwrite')
                .objectStore(store)
                .clear()));
            await this.handleData(this.storeNames.SETTINGS, this.getDefaultKey('APP_SETTINGS'), 'put', this.defaultSettings);
        });
    }
    async resetPaletteID() {
        await this.updateData(this.storeNames.SETTINGS, this.getDefaultKey('APP_SETTINGS'), s => ({ ...s, lastPaletteID: 0 }));
    }
    async savePalette(id, newPalette) {
        await this.handleData(this.storeNames.TABLES, id, 'put', newPalette);
    }
    async savePaletteToDB(type, items, paletteID, numBoxes, limitDark, limitGray, limitLight) {
        const newPalette = this.utils.palette.createObject(type, items, numBoxes, paletteID, limitDark, limitGray, limitLight);
        const tableID = Number(newPalette.id.split('_')[1]);
        if (isNaN(tableID))
            throw new Error(`Invalid palette ID format: ${newPalette.id}`);
        await this.savePalette(newPalette.id, { tableID, palette: newPalette });
        return newPalette;
    }
    async savePaletteHistory(paletteHistory) {
        await this.handleData(this.storeNames.SETTINGS, 'paletteHistory', 'put', { palettes: paletteHistory });
    }
    async saveSettings(newSettings) {
        await this.handleData(this.storeNames.SETTINGS, this.getDefaultKey('APP_SETTINGS'), 'put', newSettings);
    }
    async updateEntryInPalette(tableID, entryIndex, newEntry) {
        const storedPalette = await this.handleData(this.storeNames.TABLES, tableID, 'get');
        if (!storedPalette)
            throw new Error(`Palette ${tableID} not found.`);
        if (entryIndex >= storedPalette.palette.items.length)
            throw new Error(`Invalid index ${entryIndex}`);
        storedPalette.palette.items[entryIndex] = newEntry;
        await this.savePalette(tableID, storedPalette);
    }
    //
    ///
    ///// * * * *  * * * * * * * * * * * * * * * *
    ////// * * * * * * PRIVATE METHODS * * * * * *
    ///// * * * *  * * * * * * * * * * * * * * * *
    ///
    //
    getDefaultKey(key) {
        const defaultKey = this.defaultSettings[key];
        if (!defaultKey)
            throw new Error(`[getDefaultKey()]: Invalid key ${key}`);
        return defaultKey;
    }
    async handleData(store, key, action, data) {
        return this.withDB(async (db) => {
            const storeRef = db
                .transaction(store, 'readwrite')
                .objectStore(store);
            if (action === 'get')
                return (await storeRef.get(key)) ?? null;
            if (action === 'put' && data)
                await storeRef.put({ key, ...data });
            if (action === 'delete')
                await storeRef.delete(key);
        });
    }
    log(level, message, method, verbosityRequirement) {
        if (this.logMode[level] &&
            this.logMode.verbosity >= (verbosityRequirement ?? 0)) {
            logger[level](`${message}`, `${thisModule} > ${method}`);
        }
    }
    async updateData(store, key, updateFn) {
        const existing = await this.handleData(store, key, 'get');
        if (!existing)
            throw new Error(`${store} entry not found\ndb/IDBManager.js > updateData()`);
        await this.handleData(store, key, 'put', updateFn(existing));
    }
    async withDB(callback) {
        return callback(await this.dbPromise);
    }
}
//# sourceMappingURL=data:application/json;base64,