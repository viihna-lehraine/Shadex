// File: db/mutations/MutationTracker.js
import { openDB } from 'idb';
import { AppLogger } from '../../logger/AppLogger.js';
const thisModule = 'db/mutations/MutationTracker.js';
export class MutationTracker {
    static instance;
    appLogger;
    mode;
    storeNames;
    constructor(dbData, mode) {
        this.appLogger = AppLogger.getInstance(mode);
        this.storeNames = dbData.STORE_NAMES;
        this.mode = mode;
    }
    static getInstance(dbData, mode) {
        if (!MutationTracker.instance) {
            MutationTracker.instance = new MutationTracker(dbData, mode);
        }
        return MutationTracker.instance;
    }
    async persistMutation(data) {
        const caller = 'persistMutation()';
        const db = await this.getDB();
        await db.put('mutations', data);
        this.appLogger.log(`Persisted mutation: ${JSON.stringify(data)}`, 'info', this.mode.debugLevel, `${thisModule} > ${caller}`);
    }
    async getDB() {
        return openDB('paletteDB', 1, {
            upgrade: db => {
                const storeNames = Object.values(this.storeNames);
                for (const storeName of storeNames) {
                    if (!db.objectStoreNames.contains(storeName)) {
                        db.createObjectStore(storeName, { keyPath: 'key' });
                    }
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXV0YXRpb25UcmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2RiL211dGF0aW9ucy9NdXRhdGlvblRyYWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBRXhDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFTN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXRELE1BQU0sVUFBVSxHQUFHLGlDQUFpQyxDQUFDO0FBRXJELE1BQU0sT0FBTyxlQUFlO0lBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQWtCO0lBQ2pDLFNBQVMsQ0FBWTtJQUNyQixJQUFJLENBQW9CO0lBQ3hCLFVBQVUsQ0FBMkM7SUFFN0QsWUFBWSxNQUFpQyxFQUFFLElBQXVCO1FBQ3JFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXLENBQ3hCLE1BQWlDLEVBQ2pDLElBQXVCO1FBRXZCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDL0IsZUFBZSxDQUFDLFFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUVELE9BQU8sZUFBZSxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBRU0sS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFpQjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztRQUNuQyxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUU5QixNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWhDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUNqQix1QkFBdUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUM3QyxNQUFNLEVBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ3BCLEdBQUcsVUFBVSxNQUFNLE1BQU0sRUFBRSxDQUMzQixDQUFDO0lBQ0gsQ0FBQztJQUVPLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLE9BQU8sTUFBTSxDQUFnQixXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQzVDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDYixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFbEQsS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQzt3QkFDOUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUNyRCxDQUFDO2dCQUNGLENBQUM7WUFDRixDQUFDO1NBQ0QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogZGIvbXV0YXRpb25zL011dGF0aW9uVHJhY2tlci5qc1xuXG5pbXBvcnQgeyBvcGVuREIgfSBmcm9tICdpZGInO1xuaW1wb3J0IHtcblx0Q29uZmlnRGF0YUludGVyZmFjZSxcblx0TW9kZURhdGFJbnRlcmZhY2UsXG5cdE11dGF0aW9uTG9nLFxuXHRNdXRhdGlvblRyYWNrZXJfQ2xhc3NJbnRlcmZhY2UsXG5cdFBhbGV0dGVEQixcblx0UGFsZXR0ZVNjaGVtYVxufSBmcm9tICcuLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBBcHBMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvQXBwTG9nZ2VyLmpzJztcblxuY29uc3QgdGhpc01vZHVsZSA9ICdkYi9tdXRhdGlvbnMvTXV0YXRpb25UcmFja2VyLmpzJztcblxuZXhwb3J0IGNsYXNzIE11dGF0aW9uVHJhY2tlciBpbXBsZW1lbnRzIE11dGF0aW9uVHJhY2tlcl9DbGFzc0ludGVyZmFjZSB7XG5cdHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBNdXRhdGlvblRyYWNrZXI7XG5cdHByaXZhdGUgYXBwTG9nZ2VyOiBBcHBMb2dnZXI7XG5cdHByaXZhdGUgbW9kZTogTW9kZURhdGFJbnRlcmZhY2U7XG5cdHByaXZhdGUgc3RvcmVOYW1lczogQ29uZmlnRGF0YUludGVyZmFjZVsnZGInXVsnU1RPUkVfTkFNRVMnXTtcblxuXHRjb25zdHJ1Y3RvcihkYkRhdGE6IENvbmZpZ0RhdGFJbnRlcmZhY2VbJ2RiJ10sIG1vZGU6IE1vZGVEYXRhSW50ZXJmYWNlKSB7XG5cdFx0dGhpcy5hcHBMb2dnZXIgPSBBcHBMb2dnZXIuZ2V0SW5zdGFuY2UobW9kZSk7XG5cdFx0dGhpcy5zdG9yZU5hbWVzID0gZGJEYXRhLlNUT1JFX05BTUVTO1xuXHRcdHRoaXMubW9kZSA9IG1vZGU7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKFxuXHRcdGRiRGF0YTogQ29uZmlnRGF0YUludGVyZmFjZVsnZGInXSxcblx0XHRtb2RlOiBNb2RlRGF0YUludGVyZmFjZVxuXHQpOiBNdXRhdGlvblRyYWNrZXIge1xuXHRcdGlmICghTXV0YXRpb25UcmFja2VyLmluc3RhbmNlKSB7XG5cdFx0XHRNdXRhdGlvblRyYWNrZXIuaW5zdGFuY2UgPSBuZXcgTXV0YXRpb25UcmFja2VyKGRiRGF0YSwgbW9kZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE11dGF0aW9uVHJhY2tlci5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBwZXJzaXN0TXV0YXRpb24oZGF0YTogTXV0YXRpb25Mb2cpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRjb25zdCBjYWxsZXIgPSAncGVyc2lzdE11dGF0aW9uKCknO1xuXHRcdGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREQigpO1xuXG5cdFx0YXdhaXQgZGIucHV0KCdtdXRhdGlvbnMnLCBkYXRhKTtcblxuXHRcdHRoaXMuYXBwTG9nZ2VyLmxvZyhcblx0XHRcdGBQZXJzaXN0ZWQgbXV0YXRpb246ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCxcblx0XHRcdCdpbmZvJyxcblx0XHRcdHRoaXMubW9kZS5kZWJ1Z0xldmVsLFxuXHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke2NhbGxlcn1gXG5cdFx0KTtcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgZ2V0REIoKTogUHJvbWlzZTxQYWxldHRlREI+IHtcblx0XHRyZXR1cm4gb3BlbkRCPFBhbGV0dGVTY2hlbWE+KCdwYWxldHRlREInLCAxLCB7XG5cdFx0XHR1cGdyYWRlOiBkYiA9PiB7XG5cdFx0XHRcdGNvbnN0IHN0b3JlTmFtZXMgPSBPYmplY3QudmFsdWVzKHRoaXMuc3RvcmVOYW1lcyk7XG5cblx0XHRcdFx0Zm9yIChjb25zdCBzdG9yZU5hbWUgb2Ygc3RvcmVOYW1lcykge1xuXHRcdFx0XHRcdGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZU5hbWUpKSB7XG5cdFx0XHRcdFx0XHRkYi5jcmVhdGVPYmplY3RTdG9yZShzdG9yZU5hbWUsIHsga2V5UGF0aDogJ2tleScgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==