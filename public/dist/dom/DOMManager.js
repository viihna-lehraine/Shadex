const caller = 'DOMManager';
export class DOMManager {
    static #instance = null;
    #paletteRenderer;
    #errors;
    #log;
    constructor(common, paletteRenderer) {
        try {
            common.services.log.info(`Constructing DOMManager instance`, `DOMManager.constructor`);
            this.#errors = common.services.errors;
            this.#log = common.services.log;
            this.#paletteRenderer = paletteRenderer;
        }
        catch (error) {
            throw new Error(`[DOMManager.constructor]: ${error instanceof Error ? error.message : error}`);
        }
    }
    static async getInstance(common, paletteRenderer) {
        return common.services.errors.handleAsync(async () => {
            if (!DOMManager.#instance) {
                common.services.log.debug(`Creating ${caller} instance`, `${caller}.getInstance`);
                return new DOMManager(common, paletteRenderer);
            }
            return DOMManager.#instance;
        }, `[${caller}.getInstance]: Failed to create ${caller} instance.`);
    }
    renderPaletteColumns(columns) {
        this.#errors.handleSync(() => {
            this.#paletteRenderer.renderColumns(columns);
            this.#log.debug('Rendered palette columns.', `${caller}.renderPaletteColumns`);
        }, `[${caller}]: Failed to render palette columns.`);
    }
    updateColumnSize(columnID, newSize) {
        this.#errors.handleSync(() => {
            this.#paletteRenderer.updatePaletteColumnSize(columnID, newSize);
            this.#log.debug(`Updated column size for ID: ${columnID}.`, `${caller}.updateColumnSize`);
        }, `[${caller}]: Failed to update column size.`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9NTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vRE9NTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUM7QUFFNUIsTUFBTSxPQUFPLFVBQVU7SUFDdEIsTUFBTSxDQUFDLFNBQVMsR0FBc0IsSUFBSSxDQUFDO0lBRTNDLGdCQUFnQixDQUF5QjtJQUV6QyxPQUFPLENBQXFCO0lBQzVCLElBQUksQ0FBa0I7SUFFdEIsWUFDQyxNQUF1QixFQUN2QixlQUF1QztRQUV2QyxJQUFJLENBQUM7WUFDSixNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ3ZCLGtDQUFrQyxFQUNsQyx3QkFBd0IsQ0FDeEIsQ0FBQztZQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDdEMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUVoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO1FBQ3pDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQ2QsNkJBQ0MsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FDMUMsRUFBRSxDQUNGLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUN2QixNQUF1QixFQUN2QixlQUF1QztRQUV2QyxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQ3hCLFlBQVksTUFBTSxXQUFXLEVBQzdCLEdBQUcsTUFBTSxjQUFjLENBQ3ZCLENBQUM7Z0JBRUYsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDaEQsQ0FBQztZQUVELE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQztRQUM3QixDQUFDLEVBQUUsSUFBSSxNQUFNLG1DQUFtQyxNQUFNLFlBQVksQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxPQUE2QztRQUNqRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUU3QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FDZCwyQkFBMkIsRUFDM0IsR0FBRyxNQUFNLHVCQUF1QixDQUNoQyxDQUFDO1FBQ0gsQ0FBQyxFQUFFLElBQUksTUFBTSxzQ0FBc0MsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFnQixFQUFFLE9BQWU7UUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ2QsK0JBQStCLFFBQVEsR0FBRyxFQUMxQyxHQUFHLE1BQU0sbUJBQW1CLENBQzVCLENBQUM7UUFDSCxDQUFDLEVBQUUsSUFBSSxNQUFNLGtDQUFrQyxDQUFDLENBQUM7SUFDbEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbkZ1bmN0aW9ucywgU2VydmljZXMsIFN0YXRlIH0gZnJvbSAnLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgUGFsZXR0ZVJlbmRlcmVyU2VydmljZSB9IGZyb20gJy4vUGFsZXR0ZVJlbmRlcmVyU2VydmljZS5qcyc7XG5cbmNvbnN0IGNhbGxlciA9ICdET01NYW5hZ2VyJztcblxuZXhwb3J0IGNsYXNzIERPTU1hbmFnZXIge1xuXHRzdGF0aWMgI2luc3RhbmNlOiBET01NYW5hZ2VyIHwgbnVsbCA9IG51bGw7XG5cblx0I3BhbGV0dGVSZW5kZXJlcjogUGFsZXR0ZVJlbmRlcmVyU2VydmljZTtcblxuXHQjZXJyb3JzOiBTZXJ2aWNlc1snZXJyb3JzJ107XG5cdCNsb2c6IFNlcnZpY2VzWydsb2cnXTtcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKFxuXHRcdGNvbW1vbjogQ29tbW9uRnVuY3Rpb25zLFxuXHRcdHBhbGV0dGVSZW5kZXJlcjogUGFsZXR0ZVJlbmRlcmVyU2VydmljZVxuXHQpIHtcblx0XHR0cnkge1xuXHRcdFx0Y29tbW9uLnNlcnZpY2VzLmxvZy5pbmZvKFxuXHRcdFx0XHRgQ29uc3RydWN0aW5nIERPTU1hbmFnZXIgaW5zdGFuY2VgLFxuXHRcdFx0XHRgRE9NTWFuYWdlci5jb25zdHJ1Y3RvcmBcblx0XHRcdCk7XG5cblx0XHRcdHRoaXMuI2Vycm9ycyA9IGNvbW1vbi5zZXJ2aWNlcy5lcnJvcnM7XG5cdFx0XHR0aGlzLiNsb2cgPSBjb21tb24uc2VydmljZXMubG9nO1xuXG5cdFx0XHR0aGlzLiNwYWxldHRlUmVuZGVyZXIgPSBwYWxldHRlUmVuZGVyZXI7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0YFtET01NYW5hZ2VyLmNvbnN0cnVjdG9yXTogJHtcblx0XHRcdFx0XHRlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IGVycm9yXG5cdFx0XHRcdH1gXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBhc3luYyBnZXRJbnN0YW5jZShcblx0XHRjb21tb246IENvbW1vbkZ1bmN0aW9ucyxcblx0XHRwYWxldHRlUmVuZGVyZXI6IFBhbGV0dGVSZW5kZXJlclNlcnZpY2Vcblx0KTogUHJvbWlzZTxET01NYW5hZ2VyPiB7XG5cdFx0cmV0dXJuIGNvbW1vbi5zZXJ2aWNlcy5lcnJvcnMuaGFuZGxlQXN5bmMoYXN5bmMgKCkgPT4ge1xuXHRcdFx0aWYgKCFET01NYW5hZ2VyLiNpbnN0YW5jZSkge1xuXHRcdFx0XHRjb21tb24uc2VydmljZXMubG9nLmRlYnVnKFxuXHRcdFx0XHRcdGBDcmVhdGluZyAke2NhbGxlcn0gaW5zdGFuY2VgLFxuXHRcdFx0XHRcdGAke2NhbGxlcn0uZ2V0SW5zdGFuY2VgXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cmV0dXJuIG5ldyBET01NYW5hZ2VyKGNvbW1vbiwgcGFsZXR0ZVJlbmRlcmVyKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIERPTU1hbmFnZXIuI2luc3RhbmNlO1xuXHRcdH0sIGBbJHtjYWxsZXJ9LmdldEluc3RhbmNlXTogRmFpbGVkIHRvIGNyZWF0ZSAke2NhbGxlcn0gaW5zdGFuY2UuYCk7XG5cdH1cblxuXHRyZW5kZXJQYWxldHRlQ29sdW1ucyhjb2x1bW5zOiBTdGF0ZVsncGFsZXR0ZUNvbnRhaW5lciddWydjb2x1bW5zJ10pOiB2b2lkIHtcblx0XHR0aGlzLiNlcnJvcnMuaGFuZGxlU3luYygoKSA9PiB7XG5cdFx0XHR0aGlzLiNwYWxldHRlUmVuZGVyZXIucmVuZGVyQ29sdW1ucyhjb2x1bW5zKTtcblxuXHRcdFx0dGhpcy4jbG9nLmRlYnVnKFxuXHRcdFx0XHQnUmVuZGVyZWQgcGFsZXR0ZSBjb2x1bW5zLicsXG5cdFx0XHRcdGAke2NhbGxlcn0ucmVuZGVyUGFsZXR0ZUNvbHVtbnNgXG5cdFx0XHQpO1xuXHRcdH0sIGBbJHtjYWxsZXJ9XTogRmFpbGVkIHRvIHJlbmRlciBwYWxldHRlIGNvbHVtbnMuYCk7XG5cdH1cblxuXHR1cGRhdGVDb2x1bW5TaXplKGNvbHVtbklEOiBudW1iZXIsIG5ld1NpemU6IG51bWJlcik6IHZvaWQge1xuXHRcdHRoaXMuI2Vycm9ycy5oYW5kbGVTeW5jKCgpID0+IHtcblx0XHRcdHRoaXMuI3BhbGV0dGVSZW5kZXJlci51cGRhdGVQYWxldHRlQ29sdW1uU2l6ZShjb2x1bW5JRCwgbmV3U2l6ZSk7XG5cdFx0XHR0aGlzLiNsb2cuZGVidWcoXG5cdFx0XHRcdGBVcGRhdGVkIGNvbHVtbiBzaXplIGZvciBJRDogJHtjb2x1bW5JRH0uYCxcblx0XHRcdFx0YCR7Y2FsbGVyfS51cGRhdGVDb2x1bW5TaXplYFxuXHRcdFx0KTtcblx0XHR9LCBgWyR7Y2FsbGVyfV06IEZhaWxlZCB0byB1cGRhdGUgY29sdW1uIHNpemUuYCk7XG5cdH1cbn1cbiJdfQ==