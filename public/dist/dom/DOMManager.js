// File: dom/DOMManager.ts
const caller = 'DOMManager';
export class DOMManager {
    static #instance = null;
    #paletteRenderer;
    #errors;
    #log;
    constructor(common, paletteRenderer) {
        try {
            common.services.log.info(`Constructing DOMManager instance`, `DOMManager.constructor`);
            this.#errors = common.services.errors;
            this.#log = common.services.log;
            this.#paletteRenderer = paletteRenderer;
        }
        catch (error) {
            throw new Error(`[DOMManager.constructor]: ${error instanceof Error ? error.message : error}`);
        }
    }
    static async getInstance(common, paletteRenderer) {
        return common.services.errors.handleAsync(async () => {
            if (!DOMManager.#instance) {
                common.services.log.debug(`Creating ${caller} instance`, `${caller}.getInstance`);
                return new DOMManager(common, paletteRenderer);
            }
            return DOMManager.#instance;
        }, `[${caller}.getInstance]: Failed to create ${caller} instance.`);
    }
    renderPaletteColumns(columns) {
        this.#errors.handleSync(() => {
            this.#paletteRenderer.renderColumns(columns);
            this.#log.debug('Rendered palette columns.', `${caller}.renderPaletteColumns`);
        }, `[${caller}]: Failed to render palette columns.`);
    }
    updateColumnSize(columnID, newSize) {
        this.#errors.handleSync(() => {
            this.#paletteRenderer.updatePaletteColumnSize(columnID, newSize);
            this.#log.debug(`Updated column size for ID: ${columnID}.`, `${caller}.updateColumnSize`);
        }, `[${caller}]: Failed to update column size.`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9NTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vRE9NTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEI7QUFLMUIsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDO0FBRTVCLE1BQU0sT0FBTyxVQUFVO0lBQ3RCLE1BQU0sQ0FBQyxTQUFTLEdBQXNCLElBQUksQ0FBQztJQUUzQyxnQkFBZ0IsQ0FBeUI7SUFFekMsT0FBTyxDQUFxQjtJQUM1QixJQUFJLENBQWtCO0lBRXRCLFlBQ0MsTUFBdUIsRUFDdkIsZUFBdUM7UUFFdkMsSUFBSSxDQUFDO1lBQ0osTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUN2QixrQ0FBa0MsRUFDbEMsd0JBQXdCLENBQ3hCLENBQUM7WUFFRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFFaEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztRQUN6QyxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixNQUFNLElBQUksS0FBSyxDQUNkLDZCQUNDLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQzFDLEVBQUUsQ0FDRixDQUFDO1FBQ0gsQ0FBQztJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDdkIsTUFBdUIsRUFDdkIsZUFBdUM7UUFFdkMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDcEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUN4QixZQUFZLE1BQU0sV0FBVyxFQUM3QixHQUFHLE1BQU0sY0FBYyxDQUN2QixDQUFDO2dCQUVGLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ2hELENBQUM7WUFFRCxPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDN0IsQ0FBQyxFQUFFLElBQUksTUFBTSxtQ0FBbUMsTUFBTSxZQUFZLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsb0JBQW9CLENBQUMsT0FBNkM7UUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ2QsMkJBQTJCLEVBQzNCLEdBQUcsTUFBTSx1QkFBdUIsQ0FDaEMsQ0FBQztRQUNILENBQUMsRUFBRSxJQUFJLE1BQU0sc0NBQXNDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBZ0IsRUFBRSxPQUFlO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUM1QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUNkLCtCQUErQixRQUFRLEdBQUcsRUFDMUMsR0FBRyxNQUFNLG1CQUFtQixDQUM1QixDQUFDO1FBQ0gsQ0FBQyxFQUFFLElBQUksTUFBTSxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vRE9NTWFuYWdlci50c1xuXG5pbXBvcnQgeyBDb21tb25GdW5jdGlvbnMsIFNlcnZpY2VzLCBTdGF0ZSB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IFBhbGV0dGVSZW5kZXJlclNlcnZpY2UgfSBmcm9tICcuL1BhbGV0dGVSZW5kZXJlclNlcnZpY2UuanMnO1xuXG5jb25zdCBjYWxsZXIgPSAnRE9NTWFuYWdlcic7XG5cbmV4cG9ydCBjbGFzcyBET01NYW5hZ2VyIHtcblx0c3RhdGljICNpbnN0YW5jZTogRE9NTWFuYWdlciB8IG51bGwgPSBudWxsO1xuXG5cdCNwYWxldHRlUmVuZGVyZXI6IFBhbGV0dGVSZW5kZXJlclNlcnZpY2U7XG5cblx0I2Vycm9yczogU2VydmljZXNbJ2Vycm9ycyddO1xuXHQjbG9nOiBTZXJ2aWNlc1snbG9nJ107XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3Rvcihcblx0XHRjb21tb246IENvbW1vbkZ1bmN0aW9ucyxcblx0XHRwYWxldHRlUmVuZGVyZXI6IFBhbGV0dGVSZW5kZXJlclNlcnZpY2Vcblx0KSB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbW1vbi5zZXJ2aWNlcy5sb2cuaW5mbyhcblx0XHRcdFx0YENvbnN0cnVjdGluZyBET01NYW5hZ2VyIGluc3RhbmNlYCxcblx0XHRcdFx0YERPTU1hbmFnZXIuY29uc3RydWN0b3JgXG5cdFx0XHQpO1xuXG5cdFx0XHR0aGlzLiNlcnJvcnMgPSBjb21tb24uc2VydmljZXMuZXJyb3JzO1xuXHRcdFx0dGhpcy4jbG9nID0gY29tbW9uLnNlcnZpY2VzLmxvZztcblxuXHRcdFx0dGhpcy4jcGFsZXR0ZVJlbmRlcmVyID0gcGFsZXR0ZVJlbmRlcmVyO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBbRE9NTWFuYWdlci5jb25zdHJ1Y3Rvcl06ICR7XG5cdFx0XHRcdFx0ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvclxuXHRcdFx0XHR9YFxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UoXG5cdFx0Y29tbW9uOiBDb21tb25GdW5jdGlvbnMsXG5cdFx0cGFsZXR0ZVJlbmRlcmVyOiBQYWxldHRlUmVuZGVyZXJTZXJ2aWNlXG5cdCk6IFByb21pc2U8RE9NTWFuYWdlcj4ge1xuXHRcdHJldHVybiBjb21tb24uc2VydmljZXMuZXJyb3JzLmhhbmRsZUFzeW5jKGFzeW5jICgpID0+IHtcblx0XHRcdGlmICghRE9NTWFuYWdlci4jaW5zdGFuY2UpIHtcblx0XHRcdFx0Y29tbW9uLnNlcnZpY2VzLmxvZy5kZWJ1Zyhcblx0XHRcdFx0XHRgQ3JlYXRpbmcgJHtjYWxsZXJ9IGluc3RhbmNlYCxcblx0XHRcdFx0XHRgJHtjYWxsZXJ9LmdldEluc3RhbmNlYFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdHJldHVybiBuZXcgRE9NTWFuYWdlcihjb21tb24sIHBhbGV0dGVSZW5kZXJlcik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBET01NYW5hZ2VyLiNpbnN0YW5jZTtcblx0XHR9LCBgWyR7Y2FsbGVyfS5nZXRJbnN0YW5jZV06IEZhaWxlZCB0byBjcmVhdGUgJHtjYWxsZXJ9IGluc3RhbmNlLmApO1xuXHR9XG5cblx0cmVuZGVyUGFsZXR0ZUNvbHVtbnMoY29sdW1uczogU3RhdGVbJ3BhbGV0dGVDb250YWluZXInXVsnY29sdW1ucyddKTogdm9pZCB7XG5cdFx0dGhpcy4jZXJyb3JzLmhhbmRsZVN5bmMoKCkgPT4ge1xuXHRcdFx0dGhpcy4jcGFsZXR0ZVJlbmRlcmVyLnJlbmRlckNvbHVtbnMoY29sdW1ucyk7XG5cblx0XHRcdHRoaXMuI2xvZy5kZWJ1Zyhcblx0XHRcdFx0J1JlbmRlcmVkIHBhbGV0dGUgY29sdW1ucy4nLFxuXHRcdFx0XHRgJHtjYWxsZXJ9LnJlbmRlclBhbGV0dGVDb2x1bW5zYFxuXHRcdFx0KTtcblx0XHR9LCBgWyR7Y2FsbGVyfV06IEZhaWxlZCB0byByZW5kZXIgcGFsZXR0ZSBjb2x1bW5zLmApO1xuXHR9XG5cblx0dXBkYXRlQ29sdW1uU2l6ZShjb2x1bW5JRDogbnVtYmVyLCBuZXdTaXplOiBudW1iZXIpOiB2b2lkIHtcblx0XHR0aGlzLiNlcnJvcnMuaGFuZGxlU3luYygoKSA9PiB7XG5cdFx0XHR0aGlzLiNwYWxldHRlUmVuZGVyZXIudXBkYXRlUGFsZXR0ZUNvbHVtblNpemUoY29sdW1uSUQsIG5ld1NpemUpO1xuXHRcdFx0dGhpcy4jbG9nLmRlYnVnKFxuXHRcdFx0XHRgVXBkYXRlZCBjb2x1bW4gc2l6ZSBmb3IgSUQ6ICR7Y29sdW1uSUR9LmAsXG5cdFx0XHRcdGAke2NhbGxlcn0udXBkYXRlQ29sdW1uU2l6ZWBcblx0XHRcdCk7XG5cdFx0fSwgYFske2NhbGxlcn1dOiBGYWlsZWQgdG8gdXBkYXRlIGNvbHVtbiBzaXplLmApO1xuXHR9XG59XG4iXX0=