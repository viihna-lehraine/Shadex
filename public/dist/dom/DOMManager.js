// File: dom/DOMManager.ts
const caller = 'DOMManager';
export class DOMManager {
    static #instance = null;
    #paletteRenderer;
    #errors;
    #log;
    constructor(common, paletteRenderer) {
        try {
            common.services.log.info(`Constructing DOMManager instance`, `DOMManager.constructor`);
            this.#errors = common.services.errors;
            this.#log = common.services.log;
            this.#paletteRenderer = paletteRenderer;
        }
        catch (error) {
            throw new Error(`[DOMManager.constructor]: ${error instanceof Error ? error.message : error}`);
        }
    }
    static async getInstance(common, paletteRenderer) {
        return common.services.errors.handleAsync(async () => {
            if (!DOMManager.#instance) {
                common.services.log.debug(`Creating ${caller} instance`, `${caller}.getInstance`);
                return new DOMManager(common, paletteRenderer);
            }
            return DOMManager.#instance;
        }, `[${caller}.getInstance]: Failed to create ${caller} instance.`);
    }
    renderPaletteColumns(columns) {
        this.#errors.handleSync(() => {
            this.#paletteRenderer.renderColumns(columns);
            this.#log.debug('Rendered palette columns.', `${caller}.renderPaletteColumns`);
        }, `[${caller}]: Failed to render palette columns.`);
    }
    updateColumnSize(columnID, newSize) {
        this.#errors.handleSync(() => {
            this.#paletteRenderer.updatePaletteColumnSize(columnID, newSize);
            this.#log.debug(`Updated column size for ID: ${columnID}.`, `${caller}.updateColumnSize`);
        }, `[${caller}]: Failed to update column size.`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9NTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vRE9NTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEI7QUFLMUIsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDO0FBRTVCLE1BQU0sT0FBTyxVQUFVO0lBQ3RCLE1BQU0sQ0FBQyxTQUFTLEdBQXNCLElBQUksQ0FBQztJQUUzQyxnQkFBZ0IsQ0FBeUI7SUFFekMsT0FBTyxDQUFxQjtJQUM1QixJQUFJLENBQWtCO0lBRXRCLFlBQ0MsTUFBdUIsRUFDdkIsZUFBdUM7UUFFdkMsSUFBSSxDQUFDO1lBQ0osTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUN2QixrQ0FBa0MsRUFDbEMsd0JBQXdCLENBQ3hCLENBQUM7WUFFRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFFaEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztRQUN6QyxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixNQUFNLElBQUksS0FBSyxDQUNkLDZCQUNDLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQzFDLEVBQUUsQ0FDRixDQUFDO1FBQ0gsQ0FBQztJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDdkIsTUFBdUIsRUFDdkIsZUFBdUM7UUFFdkMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDcEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUN4QixZQUFZLE1BQU0sV0FBVyxFQUM3QixHQUFHLE1BQU0sY0FBYyxDQUN2QixDQUFDO2dCQUVGLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ2hELENBQUM7WUFFRCxPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDN0IsQ0FBQyxFQUFFLElBQUksTUFBTSxtQ0FBbUMsTUFBTSxZQUFZLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsb0JBQW9CLENBQUMsT0FBNkM7UUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ2QsMkJBQTJCLEVBQzNCLEdBQUcsTUFBTSx1QkFBdUIsQ0FDaEMsQ0FBQztRQUNILENBQUMsRUFBRSxJQUFJLE1BQU0sc0NBQXNDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBZ0IsRUFBRSxPQUFlO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUM1QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUNkLCtCQUErQixRQUFRLEdBQUcsRUFDMUMsR0FBRyxNQUFNLG1CQUFtQixDQUM1QixDQUFDO1FBQ0gsQ0FBQyxFQUFFLElBQUksTUFBTSxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vRE9NTWFuYWdlci50c1xuXG5pbXBvcnQgeyBDb21tb25GdW5jdGlvbnMsIFNlcnZpY2VzLCBTdGF0ZSB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IFBhbGV0dGVSZW5kZXJlclNlcnZpY2UgfSBmcm9tICcuL2luZGV4LmpzJztcblxuY29uc3QgY2FsbGVyID0gJ0RPTU1hbmFnZXInO1xuXG5leHBvcnQgY2xhc3MgRE9NTWFuYWdlciB7XG5cdHN0YXRpYyAjaW5zdGFuY2U6IERPTU1hbmFnZXIgfCBudWxsID0gbnVsbDtcblxuXHQjcGFsZXR0ZVJlbmRlcmVyOiBQYWxldHRlUmVuZGVyZXJTZXJ2aWNlO1xuXG5cdCNlcnJvcnM6IFNlcnZpY2VzWydlcnJvcnMnXTtcblx0I2xvZzogU2VydmljZXNbJ2xvZyddO1xuXG5cdHByaXZhdGUgY29uc3RydWN0b3IoXG5cdFx0Y29tbW9uOiBDb21tb25GdW5jdGlvbnMsXG5cdFx0cGFsZXR0ZVJlbmRlcmVyOiBQYWxldHRlUmVuZGVyZXJTZXJ2aWNlXG5cdCkge1xuXHRcdHRyeSB7XG5cdFx0XHRjb21tb24uc2VydmljZXMubG9nLmluZm8oXG5cdFx0XHRcdGBDb25zdHJ1Y3RpbmcgRE9NTWFuYWdlciBpbnN0YW5jZWAsXG5cdFx0XHRcdGBET01NYW5hZ2VyLmNvbnN0cnVjdG9yYFxuXHRcdFx0KTtcblxuXHRcdFx0dGhpcy4jZXJyb3JzID0gY29tbW9uLnNlcnZpY2VzLmVycm9ycztcblx0XHRcdHRoaXMuI2xvZyA9IGNvbW1vbi5zZXJ2aWNlcy5sb2c7XG5cblx0XHRcdHRoaXMuI3BhbGV0dGVSZW5kZXJlciA9IHBhbGV0dGVSZW5kZXJlcjtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgW0RPTU1hbmFnZXIuY29uc3RydWN0b3JdOiAke1xuXHRcdFx0XHRcdGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3Jcblx0XHRcdFx0fWBcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGFzeW5jIGdldEluc3RhbmNlKFxuXHRcdGNvbW1vbjogQ29tbW9uRnVuY3Rpb25zLFxuXHRcdHBhbGV0dGVSZW5kZXJlcjogUGFsZXR0ZVJlbmRlcmVyU2VydmljZVxuXHQpOiBQcm9taXNlPERPTU1hbmFnZXI+IHtcblx0XHRyZXR1cm4gY29tbW9uLnNlcnZpY2VzLmVycm9ycy5oYW5kbGVBc3luYyhhc3luYyAoKSA9PiB7XG5cdFx0XHRpZiAoIURPTU1hbmFnZXIuI2luc3RhbmNlKSB7XG5cdFx0XHRcdGNvbW1vbi5zZXJ2aWNlcy5sb2cuZGVidWcoXG5cdFx0XHRcdFx0YENyZWF0aW5nICR7Y2FsbGVyfSBpbnN0YW5jZWAsXG5cdFx0XHRcdFx0YCR7Y2FsbGVyfS5nZXRJbnN0YW5jZWBcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRyZXR1cm4gbmV3IERPTU1hbmFnZXIoY29tbW9uLCBwYWxldHRlUmVuZGVyZXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gRE9NTWFuYWdlci4jaW5zdGFuY2U7XG5cdFx0fSwgYFske2NhbGxlcn0uZ2V0SW5zdGFuY2VdOiBGYWlsZWQgdG8gY3JlYXRlICR7Y2FsbGVyfSBpbnN0YW5jZS5gKTtcblx0fVxuXG5cdHJlbmRlclBhbGV0dGVDb2x1bW5zKGNvbHVtbnM6IFN0YXRlWydwYWxldHRlQ29udGFpbmVyJ11bJ2NvbHVtbnMnXSk6IHZvaWQge1xuXHRcdHRoaXMuI2Vycm9ycy5oYW5kbGVTeW5jKCgpID0+IHtcblx0XHRcdHRoaXMuI3BhbGV0dGVSZW5kZXJlci5yZW5kZXJDb2x1bW5zKGNvbHVtbnMpO1xuXG5cdFx0XHR0aGlzLiNsb2cuZGVidWcoXG5cdFx0XHRcdCdSZW5kZXJlZCBwYWxldHRlIGNvbHVtbnMuJyxcblx0XHRcdFx0YCR7Y2FsbGVyfS5yZW5kZXJQYWxldHRlQ29sdW1uc2Bcblx0XHRcdCk7XG5cdFx0fSwgYFske2NhbGxlcn1dOiBGYWlsZWQgdG8gcmVuZGVyIHBhbGV0dGUgY29sdW1ucy5gKTtcblx0fVxuXG5cdHVwZGF0ZUNvbHVtblNpemUoY29sdW1uSUQ6IG51bWJlciwgbmV3U2l6ZTogbnVtYmVyKTogdm9pZCB7XG5cdFx0dGhpcy4jZXJyb3JzLmhhbmRsZVN5bmMoKCkgPT4ge1xuXHRcdFx0dGhpcy4jcGFsZXR0ZVJlbmRlcmVyLnVwZGF0ZVBhbGV0dGVDb2x1bW5TaXplKGNvbHVtbklELCBuZXdTaXplKTtcblx0XHRcdHRoaXMuI2xvZy5kZWJ1Zyhcblx0XHRcdFx0YFVwZGF0ZWQgY29sdW1uIHNpemUgZm9yIElEOiAke2NvbHVtbklEfS5gLFxuXHRcdFx0XHRgJHtjYWxsZXJ9LnVwZGF0ZUNvbHVtblNpemVgXG5cdFx0XHQpO1xuXHRcdH0sIGBbJHtjYWxsZXJ9XTogRmFpbGVkIHRvIHVwZGF0ZSBjb2x1bW4gc2l6ZS5gKTtcblx0fVxufVxuIl19