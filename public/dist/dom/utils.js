// File: dom/eventListeners/utils.js
import { createLogger } from '../logger/factory.js';
import { commonFn } from '../common/index.js';
import { modeData as mode } from '../data/mode.js';
const logMode = mode.logging;
const thisModule = 'dom/eventListeners/utils.js';
const appUtils = commonFn.utils;
const coreUtils = commonFn.core;
const logger = await createLogger();
// 1. BASE DOM UTILITIES
async function switchColorSpace(targetFormat) {
    const thisMethod = 'switchColorSpace()';
    try {
        const colorTextOutputBoxes = document.querySelectorAll('.color-text-output-box');
        for (const box of colorTextOutputBoxes) {
            const inputBox = box;
            const colorValues = inputBox.colorValues;
            if (!colorValues || !coreUtils.validate.colorValues(colorValues)) {
                if (logMode.error)
                    logger.error('Invalid color values. Cannot display toast.', `${thisModule} > ${thisMethod}`);
                continue;
            }
            const currentFormat = inputBox.getAttribute('data-format');
            if (!mode.quiet && logMode.info && logMode.verbosity >= 2)
                logger.info(`Converting from ${currentFormat} to ${targetFormat}`, `${thisModule} > ${thisMethod}`);
            const convertFn = appUtils.conversion.getConversionFn(currentFormat, targetFormat);
            if (!convertFn) {
                if (logMode.error)
                    logger.error(`Conversion from ${currentFormat} to ${targetFormat} is not supported.`, `${thisModule} > ${thisMethod}`);
                continue;
            }
            if (colorValues.format === 'xyz') {
                if (logMode.error)
                    logger.error('Cannot convert from XYZ to another color space.', `${thisModule} > ${thisMethod}`);
                continue;
            }
            const clonedColor = await appUtils.color.narrowToColor(colorValues);
            if (!clonedColor ||
                appUtils.color.isSLColor(clonedColor) ||
                appUtils.color.isSVColor(clonedColor) ||
                appUtils.color.isXYZ(clonedColor)) {
                if (logMode.verbosity >= 3 && logMode.error)
                    logger.error('Cannot convert from SL, SV, or XYZ color spaces. Please convert to a supported format first.', `${thisModule} > ${thisMethod}`);
                continue;
            }
            if (!clonedColor) {
                if (logMode.error)
                    logger.error(`Conversion to ${targetFormat} failed.`, `${thisModule} > ${thisMethod}`);
                continue;
            }
            const newColor = coreUtils.base.clone(convertFn(clonedColor));
            if (!newColor) {
                if (logMode.error)
                    logger.error(`Conversion to ${targetFormat} failed.`, `${thisModule} > ${thisMethod}`);
                continue;
            }
            inputBox.value = String(newColor);
            inputBox.setAttribute('data-format', targetFormat);
        }
    }
    catch (error) {
        if (!mode.quiet && logMode.warn)
            logger.warn('Failed to convert colors.', `${thisModule} > ${thisMethod}`);
        else if (!mode.gracefulErrors)
            throw new Error(`Failed to convert colors: ${error}`);
        else if (logMode.error)
            logger.error(`Failed to convert colors: ${error}`);
    }
}
// 2. EVENT UTILITIES
export function addEventListener(id, eventType, callback) {
    const thisFunction = 'addEventListener()';
    const element = document.getElementById(id);
    if (element) {
        element.addEventListener(eventType, callback);
    }
    else if (logMode.warn) {
        if (mode.debug && logMode.warn && logMode.verbosity > 2)
            logger.warn(`Element with id "${id}" not found.`, `${thisModule} > ${thisFunction}`);
    }
}
export const addConversionListener = (id, colorSpace) => {
    const thisFunction = 'addConversionListener()';
    const btn = document.getElementById(id);
    if (btn) {
        if (coreUtils.guards.isColorSpace(colorSpace)) {
            btn.addEventListener('click', () => switchColorSpace(colorSpace));
        }
        else {
            if (logMode.warn) {
                logger.warn(`Invalid color space provided: ${colorSpace}`, `${thisModule} > ${thisFunction}`);
            }
        }
    }
    else {
        if (logMode.warn)
            logger.warn(`Element with id "${id}" not found.`, `${thisModule} > ${thisFunction}`);
    }
};
const event = {
    addEventListener,
    addConversionListener
};
// 3. FILE UTILS
export function download(data, filename, type) {
    const blob = new Blob([data], { type });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
}
export function readFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = () => reject(reader.error);
        reader.readAsText(file);
    });
}
const file = {
    download,
    readFile
};
export const utils = {
    switchColorSpace,
    event,
    file
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9DQUFvQztBQU9wQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUU3QixNQUFNLFVBQVUsR0FBRyw2QkFBNkIsQ0FBQztBQUVqRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQ2hDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFFaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyx3QkFBd0I7QUFFeEIsS0FBSyxVQUFVLGdCQUFnQixDQUFDLFlBQXdCO0lBQ3ZELE1BQU0sVUFBVSxHQUFHLG9CQUFvQixDQUFDO0lBRXhDLElBQUksQ0FBQztRQUNKLE1BQU0sb0JBQW9CLEdBQ3pCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FDeEIsd0JBQXdCLENBQ3hCLENBQUM7UUFFSCxLQUFLLE1BQU0sR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7WUFDeEMsTUFBTSxRQUFRLEdBQUcsR0FBd0IsQ0FBQztZQUMxQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO1lBRXpDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO2dCQUNsRSxJQUFJLE9BQU8sQ0FBQyxLQUFLO29CQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLDZDQUE2QyxFQUM3QyxHQUFHLFVBQVUsTUFBTSxVQUFV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QUUsRUFBRTtRQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBRWhDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFnQixDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxJQUFJLEdBQTJDO0lBQ3BELFFBQVE7SUFDUixRQUFRO0NBQ1IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBbUM7SUFDcEQsZ0JBQWdCO0lBQ2hCLEtBQUs7SUFDTCxJQUFJO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGRvbS9ldmVudExpc3RlbmVycy91dGlscy5qc1xuXG5pbXBvcnQge1xuXHRDb2xvcklucHV0RWxlbWVudCxcblx0Q29sb3JTcGFjZSxcblx0RE9NRm5fTWFzdGVySW50ZXJmYWNlXG59IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlci9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGNvbW1vbkZuIH0gZnJvbSAnLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5jb25zdCB0aGlzTW9kdWxlID0gJ2RvbS9ldmVudExpc3RlbmVycy91dGlscy5qcyc7XG5cbmNvbnN0IGFwcFV0aWxzID0gY29tbW9uRm4udXRpbHM7XG5jb25zdCBjb3JlVXRpbHMgPSBjb21tb25Gbi5jb3JlO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuLy8gMS4gQkFTRSBET00gVVRJTElUSUVTXG5cbmFzeW5jIGZ1bmN0aW9uIHN3aXRjaENvbG9yU3BhY2UodGFyZ2V0Rm9ybWF0OiBDb2xvclNwYWNlKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IHRoaXNNZXRob2QgPSAnc3dpdGNoQ29sb3JTcGFjZSgpJztcblxuXHR0cnkge1xuXHRcdGNvbnN0IGNvbG9yVGV4dE91dHB1dEJveGVzID1cblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTElucHV0RWxlbWVudD4oXG5cdFx0XHRcdCcuY29sb3ItdGV4dC1vdXRwdXQtYm94J1xuXHRcdFx0KTtcblxuXHRcdGZvciAoY29uc3QgYm94IG9mIGNvbG9yVGV4dE91dHB1dEJveGVzKSB7XG5cdFx0XHRjb25zdCBpbnB1dEJveCA9IGJveCBhcyBDb2xvcklucHV0RWxlbWVudDtcblx0XHRcdGNvbnN0IGNvbG9yVmFsdWVzID0gaW5wdXRCb3guY29sb3JWYWx1ZXM7XG5cblx0XHRcdGlmICghY29sb3JWYWx1ZXMgfHwgIWNvcmVVdGlscy52YWxpZGF0ZS5jb2xvclZhbHVlcyhjb2xvclZhbHVlcykpIHtcblx0XHRcdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRcdFx0J0ludmFsaWQgY29sb3IgdmFsdWVzLiBDYW5ub3QgZGlzcGxheSB0b2FzdC4nLFxuXHRcdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGN1cnJlbnRGb3JtYXQgPSBpbnB1dEJveC5nZXRBdHRyaWJ1dGUoXG5cdFx0XHRcdCdkYXRhLWZvcm1hdCdcblx0XHRcdCkgYXMgQ29sb3JTcGFjZTtcblxuXHRcdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUuaW5mbyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSAyKVxuXHRcdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRgQ29udmVydGluZyBmcm9tICR7Y3VycmVudEZvcm1hdH0gdG8gJHt0YXJnZXRGb3JtYXR9YCxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHRcdCk7XG5cblx0XHRcdGNvbnN0IGNvbnZlcnRGbiA9IGFwcFV0aWxzLmNvbnZlcnNpb24uZ2V0Q29udmVyc2lvbkZuKFxuXHRcdFx0XHRjdXJyZW50Rm9ybWF0LFxuXHRcdFx0XHR0YXJnZXRGb3JtYXRcblx0XHRcdCk7XG5cblx0XHRcdGlmICghY29udmVydEZuKSB7XG5cdFx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdGBDb252ZXJzaW9uIGZyb20gJHtjdXJyZW50Rm9ybWF0fSB0byAke3RhcmdldEZvcm1hdH0gaXMgbm90IHN1cHBvcnRlZC5gLFxuXHRcdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjb2xvclZhbHVlcy5mb3JtYXQgPT09ICd4eXonKSB7XG5cdFx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdCdDYW5ub3QgY29udmVydCBmcm9tIFhZWiB0byBhbm90aGVyIGNvbG9yIHNwYWNlLicsXG5cdFx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY2xvbmVkQ29sb3IgPSBhd2FpdCBhcHBVdGlscy5jb2xvci5uYXJyb3dUb0NvbG9yKGNvbG9yVmFsdWVzKTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHQhY2xvbmVkQ29sb3IgfHxcblx0XHRcdFx0YXBwVXRpbHMuY29sb3IuaXNTTENvbG9yKGNsb25lZENvbG9yKSB8fFxuXHRcdFx0XHRhcHBVdGlscy5jb2xvci5pc1NWQ29sb3IoY2xvbmVkQ29sb3IpIHx8XG5cdFx0XHRcdGFwcFV0aWxzLmNvbG9yLmlzWFlaKGNsb25lZENvbG9yKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGlmIChsb2dNb2RlLnZlcmJvc2l0eSA+PSAzICYmIGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRcdFx0J0Nhbm5vdCBjb252ZXJ0IGZyb20gU0wsIFNWLCBvciBYWVogY29sb3Igc3BhY2VzLiBQbGVhc2UgY29udmVydCB0byBhIHN1cHBvcnRlZCBmb3JtYXQgZmlyc3QuJyxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWNsb25lZENvbG9yKSB7XG5cdFx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdGBDb252ZXJzaW9uIHRvICR7dGFyZ2V0Rm9ybWF0fSBmYWlsZWQuYCxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBuZXdDb2xvciA9IGNvcmVVdGlscy5iYXNlLmNsb25lKGNvbnZlcnRGbihjbG9uZWRDb2xvcikpO1xuXG5cdFx0XHRpZiAoIW5ld0NvbG9yKSB7XG5cdFx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdGBDb252ZXJzaW9uIHRvICR7dGFyZ2V0Rm9ybWF0fSBmYWlsZWQuYCxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpbnB1dEJveC52YWx1ZSA9IFN0cmluZyhuZXdDb2xvcik7XG5cblx0XHRcdGlucHV0Qm94LnNldEF0dHJpYnV0ZSgnZGF0YS1mb3JtYXQnLCB0YXJnZXRGb3JtYXQpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS53YXJuKVxuXHRcdFx0bG9nZ2VyLndhcm4oXG5cdFx0XHRcdCdGYWlsZWQgdG8gY29udmVydCBjb2xvcnMuJyxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0KTtcblx0XHRlbHNlIGlmICghbW9kZS5ncmFjZWZ1bEVycm9ycylcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNvbnZlcnQgY29sb3JzOiAke2Vycm9yIGFzIEVycm9yfWApO1xuXHRcdGVsc2UgaWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRsb2dnZXIuZXJyb3IoYEZhaWxlZCB0byBjb252ZXJ0IGNvbG9yczogJHtlcnJvciBhcyBFcnJvcn1gKTtcblx0fVxufVxuXG4vLyAyLiBFVkVOVCBVVElMSVRJRVNcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIEhUTUxFbGVtZW50RXZlbnRNYXA+KFxuXHRpZDogc3RyaW5nLFxuXHRldmVudFR5cGU6IEssXG5cdGNhbGxiYWNrOiAoZXY6IEhUTUxFbGVtZW50RXZlbnRNYXBbS10pID0+IHZvaWRcbik6IHZvaWQge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnYWRkRXZlbnRMaXN0ZW5lcigpJztcblx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuXHRpZiAoZWxlbWVudCkge1xuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrKTtcblx0fSBlbHNlIGlmIChsb2dNb2RlLndhcm4pIHtcblx0XHRpZiAobW9kZS5kZWJ1ZyAmJiBsb2dNb2RlLndhcm4gJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAyKVxuXHRcdFx0bG9nZ2VyLndhcm4oXG5cdFx0XHRcdGBFbGVtZW50IHdpdGggaWQgXCIke2lkfVwiIG5vdCBmb3VuZC5gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGFkZENvbnZlcnNpb25MaXN0ZW5lciA9IChpZDogc3RyaW5nLCBjb2xvclNwYWNlOiBzdHJpbmcpID0+IHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ2FkZENvbnZlcnNpb25MaXN0ZW5lcigpJztcblxuXHRjb25zdCBidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXG5cdGlmIChidG4pIHtcblx0XHRpZiAoY29yZVV0aWxzLmd1YXJkcy5pc0NvbG9yU3BhY2UoY29sb3JTcGFjZSkpIHtcblx0XHRcdGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+XG5cdFx0XHRcdHN3aXRjaENvbG9yU3BhY2UoY29sb3JTcGFjZSBhcyBDb2xvclNwYWNlKVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKGxvZ01vZGUud2Fybikge1xuXHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRgSW52YWxpZCBjb2xvciBzcGFjZSBwcm92aWRlZDogJHtjb2xvclNwYWNlfWAsXG5cdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGlmIChsb2dNb2RlLndhcm4pXG5cdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0YEVsZW1lbnQgd2l0aCBpZCBcIiR7aWR9XCIgbm90IGZvdW5kLmAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fVxufTtcblxuY29uc3QgZXZlbnQ6IERPTUZuX01hc3RlckludGVyZmFjZVsndXRpbHMnXVsnZXZlbnQnXSA9IHtcblx0YWRkRXZlbnRMaXN0ZW5lcixcblx0YWRkQ29udmVyc2lvbkxpc3RlbmVyXG59O1xuXG4vLyAzLiBGSUxFIFVUSUxTXG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZChkYXRhOiBzdHJpbmcsIGZpbGVuYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZyk6IHZvaWQge1xuXHRjb25zdCBibG9iID0gbmV3IEJsb2IoW2RhdGFdLCB7IHR5cGUgfSk7XG5cdGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cblx0YS5ocmVmID0gdXJsO1xuXHRhLmRvd25sb2FkID0gZmlsZW5hbWU7XG5cdGEuY2xpY2soKTtcblxuXHRVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZShmaWxlOiBGaWxlKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG5cdFx0cmVhZGVyLm9ubG9hZCA9ICgpID0+IHJlc29sdmUocmVhZGVyLnJlc3VsdCBhcyBzdHJpbmcpO1xuXHRcdHJlYWRlci5vbmVycm9yID0gKCkgPT4gcmVqZWN0KHJlYWRlci5lcnJvcik7XG5cblx0XHRyZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcblx0fSk7XG59XG5cbmNvbnN0IGZpbGU6IERPTUZuX01hc3RlckludGVyZmFjZVsndXRpbHMnXVsnZmlsZSddID0ge1xuXHRkb3dubG9hZCxcblx0cmVhZEZpbGVcbn07XG5cbmV4cG9ydCBjb25zdCB1dGlsczogRE9NRm5fTWFzdGVySW50ZXJmYWNlWyd1dGlscyddID0ge1xuXHRzd2l0Y2hDb2xvclNwYWNlLFxuXHRldmVudCxcblx0ZmlsZVxufTtcbiJdfQ==