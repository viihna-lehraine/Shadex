// File: dom/eventListeners/temp.js
import { createLogger } from '../../logger/factory.js';
import { constsData as consts } from '../../data/consts.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const timeouts = consts.timeouts;
const thisModule = 'dom/eventListeners/groups/temp.js';
const logger = await createLogger();
export function showToast(message) {
    const thisMethod = 'showToast()';
    const toast = document.createElement('div');
    toast.className = 'toast-message';
    toast.textContent = message;
    document.body.appendChild(toast);
    if (!mode.quiet && logMode.verbosity > 3)
        logger.info('Toast message added', `${thisModule} > ${thisMethod}`);
    setTimeout(() => {
        toast.classList.add('fade-out');
        if (!mode.quiet && logMode.verbosity > 3)
            logger.info('Toast message faded out', `${thisModule} > ${thisMethod}`);
        toast.addEventListener('transitioned', () => toast.remove());
    }, timeouts.toast || 3000);
}
export function showTooltip(tooltipElement) {
    const thisMethod = 'showTooltip()';
    try {
        const tooltip = tooltipElement.querySelector('.tooltiptext');
        if (tooltip) {
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
            setTimeout(() => {
                tooltip.style.visibility = 'hidden';
                tooltip.style.opacity = '0';
            }, consts.timeouts.tooltip || 1000);
        }
        if (!mode.quiet && logMode.verbosity > 3)
            logger.info('showTooltip executed', `${thisModule} > ${thisMethod}`);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Failed to execute showTooltip: ${error}`, `${thisModule} > ${thisMethod}`);
    }
}
export const tempListeners = {
    showToast,
    showTooltip
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kb20vZXZlbnRMaXN0ZW5lcnMvdGVtcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFFbkMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsSUFBSSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzdCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFFakMsTUFBTSxVQUFVLEdBQUcsbUNBQW1DLENBQUM7QUFFdkQsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxNQUFNLFVBQVUsU0FBUyxDQUFDLE9BQWU7SUFDeEMsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDO0lBQ2pDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUM7SUFFbEMsS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7SUFFNUIsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFakMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQUMsQ0FBQztJQUVyRSxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2YsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQ1YseUJBQXlCLEVBQ3pCLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO1FBRUgsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDLEVBQUUsUUFBUSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxjQUEyQjtJQUN0RCxNQUFNLFVBQVUsR0FBRyxlQUFlLENBQUM7SUFFbkMsSUFBSSxDQUFDO1FBQ0osTUFBTSxPQUFPLEdBQ1osY0FBYyxDQUFDLGFBQWEsQ0FBYyxjQUFjLENBQUMsQ0FBQztRQUUzRCxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztZQUM1QixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztnQkFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1lBQzdCLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNyQyxDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQ1Ysc0JBQXNCLEVBQ3RCLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLGtDQUFrQyxLQUFLLEVBQUUsRUFDekMsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7SUFDSixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRztJQUM1QixTQUFTO0lBQ1QsV0FBVztDQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vZXZlbnRMaXN0ZW5lcnMvdGVtcC5qc1xuXG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjb25zdHNEYXRhIGFzIGNvbnN0cyB9IGZyb20gJy4uLy4uL2RhdGEvY29uc3RzLmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi8uLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuY29uc3QgdGltZW91dHMgPSBjb25zdHMudGltZW91dHM7XG5cbmNvbnN0IHRoaXNNb2R1bGUgPSAnZG9tL2V2ZW50TGlzdGVuZXJzL2dyb3Vwcy90ZW1wLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93VG9hc3QobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdGNvbnN0IHRoaXNNZXRob2QgPSAnc2hvd1RvYXN0KCknO1xuXHRjb25zdCB0b2FzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG5cdHRvYXN0LmNsYXNzTmFtZSA9ICd0b2FzdC1tZXNzYWdlJztcblxuXHR0b2FzdC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG5cblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0b2FzdCk7XG5cblx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMylcblx0XHRsb2dnZXIuaW5mbygnVG9hc3QgbWVzc2FnZSBhZGRlZCcsIGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWApO1xuXG5cdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdHRvYXN0LmNsYXNzTGlzdC5hZGQoJ2ZhZGUtb3V0Jyk7XG5cblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAzKVxuXHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdCdUb2FzdCBtZXNzYWdlIGZhZGVkIG91dCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdCk7XG5cblx0XHR0b2FzdC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZWQnLCAoKSA9PiB0b2FzdC5yZW1vdmUoKSk7XG5cdH0sIHRpbWVvdXRzLnRvYXN0IHx8IDMwMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd1Rvb2x0aXAodG9vbHRpcEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cdGNvbnN0IHRoaXNNZXRob2QgPSAnc2hvd1Rvb2x0aXAoKSc7XG5cblx0dHJ5IHtcblx0XHRjb25zdCB0b29sdGlwID1cblx0XHRcdHRvb2x0aXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KCcudG9vbHRpcHRleHQnKTtcblxuXHRcdGlmICh0b29sdGlwKSB7XG5cdFx0XHR0b29sdGlwLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG5cdFx0XHR0b29sdGlwLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dG9vbHRpcC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG5cdFx0XHRcdHRvb2x0aXAuc3R5bGUub3BhY2l0eSA9ICcwJztcblx0XHRcdH0sIGNvbnN0cy50aW1lb3V0cy50b29sdGlwIHx8IDEwMDApO1xuXHRcdH1cblxuXHRcdGlmICghbW9kZS5xdWlldCAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDMpXG5cdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0J3Nob3dUb29sdGlwIGV4ZWN1dGVkJyxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcilcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEZhaWxlZCB0byBleGVjdXRlIHNob3dUb29sdGlwOiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHRlbXBMaXN0ZW5lcnMgPSB7XG5cdHNob3dUb2FzdCxcblx0c2hvd1Rvb2x0aXBcbn07XG4iXX0=