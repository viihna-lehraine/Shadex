// File: dom/eventListeners/temp.js
import { createLogger } from '../../logger/factory.js';
import { constsData as consts } from '../../data/consts.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const timeouts = consts.timeouts;
const thisModule = 'dom/eventListeners/groups/temp.js';
const logger = await createLogger();
export function showToast(message) {
    const thisMethod = 'showToast()';
    const toast = document.createElement('div');
    toast.className = 'toast-message';
    toast.textContent = message;
    document.body.appendChild(toast);
    if (logMode.debug && logMode.verbosity >= 4)
        logger.debug('Toast message added', `${thisModule} > ${thisMethod}`);
    setTimeout(() => {
        toast.classList.add('fade-out');
        if (logMode.debug && logMode.verbosity >= 4)
            logger.debug('Toast message faded out', `${thisModule} > ${thisMethod}`);
        toast.addEventListener('transitioned', () => toast.remove());
    }, timeouts.toast || 3000);
}
export function showTooltip(tooltipElement) {
    const thisMethod = 'showTooltip()';
    try {
        const tooltip = tooltipElement.querySelector('.tooltiptext');
        if (tooltip) {
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
            setTimeout(() => {
                tooltip.style.visibility = 'hidden';
                tooltip.style.opacity = '0';
            }, consts.timeouts.tooltip || 1000);
        }
        if (logMode.debug && logMode.verbosity >= 4)
            logger.info('showTooltip executed', `${thisModule} > ${thisMethod}`);
    }
    catch (error) {
        if (logMode.error && logMode.verbosity >= 4)
            logger.error(`Failed to execute showTooltip: ${error}`, `${thisModule} > ${thisMethod}`);
    }
}
export const tempListeners = {
    showToast,
    showTooltip
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kb20vZXZlbnRMaXN0ZW5lcnMvdGVtcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFFbkMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsSUFBSSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzdCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFFakMsTUFBTSxVQUFVLEdBQUcsbUNBQW1DLENBQUM7QUFFdkQsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxNQUFNLFVBQVUsU0FBUyxDQUFDLE9BQWU7SUFDeEMsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDO0lBQ2pDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUM7SUFFbEMsS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7SUFFNUIsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFakMsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQztRQUMxQyxNQUFNLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFFdEUsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNmLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWhDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUM7WUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FDWCx5QkFBeUIsRUFDekIsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7UUFFSCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLGNBQTJCO0lBQ3RELE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQztJQUVuQyxJQUFJLENBQUM7UUFDSixNQUFNLE9BQU8sR0FDWixjQUFjLENBQUMsYUFBYSxDQUFjLGNBQWMsQ0FBQyxDQUFDO1FBRTNELElBQUksT0FBTyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7WUFDckMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1lBQzVCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO2dCQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7WUFDN0IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQ1Ysc0JBQXNCLEVBQ3RCLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQztZQUMxQyxNQUFNLENBQUMsS0FBSyxDQUNYLGtDQUFrQyxLQUFLLEVBQUUsRUFDekMsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7SUFDSixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRztJQUM1QixTQUFTO0lBQ1QsV0FBVztDQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vZXZlbnRMaXN0ZW5lcnMvdGVtcC5qc1xuXG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjb25zdHNEYXRhIGFzIGNvbnN0cyB9IGZyb20gJy4uLy4uL2RhdGEvY29uc3RzLmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi8uLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuY29uc3QgdGltZW91dHMgPSBjb25zdHMudGltZW91dHM7XG5cbmNvbnN0IHRoaXNNb2R1bGUgPSAnZG9tL2V2ZW50TGlzdGVuZXJzL2dyb3Vwcy90ZW1wLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93VG9hc3QobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdGNvbnN0IHRoaXNNZXRob2QgPSAnc2hvd1RvYXN0KCknO1xuXHRjb25zdCB0b2FzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG5cdHRvYXN0LmNsYXNzTmFtZSA9ICd0b2FzdC1tZXNzYWdlJztcblxuXHR0b2FzdC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG5cblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0b2FzdCk7XG5cblx0aWYgKGxvZ01vZGUuZGVidWcgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gNClcblx0XHRsb2dnZXIuZGVidWcoJ1RvYXN0IG1lc3NhZ2UgYWRkZWQnLCBgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gKTtcblxuXHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHR0b2FzdC5jbGFzc0xpc3QuYWRkKCdmYWRlLW91dCcpO1xuXG5cdFx0aWYgKGxvZ01vZGUuZGVidWcgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gNClcblx0XHRcdGxvZ2dlci5kZWJ1Zyhcblx0XHRcdFx0J1RvYXN0IG1lc3NhZ2UgZmFkZWQgb3V0Jyxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0KTtcblxuXHRcdHRvYXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lZCcsICgpID0+IHRvYXN0LnJlbW92ZSgpKTtcblx0fSwgdGltZW91dHMudG9hc3QgfHwgMzAwMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93VG9vbHRpcCh0b29sdGlwRWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcblx0Y29uc3QgdGhpc01ldGhvZCA9ICdzaG93VG9vbHRpcCgpJztcblxuXHR0cnkge1xuXHRcdGNvbnN0IHRvb2x0aXAgPVxuXHRcdFx0dG9vbHRpcEVsZW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJy50b29sdGlwdGV4dCcpO1xuXG5cdFx0aWYgKHRvb2x0aXApIHtcblx0XHRcdHRvb2x0aXAuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcblx0XHRcdHRvb2x0aXAuc3R5bGUub3BhY2l0eSA9ICcxJztcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0b29sdGlwLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblx0XHRcdFx0dG9vbHRpcC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuXHRcdFx0fSwgY29uc3RzLnRpbWVvdXRzLnRvb2x0aXAgfHwgMTAwMCk7XG5cdFx0fVxuXG5cdFx0aWYgKGxvZ01vZGUuZGVidWcgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gNClcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHQnc2hvd1Rvb2x0aXAgZXhlY3V0ZWQnLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHQpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yICYmIGxvZ01vZGUudmVyYm9zaXR5ID49IDQpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gZXhlY3V0ZSBzaG93VG9vbHRpcDogJHtlcnJvcn1gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCB0ZW1wTGlzdGVuZXJzID0ge1xuXHRzaG93VG9hc3QsXG5cdHNob3dUb29sdGlwXG59O1xuIl19