// File: dom/eventListeners/palette.js
import { createLogger } from '../../logger/factory.js';
import { domData } from '../../data/dom.js';
import { modeData as mode } from '../../data/mode.js';
import { parse as parseDom } from '../parse.js';
const domClasses = domData.classes;
const logMode = mode.logging;
const thisModule = 'dom/eventListeners/groups/palette.js';
const logger = await createLogger();
function initLiveColorRender() {
    document.querySelectorAll(domClasses.colorInput).forEach(input => {
        input.addEventListener('input', (e) => {
            const target = e.target;
            const parsedColor = parseDom.colorInput(target);
            if (parsedColor) {
                if (logMode.debug && logMode.verbosity > 1) {
                    logger.debug(`Parsed color: ${JSON.stringify(parsedColor)}`, `${thisModule}`);
                }
                const swatch = target
                    .closest(domClasses.colorStripe)
                    ?.querySelector(domClasses.colorSwatch);
                if (swatch) {
                    swatch.style.backgroundColor =
                        parsedColor.format === 'hex'
                            ? parsedColor.value.hex
                            : parsedColor.format === 'rgb'
                                ? `rgb(${parsedColor.value.red}, ${parsedColor.value.green}, ${parsedColor.value.blue})`
                                : `hsl(${parsedColor.value.hue}, ${parsedColor.value.saturation}%, ${parsedColor.value.lightness}%)`;
                }
            }
            else {
                if (logMode.warn) {
                    logger.warn(`Invalid color input: ${target.value}`, `${thisModule}`);
                }
            }
        });
    });
}
export const paletteListeners = {
    initialize: {
        liveColorRender: initLiveColorRender
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kb20vZXZlbnRMaXN0ZW5lcnMvcGFsZXR0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsUUFBUSxJQUFJLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxLQUFLLElBQUksUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWhELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDbkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUU3QixNQUFNLFVBQVUsR0FBRyxzQ0FBc0MsQ0FBQztBQUUxRCxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLFNBQVMsbUJBQW1CO0lBQzNCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2hFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFRLEVBQUUsRUFBRTtZQUM1QyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBMEIsQ0FBQztZQUM1QyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWhELElBQUksV0FBVyxFQUFFLENBQUM7Z0JBQ2pCLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUM1QyxNQUFNLENBQUMsS0FBSyxDQUNYLGlCQUFpQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQzlDLEdBQUcsVUFBVSxFQUFFLENBQ2YsQ0FBQztnQkFDSCxDQUFDO2dCQUVELE1BQU0sTUFBTSxHQUFHLE1BQU07cUJBQ25CLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO29CQUNoQyxFQUFFLGFBQWEsQ0FDZCxVQUFVLENBQUMsV0FBVyxDQUNBLENBQUM7Z0JBRXpCLElBQUksTUFBTSxFQUFFLENBQUM7b0JBQ1osTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlO3dCQUMzQixXQUFXLENBQUMsTUFBTSxLQUFLLEtBQUs7NEJBQzNCLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUc7NEJBQ3ZCLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLEtBQUs7Z0NBQzdCLENBQUMsQ0FBQyxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHO2dDQUN4RixDQUFDLENBQUMsT0FBTyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsTUFBTSxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxDQUFDO2dCQUN6RyxDQUFDO1lBQ0YsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNsQixNQUFNLENBQUMsSUFBSSxDQUNWLHdCQUF3QixNQUFNLENBQUMsS0FBSyxFQUFFLEVBQ3RDLEdBQUcsVUFBVSxFQUFFLENBQ2YsQ0FBQztnQkFDSCxDQUFDO1lBQ0YsQ0FBQztRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUc7SUFDL0IsVUFBVSxFQUFFO1FBQ1gsZUFBZSxFQUFFLG1CQUFtQjtLQUNwQztDQUNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vZXZlbnRMaXN0ZW5lcnMvcGFsZXR0ZS5qc1xuXG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBkb21EYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9kb20uanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uLy4uL2RhdGEvbW9kZS5qcyc7XG5pbXBvcnQgeyBwYXJzZSBhcyBwYXJzZURvbSB9IGZyb20gJy4uL3BhcnNlLmpzJztcblxuY29uc3QgZG9tQ2xhc3NlcyA9IGRvbURhdGEuY2xhc3NlcztcbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5cbmNvbnN0IHRoaXNNb2R1bGUgPSAnZG9tL2V2ZW50TGlzdGVuZXJzL2dyb3Vwcy9wYWxldHRlLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmZ1bmN0aW9uIGluaXRMaXZlQ29sb3JSZW5kZXIoKTogdm9pZCB7XG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZG9tQ2xhc3Nlcy5jb2xvcklucHV0KS5mb3JFYWNoKGlucHV0ID0+IHtcblx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlOiBFdmVudCkgPT4ge1xuXHRcdFx0Y29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRcdGNvbnN0IHBhcnNlZENvbG9yID0gcGFyc2VEb20uY29sb3JJbnB1dCh0YXJnZXQpO1xuXG5cdFx0XHRpZiAocGFyc2VkQ29sb3IpIHtcblx0XHRcdFx0aWYgKGxvZ01vZGUuZGVidWcgJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAxKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLmRlYnVnKFxuXHRcdFx0XHRcdFx0YFBhcnNlZCBjb2xvcjogJHtKU09OLnN0cmluZ2lmeShwYXJzZWRDb2xvcil9YCxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBzd2F0Y2ggPSB0YXJnZXRcblx0XHRcdFx0XHQuY2xvc2VzdChkb21DbGFzc2VzLmNvbG9yU3RyaXBlKVxuXHRcdFx0XHRcdD8ucXVlcnlTZWxlY3Rvcihcblx0XHRcdFx0XHRcdGRvbUNsYXNzZXMuY29sb3JTd2F0Y2hcblx0XHRcdFx0XHQpIGFzIEhUTUxFbGVtZW50IHwgbnVsbDtcblxuXHRcdFx0XHRpZiAoc3dhdGNoKSB7XG5cdFx0XHRcdFx0c3dhdGNoLnN0eWxlLmJhY2tncm91bmRDb2xvciA9XG5cdFx0XHRcdFx0XHRwYXJzZWRDb2xvci5mb3JtYXQgPT09ICdoZXgnXG5cdFx0XHRcdFx0XHRcdD8gcGFyc2VkQ29sb3IudmFsdWUuaGV4XG5cdFx0XHRcdFx0XHRcdDogcGFyc2VkQ29sb3IuZm9ybWF0ID09PSAncmdiJ1xuXHRcdFx0XHRcdFx0XHRcdD8gYHJnYigke3BhcnNlZENvbG9yLnZhbHVlLnJlZH0sICR7cGFyc2VkQ29sb3IudmFsdWUuZ3JlZW59LCAke3BhcnNlZENvbG9yLnZhbHVlLmJsdWV9KWBcblx0XHRcdFx0XHRcdFx0XHQ6IGBoc2woJHtwYXJzZWRDb2xvci52YWx1ZS5odWV9LCAke3BhcnNlZENvbG9yLnZhbHVlLnNhdHVyYXRpb259JSwgJHtwYXJzZWRDb2xvci52YWx1ZS5saWdodG5lc3N9JSlgO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAobG9nTW9kZS53YXJuKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLndhcm4oXG5cdFx0XHRcdFx0XHRgSW52YWxpZCBjb2xvciBpbnB1dDogJHt0YXJnZXQudmFsdWV9YCxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbmV4cG9ydCBjb25zdCBwYWxldHRlTGlzdGVuZXJzID0ge1xuXHRpbml0aWFsaXplOiB7XG5cdFx0bGl2ZUNvbG9yUmVuZGVyOiBpbml0TGl2ZUNvbG9yUmVuZGVyXG5cdH1cbn07XG4iXX0=