// File: dom/eventListeners/dad.js
import { createLogger } from '../../logger/factory.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const thisModule = 'dom/eventListeners/groups/dad.js';
const logger = await createLogger();
let dragSrcEl = null;
export function attachDADListeners(element) {
    const thisFunction = 'attach()';
    try {
        if (element) {
            element.addEventListener('dragstart', dragStart);
            element.addEventListener('dragover', dragOver);
            element.addEventListener('drop', drop);
            element.addEventListener('dragend', dragEnd);
        }
        if (logMode.debug && logMode.verbosity >= 4)
            logger.debug('Drag and drop event listeners successfully attached', `${thisModule} > ${thisFunction}`);
    }
    catch (error) {
        if (!logMode.error)
            logger.error(`Failed to execute attachDragAndDropEventListeners: ${error}`, `${thisModule} > ${thisFunction}`);
    }
}
function dragStart(e) {
    const thisFunction = 'handleDragStart()';
    try {
        dragSrcEl = e.currentTarget;
        if (e.dataTransfer) {
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', dragSrcEl.outerHTML);
        }
        if (logMode.debug && logMode.verbosity === 5)
            logger.info('handleDragStart complete', `${thisModule} > ${thisFunction}`);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error in handleDragStart: ${error}`, `${thisModule} > ${thisFunction}`);
    }
}
function dragOver(e) {
    const thisMethod = 'handleDragOver()';
    try {
        e.preventDefault();
        if (e.dataTransfer) {
            e.dataTransfer.dropEffect = 'move';
        }
        if (mode.debug && logMode.verbosity === 5)
            logger.info('handleDragOver complete', `${thisModule} > ${thisMethod}`);
        return false;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error in handleDragOver: ${error}`, `${thisModule} > ${thisMethod}`);
        return false;
    }
}
function dragEnd(e) {
    const thisMethod = 'handleDragEnd()';
    try {
        const target = e.currentTarget;
        target.classList.remove('dragging');
        document.querySelectorAll('.color-stripe').forEach(el => {
            el.classList.remove('dragging');
        });
        if (mode.debug && logMode.verbosity === 5)
            logger.info('handleDragEnd complete', `${thisModule} > ${thisMethod}`);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error in handleDragEnd: ${error}`, `${thisModule} > ${thisMethod}`);
    }
}
function drop(e) {
    const thisMethod = 'drop()';
    try {
        e.stopPropagation();
        const target = e.currentTarget;
        if (dragSrcEl && dragSrcEl !== target) {
            const dragSrcId = dragSrcEl.id;
            const dropTargetId = target.id;
            const dragSrcText = dragSrcEl.querySelector('.color-text-output-box').value;
            const dropTargetText = target.querySelector('.color-text-output-box').value;
            const dragSrcOuterHTML = dragSrcEl.outerHTML;
            const dropTargetOuterHTML = target.outerHTML;
            dragSrcEl.outerHTML = dropTargetOuterHTML;
            target.outerHTML = dragSrcOuterHTML;
            const newDragSrcEl = document.getElementById(dropTargetId);
            const newDropTargetEl = document.getElementById(dragSrcId);
            newDragSrcEl.id = dragSrcId;
            newDropTargetEl.id = dropTargetId;
            newDragSrcEl.querySelector('.color-text-output-box').value = dropTargetText;
            newDropTargetEl.querySelector('.color-text-output-box').value = dragSrcText;
            if (mode.debug && logMode.verbosity >= 4)
                logger.debug('calling attachDragAndDropEventListeners for new elements', `${thisModule} > ${thisMethod}`);
            attachDADListeners(newDragSrcEl);
            attachDADListeners(newDropTargetEl);
        }
        if (logMode.debug && logMode.verbosity === 5)
            logger.info('handleDrop complete', `${thisModule} > ${thisMethod}`);
    }
    catch (error) {
        if (!logMode.error)
            logger.error(`Error in handleDrop: ${error}`, `${thisModule} > ${thisMethod}`);
    }
}
export const dadListeners = {
    attach: attachDADListeners
};
//# sourceMappingURL=data:application/json;base64,