// File: dom/parse.js
import { createLogger } from '../logger/index.js';
import { commonFn } from '../common/index.js';
import { configData as config } from '../data/config.js';
import { domData } from '../data/dom.js';
import { modeData as mode } from '../data/mode.js';
const ids = domData.ids.static;
const logMode = mode.logging;
const regex = config.regex.dom;
const thisModule = 'dom/parse.js';
const brand = commonFn.core.brand;
const logger = await createLogger();
function checkbox(id) {
    const thisFunction = 'checkbox()';
    const checkbox = document.getElementById(id);
    if (!checkbox) {
        if (logMode.error && logMode.verbosity > 2) {
            logger.error(`Checkbox element ${id} not found`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    if (!(checkbox instanceof HTMLInputElement)) {
        if (logMode.error && logMode.verbosity > 2) {
            logger.error(`Element ${id} is not a checkbox`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    return checkbox ? checkbox.checked : undefined;
}
function colorInput(input) {
    const thisFunction = 'colorInput()';
    const colorStr = input.value.trim().toLowerCase();
    const hexMatch = colorStr.match(regex.hex);
    const hslMatch = colorStr.match(regex.hsl);
    const rgbMatch = colorStr.match(regex.rgb);
    if (hexMatch) {
        let hex = hexMatch[1];
        if (hex.length === 3) {
            hex = hex
                .split('')
                .map(c => c + c)
                .join('');
        }
        return {
            format: 'hex',
            value: { hex: brand.asHexSet(`#${hex}`) }
        };
    }
    if (hslMatch) {
        return {
            format: 'hsl',
            value: {
                hue: brand.asRadial(parseInt(hslMatch[1], 10)),
                saturation: brand.asPercentile(parseFloat(hslMatch[2])),
                lightness: brand.asPercentile(parseFloat(hslMatch[3]))
            }
        };
    }
    if (rgbMatch) {
        return {
            format: 'rgb',
            value: {
                red: brand.asByteRange(parseInt(rgbMatch[1], 10)),
                green: brand.asByteRange(parseInt(rgbMatch[2], 10)),
                blue: brand.asByteRange(parseInt(rgbMatch[3], 10))
            }
        };
    }
    // for Named Colors (convert to RGB using CSS canvas)
    const testElement = document.createElement('div');
    testElement.style.color = colorStr;
    if (testElement.style.color !== '') {
        const ctx = document.createElement('canvas').getContext('2d');
        if (ctx) {
            ctx.fillStyle = colorStr;
            const rgb = ctx.fillStyle.match(/\d+/g)?.map(Number);
            if (rgb && rgb.length === 3) {
                return {
                    format: 'rgb',
                    value: {
                        red: brand.asByteRange(rgb[0]),
                        green: brand.asByteRange(rgb[1]),
                        blue: brand.asByteRange(rgb[2])
                    }
                };
            }
        }
    }
    if (logMode.error && logMode.verbosity > 3) {
        logger.error('Invalid color input', `${thisModule} > ${thisFunction}`);
    }
    return null;
}
function paletteExportFormat() {
    const thisFunction = 'paletteExportFormat()';
    const formatSelectionMenu = document.getElementById(ids.selects.exportFormatOption);
    if (!formatSelectionMenu) {
        if (logMode.error && logMode.verbosity > 3)
            logger.error('Export format selection dropdown not found', `${thisModule} > ${thisFunction}`);
    }
    const selectedFormat = formatSelectionMenu.value;
    if (selectedFormat !== 'CSS' &&
        selectedFormat !== 'JSON' &&
        selectedFormat !== 'XML') {
        if (logMode.error && logMode.verbosity > 3)
            logger.error('Invalid export format selected', `${thisModule} > ${thisFunction}`);
        return;
    }
    else {
        return selectedFormat;
    }
}
export const parse = {
    checkbox,
    colorInput,
    paletteExportFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDekQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM3QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUUvQixNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUM7QUFFbEMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFFbEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxTQUFTLFFBQVEsQ0FBQyxFQUFVO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNsQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBcUIsQ0FBQztJQUVqRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUNYLG9CQUFvQixFQUFFLFlBQVksRUFDbEMsR0FBRyxVQUFVLE1BQU0sWUFB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QW1CO0lBQzNCLE1BQU0sWUFBWSxHQUFHLHVCQUF1QixDQUFDO0lBQzdDLE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FDbEQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FDVCxDQUFDO0lBRXZCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzFCLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUM7WUFDekMsTUFBTSxDQUFDLEtBQUssQ0FDWCw0Q0FBNEMsRUFDNUMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0lBRWpELElBQ0MsY0FBYyxLQUFLLEtBQUs7UUFDeEIsY0FBYyxLQUFLLE1BQU07UUFDekIsY0FBYyxLQUFLLEtBQUssRUFDdkIsQ0FBQztRQUNGLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUM7WUFDekMsTUFBTSxDQUFDLEtBQUssQ0FDWCxnQ0FBZ0MsRUFDaEMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7UUFFSCxPQUFPO0lBQ1IsQ0FBQztTQUFNLENBQUM7UUFDUCxPQUFPLGNBQWMsQ0FBQztJQUN2QixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBbUM7SUFDcEQsUUFBUTtJQUNSLFVBQVU7SUFDVixtQkFBbUI7Q0FDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGRvbS9wYXJzZS5qc1xuXG5pbXBvcnQgeyBET01Gbl9NYXN0ZXJJbnRlcmZhY2UsIEhleCwgSFNMLCBSR0IgfSBmcm9tICcuLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgY29tbW9uRm4gfSBmcm9tICcuLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgY29uZmlnRGF0YSBhcyBjb25maWcgfSBmcm9tICcuLi9kYXRhL2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBkb21EYXRhIH0gZnJvbSAnLi4vZGF0YS9kb20uanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGlkcyA9IGRvbURhdGEuaWRzLnN0YXRpYztcbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5jb25zdCByZWdleCA9IGNvbmZpZy5yZWdleC5kb207XG5cbmNvbnN0IHRoaXNNb2R1bGUgPSAnZG9tL3BhcnNlLmpzJztcblxuY29uc3QgYnJhbmQgPSBjb21tb25Gbi5jb3JlLmJyYW5kO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuZnVuY3Rpb24gY2hlY2tib3goaWQ6IHN0cmluZyk6IGJvb2xlYW4gfCB2b2lkIHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ2NoZWNrYm94KCknO1xuXHRjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG5cdGlmICghY2hlY2tib3gpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDIpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YENoZWNrYm94IGVsZW1lbnQgJHtpZH0gbm90IGZvdW5kYCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICghKGNoZWNrYm94IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDIpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVsZW1lbnQgJHtpZH0gaXMgbm90IGEgY2hlY2tib3hgLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0cmV0dXJuIGNoZWNrYm94ID8gY2hlY2tib3guY2hlY2tlZCA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gY29sb3JJbnB1dChpbnB1dDogSFRNTElucHV0RWxlbWVudCk6IEhleCB8IEhTTCB8IFJHQiB8IG51bGwge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnY29sb3JJbnB1dCgpJztcblxuXHRjb25zdCBjb2xvclN0ciA9IGlucHV0LnZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG5cdGNvbnN0IGhleE1hdGNoID0gY29sb3JTdHIubWF0Y2gocmVnZXguaGV4KTtcblx0Y29uc3QgaHNsTWF0Y2ggPSBjb2xvclN0ci5tYXRjaChyZWdleC5oc2wpO1xuXHRjb25zdCByZ2JNYXRjaCA9IGNvbG9yU3RyLm1hdGNoKHJlZ2V4LnJnYik7XG5cblx0aWYgKGhleE1hdGNoKSB7XG5cdFx0bGV0IGhleCA9IGhleE1hdGNoWzFdO1xuXHRcdGlmIChoZXgubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRoZXggPSBoZXhcblx0XHRcdFx0LnNwbGl0KCcnKVxuXHRcdFx0XHQubWFwKGMgPT4gYyArIGMpXG5cdFx0XHRcdC5qb2luKCcnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZvcm1hdDogJ2hleCcsXG5cdFx0XHR2YWx1ZTogeyBoZXg6IGJyYW5kLmFzSGV4U2V0KGAjJHtoZXh9YCkgfVxuXHRcdH07XG5cdH1cblxuXHRpZiAoaHNsTWF0Y2gpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Zm9ybWF0OiAnaHNsJyxcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogYnJhbmQuYXNSYWRpYWwocGFyc2VJbnQoaHNsTWF0Y2hbMV0sIDEwKSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGJyYW5kLmFzUGVyY2VudGlsZShwYXJzZUZsb2F0KGhzbE1hdGNoWzJdKSksXG5cdFx0XHRcdGxpZ2h0bmVzczogYnJhbmQuYXNQZXJjZW50aWxlKHBhcnNlRmxvYXQoaHNsTWF0Y2hbM10pKVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRpZiAocmdiTWF0Y2gpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Zm9ybWF0OiAncmdiJyxcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdHJlZDogYnJhbmQuYXNCeXRlUmFuZ2UocGFyc2VJbnQocmdiTWF0Y2hbMV0sIDEwKSksXG5cdFx0XHRcdGdyZWVuOiBicmFuZC5hc0J5dGVSYW5nZShwYXJzZUludChyZ2JNYXRjaFsyXSwgMTApKSxcblx0XHRcdFx0Ymx1ZTogYnJhbmQuYXNCeXRlUmFuZ2UocGFyc2VJbnQocmdiTWF0Y2hbM10sIDEwKSlcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gZm9yIE5hbWVkIENvbG9ycyAoY29udmVydCB0byBSR0IgdXNpbmcgQ1NTIGNhbnZhcylcblx0Y29uc3QgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuXHR0ZXN0RWxlbWVudC5zdHlsZS5jb2xvciA9IGNvbG9yU3RyO1xuXG5cdGlmICh0ZXN0RWxlbWVudC5zdHlsZS5jb2xvciAhPT0gJycpIHtcblx0XHRjb25zdCBjdHggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuXG5cdFx0aWYgKGN0eCkge1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGNvbG9yU3RyO1xuXG5cdFx0XHRjb25zdCByZ2IgPSBjdHguZmlsbFN0eWxlLm1hdGNoKC9cXGQrL2cpPy5tYXAoTnVtYmVyKTtcblxuXHRcdFx0aWYgKHJnYiAmJiByZ2IubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Zm9ybWF0OiAncmdiJyxcblx0XHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdFx0cmVkOiBicmFuZC5hc0J5dGVSYW5nZShyZ2JbMF0pLFxuXHRcdFx0XHRcdFx0Z3JlZW46IGJyYW5kLmFzQnl0ZVJhbmdlKHJnYlsxXSksXG5cdFx0XHRcdFx0XHRibHVlOiBicmFuZC5hc0J5dGVSYW5nZShyZ2JbMl0pXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChsb2dNb2RlLmVycm9yICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMykge1xuXHRcdGxvZ2dlci5lcnJvcignSW52YWxpZCBjb2xvciBpbnB1dCcsIGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YCk7XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcGFsZXR0ZUV4cG9ydEZvcm1hdCgpOiBzdHJpbmcgfCB2b2lkIHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ3BhbGV0dGVFeHBvcnRGb3JtYXQoKSc7XG5cdGNvbnN0IGZvcm1hdFNlbGVjdGlvbk1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcblx0XHRpZHMuc2VsZWN0cy5leHBvcnRGb3JtYXRPcHRpb25cblx0KSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcblxuXHRpZiAoIWZvcm1hdFNlbGVjdGlvbk1lbnUpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDMpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdCdFeHBvcnQgZm9ybWF0IHNlbGVjdGlvbiBkcm9wZG93biBub3QgZm91bmQnLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdH1cblxuXHRjb25zdCBzZWxlY3RlZEZvcm1hdCA9IGZvcm1hdFNlbGVjdGlvbk1lbnUudmFsdWU7XG5cblx0aWYgKFxuXHRcdHNlbGVjdGVkRm9ybWF0ICE9PSAnQ1NTJyAmJlxuXHRcdHNlbGVjdGVkRm9ybWF0ICE9PSAnSlNPTicgJiZcblx0XHRzZWxlY3RlZEZvcm1hdCAhPT0gJ1hNTCdcblx0KSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IgJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAzKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHQnSW52YWxpZCBleHBvcnQgZm9ybWF0IHNlbGVjdGVkJyxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBzZWxlY3RlZEZvcm1hdDtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgcGFyc2U6IERPTUZuX01hc3RlckludGVyZmFjZVsncGFyc2UnXSA9IHtcblx0Y2hlY2tib3gsXG5cdGNvbG9ySW5wdXQsXG5cdHBhbGV0dGVFeHBvcnRGb3JtYXRcbn07XG4iXX0=