// File: dom/parse.js
import { createLogger } from '../logger/index.js';
import { domData } from '../data/dom.js';
import { modeData as mode } from '../data/mode.js';
const ids = domData.ids.static;
const logMode = mode.logging;
const thisModule = 'dom/parse.js';
const logger = await createLogger();
function checkbox(id) {
    const thisFunction = 'checkbox()';
    const checkbox = document.getElementById(id);
    if (!checkbox) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Checkbox element ${id} not found`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    if (!(checkbox instanceof HTMLInputElement)) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Element ${id} is not a checkbox`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    return checkbox ? checkbox.checked : undefined;
}
function paletteExportFormat() {
    const thisFunction = 'paletteExportFormat()';
    const formatSelectionMenu = document.getElementById(ids.selects.exportFormatOption);
    if (!formatSelectionMenu) {
        if (logMode.error && !mode.quiet)
            logger.error('Export format selection dropdown not found', `${thisModule} > ${thisFunction}`);
    }
    const selectedFormat = formatSelectionMenu.value;
    if (selectedFormat !== 'CSS' &&
        selectedFormat !== 'JSON' &&
        selectedFormat !== 'XML') {
        if (logMode.error && !mode.quiet)
            logger.error('Invalid export format selected', `${thisModule} > ${thisFunction}`);
        return;
    }
    else {
        return selectedFormat;
    }
}
export const parse = {
    checkbox,
    paletteExportFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUU3QixNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUM7QUFFbEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxTQUFTLFFBQVEsQ0FBQyxFQUFVO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNsQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBcUIsQ0FBQztJQUVqRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FDWCxvQkFBb0IsRUFBRSxZQUFZLEVBQ2xDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxDQUFDLENBQUMsUUFBUSxZQUFZLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztRQUM3QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FDWCxXQUFXLEVBQUUsb0JBQW9CLEVBQ2pDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO0lBRUQsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsU0FBUyxtQkFBbUI7SUFDM0IsTUFBTSxZQUFZLEdBQUcsdUJBQXVCLENBQUM7SUFDN0MsTUFBTSxtQkFBbUIsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUNsRCxHQUFHLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUNULENBQUM7SUFFdkIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDMUIsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDL0IsTUFBTSxDQUFDLEtBQUssQ0FDWCw0Q0FBNEMsRUFDNUMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0lBRWpELElBQ0MsY0FBYyxLQUFLLEtBQUs7UUFDeEIsY0FBYyxLQUFLLE1BQU07UUFDekIsY0FBYyxLQUFLLEtBQUssRUFDdkIsQ0FBQztRQUNGLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQ1gsZ0NBQWdDLEVBQ2hDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO1FBRUgsT0FBTztJQUNSLENBQUM7U0FBTSxDQUFDO1FBQ1AsT0FBTyxjQUFjLENBQUM7SUFDdkIsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQW1DO0lBQ3BELFFBQVE7SUFDUixtQkFBbUI7Q0FDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGRvbS9wYXJzZS5qc1xuXG5pbXBvcnQgeyBET01Gbl9NYXN0ZXJJbnRlcmZhY2UgfSBmcm9tICcuLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgZG9tRGF0YSB9IGZyb20gJy4uL2RhdGEvZG9tLmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBpZHMgPSBkb21EYXRhLmlkcy5zdGF0aWM7XG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5jb25zdCB0aGlzTW9kdWxlID0gJ2RvbS9wYXJzZS5qcyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5mdW5jdGlvbiBjaGVja2JveChpZDogc3RyaW5nKTogYm9vbGVhbiB8IHZvaWQge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnY2hlY2tib3goKSc7XG5cdGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cblx0aWYgKCFjaGVja2JveCkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yICYmICFtb2RlLnF1aWV0KSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBDaGVja2JveCBlbGVtZW50ICR7aWR9IG5vdCBmb3VuZGAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIShjaGVja2JveCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IgJiYgIW1vZGUucXVpZXQpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVsZW1lbnQgJHtpZH0gaXMgbm90IGEgY2hlY2tib3hgLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0cmV0dXJuIGNoZWNrYm94ID8gY2hlY2tib3guY2hlY2tlZCA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcGFsZXR0ZUV4cG9ydEZvcm1hdCgpOiBzdHJpbmcgfCB2b2lkIHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ3BhbGV0dGVFeHBvcnRGb3JtYXQoKSc7XG5cdGNvbnN0IGZvcm1hdFNlbGVjdGlvbk1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcblx0XHRpZHMuc2VsZWN0cy5leHBvcnRGb3JtYXRPcHRpb25cblx0KSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcblxuXHRpZiAoIWZvcm1hdFNlbGVjdGlvbk1lbnUpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiAhbW9kZS5xdWlldClcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J0V4cG9ydCBmb3JtYXQgc2VsZWN0aW9uIGRyb3Bkb3duIG5vdCBmb3VuZCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fVxuXG5cdGNvbnN0IHNlbGVjdGVkRm9ybWF0ID0gZm9ybWF0U2VsZWN0aW9uTWVudS52YWx1ZTtcblxuXHRpZiAoXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdDU1MnICYmXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdKU09OJyAmJlxuXHRcdHNlbGVjdGVkRm9ybWF0ICE9PSAnWE1MJ1xuXHQpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiAhbW9kZS5xdWlldClcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J0ludmFsaWQgZXhwb3J0IGZvcm1hdCBzZWxlY3RlZCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdHJldHVybjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc2VsZWN0ZWRGb3JtYXQ7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlOiBET01Gbl9NYXN0ZXJJbnRlcmZhY2VbJ3BhcnNlJ10gPSB7XG5cdGNoZWNrYm94LFxuXHRwYWxldHRlRXhwb3J0Rm9ybWF0XG59O1xuIl19