// File: dom/parse.js
import { createLogger } from '../logger/index.js';
import { commonFn } from '../common/index.js';
import { configData as config } from '../data/config.js';
import { domData } from '../data/dom.js';
import { modeData as mode } from '../data/mode.js';
const ids = domData.ids.static;
const logMode = mode.logging;
const regex = config.regex.dom;
const thisModule = 'dom/parse.js';
const brand = commonFn.core.brand;
const logger = await createLogger();
function checkbox(id) {
    const thisFunction = 'checkbox()';
    const checkbox = document.getElementById(id);
    if (!checkbox) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Checkbox element ${id} not found`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    if (!(checkbox instanceof HTMLInputElement)) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Element ${id} is not a checkbox`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    return checkbox ? checkbox.checked : undefined;
}
function colorInput(input) {
    const thisFunction = 'colorInput()';
    const colorStr = input.value.trim().toLowerCase();
    const hexMatch = colorStr.match(regex.hex);
    const hslMatch = colorStr.match(regex.hsl);
    const rgbMatch = colorStr.match(regex.rgb);
    if (hexMatch) {
        let hex = hexMatch[1];
        if (hex.length === 3) {
            hex = hex
                .split('')
                .map(c => c + c)
                .join('');
        }
        return {
            format: 'hex',
            value: { hex: brand.asHexSet(`#${hex}`) }
        };
    }
    if (hslMatch) {
        return {
            format: 'hsl',
            value: {
                hue: brand.asRadial(parseInt(hslMatch[1], 10)),
                saturation: brand.asPercentile(parseFloat(hslMatch[2])),
                lightness: brand.asPercentile(parseFloat(hslMatch[3]))
            }
        };
    }
    if (rgbMatch) {
        return {
            format: 'rgb',
            value: {
                red: brand.asByteRange(parseInt(rgbMatch[1], 10)),
                green: brand.asByteRange(parseInt(rgbMatch[2], 10)),
                blue: brand.asByteRange(parseInt(rgbMatch[3], 10))
            }
        };
    }
    // for Named Colors (convert to RGB using CSS canvas)
    const testElement = document.createElement('div');
    testElement.style.color = colorStr;
    if (testElement.style.color !== '') {
        const ctx = document.createElement('canvas').getContext('2d');
        if (ctx) {
            ctx.fillStyle = colorStr;
            const rgb = ctx.fillStyle.match(/\d+/g)?.map(Number);
            if (rgb && rgb.length === 3) {
                return {
                    format: 'rgb',
                    value: {
                        red: brand.asByteRange(rgb[0]),
                        green: brand.asByteRange(rgb[1]),
                        blue: brand.asByteRange(rgb[2])
                    }
                };
            }
        }
    }
    if (!mode.quiet && logMode.error && logMode.verbosity > 1) {
        logger.error('Invalid color input', `${thisModule} > ${thisFunction}`);
    }
    return null;
}
function paletteExportFormat() {
    const thisFunction = 'paletteExportFormat()';
    const formatSelectionMenu = document.getElementById(ids.selects.exportFormatOption);
    if (!formatSelectionMenu) {
        if (logMode.error && !mode.quiet)
            logger.error('Export format selection dropdown not found', `${thisModule} > ${thisFunction}`);
    }
    const selectedFormat = formatSelectionMenu.value;
    if (selectedFormat !== 'CSS' &&
        selectedFormat !== 'JSON' &&
        selectedFormat !== 'XML') {
        if (logMode.error && !mode.quiet)
            logger.error('Invalid export format selected', `${thisModule} > ${thisFunction}`);
        return;
    }
    else {
        return selectedFormat;
    }
}
export const parse = {
    checkbox,
    colorInput,
    paletteExportFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDekQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM3QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUUvQixNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUM7QUFFbEMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFFbEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxTQUFTLFFBQVEsQ0FBQyxFQUFVO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNsQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBcUIsQ0FBQztJQUVqRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FDWCxvQkFBb0IsRUFBRSxZQUFZLEVBQ2xDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFB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QztBQUVELFNBQVMsbUJBQW1CO0lBQzNCLE1BQU0sWUFBWSxHQUFHLHVCQUF1QixDQUFDO0lBQzdDLE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FDbEQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FDVCxDQUFDO0lBRXZCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzFCLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQ1gsNENBQTRDLEVBQzVDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQztJQUVqRCxJQUNDLGNBQWMsS0FBSyxLQUFLO1FBQ3hCLGNBQWMsS0FBSyxNQUFNO1FBQ3pCLGNBQWMsS0FBSyxLQUFLLEVBQ3ZCLENBQUM7UUFDRixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUMvQixNQUFNLENBQUMsS0FBSyxDQUNYLGdDQUFnQyxFQUNoQyxHQUFHLFVBQVUsTUFBTSxZQUFZLEVBQUUsQ0FDakMsQ0FBQztRQUVILE9BQU87SUFDUixDQUFDO1NBQU0sQ0FBQztRQUNQLE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFtQztJQUNwRCxRQUFRO0lBQ1IsVUFBVTtJQUNWLG1CQUFtQjtDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogZG9tL3BhcnNlLmpzXG5cbmltcG9ydCB7IERPTUZuX01hc3RlckludGVyZmFjZSwgSGV4LCBIU0wsIFJHQiB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb21tb25GbiB9IGZyb20gJy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb25maWdEYXRhIGFzIGNvbmZpZyB9IGZyb20gJy4uL2RhdGEvY29uZmlnLmpzJztcbmltcG9ydCB7IGRvbURhdGEgfSBmcm9tICcuLi9kYXRhL2RvbS5qcyc7XG5pbXBvcnQgeyBtb2RlRGF0YSBhcyBtb2RlIH0gZnJvbSAnLi4vZGF0YS9tb2RlLmpzJztcblxuY29uc3QgaWRzID0gZG9tRGF0YS5pZHMuc3RhdGljO1xuY29uc3QgbG9nTW9kZSA9IG1vZGUubG9nZ2luZztcbmNvbnN0IHJlZ2V4ID0gY29uZmlnLnJlZ2V4LmRvbTtcblxuY29uc3QgdGhpc01vZHVsZSA9ICdkb20vcGFyc2UuanMnO1xuXG5jb25zdCBicmFuZCA9IGNvbW1vbkZuLmNvcmUuYnJhbmQ7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5mdW5jdGlvbiBjaGVja2JveChpZDogc3RyaW5nKTogYm9vbGVhbiB8IHZvaWQge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnY2hlY2tib3goKSc7XG5cdGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cblx0aWYgKCFjaGVja2JveCkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yICYmICFtb2RlLnF1aWV0KSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBDaGVja2JveCBlbGVtZW50ICR7aWR9IG5vdCBmb3VuZGAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIShjaGVja2JveCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IgJiYgIW1vZGUucXVpZXQpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVsZW1lbnQgJHtpZH0gaXMgbm90IGEgY2hlY2tib3hgLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0cmV0dXJuIGNoZWNrYm94ID8gY2hlY2tib3guY2hlY2tlZCA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gY29sb3JJbnB1dChpbnB1dDogSFRNTElucHV0RWxlbWVudCk6IEhleCB8IEhTTCB8IFJHQiB8IG51bGwge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnY29sb3JJbnB1dCgpJztcblxuXHRjb25zdCBjb2xvclN0ciA9IGlucHV0LnZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG5cdGNvbnN0IGhleE1hdGNoID0gY29sb3JTdHIubWF0Y2gocmVnZXguaGV4KTtcblx0Y29uc3QgaHNsTWF0Y2ggPSBjb2xvclN0ci5tYXRjaChyZWdleC5oc2wpO1xuXHRjb25zdCByZ2JNYXRjaCA9IGNvbG9yU3RyLm1hdGNoKHJlZ2V4LnJnYik7XG5cblx0aWYgKGhleE1hdGNoKSB7XG5cdFx0bGV0IGhleCA9IGhleE1hdGNoWzFdO1xuXHRcdGlmIChoZXgubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRoZXggPSBoZXhcblx0XHRcdFx0LnNwbGl0KCcnKVxuXHRcdFx0XHQubWFwKGMgPT4gYyArIGMpXG5cdFx0XHRcdC5qb2luKCcnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZvcm1hdDogJ2hleCcsXG5cdFx0XHR2YWx1ZTogeyBoZXg6IGJyYW5kLmFzSGV4U2V0KGAjJHtoZXh9YCkgfVxuXHRcdH07XG5cdH1cblxuXHRpZiAoaHNsTWF0Y2gpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Zm9ybWF0OiAnaHNsJyxcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogYnJhbmQuYXNSYWRpYWwocGFyc2VJbnQoaHNsTWF0Y2hbMV0sIDEwKSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGJyYW5kLmFzUGVyY2VudGlsZShwYXJzZUZsb2F0KGhzbE1hdGNoWzJdKSksXG5cdFx0XHRcdGxpZ2h0bmVzczogYnJhbmQuYXNQZXJjZW50aWxlKHBhcnNlRmxvYXQoaHNsTWF0Y2hbM10pKVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRpZiAocmdiTWF0Y2gpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Zm9ybWF0OiAncmdiJyxcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdHJlZDogYnJhbmQuYXNCeXRlUmFuZ2UocGFyc2VJbnQocmdiTWF0Y2hbMV0sIDEwKSksXG5cdFx0XHRcdGdyZWVuOiBicmFuZC5hc0J5dGVSYW5nZShwYXJzZUludChyZ2JNYXRjaFsyXSwgMTApKSxcblx0XHRcdFx0Ymx1ZTogYnJhbmQuYXNCeXRlUmFuZ2UocGFyc2VJbnQocmdiTWF0Y2hbM10sIDEwKSlcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gZm9yIE5hbWVkIENvbG9ycyAoY29udmVydCB0byBSR0IgdXNpbmcgQ1NTIGNhbnZhcylcblx0Y29uc3QgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuXHR0ZXN0RWxlbWVudC5zdHlsZS5jb2xvciA9IGNvbG9yU3RyO1xuXG5cdGlmICh0ZXN0RWxlbWVudC5zdHlsZS5jb2xvciAhPT0gJycpIHtcblx0XHRjb25zdCBjdHggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuXG5cdFx0aWYgKGN0eCkge1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGNvbG9yU3RyO1xuXG5cdFx0XHRjb25zdCByZ2IgPSBjdHguZmlsbFN0eWxlLm1hdGNoKC9cXGQrL2cpPy5tYXAoTnVtYmVyKTtcblxuXHRcdFx0aWYgKHJnYiAmJiByZ2IubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Zm9ybWF0OiAncmdiJyxcblx0XHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdFx0cmVkOiBicmFuZC5hc0J5dGVSYW5nZShyZ2JbMF0pLFxuXHRcdFx0XHRcdFx0Z3JlZW46IGJyYW5kLmFzQnl0ZVJhbmdlKHJnYlsxXSksXG5cdFx0XHRcdFx0XHRibHVlOiBicmFuZC5hc0J5dGVSYW5nZShyZ2JbMl0pXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICghbW9kZS5xdWlldCAmJiBsb2dNb2RlLmVycm9yICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMSkge1xuXHRcdGxvZ2dlci5lcnJvcignSW52YWxpZCBjb2xvciBpbnB1dCcsIGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YCk7XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcGFsZXR0ZUV4cG9ydEZvcm1hdCgpOiBzdHJpbmcgfCB2b2lkIHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ3BhbGV0dGVFeHBvcnRGb3JtYXQoKSc7XG5cdGNvbnN0IGZvcm1hdFNlbGVjdGlvbk1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcblx0XHRpZHMuc2VsZWN0cy5leHBvcnRGb3JtYXRPcHRpb25cblx0KSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcblxuXHRpZiAoIWZvcm1hdFNlbGVjdGlvbk1lbnUpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiAhbW9kZS5xdWlldClcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J0V4cG9ydCBmb3JtYXQgc2VsZWN0aW9uIGRyb3Bkb3duIG5vdCBmb3VuZCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fVxuXG5cdGNvbnN0IHNlbGVjdGVkRm9ybWF0ID0gZm9ybWF0U2VsZWN0aW9uTWVudS52YWx1ZTtcblxuXHRpZiAoXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdDU1MnICYmXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdKU09OJyAmJlxuXHRcdHNlbGVjdGVkRm9ybWF0ICE9PSAnWE1MJ1xuXHQpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiAhbW9kZS5xdWlldClcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J0ludmFsaWQgZXhwb3J0IGZvcm1hdCBzZWxlY3RlZCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdHJldHVybjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc2VsZWN0ZWRGb3JtYXQ7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlOiBET01Gbl9NYXN0ZXJJbnRlcmZhY2VbJ3BhcnNlJ10gPSB7XG5cdGNoZWNrYm94LFxuXHRjb2xvcklucHV0LFxuXHRwYWxldHRlRXhwb3J0Rm9ybWF0XG59O1xuIl19