// File: dom/parse.js
import { createLogger } from '../logger/index.js';
import { domData } from '../data/dom.js';
import { modeData as mode } from '../data/mode.js';
const ids = domData.ids;
const logMode = mode.logging;
const thisModule = 'dom/parse.js';
const logger = await createLogger();
function checkbox(id) {
    const thisFunction = 'checkbox()';
    const checkbox = document.getElementById(id);
    if (!checkbox) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Checkbox element ${id} not found`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    if (!(checkbox instanceof HTMLInputElement)) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Element ${id} is not a checkbox`, `${thisModule} > ${thisFunction}`);
        }
        return;
    }
    return checkbox ? checkbox.checked : undefined;
}
function paletteExportFormat() {
    const thisFunction = 'paletteExportFormat()';
    const formatSelectionMenu = document.getElementById(ids.exportPaletteFormatOptions);
    if (!formatSelectionMenu) {
        if (logMode.error && !mode.quiet)
            logger.error('Export format selection dropdown not found', `${thisModule} > ${thisFunction}`);
    }
    const selectedFormat = formatSelectionMenu.value;
    if (selectedFormat !== 'CSS' &&
        selectedFormat !== 'JSON' &&
        selectedFormat !== 'XML') {
        if (logMode.error && !mode.quiet)
            logger.error('Invalid export format selected', `${thisModule} > ${thisFunction}`);
        return;
    }
    else {
        return selectedFormat;
    }
}
export const parse = {
    checkbox,
    paletteExportFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUN4QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRTdCLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQztBQUVsQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLFNBQVMsUUFBUSxDQUFDLEVBQVU7SUFDM0IsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ2xDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFxQixDQUFDO0lBRWpFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNmLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQyxNQUFNLENBQUMsS0FBSyxDQUNYLG9CQUFvQixFQUFFLFlBQVksRUFDbEMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTztJQUNSLENBQUM7SUFFRCxJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVksZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1FBQzdDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQyxNQUFNLENBQUMsS0FBSyxDQUNYLFdBQVcsRUFBRSxvQkFBb0IsRUFDakMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTztJQUNSLENBQUM7SUFFRCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2hELENBQUM7QUFFRCxTQUFTLG1CQUFtQjtJQUMzQixNQUFNLFlBQVksR0FBRyx1QkFBdUIsQ0FBQztJQUM3QyxNQUFNLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQ2xELEdBQUcsQ0FBQywwQkFBMEIsQ0FDVCxDQUFDO0lBRXZCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzFCLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQ1gsNENBQTRDLEVBQzVDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQztJQUVqRCxJQUNDLGNBQWMsS0FBSyxLQUFLO1FBQ3hCLGNBQWMsS0FBSyxNQUFNO1FBQ3pCLGNBQWMsS0FBSyxLQUFLLEVBQ3ZCLENBQUM7UUFDRixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUMvQixNQUFNLENBQUMsS0FBSyxDQUNYLGdDQUFnQyxFQUNoQyxHQUFHLFVBQVUsTUFBTSxZQUFZLEVBQUUsQ0FDakMsQ0FBQztRQUVILE9BQU87SUFDUixDQUFDO1NBQU0sQ0FBQztRQUNQLE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFtQztJQUNwRCxRQUFRO0lBQ1IsbUJBQW1CO0NBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vcGFyc2UuanNcblxuaW1wb3J0IHsgRE9NRm5fTWFzdGVySW50ZXJmYWNlIH0gZnJvbSAnLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyL2luZGV4LmpzJztcbmltcG9ydCB7IGRvbURhdGEgfSBmcm9tICcuLi9kYXRhL2RvbS5qcyc7XG5pbXBvcnQgeyBtb2RlRGF0YSBhcyBtb2RlIH0gZnJvbSAnLi4vZGF0YS9tb2RlLmpzJztcblxuY29uc3QgaWRzID0gZG9tRGF0YS5pZHM7XG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5jb25zdCB0aGlzTW9kdWxlID0gJ2RvbS9wYXJzZS5qcyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5mdW5jdGlvbiBjaGVja2JveChpZDogc3RyaW5nKTogYm9vbGVhbiB8IHZvaWQge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnY2hlY2tib3goKSc7XG5cdGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cblx0aWYgKCFjaGVja2JveCkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yICYmICFtb2RlLnF1aWV0KSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBDaGVja2JveCBlbGVtZW50ICR7aWR9IG5vdCBmb3VuZGAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIShjaGVja2JveCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IgJiYgIW1vZGUucXVpZXQpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVsZW1lbnQgJHtpZH0gaXMgbm90IGEgY2hlY2tib3hgLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0cmV0dXJuIGNoZWNrYm94ID8gY2hlY2tib3guY2hlY2tlZCA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcGFsZXR0ZUV4cG9ydEZvcm1hdCgpOiBzdHJpbmcgfCB2b2lkIHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ3BhbGV0dGVFeHBvcnRGb3JtYXQoKSc7XG5cdGNvbnN0IGZvcm1hdFNlbGVjdGlvbk1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcblx0XHRpZHMuZXhwb3J0UGFsZXR0ZUZvcm1hdE9wdGlvbnNcblx0KSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcblxuXHRpZiAoIWZvcm1hdFNlbGVjdGlvbk1lbnUpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiAhbW9kZS5xdWlldClcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J0V4cG9ydCBmb3JtYXQgc2VsZWN0aW9uIGRyb3Bkb3duIG5vdCBmb3VuZCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fVxuXG5cdGNvbnN0IHNlbGVjdGVkRm9ybWF0ID0gZm9ybWF0U2VsZWN0aW9uTWVudS52YWx1ZTtcblxuXHRpZiAoXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdDU1MnICYmXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdKU09OJyAmJlxuXHRcdHNlbGVjdGVkRm9ybWF0ICE9PSAnWE1MJ1xuXHQpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiAhbW9kZS5xdWlldClcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J0ludmFsaWQgZXhwb3J0IGZvcm1hdCBzZWxlY3RlZCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdHJldHVybjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc2VsZWN0ZWRGb3JtYXQ7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlOiBET01Gbl9NYXN0ZXJJbnRlcmZhY2VbJ3BhcnNlJ10gPSB7XG5cdGNoZWNrYm94LFxuXHRwYWxldHRlRXhwb3J0Rm9ybWF0XG59O1xuIl19