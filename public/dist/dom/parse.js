// File: src/dom/parse.ts
import { consts, mode } from '../common/data/base.js';
import { createLogger } from '../logger/index.js';
const logger = await createLogger();
const domIDs = consts.dom.ids;
const logMode = mode.logging;
function checkbox(id) {
    const checkbox = document.getElementById(id);
    if (!checkbox) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Checkbox element ${id} not found`, 'dom > parse > checkbox()');
        }
        return;
    }
    if (!(checkbox instanceof HTMLInputElement)) {
        if (logMode.error && !mode.quiet) {
            logger.error(`Element ${id} is not a checkbox`, 'dom > parse > checkbox()');
        }
        return;
    }
    return checkbox ? checkbox.checked : undefined;
}
function paletteExportFormat() {
    const formatSelectionMenu = document.getElementById(domIDs.exportPaletteFormatOptions);
    if (!formatSelectionMenu) {
        if (logMode.error && !mode.quiet)
            logger.error('Export format selection dropdown not found', 'dom > parse > paletteExportFormat()');
    }
    const selectedFormat = formatSelectionMenu.value;
    if (selectedFormat !== 'CSS' &&
        selectedFormat !== 'JSON' &&
        selectedFormat !== 'XML') {
        if (logMode.error && !mode.quiet)
            logger.error('Invalid export format selected', 'dom > parse > paletteExportFormat()');
        return;
    }
    else {
        return selectedFormat;
    }
}
export const parse = {
    checkbox,
    paletteExportFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QjtBQUd6QixPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0FBQzlCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFN0IsU0FBUyxRQUFRLENBQUMsRUFBVTtJQUMzQixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBcUIsQ0FBQztJQUVqRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FDWCxvQkFBb0IsRUFBRSxZQUFZLEVBQ2xDLDBCQUEwQixDQUMxQixDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxDQUFDLENBQUMsUUFBUSxZQUFZLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztRQUM3QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FDWCxXQUFXLEVBQUUsb0JBQW9CLEVBQ2pDLDBCQUEwQixDQUMxQixDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO0lBRUQsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsU0FBUyxtQkFBbUI7SUFDM0IsTUFBTSxtQkFBbUIsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUNsRCxNQUFNLENBQUMsMEJBQTBCLENBQ1osQ0FBQztJQUV2QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMxQixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUMvQixNQUFNLENBQUMsS0FBSyxDQUNYLDRDQUE0QyxFQUM1QyxxQ0FBcUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7SUFFakQsSUFDQyxjQUFjLEtBQUssS0FBSztRQUN4QixjQUFjLEtBQUssTUFBTTtRQUN6QixjQUFjLEtBQUssS0FBSyxFQUN2QixDQUFDO1FBQ0YsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDL0IsTUFBTSxDQUFDLEtBQUssQ0FDWCxnQ0FBZ0MsRUFDaEMscUNBQXFDLENBQ3JDLENBQUM7UUFFSCxPQUFPO0lBQ1IsQ0FBQztTQUFNLENBQUM7UUFDUCxPQUFPLGNBQWMsQ0FBQztJQUN2QixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBMEM7SUFDM0QsUUFBUTtJQUNSLG1CQUFtQjtDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2RvbS9wYXJzZS50c1xuXG5pbXBvcnQgeyBET01fRnVuY3Rpb25zTWFzdGVySW50ZXJmYWNlIH0gZnJvbSAnLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgY29uc3RzLCBtb2RlIH0gZnJvbSAnLi4vY29tbW9uL2RhdGEvYmFzZS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIvaW5kZXguanMnO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuY29uc3QgZG9tSURzID0gY29uc3RzLmRvbS5pZHM7XG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5mdW5jdGlvbiBjaGVja2JveChpZDogc3RyaW5nKTogYm9vbGVhbiB8IHZvaWQge1xuXHRjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG5cdGlmICghY2hlY2tib3gpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiAhbW9kZS5xdWlldCkge1xuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgQ2hlY2tib3ggZWxlbWVudCAke2lkfSBub3QgZm91bmRgLFxuXHRcdFx0XHQnZG9tID4gcGFyc2UgPiBjaGVja2JveCgpJ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIShjaGVja2JveCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IgJiYgIW1vZGUucXVpZXQpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVsZW1lbnQgJHtpZH0gaXMgbm90IGEgY2hlY2tib3hgLFxuXHRcdFx0XHQnZG9tID4gcGFyc2UgPiBjaGVja2JveCgpJ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRyZXR1cm4gY2hlY2tib3ggPyBjaGVja2JveC5jaGVja2VkIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBwYWxldHRlRXhwb3J0Rm9ybWF0KCk6IHN0cmluZyB8IHZvaWQge1xuXHRjb25zdCBmb3JtYXRTZWxlY3Rpb25NZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0ZG9tSURzLmV4cG9ydFBhbGV0dGVGb3JtYXRPcHRpb25zXG5cdCkgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG5cblx0aWYgKCFmb3JtYXRTZWxlY3Rpb25NZW51KSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IgJiYgIW1vZGUucXVpZXQpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdCdFeHBvcnQgZm9ybWF0IHNlbGVjdGlvbiBkcm9wZG93biBub3QgZm91bmQnLFxuXHRcdFx0XHQnZG9tID4gcGFyc2UgPiBwYWxldHRlRXhwb3J0Rm9ybWF0KCknXG5cdFx0XHQpO1xuXHR9XG5cblx0Y29uc3Qgc2VsZWN0ZWRGb3JtYXQgPSBmb3JtYXRTZWxlY3Rpb25NZW51LnZhbHVlO1xuXG5cdGlmIChcblx0XHRzZWxlY3RlZEZvcm1hdCAhPT0gJ0NTUycgJiZcblx0XHRzZWxlY3RlZEZvcm1hdCAhPT0gJ0pTT04nICYmXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdYTUwnXG5cdCkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yICYmICFtb2RlLnF1aWV0KVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHQnSW52YWxpZCBleHBvcnQgZm9ybWF0IHNlbGVjdGVkJyxcblx0XHRcdFx0J2RvbSA+IHBhcnNlID4gcGFsZXR0ZUV4cG9ydEZvcm1hdCgpJ1xuXHRcdFx0KTtcblxuXHRcdHJldHVybjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc2VsZWN0ZWRGb3JtYXQ7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlOiBET01fRnVuY3Rpb25zTWFzdGVySW50ZXJmYWNlWydwYXJzZSddID0ge1xuXHRjaGVja2JveCxcblx0cGFsZXR0ZUV4cG9ydEZvcm1hdFxufTtcbiJdfQ==