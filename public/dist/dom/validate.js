// File: dom/validate.js
import { domData } from '../data/dom.js';
import { createLogger } from '../logger/index.js';
import { modeData as mode } from '../data/mode.js';
const logMode = mode.logging;
const thisModule = 'dom/validate.js';
const logger = await createLogger();
export function validateStaticElements() {
    const thisFunction = 'validateElements()';
    const ids = domData.ids.static;
    const missingElements = [];
    // flattens the nested structure into a single array of IDs, then extracts their values
    const allIDs = Object.values(ids).flatMap(category => Object.values(category));
    allIDs.forEach((id) => {
        const element = document.getElementById(id);
        if (!element) {
            if (logMode.error)
                logger.error(`Element with ID "${id}" not found`, `${thisModule} > ${thisFunction}`);
            missingElements.push(id);
        }
    });
    if (missingElements.length) {
        if (logMode.warn)
            logger.warn(`Some DOM elements are missing (${missingElements.length}): ${missingElements.join(', ')}`, `${thisModule} > ${thisFunction}`);
    }
    else {
        if (mode.debug && logMode.verbosity > 1)
            logger.debug('All required DOM elements are present.', `${thisModule} > ${thisFunction}`);
    }
}
export const validate = {
    staticElements: validateStaticElements
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3ZhbGlkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QjtBQUd4QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM3QixNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQUVyQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLE1BQU0sVUFBVSxzQkFBc0I7SUFDckMsTUFBTSxZQUFZLEdBQUcsb0JBQW9CLENBQUM7SUFDMUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDL0IsTUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFDO0lBRXJDLHVGQUF1RjtJQUN2RixNQUFNLE1BQU0sR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUM5RCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUN2QixDQUFDO0lBRUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQVUsRUFBRSxFQUFFO1FBQzdCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsSUFBSSxPQUFPLENBQUMsS0FBSztnQkFDaEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxvQkFBb0IsRUFBRSxhQUFhLEVBQ25DLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO1lBRUgsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQixDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1QixJQUFJLE9BQU8sQ0FBQyxJQUFJO1lBQ2YsTUFBTSxDQUFDLElBQUksQ0FDVixrQ0FBa0MsZUFBZSxDQUFDLE1BQU0sTUFBTSxlQUFlLENBQUMsSUFBSSxDQUNqRixJQUFJLENBQ0osRUFBRSxFQUNILEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO0lBQ0osQ0FBQztTQUFNLENBQUM7UUFDUCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxLQUFLLENBQ1gsd0NBQXdDLEVBQ3hDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQXNDO0lBQzFELGNBQWMsRUFBRSxzQkFBc0I7Q0FDdEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGRvbS92YWxpZGF0ZS5qc1xuXG5pbXBvcnQgeyBET01Gbl9NYXN0ZXJJbnRlcmZhY2UgfSBmcm9tICcuLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBkb21EYXRhIH0gZnJvbSAnLi4vZGF0YS9kb20uanMnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyL2luZGV4LmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuY29uc3QgdGhpc01vZHVsZSA9ICdkb20vdmFsaWRhdGUuanMnO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdGljRWxlbWVudHMoKTogdm9pZCB7XG5cdGNvbnN0IHRoaXNGdW5jdGlvbiA9ICd2YWxpZGF0ZUVsZW1lbnRzKCknO1xuXHRjb25zdCBpZHMgPSBkb21EYXRhLmlkcy5zdGF0aWM7XG5cdGNvbnN0IG1pc3NpbmdFbGVtZW50czogc3RyaW5nW10gPSBbXTtcblxuXHQvLyBmbGF0dGVucyB0aGUgbmVzdGVkIHN0cnVjdHVyZSBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIElEcywgdGhlbiBleHRyYWN0cyB0aGVpciB2YWx1ZXNcblx0Y29uc3QgYWxsSURzOiBzdHJpbmdbXSA9IE9iamVjdC52YWx1ZXMoaWRzKS5mbGF0TWFwKGNhdGVnb3J5ID0+XG5cdFx0T2JqZWN0LnZhbHVlcyhjYXRlZ29yeSlcblx0KTtcblxuXHRhbGxJRHMuZm9yRWFjaCgoaWQ6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cblx0XHRpZiAoIWVsZW1lbnQpIHtcblx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0YEVsZW1lbnQgd2l0aCBJRCBcIiR7aWR9XCIgbm90IGZvdW5kYCxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdFx0KTtcblxuXHRcdFx0bWlzc2luZ0VsZW1lbnRzLnB1c2goaWQpO1xuXHRcdH1cblx0fSk7XG5cblx0aWYgKG1pc3NpbmdFbGVtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAobG9nTW9kZS53YXJuKVxuXHRcdFx0bG9nZ2VyLndhcm4oXG5cdFx0XHRcdGBTb21lIERPTSBlbGVtZW50cyBhcmUgbWlzc2luZyAoJHttaXNzaW5nRWxlbWVudHMubGVuZ3RofSk6ICR7bWlzc2luZ0VsZW1lbnRzLmpvaW4oXG5cdFx0XHRcdFx0JywgJ1xuXHRcdFx0XHQpfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fSBlbHNlIHtcblx0XHRpZiAobW9kZS5kZWJ1ZyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDEpXG5cdFx0XHRsb2dnZXIuZGVidWcoXG5cdFx0XHRcdCdBbGwgcmVxdWlyZWQgRE9NIGVsZW1lbnRzIGFyZSBwcmVzZW50LicsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgdmFsaWRhdGU6IERPTUZuX01hc3RlckludGVyZmFjZVsndmFsaWRhdGUnXSA9IHtcblx0c3RhdGljRWxlbWVudHM6IHZhbGlkYXRlU3RhdGljRWxlbWVudHNcbn07XG4iXX0=