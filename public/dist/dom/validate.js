// File: dom/validate.js
import { domData } from '../data/dom.js';
import { createLogger } from '../logger/index.js';
import { modeData as mode } from '../data/mode.js';
const logMode = mode.logging;
const thisModule = 'dom/validate.js';
const logger = await createLogger();
export function validateStaticElements() {
    const thisFunction = 'validateElements()';
    const ids = domData.ids.static;
    const missingElements = [];
    // flattens the nested structure into a single array of IDs, then extracts their values
    const allIDs = Object.values(ids).flatMap(category => Object.values(category));
    allIDs.forEach((id) => {
        const element = document.getElementById(id);
        if (!element) {
            if (logMode.error)
                logger.error(`Element with ID "${id}" not found`, `${thisModule} > ${thisFunction}`);
            missingElements.push(id);
        }
    });
    if (missingElements.length) {
        if (logMode.warn)
            logger.warn(`Some DOM elements are missing (${missingElements.length}): ${missingElements.join(', ')}`, `${thisModule} > ${thisFunction}`);
    }
    else {
        if (logMode.info && mode.debug && logMode.verbosity > 1)
            logger.info('All required DOM elements are present.', `${thisModule} > ${thisFunction}`);
    }
}
export const validate = {
    staticElements: validateStaticElements
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3ZhbGlkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QjtBQUd4QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM3QixNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQUVyQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLE1BQU0sVUFBVSxzQkFBc0I7SUFDckMsTUFBTSxZQUFZLEdBQUcsb0JBQW9CLENBQUM7SUFDMUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDL0IsTUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFDO0lBRXJDLHVGQUF1RjtJQUN2RixNQUFNLE1BQU0sR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUM5RCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUN2QixDQUFDO0lBRUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQVUsRUFBRSxFQUFFO1FBQzdCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsSUFBSSxPQUFPLENBQUMsS0FBSztnQkFDaEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxvQkFBb0IsRUFBRSxhQUFhLEVBQ25DLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO1lBRUgsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQixDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1QixJQUFJLE9BQU8sQ0FBQyxJQUFJO1lBQ2YsTUFBTSxDQUFDLElBQUksQ0FDVixrQ0FBa0MsZUFBZSxDQUFDLE1BQU0sTUFBTSxlQUFlLENBQUMsSUFBSSxDQUNqRixJQUFJLENBQ0osRUFBRSxFQUNILEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO0lBQ0osQ0FBQztTQUFNLENBQUM7UUFDUCxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUM7WUFDdEQsTUFBTSxDQUFDLElBQUksQ0FDVix3Q0FBd0MsRUFDeEMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7SUFDSixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBc0M7SUFDMUQsY0FBYyxFQUFFLHNCQUFzQjtDQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogZG9tL3ZhbGlkYXRlLmpzXG5cbmltcG9ydCB7IERPTUZuX01hc3RlckludGVyZmFjZSB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGRvbURhdGEgfSBmcm9tICcuLi9kYXRhL2RvbS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5jb25zdCB0aGlzTW9kdWxlID0gJ2RvbS92YWxpZGF0ZS5qcyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTdGF0aWNFbGVtZW50cygpOiB2b2lkIHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ3ZhbGlkYXRlRWxlbWVudHMoKSc7XG5cdGNvbnN0IGlkcyA9IGRvbURhdGEuaWRzLnN0YXRpYztcblx0Y29uc3QgbWlzc2luZ0VsZW1lbnRzOiBzdHJpbmdbXSA9IFtdO1xuXG5cdC8vIGZsYXR0ZW5zIHRoZSBuZXN0ZWQgc3RydWN0dXJlIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgSURzLCB0aGVuIGV4dHJhY3RzIHRoZWlyIHZhbHVlc1xuXHRjb25zdCBhbGxJRHM6IHN0cmluZ1tdID0gT2JqZWN0LnZhbHVlcyhpZHMpLmZsYXRNYXAoY2F0ZWdvcnkgPT5cblx0XHRPYmplY3QudmFsdWVzKGNhdGVnb3J5KVxuXHQpO1xuXG5cdGFsbElEcy5mb3JFYWNoKChpZDogc3RyaW5nKSA9PiB7XG5cdFx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuXHRcdGlmICghZWxlbWVudCkge1xuXHRcdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRgRWxlbWVudCB3aXRoIElEIFwiJHtpZH1cIiBub3QgZm91bmRgLFxuXHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRtaXNzaW5nRWxlbWVudHMucHVzaChpZCk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAobWlzc2luZ0VsZW1lbnRzLmxlbmd0aCkge1xuXHRcdGlmIChsb2dNb2RlLndhcm4pXG5cdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0YFNvbWUgRE9NIGVsZW1lbnRzIGFyZSBtaXNzaW5nICgke21pc3NpbmdFbGVtZW50cy5sZW5ndGh9KTogJHttaXNzaW5nRWxlbWVudHMuam9pbihcblx0XHRcdFx0XHQnLCAnXG5cdFx0XHRcdCl9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXHR9IGVsc2Uge1xuXHRcdGlmIChsb2dNb2RlLmluZm8gJiYgbW9kZS5kZWJ1ZyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDEpXG5cdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0J0FsbCByZXF1aXJlZCBET00gZWxlbWVudHMgYXJlIHByZXNlbnQuJyxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZTogRE9NRm5fTWFzdGVySW50ZXJmYWNlWyd2YWxpZGF0ZSddID0ge1xuXHRzdGF0aWNFbGVtZW50czogdmFsaWRhdGVTdGF0aWNFbGVtZW50c1xufTtcbiJdfQ==