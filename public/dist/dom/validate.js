// File: dom/validate.js
import { domData } from '../data/dom.js';
import { createLogger } from '../logger/index.js';
import { modeData as mode } from '../data/mode.js';
const logMode = mode.logging;
const thisModule = 'dom/validate.js';
const logger = await createLogger();
function validateElements() {
    const thisFunction = 'validateElements()';
    const ids = domData.ids;
    const allowedMissingElements = new Set([
        'color-box-1',
        'export-palette-input'
    ]);
    const missingElements = [];
    Object.values(ids).forEach(id => {
        const element = document.getElementById(id);
        if (!element && !allowedMissingElements.has(id)) {
            if (logMode.error)
                logger.error(`Element with ID "${id}" not found`, `${thisModule} > ${thisFunction}`);
            missingElements.push(id);
        }
    });
    if (missingElements.length) {
        if (logMode.warn)
            logger.warn(`Some DOM elements are missing (${missingElements.length}): ${missingElements.join(', ')}`, `${thisModule} > ${thisFunction}`);
    }
    else {
        if (logMode.info && mode.debug && logMode.verbosity > 1)
            logger.info('All required DOM elements are present.', `${thisModule} > ${thisFunction}`);
    }
}
export const validate = {
    elements: validateElements
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3ZhbGlkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QjtBQUd4QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM3QixNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQUVyQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLFNBQVMsZ0JBQWdCO0lBQ3hCLE1BQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDO0lBQzFDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDeEIsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLEdBQUcsQ0FBQztRQUN0QyxhQUFhO1FBQ2Isc0JBQXNCO0tBQ3RCLENBQUMsQ0FBQztJQUNILE1BQU0sZUFBZSxHQUFhLEVBQUUsQ0FBQztJQUVyQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMvQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNqRCxJQUFJLE9BQU8sQ0FBQyxLQUFLO2dCQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLG9CQUFvQixFQUFFLGFBQWEsRUFDbkMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7WUFFSCxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzVCLElBQUksT0FBTyxDQUFDLElBQUk7WUFDZixNQUFNLENBQUMsSUFBSSxDQUNWLGtDQUFrQyxlQUFlLENBQUMsTUFBTSxNQUFNLGVBQWUsQ0FBQyxJQUFJLENBQ2pGLElBQUksQ0FDSixFQUFFLEVBQ0gsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7SUFDSixDQUFDO1NBQU0sQ0FBQztRQUNQLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQztZQUN0RCxNQUFNLENBQUMsSUFBSSxDQUNWLHdDQUF3QyxFQUN4QyxHQUFHLFVBQVUsTUFBTSxZQUFZLEVBQUUsQ0FDakMsQ0FBQztJQUNKLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFzQztJQUMxRCxRQUFRLEVBQUUsZ0JBQWdCO0NBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vdmFsaWRhdGUuanNcblxuaW1wb3J0IHsgRE9NRm5fTWFzdGVySW50ZXJmYWNlIH0gZnJvbSAnLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgZG9tRGF0YSB9IGZyb20gJy4uL2RhdGEvZG9tLmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBtb2RlRGF0YSBhcyBtb2RlIH0gZnJvbSAnLi4vZGF0YS9tb2RlLmpzJztcblxuY29uc3QgbG9nTW9kZSA9IG1vZGUubG9nZ2luZztcbmNvbnN0IHRoaXNNb2R1bGUgPSAnZG9tL3ZhbGlkYXRlLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRWxlbWVudHMoKTogdm9pZCB7XG5cdGNvbnN0IHRoaXNGdW5jdGlvbiA9ICd2YWxpZGF0ZUVsZW1lbnRzKCknO1xuXHRjb25zdCBpZHMgPSBkb21EYXRhLmlkcztcblx0Y29uc3QgYWxsb3dlZE1pc3NpbmdFbGVtZW50cyA9IG5ldyBTZXQoW1xuXHRcdCdjb2xvci1ib3gtMScsXG5cdFx0J2V4cG9ydC1wYWxldHRlLWlucHV0J1xuXHRdKTtcblx0Y29uc3QgbWlzc2luZ0VsZW1lbnRzOiBzdHJpbmdbXSA9IFtdO1xuXG5cdE9iamVjdC52YWx1ZXMoaWRzKS5mb3JFYWNoKGlkID0+IHtcblx0XHRjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG5cdFx0aWYgKCFlbGVtZW50ICYmICFhbGxvd2VkTWlzc2luZ0VsZW1lbnRzLmhhcyhpZCkpIHtcblx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0YEVsZW1lbnQgd2l0aCBJRCBcIiR7aWR9XCIgbm90IGZvdW5kYCxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdFx0KTtcblxuXHRcdFx0bWlzc2luZ0VsZW1lbnRzLnB1c2goaWQpO1xuXHRcdH1cblx0fSk7XG5cblx0aWYgKG1pc3NpbmdFbGVtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAobG9nTW9kZS53YXJuKVxuXHRcdFx0bG9nZ2VyLndhcm4oXG5cdFx0XHRcdGBTb21lIERPTSBlbGVtZW50cyBhcmUgbWlzc2luZyAoJHttaXNzaW5nRWxlbWVudHMubGVuZ3RofSk6ICR7bWlzc2luZ0VsZW1lbnRzLmpvaW4oXG5cdFx0XHRcdFx0JywgJ1xuXHRcdFx0XHQpfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fSBlbHNlIHtcblx0XHRpZiAobG9nTW9kZS5pbmZvICYmIG1vZGUuZGVidWcgJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAxKVxuXHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdCdBbGwgcmVxdWlyZWQgRE9NIGVsZW1lbnRzIGFyZSBwcmVzZW50LicsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgdmFsaWRhdGU6IERPTUZuX01hc3RlckludGVyZmFjZVsndmFsaWRhdGUnXSA9IHtcblx0ZWxlbWVudHM6IHZhbGlkYXRlRWxlbWVudHNcbn07XG4iXX0=