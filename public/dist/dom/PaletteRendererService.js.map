{"version":3,"file":"PaletteRendererService.js","sources":["../../../../src/dom/PaletteRendererService.ts"],"sourcesContent":["// File: dom/PaletteRendererService.ts\n\nimport {\n\tAllColors,\n\tCommonFunctions,\n\tGenerateHuesFnGroup,\n\tGeneratePaletteFn,\n\tGeneratePaletteFnGroup,\n\tHelpers,\n\tPaletteItem,\n\tServices,\n\tState,\n\tUtilities\n} from '../types/index.js';\nimport { StateManager } from '../state/StateManager.js';\nimport { DOMStore } from './DOMStore.js';\nimport { domConfig } from '../config/index.js';\n\nconst caller = 'PaletteRendererService';\n\nexport interface PaletteRendererContract {\n\trenderColumns(columns: State['paletteContainer']['columns']): void;\n\trenderNewPalette(): Promise<void>;\n\trenderPaletteFromState(): Promise<void>;\n}\n\nexport class PaletteRendererService implements PaletteRendererContract {\n\tstatic #instance: PaletteRendererService | null = null;\n\n\t#common: CommonFunctions;\n\t#domStore: DOMStore;\n\t#errors: Services['errors'];\n\t#log: Services['log'];\n\t#helpers: Helpers;\n\t#stateManager: StateManager;\n\t#utils: Utilities;\n\n\t#generatePalette: GeneratePaletteFn;\n\t#generatePaletteFns: GeneratePaletteFnGroup;\n\t#generateHues: GenerateHuesFnGroup;\n\n\tprivate constructor(\n\t\tcommon: CommonFunctions,\n\t\tdomStore: DOMStore,\n\t\tgenerateHues: GenerateHuesFnGroup,\n\t\tgeneratePaletteFnGroup: GeneratePaletteFnGroup,\n\t\tgeneratePalette: GeneratePaletteFn,\n\t\tstateManager: StateManager\n\t) {\n\t\ttry {\n\t\t\tcommon.services.log.info(\n\t\t\t\t`Constructing PaletteRendererService instance.`,\n\t\t\t\t`${caller}.constructor`\n\t\t\t);\n\n\t\t\tthis.#common = common;\n\t\t\tthis.#domStore = domStore;\n\t\t\tthis.#errors = common.services.errors;\n\t\t\tthis.#helpers = common.helpers;\n\t\t\tthis.#log = common.services.log;\n\t\t\tthis.#utils = common.utils;\n\n\t\t\tthis.#generatePalette = generatePalette;\n\t\t\tthis.#generatePaletteFns = generatePaletteFnGroup;\n\t\t\tthis.#generateHues = generateHues;\n\n\t\t\tthis.#stateManager = stateManager;\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${caller}.constructor]: ${\n\t\t\t\t\terror instanceof Error ? error.message : error\n\t\t\t\t}`\n\t\t\t);\n\t\t}\n\t}\n\n\tstatic getInstance(\n\t\tcommon: CommonFunctions,\n\t\tdomStore: DOMStore,\n\t\tgenerateHues: GenerateHuesFnGroup,\n\t\tgeneratePaletteFnGroup: GeneratePaletteFnGroup,\n\t\tgeneratePalette: GeneratePaletteFn,\n\t\tstateManager: StateManager\n\t): PaletteRendererService {\n\t\treturn common.services.errors.handleSync(() => {\n\t\t\tif (!PaletteRendererService.#instance) {\n\t\t\t\tcommon.services.log.info(\n\t\t\t\t\t`Creating PaletteRendererService instance.`,\n\t\t\t\t\t`${caller}.getInstance`\n\t\t\t\t);\n\n\t\t\t\treturn new PaletteRendererService(\n\t\t\t\t\tcommon,\n\t\t\t\t\tdomStore,\n\t\t\t\t\tgenerateHues,\n\t\t\t\t\tgeneratePaletteFnGroup,\n\t\t\t\t\tgeneratePalette,\n\t\t\t\t\tstateManager\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn PaletteRendererService.#instance;\n\t\t}, `[${caller}.getInstance]: Failed to create PaletteRendererService instance.`);\n\t}\n\n\trenderColumns(columns: State['paletteContainer']['columns']): void {\n\t\tconst container = this.#domStore.getElement('divs', 'paletteContainer');\n\n\t\tif (!container) {\n\t\t\tthis.#log.warn('Palette container not found.', `${caller}.renderColumns`);\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.innerHTML = '';\n\n\t\tcolumns.forEach(column => {\n\t\t\tconst columnDiv = document.createElement('div');\n\t\t\tcolumnDiv.className = 'palette-column';\n\t\t\tcolumnDiv.style.width = `${column.size}%`;\n\t\t\tcontainer.appendChild(columnDiv);\n\t\t});\n\n\t\tthis.#log.debug(\n\t\t\t`Rendered ${columns.length} columns.c`,\n\t\t\t`${caller}.renderColumns`\n\t\t);\n\t}\n\n\tasync renderNewPalette(): Promise<void> {\n\t\treturn await this.#errors.handleAsync(async () => {\n\t\t\tconst paletteContainer = this.#domStore.getElement(\n\t\t\t\t'divs',\n\t\t\t\t'paletteContainer'\n\t\t\t);\n\n\t\t\tif (!paletteContainer) {\n\t\t\t\tthrow new Error('Palette container not found');\n\t\t\t}\n\n\t\t\t// retrieve palette generation options\n\t\t\tconst options = this.#utils.palette.getPaletteOptionsFromUI();\n\t\t\tthis.#log.debug(\n\t\t\t\t`Palette options: ${JSON.stringify(options)}`,\n\t\t\t\t`${caller}.renderNewPalette`\n\t\t\t);\n\n\t\t\t// store the old palette in history\n\t\t\tconst oldPalette = (\n\t\t\t\tawait this.#stateManager.getState()\n\t\t\t).paletteHistory.at(-1);\n\t\t\tif (oldPalette) this.#stateManager.addPaletteToHistory(oldPalette);\n\n\t\t\t// clear the existing palette\n\t\t\tpaletteContainer.innerHTML = '';\n\n\t\t\t// generate a new palette\n\t\t\tconst newPalette = this.#generatePalette(\n\t\t\t\toptions,\n\t\t\t\tthis.#common,\n\t\t\t\tthis.#generateHues,\n\t\t\t\tthis.#generatePaletteFns\n\t\t\t);\n\n\t\t\t// ensure valid palette before storing\n\t\t\tif (!this.#helpers.typeguards.isPalette(newPalette)) {\n\t\t\t\tthrow new Error('Generated palette is invalid.');\n\t\t\t}\n\n\t\t\tthis.#stateManager.addPaletteToHistory(newPalette);\n\t\t\tawait this.#stateManager.saveState();\n\n\t\t\t// create and append palette columns\n\t\t\tconst columnWidth = 100 / newPalette.items.length;\n\t\t\tconst validColorSpace = ['hex', 'hsl', 'rgb'].includes(\n\t\t\t\t(await this.#stateManager.getState()).preferences.colorSpace\n\t\t\t)\n\t\t\t\t? (await this.#stateManager.getState()).preferences.colorSpace\n\t\t\t\t: 'hex';\n\n\t\t\tconst columns = newPalette.items.map((item, index) => {\n\t\t\t\tconst columnID = index + 1;\n\t\t\t\tconst colorValue =\n\t\t\t\t\titem.css[validColorSpace as keyof PaletteItem['css']] || item.css.hex;\n\n\t\t\t\tconst column = document.createElement('div');\n\t\t\t\tcolumn.id = `palette-column-${columnID}`;\n\t\t\t\tcolumn.className = 'palette-column';\n\t\t\t\tcolumn.setAttribute('draggable', 'true');\n\t\t\t\tcolumn.style.backgroundColor = colorValue;\n\n\t\t\t\t// add UI elements inside the column\n\t\t\t\tthis.#renderPaletteColumn(column, columnID, colorValue);\n\n\t\t\t\treturn {\n\t\t\t\t\tcolumn,\n\t\t\t\t\tstate: {\n\t\t\t\t\t\tid: columnID,\n\t\t\t\t\t\tisLocked: false,\n\t\t\t\t\t\tposition: columnID,\n\t\t\t\t\t\tsize: columnWidth\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// append new columns to the palette container\n\t\t\tcolumns.forEach(({ column }) => paletteContainer.appendChild(column));\n\n\t\t\t// update state with new columns\n\t\t\tthis.#stateManager.updatePaletteColumns(\n\t\t\t\tcolumns.map(col => col.state),\n\t\t\t\ttrue\n\t\t\t);\n\t\t}, `[${caller}]: Failed to render a new palette.`);\n\t}\n\n\tasync renderPaletteFromState(): Promise<void> {\n\t\treturn await this.#errors.handleAsync(async () => {\n\t\t\tawait this.#stateManager.ensureStateReady();\n\t\t\tconst paletteContainer = this.#domStore.getElement(\n\t\t\t\t'divs',\n\t\t\t\t'paletteContainer'\n\t\t\t);\n\t\t\tif (!paletteContainer) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t'Palette container not found',\n\t\t\t\t\t`${caller}.renderPaletteFromState`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// clear existing content\n\t\t\tpaletteContainer.innerHTML = '';\n\t\t\t// get the most recent palette from history\n\t\t\tconst currentState = await this.#stateManager.getState();\n\t\t\tconst latestPalette = currentState.paletteHistory.at(-1);\n\t\t\tif (!latestPalette) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t'No saved palettes in history. Cannot render.',\n\t\t\t\t\t`${caller}.renderPaletteFromState`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// retrieve user's preferred color format\n\t\t\tconst colorSpace = currentState.preferences?.colorSpace || 'hex';\n\t\t\tconst validColorSpace = ['hex', 'hsl', 'rgb'].includes(colorSpace)\n\t\t\t\t? colorSpace\n\t\t\t\t: 'hex';\n\t\t\tconst columnCount = latestPalette.metadata.columnCount;\n\t\t\tconst columnWidth = 100 / columnCount;\n\t\t\tconst columns = latestPalette.items.map((item, index) => {\n\t\t\t\tconst columnID = item.itemID;\n\t\t\t\tconst colorValue =\n\t\t\t\t\titem.css[validColorSpace as keyof PaletteItem['css']] || item.css.hex;\n\t\t\t\tconst column = document.createElement('div');\n\t\t\t\tcolumn.id = `palette-column-${columnID}`;\n\t\t\t\tcolumn.className = 'palette-column';\n\t\t\t\tcolumn.setAttribute('draggable', 'true');\n\t\t\t\tcolumn.style.backgroundColor = colorValue;\n\t\t\t\t// add UI elements inside the column\n\t\t\t\tthis.#renderPaletteColumn(column, columnID, colorValue);\n\t\t\t\treturn {\n\t\t\t\t\tcolumn,\n\t\t\t\t\tstate: {\n\t\t\t\t\t\tid: columnID,\n\t\t\t\t\t\tisLocked: false,\n\t\t\t\t\t\tposition: index + 1,\n\t\t\t\t\t\tsize: columnWidth\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t\t// append new columns to the palette container\n\t\t\tcolumns.forEach(({ column }) => paletteContainer.appendChild(column));\n\t\t\t// update state with new columns\n\t\t\tthis.#stateManager.updatePaletteColumns(\n\t\t\t\tcolumns.map(col => col.state),\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tthis.#stateManager.updatePaletteHistory([latestPalette], true);\n\n\t\t\tawait this.#stateManager.saveState();\n\n\t\t\tthis.#log.debug(\n\t\t\t\t`Restored ${columns.length} columns from saved state.`,\n\t\t\t\t`${caller}.renderPaletteFromState`\n\t\t\t);\n\t\t}, `[${caller}]: Failed to render palette from state.`);\n\t}\n\n\tasync updatePaletteColumnSize(\n\t\tcolumnID: number,\n\t\tnewSize: number\n\t): Promise<void> {\n\t\treturn this.#errors.handleAsync(async () => {\n\t\t\tconst currentState = await this.#stateManager.getState();\n\t\t\tconst columns = currentState.paletteContainer.columns;\n\n\t\t\tconst columnIndex = columns.findIndex(col => col.id === columnID);\n\t\t\tif (columnIndex === -1) {\n\t\t\t\tthis.#log.warn(\n\t\t\t\t\t`Column with ID ${columnID} not found.`,\n\t\t\t\t\t`${caller}.updatePaletteColumnSize`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// adjust size with min/max boundaries\n\t\t\tconst adjustedSize = Math.max(\n\t\t\t\tdomConfig.minColumnSize,\n\t\t\t\tMath.min(newSize, domConfig.maxColumnSize)\n\t\t\t);\n\n\t\t\tconst sizeDifference = adjustedSize - columns[columnIndex].size;\n\n\t\t\t// create updated column sizes\n\t\t\tconst updatedColumns = columns.map((col, index) => {\n\t\t\t\tif (index === columnIndex) {\n\t\t\t\t\treturn { ...col, size: adjustedSize };\n\t\t\t\t}\n\t\t\t\t// distribute size difference among unlocked columns\n\t\t\t\tif (!col.isLocked) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...col,\n\t\t\t\t\t\tsize: col.size - sizeDifference / (columns.length - 1)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// locked columns remain unchanged\n\t\t\t\treturn col;\n\t\t\t});\n\n\t\t\t// normalize sizes to ensure total is exactly 100%\n\t\t\tconst totalSize = updatedColumns.reduce((sum, col) => sum + col.size, 0);\n\t\t\tconst normalizedColumns = updatedColumns.map(col => ({\n\t\t\t\t...col,\n\t\t\t\tsize: col.size * (100 / totalSize)\n\t\t\t}));\n\n\t\t\t// update state using Partial<State>\n\t\t\tawait this.#stateManager.batchUpdate({\n\t\t\t\tpaletteContainer: {\n\t\t\t\t\t...currentState.paletteContainer,\n\t\t\t\t\tcolumns: normalizedColumns\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.#log.debug(\n\t\t\t\t`Palette column size updated (ID: ${columnID}, New Size: ${adjustedSize}).`,\n\t\t\t\t`${caller}.updatePaletteColumnSize`\n\t\t\t);\n\t\t}, `[${caller}]: Failed to update palette column size.`);\n\t}\n\n\tasync updatePaletteItemColor(\n\t\tcolumnID: number,\n\t\tnewColor: string,\n\t\tstate: State\n\t): Promise<void> {\n\t\treturn this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\tconst currentState = this.#helpers.data.clone(state);\n\t\t\t\tconst latestPalette = currentState.paletteHistory[0];\n\n\t\t\t\tif (!latestPalette) return;\n\n\t\t\t\t// find the PaletteItem corresponding to this column\n\t\t\t\tconst updatedItems = latestPalette.items.map(item => {\n\t\t\t\t\tif (item.itemID !== columnID) return item;\n\n\t\t\t\t\tconst parsedNewColor = this.#utils.color.formatCSSAsColor(newColor);\n\t\t\t\t\tif (!parsedNewColor) throw new Error('Invalid color value');\n\n\t\t\t\t\t// ensure color is in HSL format\n\t\t\t\t\tconst hslColor =\n\t\t\t\t\t\tparsedNewColor.format === 'hsl'\n\t\t\t\t\t\t\t? parsedNewColor\n\t\t\t\t\t\t\t: this.#utils.color.convertToHSL(parsedNewColor);\n\n\t\t\t\t\t// generate all color representations (ensuring correct branded types)\n\t\t\t\t\tconst allColors: AllColors =\n\t\t\t\t\t\tthis.#utils.palette.generateAllColorValues(hslColor);\n\n\t\t\t\t\t// ensure CSS representations match expected format\n\t\t\t\t\tconst structuredCSS = {\n\t\t\t\t\t\tcmyk: this.#utils.color.formatColorAsCSS(allColors.cmyk),\n\t\t\t\t\t\thex: this.#utils.color.formatColorAsCSS(allColors.hex),\n\t\t\t\t\t\thsl: this.#utils.color.formatColorAsCSS(allColors.hsl),\n\t\t\t\t\t\thsv: this.#utils.color.formatColorAsCSS(allColors.hsv),\n\t\t\t\t\t\tlab: this.#utils.color.formatColorAsCSS(allColors.lab),\n\t\t\t\t\t\trgb: this.#utils.color.formatColorAsCSS(allColors.rgb),\n\t\t\t\t\t\txyz: this.#utils.color.formatColorAsCSS(allColors.xyz)\n\t\t\t\t\t};\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\tcolors: allColors,\n\t\t\t\t\t\tcss: structuredCSS\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\t// ensure column state is updated\n\t\t\t\tconst updatedColumns = updatedItems.map((item, index) => ({\n\t\t\t\t\tid: item.itemID,\n\t\t\t\t\tisLocked: currentState.paletteContainer.columns[index].isLocked,\n\t\t\t\t\tposition: index + 1,\n\t\t\t\t\tsize: currentState.paletteContainer.columns[index].size\n\t\t\t\t}));\n\n\t\t\t\t// update state history with type assertions\n\t\t\t\tthis.#stateManager.updatePaletteColumns(updatedColumns, true);\n\t\t\t\tthis.#stateManager.updatePaletteHistory(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...latestPalette,\n\t\t\t\t\t\t\titems: updatedItems as PaletteItem[]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...currentState.paletteHistory.slice(1)\n\t\t\t\t\t],\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t},\n\t\t\t`[${caller}]: Failed to update palette item color.`,\n\t\t\t{ context: { columnID, newColor } }\n\t\t);\n\t}\n\n\tasync #renderPaletteColumn(\n\t\tcolumn: HTMLElement,\n\t\tcolumnID: number,\n\t\tcolorValue: string\n\t): Promise<void> {\n\t\treturn this.#errors.handleAsync(\n\t\t\tasync () => {\n\t\t\t\tconst currentState = await this.#stateManager.getState();\n\t\t\t\tconst colorSpace = currentState.preferences.colorSpace;\n\n\t\t\t\tif (!this.#utils.validate.userColorInput(colorValue)) {\n\t\t\t\t\tthis.#log.warn(\n\t\t\t\t\t\t`Invalid color value: ${colorValue}. Unable to render column UI.`,\n\t\t\t\t\t\t`${caller}.#createColumnInUI`\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst validColorSpace = ['hex', 'hsl', 'rgb'].includes(colorSpace)\n\t\t\t\t\t? colorSpace\n\t\t\t\t\t: 'hex';\n\n\t\t\t\tcolumn.style.backgroundColor = colorValue;\n\n\t\t\t\t// create color display input\n\t\t\t\tconst colorDisplay = document.createElement('input');\n\t\t\t\tcolorDisplay.id = `color-display-${columnID}`;\n\t\t\t\tcolorDisplay.className = 'color-display';\n\t\t\t\tcolorDisplay.type = 'text';\n\t\t\t\tcolorDisplay.value = colorValue;\n\t\t\t\tcolorDisplay.setAttribute('data-format', validColorSpace);\n\n\t\t\t\t// create color input button\n\t\t\t\tconst colorInputBtn = document.createElement('button');\n\t\t\t\tcolorInputBtn.id = `color-input-btn-${columnID}`;\n\t\t\t\tcolorInputBtn.className = 'color-input-btn';\n\t\t\t\tcolorInputBtn.textContent = 'Change Color';\n\n\t\t\t\t// create lock button\n\t\t\t\tconst lockBtn = document.createElement('button');\n\t\t\t\tlockBtn.id = `lock-btn-${columnID}`;\n\t\t\t\tlockBtn.className = 'lock-btn';\n\t\t\t\tlockBtn.textContent = 'Lock 🔒';\n\n\t\t\t\t// create drag handle button\n\t\t\t\tconst dragHandle = document.createElement('button');\n\t\t\t\tdragHandle.id = `drag-handle-${columnID}`;\n\t\t\t\tdragHandle.className = 'drag-handle';\n\t\t\t\tdragHandle.textContent = 'Move ☰';\n\n\t\t\t\t// create resize handle\n\t\t\t\tconst resizeHandle = document.createElement('div');\n\t\t\t\tresizeHandle.id = `resize-handle-${columnID}`;\n\t\t\t\tresizeHandle.className = 'resize-handle';\n\n\t\t\t\t// create color input modal\n\t\t\t\tconst colorInputModal = document.createElement('div');\n\t\t\t\tcolorInputModal.id = `color-input-modal-${columnID}`;\n\t\t\t\tcolorInputModal.className = 'color-input-modal hidden';\n\n\t\t\t\t// create color input inside the modal\n\t\t\t\tconst colorInput = document.createElement('input');\n\t\t\t\tcolorInput.id = `color-input-${columnID}`;\n\t\t\t\tcolorInput.className = 'color-input';\n\t\t\t\tcolorInput.type = 'color';\n\t\t\t\tcolorInput.value = colorValue;\n\n\t\t\t\t// append elements to their parent\n\t\t\t\tcolorInputModal.appendChild(colorInput);\n\t\t\t\tcolumn.appendChild(colorDisplay);\n\t\t\t\tcolumn.appendChild(colorInputBtn);\n\t\t\t\tcolumn.appendChild(lockBtn);\n\t\t\t\tcolumn.appendChild(dragHandle);\n\t\t\t\tcolumn.appendChild(resizeHandle);\n\t\t\t\tcolumn.appendChild(colorInputModal);\n\t\t\t},\n\t\t\t`[${caller}]: Failed to create column UI elements.`,\n\t\t\t{ context: { columnID, colorValue } }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"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"}