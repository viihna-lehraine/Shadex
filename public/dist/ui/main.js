// File: dom/ui/main.js
import { getIDBInstance } from '../db/instance.js';
import { getUIManager } from './instance.js';
import { commonFn } from '../common/index.js';
import { constsData as consts } from '../data/consts.js';
import { defaultData as defaults } from '../data/defaults.js';
import { domData } from '../data/dom.js';
import { createLogger } from '../logger/index.js';
import { genPalette as genPaletteType } from '../palette/main/index.js';
import { helpers as paletteHelpers } from '../palette/common/index.js';
import { modeData as mode } from '../data/mode.js';
const btnDebounce = consts.debounce.btn || 300;
const defaultBrandedPalette = commonFn.transform.brandPalette(defaults.palette.unbranded.data);
const domIDs = domData.ids.static;
const domElements = domData.elements.static;
const logMode = mode.logging;
const thisModule = 'dom/ui/main.js';
const limits = paletteHelpers.limits;
const isTooDark = limits.isTooDark;
const isTooGray = limits.isTooGray;
const isTooLight = limits.isTooLight;
const core = commonFn.core;
const utils = commonFn.utils;
const logger = await createLogger();
function generateLimitedHSL(baseHue, limitDark, limitGray, limitLight) {
    let hsl;
    do {
        hsl = {
            value: {
                hue: core.brand.asRadial(baseHue),
                saturation: core.brand.asPercentile(Math.random() * 100),
                lightness: core.brand.asPercentile(Math.random() * 100)
            },
            format: 'hsl'
        };
    } while ((limitGray && isTooGray(hsl)) ||
        (limitDark && isTooDark(hsl)) ||
        (limitLight && isTooLight(hsl)));
    return hsl;
}
async function generateSelectedPalette(options) {
    const thisFunction = 'selectedPalette()';
    try {
        const { flags, swatches, type } = options;
        const args = {
            swatches,
            type,
            limitDark: flags.limitDark,
            limitGray: flags.limitGray,
            limitLight: flags.limitLight
        };
        if (!mode.quiet && logMode.debug && logMode.verbosity > 2) {
            logger.debug(`Generating palette with type #: ${type}`, `${thisModule} > ${thisFunction}`);
        }
        switch (type) {
            case 1:
                return genPaletteType.complementary(args);
            case 2:
                return genPaletteType.splitComplementary(args);
            case 3:
                return genPaletteType.analogous(args);
            case 4:
                return genPaletteType.diadic(args);
            case 5:
                return genPaletteType.triadic(args);
            case 6:
                return genPaletteType.tetradic(args);
            case 7:
                return genPaletteType.hexadic(args);
            case 8:
                return genPaletteType.monochromatic(args);
            case 9:
                return genPaletteType.random(args);
            default:
                if (logMode.error)
                    logger.error('Invalid palette type.', `${thisModule} > ${thisFunction}`);
                return Promise.resolve(defaultBrandedPalette);
        }
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating palette: ${error}`, `${thisModule} > ${thisFunction}`);
        return Promise.resolve(defaultBrandedPalette);
    }
}
const processPaletteGeneration = core.base.debounce(async () => {
    const thisFunction = 'processPaletteGeneration';
    try {
        const swatchGenNumber = domElements.selects.swatchGen;
        const paletteType = domElements.selects.paletteType;
        const limitDarkChkbx = domElements.inputs.limitDarkChkbx;
        const limitGrayChkbx = domElements.inputs.limitGrayChkbx;
        const limitLightChkbx = domElements.inputs.limitLightChkbx;
        if (swatchGenNumber === null ||
            paletteType === null ||
            limitDarkChkbx === null ||
            limitGrayChkbx === null ||
            limitLightChkbx === null) {
            if (logMode.error)
                logger.error('One or more elements are null', `${thisModule} > ${thisFunction}`);
            return;
        }
        if (!mode.quiet && logMode.info && logMode.verbosity >= 2)
            logger.info(`numBoxes: ${parseInt(swatchGenNumber.value, 10)}\npaletteType: ${parseInt(paletteType.value, 10)}`, `${thisModule} > ${thisFunction}`);
        const params = {
            swatches: parseInt(swatchGenNumber.value, 10),
            type: parseInt(paletteType.value, 10),
            limitDark: limitDarkChkbx.checked,
            limitGray: limitGrayChkbx.checked,
            limitLight: limitLightChkbx.checked
        };
        const { swatches, type, limitDark, limitGray, limitLight } = params;
        if (!type || !swatches) {
            if (logMode.error) {
                logger.error('paletteType and/or swatches are undefined', `${thisModule} > ${thisFunction}`);
            }
            return;
        }
        const options = {
            flags: {
                limitDark,
                limitGray,
                limitLight
            },
            swatches,
            type
        };
        await startPaletteGeneration(options);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Failed to handle generate button click: ${error}`, `${thisModule} > ${thisFunction}`);
    }
}, btnDebounce);
async function startPaletteGeneration(options) {
    const thisFunction = 'paletteGeneration()';
    try {
        let { swatches } = options;
        if (logMode.info && logMode.verbosity > 2)
            logger.info('Retrieving existing IDBManager instance.', `${thisModule} > ${thisFunction}`);
        const idb = await getIDBInstance();
        const palette = await generateSelectedPalette(options);
        if (palette.items.length === 0) {
            if (logMode.error)
                logger.error('Colors array is empty or invalid.', `${thisModule} > ${thisFunction}`);
            return;
        }
        if (!mode.quiet && logMode.info && logMode.verbosity > 0)
            logger.info(`Colors array generated: ${JSON.stringify(palette.items)}`, `${thisModule} > ${thisFunction}`);
        const tableId = await idb.getNextTableID();
        if (!tableId)
            throw new Error('Table ID is null or undefined.');
        const uiManager = await getUIManager();
        uiManager.addPaletteToHistory(palette);
        await startPaletteDomBoxGeneration(palette.items, swatches, tableId);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error starting palette generation: ${error}`, `${thisModule} > ${thisFunction}`);
    }
}
async function startPaletteDomBoxGeneration(items, numBoxes, tableId) {
    const thisFunction = 'paletteDomBoxGeneration()';
    try {
        const paletteContainer = document.getElementById(domIDs.divs.paletteContainer);
        const idbManager = await getIDBInstance();
        if (!paletteContainer) {
            if (logMode.error)
                logger.error('paletteContainer is undefined.', `${thisModule} > ${thisFunction}`);
            return;
        }
        paletteContainer.innerHTML = '';
        const fragment = document.createDocumentFragment();
        const uiManager = await getUIManager();
        for (let i = 0; i < Math.min(items.length, numBoxes); i++) {
            const item = items[i];
            const color = { value: item.colors.main.hsl, format: 'hsl' };
            const { colorStripe } = await uiManager.makePaletteBox(color, i + 1);
            fragment.appendChild(colorStripe);
            utils.palette.populateOutputBox(color, i + 1);
        }
        paletteContainer.appendChild(fragment);
        if (!mode.quiet && logMode.info && logMode.verbosity > 1)
            logger.info('Palette boxes generated and rendered.', `${thisModule} > ${thisFunction}`);
        await idbManager.saveData('tables', tableId, { palette: items });
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating palette box: ${error}`, `${thisModule} > ${thisFunction}`);
    }
}
export const uiFn = {
    generateLimitedHSL,
    generateSelectedPalette,
    processPaletteGeneration,
    startPaletteGeneration,
    startPaletteDomBoxGeneration
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91aS9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QjtBQVV2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsV0FBVyxJQUFJLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsSUFBSSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsT0FBTyxJQUFJLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQy9DLE1BQU0scUJBQXFCLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQzVELFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDL0IsQ0FBQztBQUNGLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBQ2xDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQzVDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7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QUFDLElBQUksQ0FDVix1Q0FBdUMsRUFDdkMsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7UUFFSCxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxpQ0FBaUMsS0FBSyxFQUFFLEVBQ3hDLEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQXlCO0lBQ3pDLGtCQUFrQjtJQUNsQix1QkFBdUI7SUFDdkIsd0JBQXdCO0lBQ3hCLHNCQUFzQjtJQUN0Qiw0QkFBNEI7Q0FDNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGRvbS91aS9tYWluLmpzXG5cbmltcG9ydCB7XG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUdlbmVyYXRpb25BcmdzLFxuXHRQYWxldHRlSXRlbSxcblx0UGFsZXR0ZU9wdGlvbnMsXG5cdFVJRm5fTWFzdGVySW50ZXJmYWNlXG59IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGdldElEQkluc3RhbmNlIH0gZnJvbSAnLi4vZGIvaW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgZ2V0VUlNYW5hZ2VyIH0gZnJvbSAnLi9pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBjb21tb25GbiB9IGZyb20gJy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb25zdHNEYXRhIGFzIGNvbnN0cyB9IGZyb20gJy4uL2RhdGEvY29uc3RzLmpzJztcbmltcG9ydCB7IGRlZmF1bHREYXRhIGFzIGRlZmF1bHRzIH0gZnJvbSAnLi4vZGF0YS9kZWZhdWx0cy5qcyc7XG5pbXBvcnQgeyBkb21EYXRhIH0gZnJvbSAnLi4vZGF0YS9kb20uanMnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyL2luZGV4LmpzJztcbmltcG9ydCB7IGdlblBhbGV0dGUgYXMgZ2VuUGFsZXR0ZVR5cGUgfSBmcm9tICcuLi9wYWxldHRlL21haW4vaW5kZXguanMnO1xuaW1wb3J0IHsgaGVscGVycyBhcyBwYWxldHRlSGVscGVycyB9IGZyb20gJy4uL3BhbGV0dGUvY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBidG5EZWJvdW5jZSA9IGNvbnN0cy5kZWJvdW5jZS5idG4gfHwgMzAwO1xuY29uc3QgZGVmYXVsdEJyYW5kZWRQYWxldHRlID0gY29tbW9uRm4udHJhbnNmb3JtLmJyYW5kUGFsZXR0ZShcblx0ZGVmYXVsdHMucGFsZXR0ZS51bmJyYW5kZWQuZGF0YVxuKTtcbmNvbnN0IGRvbUlEcyA9IGRvbURhdGEuaWRzLnN0YXRpYztcbmNvbnN0IGRvbUVsZW1lbnRzID0gZG9tRGF0YS5lbGVtZW50cy5zdGF0aWM7XG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5jb25zdCB0aGlzTW9kdWxlID0gJ2RvbS91aS9tYWluLmpzJztcblxuY29uc3QgbGltaXRzID0gcGFsZXR0ZUhlbHBlcnMubGltaXRzO1xuXG5jb25zdCBpc1Rvb0RhcmsgPSBsaW1pdHMuaXNUb29EYXJrO1xuY29uc3QgaXNUb29HcmF5ID0gbGltaXRzLmlzVG9vR3JheTtcbmNvbnN0IGlzVG9vTGlnaHQgPSBsaW1pdHMuaXNUb29MaWdodDtcblxuY29uc3QgY29yZSA9IGNvbW1vbkZuLmNvcmU7XG5jb25zdCB1dGlscyA9IGNvbW1vbkZuLnV0aWxzO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVMaW1pdGVkSFNMKFxuXHRiYXNlSHVlOiBudW1iZXIsXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuXG4pOiBIU0wge1xuXHRsZXQgaHNsOiBIU0w7XG5cblx0ZG8ge1xuXHRcdGhzbCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZS5icmFuZC5hc1JhZGlhbChiYXNlSHVlKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoTWF0aC5yYW5kb20oKSAqIDEwMCksXG5cdFx0XHRcdGxpZ2h0bmVzczogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoTWF0aC5yYW5kb20oKSAqIDEwMClcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblx0fSB3aGlsZSAoXG5cdFx0KGxpbWl0R3JheSAmJiBpc1Rvb0dyYXkoaHNsKSkgfHxcblx0XHQobGltaXREYXJrICYmIGlzVG9vRGFyayhoc2wpKSB8fFxuXHRcdChsaW1pdExpZ2h0ICYmIGlzVG9vTGlnaHQoaHNsKSlcblx0KTtcblxuXHRyZXR1cm4gaHNsO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVNlbGVjdGVkUGFsZXR0ZShcblx0b3B0aW9uczogUGFsZXR0ZU9wdGlvbnNcbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnc2VsZWN0ZWRQYWxldHRlKCknO1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgeyBmbGFncywgc3dhdGNoZXMsIHR5cGUgfSA9IG9wdGlvbnM7XG5cblx0XHRjb25zdCBhcmdzOiBQYWxldHRlR2VuZXJhdGlvbkFyZ3MgPSB7XG5cdFx0XHRzd2F0Y2hlcyxcblx0XHRcdHR5cGUsXG5cdFx0XHRsaW1pdERhcms6IGZsYWdzLmxpbWl0RGFyayxcblx0XHRcdGxpbWl0R3JheTogZmxhZ3MubGltaXRHcmF5LFxuXHRcdFx0bGltaXRMaWdodDogZmxhZ3MubGltaXRMaWdodFxuXHRcdH07XG5cblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS5kZWJ1ZyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDIpIHtcblx0XHRcdGxvZ2dlci5kZWJ1Zyhcblx0XHRcdFx0YEdlbmVyYXRpbmcgcGFsZXR0ZSB3aXRoIHR5cGUgIzogJHt0eXBlfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0cmV0dXJuIGdlblBhbGV0dGVUeXBlLmNvbXBsZW1lbnRhcnkoYXJncyk7XG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlVHlwZS5zcGxpdENvbXBsZW1lbnRhcnkoYXJncyk7XG5cdFx0XHRjYXNlIDM6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlVHlwZS5hbmFsb2dvdXMoYXJncyk7XG5cdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlVHlwZS5kaWFkaWMoYXJncyk7XG5cdFx0XHRjYXNlIDU6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlVHlwZS50cmlhZGljKGFyZ3MpO1xuXHRcdFx0Y2FzZSA2OlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZVR5cGUudGV0cmFkaWMoYXJncyk7XG5cdFx0XHRjYXNlIDc6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlVHlwZS5oZXhhZGljKGFyZ3MpO1xuXHRcdFx0Y2FzZSA4OlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZVR5cGUubW9ub2Nocm9tYXRpYyhhcmdzKTtcblx0XHRcdGNhc2UgOTpcblx0XHRcdFx0cmV0dXJuIGdlblBhbGV0dGVUeXBlLnJhbmRvbShhcmdzKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdCdJbnZhbGlkIHBhbGV0dGUgdHlwZS4nLFxuXHRcdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlZmF1bHRCcmFuZGVkUGFsZXR0ZSk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgRXJyb3IgZ2VuZXJhdGluZyBwYWxldHRlOiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVmYXVsdEJyYW5kZWRQYWxldHRlKTtcblx0fVxufVxuXG5jb25zdCBwcm9jZXNzUGFsZXR0ZUdlbmVyYXRpb24gPSBjb3JlLmJhc2UuZGVib3VuY2UoYXN5bmMgKCkgPT4ge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAncHJvY2Vzc1BhbGV0dGVHZW5lcmF0aW9uJztcblxuXHR0cnkge1xuXHRcdGNvbnN0IHN3YXRjaEdlbk51bWJlciA9IGRvbUVsZW1lbnRzLnNlbGVjdHMuc3dhdGNoR2VuO1xuXHRcdGNvbnN0IHBhbGV0dGVUeXBlID0gZG9tRWxlbWVudHMuc2VsZWN0cy5wYWxldHRlVHlwZTtcblx0XHRjb25zdCBsaW1pdERhcmtDaGtieCA9IGRvbUVsZW1lbnRzLmlucHV0cy5saW1pdERhcmtDaGtieDtcblx0XHRjb25zdCBsaW1pdEdyYXlDaGtieCA9IGRvbUVsZW1lbnRzLmlucHV0cy5saW1pdEdyYXlDaGtieDtcblx0XHRjb25zdCBsaW1pdExpZ2h0Q2hrYnggPSBkb21FbGVtZW50cy5pbnB1dHMubGltaXRMaWdodENoa2J4O1xuXG5cdFx0aWYgKFxuXHRcdFx0c3dhdGNoR2VuTnVtYmVyID09PSBudWxsIHx8XG5cdFx0XHRwYWxldHRlVHlwZSA9PT0gbnVsbCB8fFxuXHRcdFx0bGltaXREYXJrQ2hrYnggPT09IG51bGwgfHxcblx0XHRcdGxpbWl0R3JheUNoa2J4ID09PSBudWxsIHx8XG5cdFx0XHRsaW1pdExpZ2h0Q2hrYnggPT09IG51bGxcblx0XHQpIHtcblx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0J09uZSBvciBtb3JlIGVsZW1lbnRzIGFyZSBudWxsJyxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghbW9kZS5xdWlldCAmJiBsb2dNb2RlLmluZm8gJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gMilcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRgbnVtQm94ZXM6ICR7cGFyc2VJbnQoc3dhdGNoR2VuTnVtYmVyLnZhbHVlLCAxMCl9XFxucGFsZXR0ZVR5cGU6ICR7cGFyc2VJbnQocGFsZXR0ZVR5cGUudmFsdWUsIDEwKX1gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHRzd2F0Y2hlczogcGFyc2VJbnQoc3dhdGNoR2VuTnVtYmVyLnZhbHVlLCAxMCksXG5cdFx0XHR0eXBlOiBwYXJzZUludChwYWxldHRlVHlwZS52YWx1ZSwgMTApLFxuXHRcdFx0bGltaXREYXJrOiBsaW1pdERhcmtDaGtieC5jaGVja2VkLFxuXHRcdFx0bGltaXRHcmF5OiBsaW1pdEdyYXlDaGtieC5jaGVja2VkLFxuXHRcdFx0bGltaXRMaWdodDogbGltaXRMaWdodENoa2J4LmNoZWNrZWRcblx0XHR9O1xuXG5cdFx0Y29uc3QgeyBzd2F0Y2hlcywgdHlwZSwgbGltaXREYXJrLCBsaW1pdEdyYXksIGxpbWl0TGlnaHQgfSA9IHBhcmFtcztcblxuXHRcdGlmICghdHlwZSB8fCAhc3dhdGNoZXMpIHtcblx0XHRcdGlmIChsb2dNb2RlLmVycm9yKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHQncGFsZXR0ZVR5cGUgYW5kL29yIHN3YXRjaGVzIGFyZSB1bmRlZmluZWQnLFxuXHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3B0aW9uczogUGFsZXR0ZU9wdGlvbnMgPSB7XG5cdFx0XHRmbGFnczoge1xuXHRcdFx0XHRsaW1pdERhcmssXG5cdFx0XHRcdGxpbWl0R3JheSxcblx0XHRcdFx0bGltaXRMaWdodFxuXHRcdFx0fSxcblx0XHRcdHN3YXRjaGVzLFxuXHRcdFx0dHlwZVxuXHRcdH07XG5cblx0XHRhd2FpdCBzdGFydFBhbGV0dGVHZW5lcmF0aW9uKG9wdGlvbnMpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGhhbmRsZSBnZW5lcmF0ZSBidXR0b24gY2xpY2s6ICR7ZXJyb3J9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXHR9XG59LCBidG5EZWJvdW5jZSk7XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0UGFsZXR0ZUdlbmVyYXRpb24ob3B0aW9uczogUGFsZXR0ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ3BhbGV0dGVHZW5lcmF0aW9uKCknO1xuXG5cdHRyeSB7XG5cdFx0bGV0IHsgc3dhdGNoZXMgfSA9IG9wdGlvbnM7XG5cblx0XHRpZiAobG9nTW9kZS5pbmZvICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMilcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHQnUmV0cmlldmluZyBleGlzdGluZyBJREJNYW5hZ2VyIGluc3RhbmNlLicsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdGNvbnN0IGlkYiA9IGF3YWl0IGdldElEQkluc3RhbmNlKCk7XG5cblx0XHRjb25zdCBwYWxldHRlID0gYXdhaXQgZ2VuZXJhdGVTZWxlY3RlZFBhbGV0dGUob3B0aW9ucyk7XG5cblx0XHRpZiAocGFsZXR0ZS5pdGVtcy5sZW5ndGggPT09IDApIHtcblx0XHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0J0NvbG9ycyBhcnJheSBpcyBlbXB0eSBvciBpbnZhbGlkLicsXG5cdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHRcdCk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS5pbmZvICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMClcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRgQ29sb3JzIGFycmF5IGdlbmVyYXRlZDogJHtKU09OLnN0cmluZ2lmeShwYWxldHRlLml0ZW1zKX1gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cblx0XHRjb25zdCB0YWJsZUlkID0gYXdhaXQgaWRiLmdldE5leHRUYWJsZUlEKCk7XG5cblx0XHRpZiAoIXRhYmxlSWQpIHRocm93IG5ldyBFcnJvcignVGFibGUgSUQgaXMgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0XHRjb25zdCB1aU1hbmFnZXIgPSBhd2FpdCBnZXRVSU1hbmFnZXIoKTtcblxuXHRcdHVpTWFuYWdlci5hZGRQYWxldHRlVG9IaXN0b3J5KHBhbGV0dGUpO1xuXG5cdFx0YXdhaXQgc3RhcnRQYWxldHRlRG9tQm94R2VuZXJhdGlvbihwYWxldHRlLml0ZW1zLCBzd2F0Y2hlcywgdGFibGVJZCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBFcnJvciBzdGFydGluZyBwYWxldHRlIGdlbmVyYXRpb246ICR7ZXJyb3J9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0UGFsZXR0ZURvbUJveEdlbmVyYXRpb24oXG5cdGl0ZW1zOiBQYWxldHRlSXRlbVtdLFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHR0YWJsZUlkOiBzdHJpbmdcbik6IFByb21pc2U8dm9pZD4ge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAncGFsZXR0ZURvbUJveEdlbmVyYXRpb24oKSc7XG5cblx0dHJ5IHtcblx0XHRjb25zdCBwYWxldHRlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0XHRkb21JRHMuZGl2cy5wYWxldHRlQ29udGFpbmVyXG5cdFx0KTtcblx0XHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgZ2V0SURCSW5zdGFuY2UoKTtcblxuXHRcdGlmICghcGFsZXR0ZUNvbnRhaW5lcikge1xuXHRcdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHQncGFsZXR0ZUNvbnRhaW5lciBpcyB1bmRlZmluZWQuJyxcblx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHBhbGV0dGVDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cblx0XHRjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRjb25zdCB1aU1hbmFnZXIgPSBhd2FpdCBnZXRVSU1hbmFnZXIoKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4oaXRlbXMubGVuZ3RoLCBudW1Cb3hlcyk7IGkrKykge1xuXHRcdFx0Y29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuXHRcdFx0Y29uc3QgY29sb3I6IEhTTCA9IHsgdmFsdWU6IGl0ZW0uY29sb3JzLm1haW4uaHNsLCBmb3JtYXQ6ICdoc2wnIH07XG5cdFx0XHRjb25zdCB7IGNvbG9yU3RyaXBlIH0gPSBhd2FpdCB1aU1hbmFnZXIubWFrZVBhbGV0dGVCb3goXG5cdFx0XHRcdGNvbG9yLFxuXHRcdFx0XHRpICsgMVxuXHRcdFx0KTtcblxuXHRcdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29sb3JTdHJpcGUpO1xuXG5cdFx0XHR1dGlscy5wYWxldHRlLnBvcHVsYXRlT3V0cHV0Qm94KGNvbG9yLCBpICsgMSk7XG5cdFx0fVxuXG5cdFx0cGFsZXR0ZUNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS5pbmZvICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMSlcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHQnUGFsZXR0ZSBib3hlcyBnZW5lcmF0ZWQgYW5kIHJlbmRlcmVkLicsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdGF3YWl0IGlkYk1hbmFnZXIuc2F2ZURhdGEoJ3RhYmxlcycsIHRhYmxlSWQsIHsgcGFsZXR0ZTogaXRlbXMgfSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBFcnJvciBnZW5lcmF0aW5nIHBhbGV0dGUgYm94OiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgdWlGbjogVUlGbl9NYXN0ZXJJbnRlcmZhY2UgPSB7XG5cdGdlbmVyYXRlTGltaXRlZEhTTCxcblx0Z2VuZXJhdGVTZWxlY3RlZFBhbGV0dGUsXG5cdHByb2Nlc3NQYWxldHRlR2VuZXJhdGlvbixcblx0c3RhcnRQYWxldHRlR2VuZXJhdGlvbixcblx0c3RhcnRQYWxldHRlRG9tQm94R2VuZXJhdGlvblxufTtcbiJdfQ==