// File: dom/events/palette.js
import { domData } from '../data/dom.js';
import { createLogger } from '../logger/index.js';
import { modeData as mode } from '../data/mode.js';
const domIDs = domData.ids;
const logMode = mode.logging;
const thisModule = 'ui/base.js';
const logger = await createLogger();
function enforceSwatchRules(minimumSwatches, maximumSwatches) {
    const thisFunction = 'enforceSwatchRules()';
    const paletteDropdown = document.getElementById(domIDs.paletteNumberOptions);
    if (!paletteDropdown) {
        if (logMode.error) {
            logger.error('paletteDropdown not found', `${thisModule} > ${thisFunction}`);
        }
        if (mode.stackTrace && logMode.verbosity > 3) {
            console.trace('enforceMinimumSwatches stack trace');
        }
        return;
    }
    const currentValue = parseInt(paletteDropdown.value, 10);
    let newValue = currentValue;
    // ensue the value is within the allowed range
    if (currentValue < minimumSwatches) {
        newValue = minimumSwatches;
    }
    else if (maximumSwatches !== undefined &&
        currentValue > maximumSwatches) {
        newValue = maximumSwatches;
    }
    if (newValue !== currentValue) {
        // update value in the dropdown menu
        paletteDropdown.value = newValue.toString();
        // trigger a change event to notify the application
        const event = new Event('change', { bubbles: true });
        try {
            paletteDropdown.dispatchEvent(event);
        }
        catch (error) {
            if (logMode.error) {
                logger.error(`Failed to dispatch change event to palette-number-options dropdown menu: ${error}`, `${thisModule} > ${thisFunction}`);
            }
            throw new Error(`Failed to dispatch change event: ${error}`);
        }
    }
}
export const base = {
    enforceSwatchRules
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91aS9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUc5QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzdCLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQztBQUVoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLFNBQVMsa0JBQWtCLENBQzFCLGVBQXVCLEVBQ3ZCLGVBQXdCO0lBRXhCLE1BQU0sWUFBWSxHQUFHLHNCQUFzQixDQUFDO0lBQzVDLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQzlDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDTixDQUFDO0lBRXZCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN0QixJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQixNQUFNLENBQUMsS0FBSyxDQUNYLDJCQUEyQixFQUMzQixHQUFHLFVBQVUsTUFBTSxZQUFZLEVBQUUsQ0FDakMsQ0FBQztRQUNILENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM5QyxPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFekQsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDO0lBRTVCLDhDQUE4QztJQUM5QyxJQUFJLFlBQVksR0FBRyxlQUFlLEVBQUUsQ0FBQztRQUNwQyxRQUFRLEdBQUcsZUFBZSxDQUFDO0lBQzVCLENBQUM7U0FBTSxJQUNOLGVBQWUsS0FBSyxTQUFTO1FBQzdCLFlBQVksR0FBRyxlQUFlLEVBQzdCLENBQUM7UUFDRixRQUFRLEdBQUcsZUFBZSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLFFBQVEsS0FBSyxZQUFZLEVBQUUsQ0FBQztRQUMvQixvQ0FBb0M7UUFDcEMsZUFBZSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFNUMsbURBQW1EO1FBQ25ELE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQztZQUNKLGVBQWUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ25CLE1BQU0sQ0FBQyxLQUFLLENBQ1gsNEVBQTRFLEtBQUssRUFBRSxFQUNuRixHQUFHLFVBQVUsTUFBTSxZQUFZLEVBQUUsQ0FDakMsQ0FBQztZQUNILENBQUM7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUM7SUFDRixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBdUI7SUFDdkMsa0JBQWtCO0NBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBkb20vZXZlbnRzL3BhbGV0dGUuanNcblxuaW1wb3J0IHsgVUlGbl9CYXNlSW50ZXJmYWNlIH0gZnJvbSAnLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgZG9tRGF0YSB9IGZyb20gJy4uL2RhdGEvZG9tLmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBtb2RlRGF0YSBhcyBtb2RlIH0gZnJvbSAnLi4vZGF0YS9tb2RlLmpzJztcblxuY29uc3QgZG9tSURzID0gZG9tRGF0YS5pZHM7XG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuY29uc3QgdGhpc01vZHVsZSA9ICd1aS9iYXNlLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmZ1bmN0aW9uIGVuZm9yY2VTd2F0Y2hSdWxlcyhcblx0bWluaW11bVN3YXRjaGVzOiBudW1iZXIsXG5cdG1heGltdW1Td2F0Y2hlcz86IG51bWJlclxuKTogdm9pZCB7XG5cdGNvbnN0IHRoaXNGdW5jdGlvbiA9ICdlbmZvcmNlU3dhdGNoUnVsZXMoKSc7XG5cdGNvbnN0IHBhbGV0dGVEcm9wZG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuXHRcdGRvbUlEcy5wYWxldHRlTnVtYmVyT3B0aW9uc1xuXHQpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuXG5cdGlmICghcGFsZXR0ZURyb3Bkb3duKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J3BhbGV0dGVEcm9wZG93biBub3QgZm91bmQnLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGlmIChtb2RlLnN0YWNrVHJhY2UgJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAzKSB7XG5cdFx0XHRjb25zb2xlLnRyYWNlKCdlbmZvcmNlTWluaW11bVN3YXRjaGVzIHN0YWNrIHRyYWNlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgY3VycmVudFZhbHVlID0gcGFyc2VJbnQocGFsZXR0ZURyb3Bkb3duLnZhbHVlLCAxMCk7XG5cblx0bGV0IG5ld1ZhbHVlID0gY3VycmVudFZhbHVlO1xuXG5cdC8vIGVuc3VlIHRoZSB2YWx1ZSBpcyB3aXRoaW4gdGhlIGFsbG93ZWQgcmFuZ2Vcblx0aWYgKGN1cnJlbnRWYWx1ZSA8IG1pbmltdW1Td2F0Y2hlcykge1xuXHRcdG5ld1ZhbHVlID0gbWluaW11bVN3YXRjaGVzO1xuXHR9IGVsc2UgaWYgKFxuXHRcdG1heGltdW1Td2F0Y2hlcyAhPT0gdW5kZWZpbmVkICYmXG5cdFx0Y3VycmVudFZhbHVlID4gbWF4aW11bVN3YXRjaGVzXG5cdCkge1xuXHRcdG5ld1ZhbHVlID0gbWF4aW11bVN3YXRjaGVzO1xuXHR9XG5cblx0aWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcblx0XHQvLyB1cGRhdGUgdmFsdWUgaW4gdGhlIGRyb3Bkb3duIG1lbnVcblx0XHRwYWxldHRlRHJvcGRvd24udmFsdWUgPSBuZXdWYWx1ZS50b1N0cmluZygpO1xuXG5cdFx0Ly8gdHJpZ2dlciBhIGNoYW5nZSBldmVudCB0byBub3RpZnkgdGhlIGFwcGxpY2F0aW9uXG5cdFx0Y29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ2NoYW5nZScsIHsgYnViYmxlczogdHJ1ZSB9KTtcblx0XHR0cnkge1xuXHRcdFx0cGFsZXR0ZURyb3Bkb3duLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRpZiAobG9nTW9kZS5lcnJvcikge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0YEZhaWxlZCB0byBkaXNwYXRjaCBjaGFuZ2UgZXZlbnQgdG8gcGFsZXR0ZS1udW1iZXItb3B0aW9ucyBkcm9wZG93biBtZW51OiAke2Vycm9yfWAsXG5cdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBkaXNwYXRjaCBjaGFuZ2UgZXZlbnQ6ICR7ZXJyb3J9YCk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBiYXNlOiBVSUZuX0Jhc2VJbnRlcmZhY2UgPSB7XG5cdGVuZm9yY2VTd2F0Y2hSdWxlc1xufTtcbiJdfQ==