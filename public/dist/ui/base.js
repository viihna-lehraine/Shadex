// File: dom/events/palette.js
import { domData } from '../data/dom.js';
import { createLogger } from '../logger/index.js';
import { modeData as mode } from '../data/mode.js';
const domIDs = domData.ids;
const logMode = mode.logging;
const thisModule = 'ui/base.js';
const logger = await createLogger();
function enforceSwatchRules(minimumSwatches, maximumSwatches) {
    const thisFunction = 'enforceSwatchRules()';
    const swatchNumberSelector = document.getElementById(domIDs.static.selects.swatchGen);
    if (!swatchNumberSelector) {
        if (logMode.error) {
            logger.error('paletteDropdown not found', `${thisModule} > ${thisFunction}`);
        }
        if (mode.stackTrace && logMode.verbosity > 3) {
            console.trace('enforceMinimumSwatches stack trace');
        }
        return;
    }
    const currentValue = parseInt(swatchNumberSelector.value, 10);
    let newValue = currentValue;
    // ensue the value is within the allowed range
    if (currentValue < minimumSwatches) {
        newValue = minimumSwatches;
    }
    else if (maximumSwatches !== undefined &&
        currentValue > maximumSwatches) {
        newValue = maximumSwatches;
    }
    if (newValue !== currentValue) {
        // update value in the dropdown menu
        swatchNumberSelector.value = newValue.toString();
        // trigger a change event to notify the application
        const event = new Event('change', { bubbles: true });
        try {
            swatchNumberSelector.dispatchEvent(event);
        }
        catch (error) {
            if (logMode.error) {
                logger.error(`Failed to dispatch change event to palette-number-options dropdown menu: ${error}`, `${thisModule} > ${thisFunction}`);
            }
            throw new Error(`Failed to dispatch change event: ${error}`);
        }
    }
}
export const base = {
    enforceSwatchRules
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91aS9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUc5QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzdCLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQztBQUVoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLFNBQVMsa0JBQWtCLENBQzFCLGVBQXVCLEVBQ3ZCLGVBQXdCO0lBRXhCLE1BQU0sWUFBWSxHQUFHLHNCQUFzQixDQUFDO0lBQzVDLE1BQU0sb0JBQW9CLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FDbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUNWLENBQUM7SUFFdkIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDM0IsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbkIsTUFBTSxDQUFDLEtBQUssQ0FDWCwyQkFBMkIsRUFDM0IsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7UUFDSCxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDOUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFFRCxPQUFPO0lBQ1IsQ0FBQztJQUVELE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFOUQsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDO0lBRTVCLDhDQUE4QztJQUM5QyxJQUFJLFlBQVksR0FBRyxlQUFlLEVBQUUsQ0FBQztRQUNwQyxRQUFRLEdBQUcsZUFBZSxDQUFDO0lBQzVCLENBQUM7U0FBTSxJQUNOLGVBQWUsS0FBSyxTQUFTO1FBQzdCLFlBQVksR0FBRyxlQUFlLEVBQzdCLENBQUM7UUFDRixRQUFRLEdBQUcsZUFBZSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLFFBQVEsS0FBSyxZQUFZLEVBQUUsQ0FBQztRQUMvQixvQ0FBb0M7UUFDcEMsb0JBQW9CLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVqRCxtREFBbUQ7UUFDbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDO1lBQ0osb0JBQW9CLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNuQixNQUFNLENBQUMsS0FBSyxDQUNYLDRFQUE0RSxLQUFLLEVBQUUsRUFDbkYsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7WUFDSCxDQUFDO1lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM5RCxDQUFDO0lBQ0YsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQXVCO0lBQ3ZDLGtCQUFrQjtDQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogZG9tL2V2ZW50cy9wYWxldHRlLmpzXG5cbmltcG9ydCB7IFVJRm5fQmFzZUludGVyZmFjZSB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGRvbURhdGEgfSBmcm9tICcuLi9kYXRhL2RvbS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGRvbUlEcyA9IGRvbURhdGEuaWRzO1xuY29uc3QgbG9nTW9kZSA9IG1vZGUubG9nZ2luZztcbmNvbnN0IHRoaXNNb2R1bGUgPSAndWkvYmFzZS5qcyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5mdW5jdGlvbiBlbmZvcmNlU3dhdGNoUnVsZXMoXG5cdG1pbmltdW1Td2F0Y2hlczogbnVtYmVyLFxuXHRtYXhpbXVtU3dhdGNoZXM/OiBudW1iZXJcbik6IHZvaWQge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAnZW5mb3JjZVN3YXRjaFJ1bGVzKCknO1xuXHRjb25zdCBzd2F0Y2hOdW1iZXJTZWxlY3RvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuXHRcdGRvbUlEcy5zdGF0aWMuc2VsZWN0cy5zd2F0Y2hHZW5cblx0KSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcblxuXHRpZiAoIXN3YXRjaE51bWJlclNlbGVjdG9yKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0J3BhbGV0dGVEcm9wZG93biBub3QgZm91bmQnLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc0Z1bmN0aW9ufWBcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGlmIChtb2RlLnN0YWNrVHJhY2UgJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAzKSB7XG5cdFx0XHRjb25zb2xlLnRyYWNlKCdlbmZvcmNlTWluaW11bVN3YXRjaGVzIHN0YWNrIHRyYWNlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgY3VycmVudFZhbHVlID0gcGFyc2VJbnQoc3dhdGNoTnVtYmVyU2VsZWN0b3IudmFsdWUsIDEwKTtcblxuXHRsZXQgbmV3VmFsdWUgPSBjdXJyZW50VmFsdWU7XG5cblx0Ly8gZW5zdWUgdGhlIHZhbHVlIGlzIHdpdGhpbiB0aGUgYWxsb3dlZCByYW5nZVxuXHRpZiAoY3VycmVudFZhbHVlIDwgbWluaW11bVN3YXRjaGVzKSB7XG5cdFx0bmV3VmFsdWUgPSBtaW5pbXVtU3dhdGNoZXM7XG5cdH0gZWxzZSBpZiAoXG5cdFx0bWF4aW11bVN3YXRjaGVzICE9PSB1bmRlZmluZWQgJiZcblx0XHRjdXJyZW50VmFsdWUgPiBtYXhpbXVtU3dhdGNoZXNcblx0KSB7XG5cdFx0bmV3VmFsdWUgPSBtYXhpbXVtU3dhdGNoZXM7XG5cdH1cblxuXHRpZiAobmV3VmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuXHRcdC8vIHVwZGF0ZSB2YWx1ZSBpbiB0aGUgZHJvcGRvd24gbWVudVxuXHRcdHN3YXRjaE51bWJlclNlbGVjdG9yLnZhbHVlID0gbmV3VmFsdWUudG9TdHJpbmcoKTtcblxuXHRcdC8vIHRyaWdnZXIgYSBjaGFuZ2UgZXZlbnQgdG8gbm90aWZ5IHRoZSBhcHBsaWNhdGlvblxuXHRcdGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSk7XG5cdFx0dHJ5IHtcblx0XHRcdHN3YXRjaE51bWJlclNlbGVjdG9yLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRpZiAobG9nTW9kZS5lcnJvcikge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0YEZhaWxlZCB0byBkaXNwYXRjaCBjaGFuZ2UgZXZlbnQgdG8gcGFsZXR0ZS1udW1iZXItb3B0aW9ucyBkcm9wZG93biBtZW51OiAke2Vycm9yfWAsXG5cdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBkaXNwYXRjaCBjaGFuZ2UgZXZlbnQ6ICR7ZXJyb3J9YCk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBiYXNlOiBVSUZuX0Jhc2VJbnRlcmZhY2UgPSB7XG5cdGVuZm9yY2VTd2F0Y2hSdWxlc1xufTtcbiJdfQ==