{"version":3,"file":"PaletteManager.js","sources":["../../../../src/palette/PaletteManager.ts"],"sourcesContent":["// File: palette/PaletteManager.js\n\nimport { StateManager } from '../state/StateManager.js';\nimport {\n\tColor,\n\tCommonFunctionsInterface,\n\tGenerateHuesFnGroup,\n\tGeneratePaletteFn,\n\tGeneratePaletteFnGroup,\n\tHSL,\n\tPaletteItem,\n\tPaletteManagerClassInterface,\n\tServicesInterface,\n\tUtilitiesInterface\n} from '../types/index.js';\nimport { data } from '../data/index.js';\n\nconst ids = data.dom.ids;\n\nexport class PaletteManager implements PaletteManagerClassInterface {\n\tprivate generateHues: GenerateHuesFnGroup;\n\tprivate generatePaletteFns: GeneratePaletteFnGroup;\n\tprivate generatePalette: GeneratePaletteFn;\n\n\tprivate common: CommonFunctionsInterface;\n\tprivate log: ServicesInterface['log'];\n\n\tprivate utils: UtilitiesInterface;\n\n\tconstructor(\n\t\tprivate stateManager: StateManager,\n\t\tcommon: CommonFunctionsInterface,\n\t\tgenerateHues: GenerateHuesFnGroup,\n\t\tgeneratePaletteFns: GeneratePaletteFnGroup,\n\t\tgeneratePalette: GeneratePaletteFn\n\t) {\n\t\tconsole.log(`[PaletteManager.constructor] Entering constructor...`);\n\t\tconsole.log(\n\t\t\t'[PaletteManager.constructor] Argument 1 - stateManager',\n\t\t\tstateManager\n\t\t);\n\t\tconsole.log(\n\t\t\t`[PaletteManager.constructor] Argument 2 - Common Fn Group`,\n\t\t\tcommon\n\t\t);\n\t\tconsole.log(\n\t\t\t`[PaletteManager.constructor] Argument 3 - Generate Hues Fn Group`,\n\t\t\tgenerateHues\n\t\t);\n\t\tconsole.log(\n\t\t\t`[PaletteManager.constructor] Argument 4 - Generate Palette Fn Group`,\n\t\t\tgeneratePaletteFns\n\t\t);\n\t\tconsole.log(\n\t\t\t`[PaletteManager.constructor] Argument 5 - Generate Palette Fn`,\n\t\t\tgeneratePalette\n\t\t);\n\n\t\tthis.log = common.services.log;\n\t\tthis.generateHues = generateHues;\n\t\tthis.generatePaletteFns = generatePaletteFns;\n\t\tthis.generatePalette = generatePalette;\n\t\tthis.common = common;\n\t\tthis.utils = common.utils;\n\n\t\tthis.log(\n\t\t\t'debug',\n\t\t\t'Completing initialization',\n\t\t\t'PaletteManager.constructor()',\n\t\t\t2\n\t\t);\n\t}\n\n\tpublic handleColumnResize(columnID: number, newSize: number): void {\n\t\tconst currentState = this.stateManager.getState();\n\t\tconst columns = currentState.paletteContainer.columns;\n\n\t\t// find colunmn\n\t\tconst columnIndex = columns.findIndex(col => col.id === columnID);\n\t\tif (columnIndex === -1) {\n\t\t\tthis.log(\n\t\t\t\t'warn',\n\t\t\t\t`Column with ID ${columnID} not found.`,\n\t\t\t\t'PaletteManager.handleColumnResize()'\n\t\t\t);\n\t\t}\n\n\t\t// ensure new size is within limits\n\t\tconst minSize = data.config.ui.minColumnSize;\n\t\tconst maxSize = data.config.ui.maxColumnSize;\n\t\tconst adjustedSize = Math.max(minSize, Math.min(newSize, maxSize));\n\n\t\t// distribute size difference\n\t\tconst sizeDiff = adjustedSize - columns[columnIndex].size;\n\t\tcolumns[columnIndex].size = adjustedSize;\n\n\t\tconst unlockedColumns = columns.filter(\n\t\t\t(__, i) => i !== columnIndex && !columns[i].isLocked\n\t\t);\n\t\tconst disributeAmount = sizeDiff / unlockedColumns.length;\n\n\t\tunlockedColumns.forEach(col => (col.size -= disributeAmount));\n\n\t\t// ensure total width is 100%\n\t\tconst totalSize = columns.reduce((sum, col) => sum + col.size, 0);\n\t\tconst correctionFactor = 100 / totalSize;\n\t\tcolumns.forEach(col => (col.size *= correctionFactor));\n\n\t\t// update state\n\t\tthis.stateManager.updatePaletteColumns(columns, true, 2);\n\t}\n\n\tpublic handleColumnLock(columnID: number): void {\n\t\tconst currentState = this.stateManager.getState();\n\t\tconst columns = currentState.paletteContainer.columns;\n\n\t\t// find column by ID\n\t\tconst columnIndex = columns.findIndex(col => col.id === columnID);\n\n\t\tif (columnIndex === -1) {\n\t\t\tthis.log(\n\t\t\t\t'warn',\n\t\t\t\t`Column with ID ${columnID} not found.`,\n\t\t\t\t'PaletteManager.handleColumnLock()'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// toggle lock state\n\t\tcolumns[columnIndex].isLocked = !columns[columnIndex].isLocked;\n\n\t\tthis.stateManager.updatePaletteColumns(columns, true, 2);\n\t}\n\n\tpublic renderNewPalette(): void {\n\t\tconst paletteContainer = this.utils.core.getElement<HTMLDivElement>(\n\t\t\tids.divs.paletteContainer\n\t\t);\n\n\t\tif (!paletteContainer) {\n\t\t\tthis.log(\n\t\t\t\t'error',\n\t\t\t\t`Palette container not found`,\n\t\t\t\t'PaletteManager.renderNewPalette()',\n\t\t\t\t1\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// Step 1: Retrieve palette generation options from the UI\n\t\tconst options = this.utils.palette.getPaletteOptionsFromUI();\n\n\t\tthis.log(\n\t\t\t'debug',\n\t\t\t`Palette options: ${JSON.stringify(options)}`,\n\t\t\t'PaletteManager.renderNewPalette()',\n\t\t\t2\n\t\t);\n\n\t\t// Step 2: Store the old palette in history\n\t\tconst oldPalette = this.stateManager.getState().paletteHistory.at(-1);\n\t\tif (oldPalette) this.stateManager.addPaletteToHistory(oldPalette);\n\n\t\t// Step 3: Clear the existing palette\n\t\tpaletteContainer.innerHTML = '';\n\n\t\t// Step 4: Generate a new palette\n\t\tconst newPalette = this.generatePalette(\n\t\t\toptions,\n\t\t\tthis.common,\n\t\t\tthis.generateHues,\n\t\t\tthis.generatePaletteFns\n\t\t);\n\n\t\t// Step 5: Create and append palette columns\n\t\tconst columnWidth = 100 / newPalette.items.length;\n\t\tconst validColorSpace = ['hex', 'hsl', 'rgb'].includes(\n\t\t\tthis.stateManager.getState().preferences.colorSpace\n\t\t)\n\t\t\t? this.stateManager.getState().preferences.colorSpace\n\t\t\t: 'hex';\n\n\t\tconst columns = newPalette.items.map((item, index) => {\n\t\t\tconst columnID = index + 1;\n\t\t\tconst colorValue =\n\t\t\t\titem.css[validColorSpace as keyof PaletteItem['css']] ||\n\t\t\t\titem.css.hex;\n\n\t\t\tconst column = document.createElement('div');\n\t\t\tcolumn.id = `palette-column-${columnID}`;\n\t\t\tcolumn.className = 'palette-column';\n\t\t\tcolumn.setAttribute('draggable', 'true');\n\t\t\tcolumn.style.backgroundColor = colorValue;\n\n\t\t\t// add UI elements inside the column\n\t\t\tthis.createPaletteColumnUI(column, columnID, colorValue);\n\n\t\t\treturn {\n\t\t\t\tcolumn,\n\t\t\t\tstate: {\n\t\t\t\t\tid: columnID,\n\t\t\t\t\tisLocked: false,\n\t\t\t\t\tposition: columnID,\n\t\t\t\t\tsize: columnWidth\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\t// Append new columns to the palette container\n\t\tcolumns.forEach(({ column }) => paletteContainer.appendChild(column));\n\n\t\t// Update state with new columns\n\t\tthis.stateManager.updatePaletteColumns(\n\t\t\tcolumns.map(col => col.state),\n\t\t\ttrue,\n\t\t\t3\n\t\t);\n\t}\n\n\tpublic renderPaletteColor(\n\t\tcolor: HSL,\n\t\tcolorBox: HTMLDivElement,\n\t\tcolorBoxNumber: number\n\t): void {\n\t\ttry {\n\t\t\tconst formatColorString = this.utils.color.convertColorToCSS(color);\n\t\t\tcolorBox.style.backgroundColor = formatColorString;\n\n\t\t\tconst clonedColor: Color = this.utils.typeGuards.isColor(color)\n\t\t\t\t? this.utils.core.clone(color)\n\t\t\t\t: this.utils.color.convertColorStringToColor(color);\n\n\t\t\tif (!this.utils.validate.colorValue(clonedColor)) {\n\t\t\t\tthis.log(\n\t\t\t\t\t'error',\n\t\t\t\t\t'Invalid color values.',\n\t\t\t\t\t'PaletteRenderer.renderPaletteColor()'\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst colorTextOutputBox = document.getElementById(\n\t\t\t\t`color-text-output-box-${colorBoxNumber}`\n\t\t\t) as HTMLInputElement | null;\n\n\t\t\tif (!colorTextOutputBox) return;\n\n\t\t\tconst stringifiedColor =\n\t\t\t\tthis.utils.color.convertColorToCSS(clonedColor);\n\n\t\t\tthis.log(\n\t\t\t\t'debug',\n\t\t\t\t`Updating DOM color: ${stringifiedColor}`,\n\t\t\t\t'PaletteRenderer.renderPaletteColor()',\n\t\t\t\t2\n\t\t\t);\n\n\t\t\tcolorTextOutputBox.value = stringifiedColor;\n\t\t\tcolorTextOutputBox.setAttribute('data-format', color.format);\n\t\t} catch (error) {\n\t\t\tthis.log(\n\t\t\t\t'error',\n\t\t\t\t`Failed to update color: ${error}`,\n\t\t\t\t'PaletteRenderer.renderPaletteColor()'\n\t\t\t);\n\t\t}\n\t}\n\tprivate createPaletteColumnUI(\n\t\tcolumn: HTMLElement,\n\t\tcolumnID: number,\n\t\tcolorValue: string\n\t): void {\n\t\t// create color display input\n\t\tconst colorDisplay = document.createElement('input');\n\t\tcolorDisplay.id = `color-display-${columnID}`;\n\t\tcolorDisplay.className = 'color-display';\n\t\tcolorDisplay.type = 'text';\n\t\tcolorDisplay.value = colorValue;\n\n\t\t// create color input button\n\t\tconst colorInputBtn = document.createElement('button');\n\t\tcolorInputBtn.id = `color-input-btn-${columnID}`;\n\t\tcolorInputBtn.className = 'color-input-btn';\n\t\tcolorInputBtn.textContent = 'Change Color';\n\n\t\t// create lock button\n\t\tconst lockBtn = document.createElement('button');\n\t\tlockBtn.id = `lock-btn-${columnID}`;\n\t\tlockBtn.className = 'lock-btn';\n\t\tlockBtn.textContent = 'Lock ðŸ”’';\n\n\t\t// create drag handle button\n\t\tconst dragHandle = document.createElement('button');\n\t\tdragHandle.id = `drag-handle-${columnID}`;\n\t\tdragHandle.className = 'drag-handle';\n\t\tdragHandle.textContent = 'Move â˜°';\n\n\t\t// create resize handle\n\t\tconst resizeHandle = document.createElement('div');\n\t\tresizeHandle.id = `resize-handle-${columnID}`;\n\t\tresizeHandle.className = 'resize-handle';\n\n\t\t// create color input modal\n\t\tconst colorInputModal = document.createElement('div');\n\t\tcolorInputModal.id = `color-input-modal-${columnID}`;\n\t\tcolorInputModal.className = 'color-input-modal hidden';\n\n\t\t// create color input inside the modal\n\t\tconst colorInput = document.createElement('input');\n\t\tcolorInput.id = `color-input-${columnID}`;\n\t\tcolorInput.className = 'color-input';\n\t\tcolorInput.type = 'color';\n\t\tcolorInput.value = colorValue;\n\n\t\t// append elements to their parent\n\t\tcolorInputModal.appendChild(colorInput);\n\t\tcolumn.appendChild(colorDisplay);\n\t\tcolumn.appendChild(colorInputBtn);\n\t\tcolumn.appendChild(lockBtn);\n\t\tcolumn.appendChild(dragHandle);\n\t\tcolumn.appendChild(resizeHandle);\n\t\tcolumn.appendChild(colorInputModal);\n\t}\n\n\tpublic swapColumns(draggedID: number, targetID: number): void {\n\t\tconst currentState = this.stateManager.getState();\n\t\tconst columns = [...currentState.paletteContainer.columns];\n\n\t\tconst draggedIndex = columns.findIndex(col => col.id === draggedID);\n\t\tconst targetIndex = columns.findIndex(col => col.id === targetID);\n\n\t\tif (draggedIndex === -1 || targetIndex === -1) {\n\t\t\tthis.log(\n\t\t\t\t'warn',\n\t\t\t\t`Failed to swap: Column ID ${draggedID} or ${targetID} not found.`,\n\t\t\t\t'PaletteManager.swapColumns()'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// swap positions in the array\n\t\t[columns[draggedIndex].position, columns[targetIndex].position] = [\n\t\t\tcolumns[targetIndex].position,\n\t\t\tcolumns[draggedIndex].position\n\t\t];\n\n\t\t// sort the array based on the new positions\n\t\tcolumns.sort((a, b) => a.position - b.position);\n\n\t\t// update state with new column order\n\t\tthis.stateManager.updatePaletteColumns(columns, true, 3);\n\n\t\tthis.log(\n\t\t\t'debug',\n\t\t\t`Swapped columns ${draggedID} and ${targetID}. New order: ${columns.map(col => col.id).join(', ')}`,\n\t\t\t'PaletteManager.swapColumns()'\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"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"}