// File: palette/main/types/complementary.js
import { IDBManager } from '../../../app/db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const core = commonFn.core;
const utils = commonFn.utils;
export async function complementary(args) {
    // ensure at least 2 color swatches
    if (args.swatches !== 2)
        paletteHelpers.enforce.swatchRules(2);
    const swatches = 2;
    const baseColor = utils.random.hsl();
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const complementaryColor = {
        value: {
            hue: core.brand.asRadial(complementaryHue),
            saturation: baseColor.value.saturation,
            lightness: baseColor.value.lightness
        },
        format: 'hsl'
    };
    const basePaletteItem = await paletteSuperUtils.create.paletteItem(baseColor);
    const complementaryPaletteItem = await paletteSuperUtils.create.paletteItem(complementaryColor);
    const idbManager = await IDBManager.getInstance();
    const paletteID = (await idbManager.getCurrentPaletteID()) + 1;
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const paletteArgs = {
        type: 'complementary',
        items: [basePaletteItem, complementaryPaletteItem],
        paletteID,
        swatches,
        limitDark: args.limitDark,
        limitGray: args.limitGray,
        limitLight: args.limitLight
    };
    const complementaryPalette = await idbManager.savePaletteToDB(paletteArgs);
    if (!complementaryPalette) {
        throw new Error('Complementary palette is null or undefined.');
    }
    return complementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFRNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQ04sT0FBTyxJQUFJLGNBQWMsRUFDekIsVUFBVSxJQUFJLGlCQUFpQixFQUMvQixNQUFNLHVCQUF1QixDQUFDO0FBRS9CLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDM0IsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUU3QixNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDbEMsSUFBMkI7SUFFM0IsbUNBQW1DO0lBQ25DLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDO1FBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0QsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBRW5CLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzRCxNQUFNLGtCQUFrQixHQUFRO1FBQy9CLEtBQUssRUFBRTtZQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztZQUMxQyxVQUFVLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQ3RDLFNBQVMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVM7U0FDcEM7UUFDRCxNQUFNLEVBQUUsS0FBSztLQUNiLENBQUM7SUFDRixNQUFNLGVBQWUsR0FDcEIsTUFBTSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXZELE1BQU0sd0JBQXdCLEdBQzdCLE1BQU0saUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRWhFLE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBTSxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUvRCxJQUFJLENBQUMsU0FBUztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztJQUUzRSxNQUFNLFdBQVcsR0FBZ0I7UUFDaEMsSUFBSSxFQUFFLGVBQWU7UUFDckIsS0FBSyxFQUFFLENBQUMsZUFBZSxFQUFFLHdCQUF3QixDQUFDO1FBQ2xELFNBQVM7UUFDVCxRQUFRO1FBQ1IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1FBQ3pCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztRQUN6QixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7S0FDM0IsQ0FBQztJQUVGLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxVQUFVLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRTNFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsT0FBTyxvQkFBb0IsQ0FBQztBQUM3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogcGFsZXR0ZS9tYWluL3R5cGVzL2NvbXBsZW1lbnRhcnkuanNcblxuaW1wb3J0IHtcblx0SFNMLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlQXJncyxcblx0UGFsZXR0ZUdlbmVyYXRpb25BcmdzXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9hcHAvZGIvSURCTWFuYWdlci5qcyc7XG5pbXBvcnQgeyBjb21tb25GbiB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQge1xuXHRoZWxwZXJzIGFzIHBhbGV0dGVIZWxwZXJzLFxuXHRzdXBlclV0aWxzIGFzIHBhbGV0dGVTdXBlclV0aWxzXG59IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IGNvcmUgPSBjb21tb25Gbi5jb3JlO1xuY29uc3QgdXRpbHMgPSBjb21tb25Gbi51dGlscztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXBsZW1lbnRhcnkoXG5cdGFyZ3M6IFBhbGV0dGVHZW5lcmF0aW9uQXJnc1xuKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdC8vIGVuc3VyZSBhdCBsZWFzdCAyIGNvbG9yIHN3YXRjaGVzXG5cdGlmIChhcmdzLnN3YXRjaGVzICE9PSAyKSBwYWxldHRlSGVscGVycy5lbmZvcmNlLnN3YXRjaFJ1bGVzKDIpO1xuXG5cdGNvbnN0IHN3YXRjaGVzID0gMjtcblxuXHRjb25zdCBiYXNlQ29sb3IgPSB1dGlscy5yYW5kb20uaHNsKCk7XG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlIdWUgPSAoYmFzZUNvbG9yLnZhbHVlLmh1ZSArIDE4MCkgJSAzNjA7XG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlDb2xvcjogSFNMID0ge1xuXHRcdHZhbHVlOiB7XG5cdFx0XHRodWU6IGNvcmUuYnJhbmQuYXNSYWRpYWwoY29tcGxlbWVudGFyeUh1ZSksXG5cdFx0XHRzYXR1cmF0aW9uOiBiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbixcblx0XHRcdGxpZ2h0bmVzczogYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzc1xuXHRcdH0sXG5cdFx0Zm9ybWF0OiAnaHNsJ1xuXHR9O1xuXHRjb25zdCBiYXNlUGFsZXR0ZUl0ZW0gPVxuXHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IpO1xuXG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlQYWxldHRlSXRlbSA9XG5cdFx0YXdhaXQgcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlLnBhbGV0dGVJdGVtKGNvbXBsZW1lbnRhcnlDb2xvcik7XG5cblx0Y29uc3QgaWRiTWFuYWdlciA9IGF3YWl0IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0Y29uc3QgcGFsZXR0ZUlEID0gKGF3YWl0IGlkYk1hbmFnZXIuZ2V0Q3VycmVudFBhbGV0dGVJRCgpKSArIDE7XG5cblx0aWYgKCFwYWxldHRlSUQpIHRocm93IG5ldyBFcnJvcignUGFsZXR0ZSBJRCBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0Y29uc3QgcGFsZXR0ZUFyZ3M6IFBhbGV0dGVBcmdzID0ge1xuXHRcdHR5cGU6ICdjb21wbGVtZW50YXJ5Jyxcblx0XHRpdGVtczogW2Jhc2VQYWxldHRlSXRlbSwgY29tcGxlbWVudGFyeVBhbGV0dGVJdGVtXSxcblx0XHRwYWxldHRlSUQsXG5cdFx0c3dhdGNoZXMsXG5cdFx0bGltaXREYXJrOiBhcmdzLmxpbWl0RGFyayxcblx0XHRsaW1pdEdyYXk6IGFyZ3MubGltaXRHcmF5LFxuXHRcdGxpbWl0TGlnaHQ6IGFyZ3MubGltaXRMaWdodFxuXHR9O1xuXG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlQYWxldHRlID0gYXdhaXQgaWRiTWFuYWdlci5zYXZlUGFsZXR0ZVRvREIocGFsZXR0ZUFyZ3MpO1xuXG5cdGlmICghY29tcGxlbWVudGFyeVBhbGV0dGUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvbXBsZW1lbnRhcnkgcGFsZXR0ZSBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0fVxuXG5cdHJldHVybiBjb21wbGVtZW50YXJ5UGFsZXR0ZTtcbn1cbiJdfQ==