// File: src/palette/main/types/complementary.js
import { IDBManager } from '../../../db/index.js';
import { common } from '../../../common/index.js';
import { paletteSuperUtils } from '../../common/index.js';
import { ui } from '../../../ui/index.js';
const brand = common.core.brand;
const create = paletteSuperUtils.create;
export async function complementary(args) {
    // ensure at least 2 color swatches
    if (args.swatches !== 2)
        ui.enforceSwatchRules(2);
    const swatches = 2;
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const complementaryColor = {
        value: {
            hue: brand.asRadial(complementaryHue),
            saturation: baseColor.value.saturation,
            lightness: baseColor.value.lightness,
            alpha: brand.asAlphaRange(args.enableAlpha ? Math.random() : 1)
        },
        format: 'hsl'
    };
    const basePaletteItem = await create.paletteItem(baseColor, args.enableAlpha);
    const complementaryPaletteItem = await create.paletteItem(complementaryColor, args.enableAlpha);
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const complementaryPalette = await idbManager.savePaletteToDB('complementary', [basePaletteItem, complementaryPaletteItem], paletteID, swatches, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!complementaryPalette) {
        throw new Error('Complementary palette is null or undefined.');
    }
    return complementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7QUFHaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFMUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDaEMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBRXhDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUFDLElBQW9CO0lBQ3ZELG1DQUFtQztJQUNuQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQztRQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFFbkIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RSxNQUFNLGdCQUFnQixHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQzNELE1BQU0sa0JBQWtCLEdBQVE7UUFDL0IsS0FBSyxFQUFFO1lBQ04sR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7WUFDckMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVTtZQUN0QyxTQUFTLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTO1lBQ3BDLEtBQUssRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9EO1FBQ0QsTUFBTSxFQUFFLEtBQUs7S0FDYixDQUFDO0lBQ0YsTUFBTSxlQUFlLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUMvQyxTQUFTLEVBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FDaEIsQ0FBQztJQUVGLE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUN4RCxrQkFBa0IsRUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FDaEIsQ0FBQztJQUVGLE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEQsSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFFM0UsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLFVBQVUsQ0FBQyxlQUFlLENBQzVELGVBQWUsRUFDZixDQUFDLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxFQUMzQyxTQUFTLEVBQ1QsUUFBUSxFQUNSLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQUM7SUFFRixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE9BQU8sb0JBQW9CLENBQUM7QUFDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS5qc1xuXG5pbXBvcnQgeyBHZW5QYWxldHRlQXJncywgSFNMLCBQYWxldHRlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2RiL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbW1vbiB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyB1aSB9IGZyb20gJy4uLy4uLy4uL3VpL2luZGV4LmpzJztcblxuY29uc3QgYnJhbmQgPSBjb21tb24uY29yZS5icmFuZDtcbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXBsZW1lbnRhcnkoYXJnczogR2VuUGFsZXR0ZUFyZ3MpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Ly8gZW5zdXJlIGF0IGxlYXN0IDIgY29sb3Igc3dhdGNoZXNcblx0aWYgKGFyZ3Muc3dhdGNoZXMgIT09IDIpIHVpLmVuZm9yY2VTd2F0Y2hSdWxlcygyKTtcblxuXHRjb25zdCBzd2F0Y2hlcyA9IDI7XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihhcmdzLmN1c3RvbUNvbG9yLCBhcmdzLmVuYWJsZUFscGhhKTtcblx0Y29uc3QgY29tcGxlbWVudGFyeUh1ZSA9IChiYXNlQ29sb3IudmFsdWUuaHVlICsgMTgwKSAlIDM2MDtcblx0Y29uc3QgY29tcGxlbWVudGFyeUNvbG9yOiBIU0wgPSB7XG5cdFx0dmFsdWU6IHtcblx0XHRcdGh1ZTogYnJhbmQuYXNSYWRpYWwoY29tcGxlbWVudGFyeUh1ZSksXG5cdFx0XHRzYXR1cmF0aW9uOiBiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbixcblx0XHRcdGxpZ2h0bmVzczogYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyxcblx0XHRcdGFscGhhOiBicmFuZC5hc0FscGhhUmFuZ2UoYXJncy5lbmFibGVBbHBoYSA/IE1hdGgucmFuZG9tKCkgOiAxKVxuXHRcdH0sXG5cdFx0Zm9ybWF0OiAnaHNsJ1xuXHR9O1xuXHRjb25zdCBiYXNlUGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0YmFzZUNvbG9yLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGFcblx0KTtcblxuXHRjb25zdCBjb21wbGVtZW50YXJ5UGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0Y29tcGxlbWVudGFyeUNvbG9yLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGFcblx0KTtcblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRjb25zdCBwYWxldHRlSUQgPSBhd2FpdCBpZGJNYW5hZ2VyLmdldE5leHRQYWxldHRlSUQoKTtcblxuXHRpZiAoIXBhbGV0dGVJRCkgdGhyb3cgbmV3IEVycm9yKCdQYWxldHRlIElEIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHRjb25zdCBjb21wbGVtZW50YXJ5UGFsZXR0ZSA9IGF3YWl0IGlkYk1hbmFnZXIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCdjb21wbGVtZW50YXJ5Jyxcblx0XHRbYmFzZVBhbGV0dGVJdGVtLCBjb21wbGVtZW50YXJ5UGFsZXR0ZUl0ZW1dLFxuXHRcdHBhbGV0dGVJRCxcblx0XHRzd2F0Y2hlcyxcblx0XHRhcmdzLmVuYWJsZUFscGhhLFxuXHRcdGFyZ3MubGltaXREYXJrLFxuXHRcdGFyZ3MubGltaXRHcmF5LFxuXHRcdGFyZ3MubGltaXRMaWdodFxuXHQpO1xuXG5cdGlmICghY29tcGxlbWVudGFyeVBhbGV0dGUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvbXBsZW1lbnRhcnkgcGFsZXR0ZSBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0fVxuXG5cdHJldHVybiBjb21wbGVtZW50YXJ5UGFsZXR0ZTtcbn1cbiJdfQ==