// File: palette/main/types/complementary.js
import { IDBManager } from '../../../db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { superUtils as paletteSuperUtils } from '../../common/index.js';
import { uiFn } from '../../../ui/index.js';
const brand = commonFn.core.brand;
const create = paletteSuperUtils.create;
export async function complementary(args) {
    // ensure at least 2 color swatches
    if (args.swatches !== 2)
        uiFn.enforceSwatchRules(2);
    const swatches = 2;
    const baseColor = create.baseColor(args.customColor);
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const complementaryColor = {
        value: {
            hue: brand.asRadial(complementaryHue),
            saturation: baseColor.value.saturation,
            lightness: baseColor.value.lightness
        },
        format: 'hsl'
    };
    const basePaletteItem = await create.paletteItem(baseColor);
    const complementaryPaletteItem = await create.paletteItem(complementaryColor);
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const complementaryPalette = await idbManager.savePaletteToDB('complementary', [basePaletteItem, complementaryPaletteItem], paletteID, swatches, args.limitDark, args.limitGray, args.limitLight);
    if (!complementaryPalette) {
        throw new Error('Complementary palette is null or undefined.');
    }
    return complementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFHNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxJQUFJLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTVDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ2xDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUV4QyxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDbEMsSUFBMkI7SUFFM0IsbUNBQW1DO0lBQ25DLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDO1FBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBELE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQztJQUVuQixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyRCxNQUFNLGdCQUFnQixHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQzNELE1BQU0sa0JBQWtCLEdBQVE7UUFDL0IsS0FBSyxFQUFFO1lBQ04sR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7WUFDckMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVTtZQUN0QyxTQUFTLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTO1NBQ3BDO1FBQ0QsTUFBTSxFQUFFLEtBQUs7S0FDYixDQUFDO0lBQ0YsTUFBTSxlQUFlLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTVELE1BQU0sd0JBQXdCLEdBQzdCLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEQsSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFFM0UsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLFVBQVUsQ0FBQyxlQUFlLENBQzVELGVBQWUsRUFDZixDQUFDLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxFQUMzQyxTQUFTLEVBQ1QsUUFBUSxFQUNSLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQUM7SUFFRixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE9BQU8sb0JBQW9CLENBQUM7QUFDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHBhbGV0dGUvbWFpbi90eXBlcy9jb21wbGVtZW50YXJ5LmpzXG5cbmltcG9ydCB7IEhTTCwgUGFsZXR0ZSwgUGFsZXR0ZUdlbmVyYXRpb25BcmdzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2RiL0lEQk1hbmFnZXIuanMnO1xuaW1wb3J0IHsgY29tbW9uRm4gfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgc3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyB1aUZuIH0gZnJvbSAnLi4vLi4vLi4vdWkvaW5kZXguanMnO1xuXG5jb25zdCBicmFuZCA9IGNvbW1vbkZuLmNvcmUuYnJhbmQ7XG5jb25zdCBjcmVhdGUgPSBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGU7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wbGVtZW50YXJ5KFxuXHRhcmdzOiBQYWxldHRlR2VuZXJhdGlvbkFyZ3Ncbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgYXQgbGVhc3QgMiBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyAhPT0gMikgdWlGbi5lbmZvcmNlU3dhdGNoUnVsZXMoMik7XG5cblx0Y29uc3Qgc3dhdGNoZXMgPSAyO1xuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoYXJncy5jdXN0b21Db2xvcik7XG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlIdWUgPSAoYmFzZUNvbG9yLnZhbHVlLmh1ZSArIDE4MCkgJSAzNjA7XG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlDb2xvcjogSFNMID0ge1xuXHRcdHZhbHVlOiB7XG5cdFx0XHRodWU6IGJyYW5kLmFzUmFkaWFsKGNvbXBsZW1lbnRhcnlIdWUpLFxuXHRcdFx0c2F0dXJhdGlvbjogYmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24sXG5cdFx0XHRsaWdodG5lc3M6IGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3Ncblx0XHR9LFxuXHRcdGZvcm1hdDogJ2hzbCdcblx0fTtcblx0Y29uc3QgYmFzZVBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvcik7XG5cblx0Y29uc3QgY29tcGxlbWVudGFyeVBhbGV0dGVJdGVtID1cblx0XHRhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oY29tcGxlbWVudGFyeUNvbG9yKTtcblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRjb25zdCBwYWxldHRlSUQgPSBhd2FpdCBpZGJNYW5hZ2VyLmdldE5leHRQYWxldHRlSUQoKTtcblxuXHRpZiAoIXBhbGV0dGVJRCkgdGhyb3cgbmV3IEVycm9yKCdQYWxldHRlIElEIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHRjb25zdCBjb21wbGVtZW50YXJ5UGFsZXR0ZSA9IGF3YWl0IGlkYk1hbmFnZXIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCdjb21wbGVtZW50YXJ5Jyxcblx0XHRbYmFzZVBhbGV0dGVJdGVtLCBjb21wbGVtZW50YXJ5UGFsZXR0ZUl0ZW1dLFxuXHRcdHBhbGV0dGVJRCxcblx0XHRzd2F0Y2hlcyxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIWNvbXBsZW1lbnRhcnlQYWxldHRlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDb21wbGVtZW50YXJ5IHBhbGV0dGUgaXMgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cdH1cblxuXHRyZXR1cm4gY29tcGxlbWVudGFyeVBhbGV0dGU7XG59XG4iXX0=