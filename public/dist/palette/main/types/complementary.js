// File: palette/main/types/complementary.js
import { IDBManager } from '../../../db/index.js';
import { commonFn } from '../../../common/index.js';
import { superUtils as paletteSuperUtils } from '../../common/index.js';
import { uiFn } from '../../../ui/index.js';
const brand = commonFn.core.brand;
const create = paletteSuperUtils.create;
export async function complementary(args) {
    // ensure at least 2 color swatches
    if (args.swatches !== 2)
        uiFn.enforceSwatchRules(2);
    const swatches = 2;
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const complementaryColor = {
        value: {
            hue: brand.asRadial(complementaryHue),
            saturation: baseColor.value.saturation,
            lightness: baseColor.value.lightness,
            alpha: brand.asAlphaRange(args.enableAlpha ? Math.random() : 1)
        },
        format: 'hsl'
    };
    const basePaletteItem = await create.paletteItem(baseColor, args.enableAlpha);
    const complementaryPaletteItem = await create.paletteItem(complementaryColor, args.enableAlpha);
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const complementaryPalette = await idbManager.savePaletteToDB('complementary', [basePaletteItem, complementaryPaletteItem], paletteID, swatches, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!complementaryPalette) {
        throw new Error('Complementary palette is null or undefined.');
    }
    return complementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFHNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxJQUFJLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTVDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ2xDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUV4QyxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxJQUFvQjtJQUN2RCxtQ0FBbUM7SUFDbkMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUM7UUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBRW5CLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkUsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzRCxNQUFNLGtCQUFrQixHQUFRO1FBQy9CLEtBQUssRUFBRTtZQUNOLEdBQUcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO1lBQ3JDLFVBQVUsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDdEMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUztZQUNwQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvRDtRQUNELE1BQU0sRUFBRSxLQUFLO0tBQ2IsQ0FBQztJQUNGLE1BQU0sZUFBZSxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FDL0MsU0FBUyxFQUNULElBQUksQ0FBQyxXQUFXLENBQ2hCLENBQUM7SUFFRixNQUFNLHdCQUF3QixHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FDeEQsa0JBQWtCLEVBQ2xCLElBQUksQ0FBQyxXQUFXLENBQ2hCLENBQUM7SUFFRixNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXRELElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxVQUFVLENBQUMsZUFBZSxDQUM1RCxlQUFlLEVBQ2YsQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLENBQUMsRUFDM0MsU0FBUyxFQUNULFFBQVEsRUFDUixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FDZixDQUFDO0lBRUYsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxPQUFPLG9CQUFvQixDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBwYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS5qc1xuXG5pbXBvcnQgeyBHZW5QYWxldHRlQXJncywgSFNMLCBQYWxldHRlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2RiL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbW1vbkZuIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IHN1cGVyVXRpbHMgYXMgcGFsZXR0ZVN1cGVyVXRpbHMgfSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgdWlGbiB9IGZyb20gJy4uLy4uLy4uL3VpL2luZGV4LmpzJztcblxuY29uc3QgYnJhbmQgPSBjb21tb25Gbi5jb3JlLmJyYW5kO1xuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcGxlbWVudGFyeShhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgYXQgbGVhc3QgMiBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyAhPT0gMikgdWlGbi5lbmZvcmNlU3dhdGNoUnVsZXMoMik7XG5cblx0Y29uc3Qgc3dhdGNoZXMgPSAyO1xuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoYXJncy5jdXN0b21Db2xvciwgYXJncy5lbmFibGVBbHBoYSk7XG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlIdWUgPSAoYmFzZUNvbG9yLnZhbHVlLmh1ZSArIDE4MCkgJSAzNjA7XG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlDb2xvcjogSFNMID0ge1xuXHRcdHZhbHVlOiB7XG5cdFx0XHRodWU6IGJyYW5kLmFzUmFkaWFsKGNvbXBsZW1lbnRhcnlIdWUpLFxuXHRcdFx0c2F0dXJhdGlvbjogYmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24sXG5cdFx0XHRsaWdodG5lc3M6IGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MsXG5cdFx0XHRhbHBoYTogYnJhbmQuYXNBbHBoYVJhbmdlKGFyZ3MuZW5hYmxlQWxwaGEgPyBNYXRoLnJhbmRvbSgpIDogMSlcblx0XHR9LFxuXHRcdGZvcm1hdDogJ2hzbCdcblx0fTtcblx0Y29uc3QgYmFzZVBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKFxuXHRcdGJhc2VDb2xvcixcblx0XHRhcmdzLmVuYWJsZUFscGhhXG5cdCk7XG5cblx0Y29uc3QgY29tcGxlbWVudGFyeVBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKFxuXHRcdGNvbXBsZW1lbnRhcnlDb2xvcixcblx0XHRhcmdzLmVuYWJsZUFscGhhXG5cdCk7XG5cblx0Y29uc3QgaWRiTWFuYWdlciA9IGF3YWl0IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0Y29uc3QgcGFsZXR0ZUlEID0gYXdhaXQgaWRiTWFuYWdlci5nZXROZXh0UGFsZXR0ZUlEKCk7XG5cblx0aWYgKCFwYWxldHRlSUQpIHRocm93IG5ldyBFcnJvcignUGFsZXR0ZSBJRCBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0Y29uc3QgY29tcGxlbWVudGFyeVBhbGV0dGUgPSBhd2FpdCBpZGJNYW5hZ2VyLnNhdmVQYWxldHRlVG9EQihcblx0XHQnY29tcGxlbWVudGFyeScsXG5cdFx0W2Jhc2VQYWxldHRlSXRlbSwgY29tcGxlbWVudGFyeVBhbGV0dGVJdGVtXSxcblx0XHRwYWxldHRlSUQsXG5cdFx0c3dhdGNoZXMsXG5cdFx0YXJncy5lbmFibGVBbHBoYSxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIWNvbXBsZW1lbnRhcnlQYWxldHRlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDb21wbGVtZW50YXJ5IHBhbGV0dGUgaXMgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cdH1cblxuXHRyZXR1cm4gY29tcGxlbWVudGFyeVBhbGV0dGU7XG59XG4iXX0=