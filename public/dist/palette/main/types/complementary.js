// File: palette/main/types/complementary.js
import { IDBManager } from '../../../db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const core = commonFn.core;
const utils = commonFn.utils;
export async function complementary(args) {
    // ensure at least 2 color swatches
    if (args.swatches !== 2)
        paletteHelpers.enforce.swatchRules(2);
    const swatches = 2;
    const baseColor = utils.random.hsl();
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const complementaryColor = {
        value: {
            hue: core.brand.asRadial(complementaryHue),
            saturation: baseColor.value.saturation,
            lightness: baseColor.value.lightness
        },
        format: 'hsl'
    };
    const basePaletteItem = await paletteSuperUtils.create.paletteItem(baseColor);
    const complementaryPaletteItem = await paletteSuperUtils.create.paletteItem(complementaryColor);
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const complementaryPalette = await idbManager.savePaletteToDB('complementary', [basePaletteItem, complementaryPaletteItem], paletteID, swatches, args.limitDark, args.limitGray, args.limitLight);
    if (!complementaryPalette) {
        throw new Error('Complementary palette is null or undefined.');
    }
    return complementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFHNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQ04sT0FBTyxJQUFJLGNBQWMsRUFDekIsVUFBVSxJQUFJLGlCQUFpQixFQUMvQixNQUFNLHVCQUF1QixDQUFDO0FBRS9CLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDM0IsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUU3QixNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDbEMsSUFBMkI7SUFFM0IsbUNBQW1DO0lBQ25DLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDO1FBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0QsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBRW5CLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzRCxNQUFNLGtCQUFrQixHQUFRO1FBQy9CLEtBQUssRUFBRTtZQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztZQUMxQyxVQUFVLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQ3RDLFNBQVMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVM7U0FDcEM7UUFDRCxNQUFNLEVBQUUsS0FBSztLQUNiLENBQUM7SUFDRixNQUFNLGVBQWUsR0FDcEIsTUFBTSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXZELE1BQU0sd0JBQXdCLEdBQzdCLE1BQU0saUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRWhFLE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEQsSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFFM0UsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLFVBQVUsQ0FBQyxlQUFlLENBQzVELGVBQWUsRUFDZixDQUFDLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxFQUMzQyxTQUFTLEVBQ1QsUUFBUSxFQUNSLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQUM7SUFFRixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE9BQU8sb0JBQW9CLENBQUM7QUFDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHBhbGV0dGUvbWFpbi90eXBlcy9jb21wbGVtZW50YXJ5LmpzXG5cbmltcG9ydCB7IEhTTCwgUGFsZXR0ZSwgUGFsZXR0ZUdlbmVyYXRpb25BcmdzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2RiL0lEQk1hbmFnZXIuanMnO1xuaW1wb3J0IHsgY29tbW9uRm4gfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHtcblx0aGVscGVycyBhcyBwYWxldHRlSGVscGVycyxcblx0c3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlsc1xufSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuXG5jb25zdCBjb3JlID0gY29tbW9uRm4uY29yZTtcbmNvbnN0IHV0aWxzID0gY29tbW9uRm4udXRpbHM7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wbGVtZW50YXJ5KFxuXHRhcmdzOiBQYWxldHRlR2VuZXJhdGlvbkFyZ3Ncbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgYXQgbGVhc3QgMiBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyAhPT0gMikgcGFsZXR0ZUhlbHBlcnMuZW5mb3JjZS5zd2F0Y2hSdWxlcygyKTtcblxuXHRjb25zdCBzd2F0Y2hlcyA9IDI7XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gdXRpbHMucmFuZG9tLmhzbCgpO1xuXHRjb25zdCBjb21wbGVtZW50YXJ5SHVlID0gKGJhc2VDb2xvci52YWx1ZS5odWUgKyAxODApICUgMzYwO1xuXHRjb25zdCBjb21wbGVtZW50YXJ5Q29sb3I6IEhTTCA9IHtcblx0XHR2YWx1ZToge1xuXHRcdFx0aHVlOiBjb3JlLmJyYW5kLmFzUmFkaWFsKGNvbXBsZW1lbnRhcnlIdWUpLFxuXHRcdFx0c2F0dXJhdGlvbjogYmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24sXG5cdFx0XHRsaWdodG5lc3M6IGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3Ncblx0XHR9LFxuXHRcdGZvcm1hdDogJ2hzbCdcblx0fTtcblx0Y29uc3QgYmFzZVBhbGV0dGVJdGVtID1cblx0XHRhd2FpdCBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGUucGFsZXR0ZUl0ZW0oYmFzZUNvbG9yKTtcblxuXHRjb25zdCBjb21wbGVtZW50YXJ5UGFsZXR0ZUl0ZW0gPVxuXHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShjb21wbGVtZW50YXJ5Q29sb3IpO1xuXG5cdGNvbnN0IGlkYk1hbmFnZXIgPSBhd2FpdCBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdGNvbnN0IHBhbGV0dGVJRCA9IGF3YWl0IGlkYk1hbmFnZXIuZ2V0TmV4dFBhbGV0dGVJRCgpO1xuXG5cdGlmICghcGFsZXR0ZUlEKSB0aHJvdyBuZXcgRXJyb3IoJ1BhbGV0dGUgSUQgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlQYWxldHRlID0gYXdhaXQgaWRiTWFuYWdlci5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J2NvbXBsZW1lbnRhcnknLFxuXHRcdFtiYXNlUGFsZXR0ZUl0ZW0sIGNvbXBsZW1lbnRhcnlQYWxldHRlSXRlbV0sXG5cdFx0cGFsZXR0ZUlELFxuXHRcdHN3YXRjaGVzLFxuXHRcdGFyZ3MubGltaXREYXJrLFxuXHRcdGFyZ3MubGltaXRHcmF5LFxuXHRcdGFyZ3MubGltaXRMaWdodFxuXHQpO1xuXG5cdGlmICghY29tcGxlbWVudGFyeVBhbGV0dGUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvbXBsZW1lbnRhcnkgcGFsZXR0ZSBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0fVxuXG5cdHJldHVybiBjb21wbGVtZW50YXJ5UGFsZXR0ZTtcbn1cbiJdfQ==