// File: src/palette/main/types/hexadic.js
import { IDBManager } from '../../../db/index.js';
import { core } from '../../../common/index.js';
import { consts } from '../../../common/data/base.js';
import { paletteSuperUtils } from '../../common/index.js';
import { ui } from '../../../ui/index.js';
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
const paletteRanges = consts.paletteRanges;
export async function hexadic(args) {
    // ensure exactly 6 color swatches
    if (args.swatches !== 6)
        ui.enforceSwatchRules(6, 6);
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const hues = genHues.hexadic(baseColor);
    const paletteItems = [];
    for (const hue of hues) {
        const saturationShift = Math.random() * paletteRanges.hexad.satShift -
            paletteRanges.hexad.satShift / 2;
        const lightnessShift = Math.random() * paletteRanges.hexad.lightShift -
            paletteRanges.hexad.lightShift / 2;
        const newColor = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.saturation + saturationShift))),
                lightness: core.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.lightness + lightnessShift))),
                alpha: args.enableAlpha
                    ? core.brand.asAlphaRange(Math.random())
                    : core.brand.asAlphaRange(1)
            },
            format: 'hsl'
        };
        const paletteItem = await create.paletteItem(newColor, args.enableAlpha);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const hexadicPalette = await idbManager.savePaletteToDB('hexadic', paletteItems, paletteID, args.swatches, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!hexadicPalette) {
        throw new Error('Hexadic palette is either null or undefined.');
    }
    else {
        return hexadicPalette;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4YWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvaGV4YWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFRMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDMUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUUzQyxNQUFNLENBQUMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxJQUFvQjtJQUNqRCxrQ0FBa0M7SUFDbEMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUM7UUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXJELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkUsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV4QyxNQUFNLFlBQVksR0FBa0IsRUFBRSxDQUFDO0lBQ3ZDLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDeEIsTUFBTSxlQUFlLEdBQ3BCLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVE7WUFDNUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sY0FBYyxHQUNuQixJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQzlDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLFFBQVEsR0FBUTtZQUNyQixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztnQkFDN0IsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNsQyxJQUFJLENBQUMsR0FBRyxDQUNQLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQzVDLENBQ0QsQ0FDRDtnQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQ2pDLElBQUksQ0FBQyxHQUFHLENBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxDQUN2RCxDQUNEO2dCQUNELEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVztvQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztvQkFDeEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUM3QjtZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FDM0MsUUFBUSxFQUNSLElBQUksQ0FBQyxXQUFXLENBQ2hCLENBQUM7UUFFRixZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXRELElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sY0FBYyxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FDdEQsU0FBUyxFQUNULFlBQVksRUFDWixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FDZixDQUFDO0lBRUYsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztJQUNqRSxDQUFDO1NBQU0sQ0FBQztRQUNQLE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9oZXhhZGljLmpzXG5cbmltcG9ydCB7XG5cdEdlblBhbGV0dGVBcmdzLFxuXHRIU0wsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9kYi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnN0cyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9kYXRhL2Jhc2UuanMnO1xuaW1wb3J0IHsgcGFsZXR0ZVN1cGVyVXRpbHMgfSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgdWkgfSBmcm9tICcuLi8uLi8uLi91aS9pbmRleC5qcyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcbmNvbnN0IGdlbkh1ZXMgPSBwYWxldHRlU3VwZXJVdGlscy5nZW5IdWVzO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGNvbnN0cy5wYWxldHRlUmFuZ2VzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGV4YWRpYyhhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgZXhhY3RseSA2IGNvbG9yIHN3YXRjaGVzXG5cdGlmIChhcmdzLnN3YXRjaGVzICE9PSA2KSB1aS5lbmZvcmNlU3dhdGNoUnVsZXMoNiwgNik7XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihhcmdzLmN1c3RvbUNvbG9yLCBhcmdzLmVuYWJsZUFscGhhKTtcblx0Y29uc3QgaHVlcyA9IGdlbkh1ZXMuaGV4YWRpYyhiYXNlQ29sb3IpO1xuXG5cdGNvbnN0IHBhbGV0dGVJdGVtczogUGFsZXR0ZUl0ZW1bXSA9IFtdO1xuXHRmb3IgKGNvbnN0IGh1ZSBvZiBodWVzKSB7XG5cdFx0Y29uc3Qgc2F0dXJhdGlvblNoaWZ0ID1cblx0XHRcdE1hdGgucmFuZG9tKCkgKiBwYWxldHRlUmFuZ2VzLmhleGFkLnNhdFNoaWZ0IC1cblx0XHRcdHBhbGV0dGVSYW5nZXMuaGV4YWQuc2F0U2hpZnQgLyAyO1xuXHRcdGNvbnN0IGxpZ2h0bmVzc1NoaWZ0ID1cblx0XHRcdE1hdGgucmFuZG9tKCkgKiBwYWxldHRlUmFuZ2VzLmhleGFkLmxpZ2h0U2hpZnQgLVxuXHRcdFx0cGFsZXR0ZVJhbmdlcy5oZXhhZC5saWdodFNoaWZ0IC8gMjtcblx0XHRjb25zdCBuZXdDb2xvcjogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICsgc2F0dXJhdGlvblNoaWZ0XG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIGxpZ2h0bmVzc1NoaWZ0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGFyZ3MuZW5hYmxlQWxwaGFcblx0XHRcdFx0XHQ/IGNvcmUuYnJhbmQuYXNBbHBoYVJhbmdlKE1hdGgucmFuZG9tKCkpXG5cdFx0XHRcdFx0OiBjb3JlLmJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0Y29uc3QgcGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0XHRuZXdDb2xvcixcblx0XHRcdGFyZ3MuZW5hYmxlQWxwaGFcblx0XHQpO1xuXG5cdFx0cGFsZXR0ZUl0ZW1zLnB1c2gocGFsZXR0ZUl0ZW0pO1xuXHR9XG5cblx0Y29uc3QgaWRiTWFuYWdlciA9IGF3YWl0IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0Y29uc3QgcGFsZXR0ZUlEID0gYXdhaXQgaWRiTWFuYWdlci5nZXROZXh0UGFsZXR0ZUlEKCk7XG5cblx0aWYgKCFwYWxldHRlSUQpIHRocm93IG5ldyBFcnJvcignUGFsZXR0ZSBJRCBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0Y29uc3QgaGV4YWRpY1BhbGV0dGUgPSBhd2FpdCBpZGJNYW5hZ2VyLnNhdmVQYWxldHRlVG9EQihcblx0XHQnaGV4YWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdHBhbGV0dGVJRCxcblx0XHRhcmdzLnN3YXRjaGVzLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGEsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0aWYgKCFoZXhhZGljUGFsZXR0ZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignSGV4YWRpYyBwYWxldHRlIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gaGV4YWRpY1BhbGV0dGU7XG5cdH1cbn1cbiJdfQ==