// File: palette/main/types/hexadic.js
import { IDBManager } from '../../../db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const paletteRanges = consts.paletteRanges;
const core = commonFn.core;
const utils = commonFn.utils;
export async function hexadic(args) {
    // ensure exactly 6 color swatches
    if (args.swatches !== 6)
        paletteHelpers.enforce.swatchRules(6, 6);
    const baseColor = utils.random.hsl();
    const hues = paletteSuperUtils.genHues.hexadic(baseColor);
    const paletteItems = [];
    for (const hue of hues) {
        const saturationShift = Math.random() * paletteRanges.shift.hexad.sat -
            paletteRanges.shift.hexad.sat / 2;
        const lightnessShift = Math.random() * paletteRanges.shift.hexad.light -
            paletteRanges.shift.hexad.light / 2;
        const newColor = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.saturation + saturationShift))),
                lightness: core.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.lightness + lightnessShift)))
            },
            format: 'hsl'
        };
        const paletteItem = await paletteSuperUtils.create.paletteItem(newColor);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const hexadicPalette = await idbManager.savePaletteToDB('hexadic', paletteItems, paletteID, args.swatches, args.limitDark, args.limitGray, args.limitLight);
    if (!hexadicPalette) {
        throw new Error('Hexadic palette is either null or undefined.');
    }
    else {
        return hexadicPalette;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4YWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvaGV4YWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFRdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxJQUFJLE1BQU0sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFDTixPQUFPLElBQUksY0FBYyxFQUN6QixVQUFVLElBQUksaUJBQWlCLEVBQy9CLE1BQU0sdUJBQXVCLENBQUM7QUFFL0IsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUUzQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBQzNCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFFN0IsTUFBTSxDQUFDLEtBQUssVUFBVSxPQUFPLENBQUMsSUFBMkI7SUFDeEQsa0NBQWtDO0lBQ2xDLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDO1FBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRWxFLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsTUFBTSxJQUFJLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUUxRCxNQUFNLFlBQVksR0FBa0IsRUFBRSxDQUFDO0lBQ3ZDLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDeEIsTUFBTSxlQUFlLEdBQ3BCLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHO1lBQzdDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDbkMsTUFBTSxjQUFjLEdBQ25CLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLO1lBQy9DLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDckMsTUFBTSxRQUFRLEdBQVE7WUFDckIsS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7Z0JBQzdCLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FDUCxDQUFDLEVBQ0QsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUM1QyxDQUNELENBQ0Q7Z0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNqQyxJQUFJLENBQUMsR0FBRyxDQUNQLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsQ0FDdkQsQ0FDRDthQUNEO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRUYsTUFBTSxXQUFXLEdBQ2hCLE1BQU0saUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV0RCxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXRELElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sY0FBYyxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FDdEQsU0FBUyxFQUNULFlBQVksRUFDWixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FDZixDQUFDO0lBRUYsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztJQUNqRSxDQUFDO1NBQU0sQ0FBQztRQUNQLE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogcGFsZXR0ZS9tYWluL3R5cGVzL2hleGFkaWMuanNcblxuaW1wb3J0IHtcblx0SFNMLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlR2VuZXJhdGlvbkFyZ3MsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9kYi9JREJNYW5hZ2VyLmpzJztcbmltcG9ydCB7IGNvbW1vbkZuIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnN0c0RhdGEgYXMgY29uc3RzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25zdHMuanMnO1xuaW1wb3J0IHtcblx0aGVscGVycyBhcyBwYWxldHRlSGVscGVycyxcblx0c3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlsc1xufSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuXG5jb25zdCBwYWxldHRlUmFuZ2VzID0gY29uc3RzLnBhbGV0dGVSYW5nZXM7XG5cbmNvbnN0IGNvcmUgPSBjb21tb25Gbi5jb3JlO1xuY29uc3QgdXRpbHMgPSBjb21tb25Gbi51dGlscztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhleGFkaWMoYXJnczogUGFsZXR0ZUdlbmVyYXRpb25BcmdzKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdC8vIGVuc3VyZSBleGFjdGx5IDYgY29sb3Igc3dhdGNoZXNcblx0aWYgKGFyZ3Muc3dhdGNoZXMgIT09IDYpIHBhbGV0dGVIZWxwZXJzLmVuZm9yY2Uuc3dhdGNoUnVsZXMoNiwgNik7XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gdXRpbHMucmFuZG9tLmhzbCgpO1xuXHRjb25zdCBodWVzID0gcGFsZXR0ZVN1cGVyVXRpbHMuZ2VuSHVlcy5oZXhhZGljKGJhc2VDb2xvcik7XG5cblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW107XG5cdGZvciAoY29uc3QgaHVlIG9mIGh1ZXMpIHtcblx0XHRjb25zdCBzYXR1cmF0aW9uU2hpZnQgPVxuXHRcdFx0TWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuc2hpZnQuaGV4YWQuc2F0IC1cblx0XHRcdHBhbGV0dGVSYW5nZXMuc2hpZnQuaGV4YWQuc2F0IC8gMjtcblx0XHRjb25zdCBsaWdodG5lc3NTaGlmdCA9XG5cdFx0XHRNYXRoLnJhbmRvbSgpICogcGFsZXR0ZVJhbmdlcy5zaGlmdC5oZXhhZC5saWdodCAtXG5cdFx0XHRwYWxldHRlUmFuZ2VzLnNoaWZ0LmhleGFkLmxpZ2h0IC8gMjtcblx0XHRjb25zdCBuZXdDb2xvcjogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICsgc2F0dXJhdGlvblNoaWZ0XG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIGxpZ2h0bmVzc1NoaWZ0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0Y29uc3QgcGFsZXR0ZUl0ZW0gPVxuXHRcdFx0YXdhaXQgcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlLnBhbGV0dGVJdGVtKG5ld0NvbG9yKTtcblxuXHRcdHBhbGV0dGVJdGVtcy5wdXNoKHBhbGV0dGVJdGVtKTtcblx0fVxuXG5cdGNvbnN0IGlkYk1hbmFnZXIgPSBhd2FpdCBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdGNvbnN0IHBhbGV0dGVJRCA9IGF3YWl0IGlkYk1hbmFnZXIuZ2V0TmV4dFBhbGV0dGVJRCgpO1xuXG5cdGlmICghcGFsZXR0ZUlEKSB0aHJvdyBuZXcgRXJyb3IoJ1BhbGV0dGUgSUQgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXG5cdGNvbnN0IGhleGFkaWNQYWxldHRlID0gYXdhaXQgaWRiTWFuYWdlci5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J2hleGFkaWMnLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRwYWxldHRlSUQsXG5cdFx0YXJncy5zd2F0Y2hlcyxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIWhleGFkaWNQYWxldHRlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdIZXhhZGljIHBhbGV0dGUgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBoZXhhZGljUGFsZXR0ZTtcblx0fVxufVxuIl19