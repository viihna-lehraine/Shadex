// File: palette/main/types/splitComplementary.js
import { IDBManager } from '../../../db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const paletteRanges = consts.paletteRanges;
const core = commonFn.core;
const utils = commonFn.utils;
export async function splitComplementary(args) {
    // ensure exactly 3 color swatches
    if (args.swatches !== 3)
        paletteHelpers.enforce.swatchRules(3, 3);
    // base color setup
    const baseColor = utils.random.hsl();
    // generate split complementary hues
    const [hue1, hue2] = paletteSuperUtils.genHues.splitComplementary(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add base color as the first item in the array
    const basePaletteItem = await paletteSuperUtils.create.paletteItem(baseColor);
    paletteItems.push(basePaletteItem);
    for (const [index, hue] of [hue1, hue2].entries()) {
        const adjustedHSL = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index === 0
                        ? -paletteRanges.shift.splitComp.sat
                        : paletteRanges.shift.splitComp.sat), 100))),
                lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index === 0
                        ? -paletteRanges.shift.splitComp.light
                        : paletteRanges.shift.splitComp.light), 100)))
            },
            format: 'hsl'
        };
        const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL).hsl;
        if (adjustedColor) {
            const paletteItem = await paletteSuperUtils.create.paletteItem(adjustedColor);
            paletteItems.push(paletteItem);
        }
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const splitComplementaryPalette = await idbManager.savePaletteToDB('splitComplementary', paletteItems, paletteID, args.swatches, args.limitDark, args.limitGray, args.limitLight);
    if (!splitComplementaryPalette) {
        throw new Error('Split complementary palette is either null or undefined.');
    }
    return splitComplementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRDb21wbGVtZW50YXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBUWpELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQ04sT0FBTyxJQUFJLGNBQWMsRUFDekIsVUFBVSxJQUFJLGlCQUFpQixFQUMvQixNQUFNLHVCQUF1QixDQUFDO0FBRS9CLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFM0MsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztBQUMzQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3ZDLElBQTJCO0lBRTNCLGtDQUFrQztJQUNsQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQztRQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVsRSxtQkFBbUI7SUFDbkIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVyQyxvQ0FBb0M7SUFDcEMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQ2hFLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNuQixDQUFDO0lBRUYsaUNBQWlDO0lBQ2pDLE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7SUFFdkMsZ0RBQWdEO0lBQ2hELE1BQU0sZUFBZSxHQUNwQixNQUFNLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUVuQyxLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUNuRCxNQUFNLFdBQVcsR0FBUTtZQUN4QixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztnQkFDN0IsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNsQyxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVTtvQkFDekIsQ0FBQyxLQUFLLEtBQUssQ0FBQzt3QkFDWCxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHO3dCQUNwQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQ3RDLEdBQUcsQ0FDSCxDQUNELENBQ0Q7Z0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNqQyxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUztvQkFDeEIsQ0FBQyxLQUFLLEtBQUssQ0FBQzt3QkFDWCxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLO3dCQUN0QyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ3hDLEdBQUcsQ0FDSCxDQUNELENBQ0Q7YUFDRDtZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUNsQixLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUVyRCxJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ25CLE1BQU0sV0FBVyxHQUNoQixNQUFNLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFM0QsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0YsQ0FBQztJQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEQsSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFFM0UsTUFBTSx5QkFBeUIsR0FBRyxNQUFNLFVBQVUsQ0FBQyxlQUFlLENBQ2pFLG9CQUFvQixFQUNwQixZQUFZLEVBQ1osU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxVQUFVLENBQ2YsQ0FBQztJQUVGLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQ2QsMERBQTBELENBQzFELENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyx5QkFBeUIsQ0FBQztBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogcGFsZXR0ZS9tYWluL3R5cGVzL3NwbGl0Q29tcGxlbWVudGFyeS5qc1xuXG5pbXBvcnQge1xuXHRIU0wsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVHZW5lcmF0aW9uQXJncyxcblx0UGFsZXR0ZUl0ZW1cbn0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2RiL0lEQk1hbmFnZXIuanMnO1xuaW1wb3J0IHsgY29tbW9uRm4gfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgY29uc3RzRGF0YSBhcyBjb25zdHMgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2NvbnN0cy5qcyc7XG5pbXBvcnQge1xuXHRoZWxwZXJzIGFzIHBhbGV0dGVIZWxwZXJzLFxuXHRzdXBlclV0aWxzIGFzIHBhbGV0dGVTdXBlclV0aWxzXG59IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBjb25zdHMucGFsZXR0ZVJhbmdlcztcblxuY29uc3QgY29yZSA9IGNvbW1vbkZuLmNvcmU7XG5jb25zdCB1dGlscyA9IGNvbW1vbkZuLnV0aWxzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3BsaXRDb21wbGVtZW50YXJ5KFxuXHRhcmdzOiBQYWxldHRlR2VuZXJhdGlvbkFyZ3Ncbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgZXhhY3RseSAzIGNvbG9yIHN3YXRjaGVzXG5cdGlmIChhcmdzLnN3YXRjaGVzICE9PSAzKSBwYWxldHRlSGVscGVycy5lbmZvcmNlLnN3YXRjaFJ1bGVzKDMsIDMpO1xuXG5cdC8vIGJhc2UgY29sb3Igc2V0dXBcblx0Y29uc3QgYmFzZUNvbG9yID0gdXRpbHMucmFuZG9tLmhzbCgpO1xuXG5cdC8vIGdlbmVyYXRlIHNwbGl0IGNvbXBsZW1lbnRhcnkgaHVlc1xuXHRjb25zdCBbaHVlMSwgaHVlMl0gPSBwYWxldHRlU3VwZXJVdGlscy5nZW5IdWVzLnNwbGl0Q29tcGxlbWVudGFyeShcblx0XHRiYXNlQ29sb3IudmFsdWUuaHVlXG5cdCk7XG5cblx0Ly8gaW5pdGlhbGl6ZSBwYWxldHRlIGl0ZW1zIGFycmF5XG5cdGNvbnN0IHBhbGV0dGVJdGVtczogUGFsZXR0ZUl0ZW1bXSA9IFtdO1xuXG5cdC8vIGFkZCBiYXNlIGNvbG9yIGFzIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheVxuXHRjb25zdCBiYXNlUGFsZXR0ZUl0ZW0gPVxuXHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IpO1xuXHRwYWxldHRlSXRlbXMucHVzaChiYXNlUGFsZXR0ZUl0ZW0pO1xuXG5cdGZvciAoY29uc3QgW2luZGV4LCBodWVdIG9mIFtodWUxLCBodWUyXS5lbnRyaWVzKCkpIHtcblx0XHRjb25zdCBhZGp1c3RlZEhTTDogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnNoaWZ0LnNwbGl0Q29tcC5zYXRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy5zaGlmdC5zcGxpdENvbXAuc2F0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc2hpZnQuc3BsaXRDb21wLmxpZ2h0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMuc2hpZnQuc3BsaXRDb21wLmxpZ2h0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHRjb25zdCBhZGp1c3RlZENvbG9yID1cblx0XHRcdHV0aWxzLmNvbnZlcnNpb24uZ2VuQWxsQ29sb3JWYWx1ZXMoYWRqdXN0ZWRIU0wpLmhzbDtcblxuXHRcdGlmIChhZGp1c3RlZENvbG9yKSB7XG5cdFx0XHRjb25zdCBwYWxldHRlSXRlbSA9XG5cdFx0XHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShhZGp1c3RlZENvbG9yKTtcblxuXHRcdFx0cGFsZXR0ZUl0ZW1zLnB1c2gocGFsZXR0ZUl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IGlkYk1hbmFnZXIgPSBhd2FpdCBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdGNvbnN0IHBhbGV0dGVJRCA9IGF3YWl0IGlkYk1hbmFnZXIuZ2V0TmV4dFBhbGV0dGVJRCgpO1xuXG5cdGlmICghcGFsZXR0ZUlEKSB0aHJvdyBuZXcgRXJyb3IoJ1BhbGV0dGUgSUQgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXG5cdGNvbnN0IHNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGUgPSBhd2FpdCBpZGJNYW5hZ2VyLnNhdmVQYWxldHRlVG9EQihcblx0XHQnc3BsaXRDb21wbGVtZW50YXJ5Jyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0cGFsZXR0ZUlELFxuXHRcdGFyZ3Muc3dhdGNoZXMsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0aWYgKCFzcGxpdENvbXBsZW1lbnRhcnlQYWxldHRlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0J1NwbGl0IGNvbXBsZW1lbnRhcnkgcGFsZXR0ZSBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJ1xuXHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gc3BsaXRDb21wbGVtZW50YXJ5UGFsZXR0ZTtcbn1cbiJdfQ==