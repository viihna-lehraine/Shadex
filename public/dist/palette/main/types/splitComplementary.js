// File: palette/main/types/splitComplementary.js
import { IDBManager } from '../../../app/db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const paletteRanges = consts.paletteRanges;
const core = commonFn.core;
const utils = commonFn.utils;
export async function splitComplementary(args) {
    // ensure exactly 3 color swatches
    if (args.swatches !== 3)
        paletteHelpers.enforce.swatchRules(3, 3);
    // base color setup
    const baseColor = utils.random.hsl();
    // generate split complementary hues
    const [hue1, hue2] = paletteSuperUtils.genHues.splitComplementary(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add base color as the first item in the array
    const basePaletteItem = await paletteSuperUtils.create.paletteItem(baseColor);
    paletteItems.push(basePaletteItem);
    for (const [index, hue] of [hue1, hue2].entries()) {
        const adjustedHSL = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index === 0
                        ? -paletteRanges.shift.splitComp.sat
                        : paletteRanges.shift.splitComp.sat), 100))),
                lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index === 0
                        ? -paletteRanges.shift.splitComp.light
                        : paletteRanges.shift.splitComp.light), 100)))
            },
            format: 'hsl'
        };
        const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL).hsl;
        if (adjustedColor) {
            const paletteItem = await paletteSuperUtils.create.paletteItem(adjustedColor);
            paletteItems.push(paletteItem);
        }
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = (await idbManager.getCurrentPaletteID()) + 1;
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const paletteArgs = {
        type: 'splitComplementary',
        items: paletteItems,
        paletteID,
        swatches: args.swatches,
        limitDark: args.limitDark,
        limitGray: args.limitGray,
        limitLight: args.limitLight
    };
    const splitComplementaryPalette = await idbManager.savePaletteToDB(paletteArgs);
    if (!splitComplementaryPalette) {
        throw new Error('Split complementary palette is either null or undefined.');
    }
    return splitComplementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRDb21wbGVtZW50YXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBU2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQ04sT0FBTyxJQUFJLGNBQWMsRUFDekIsVUFBVSxJQUFJLGlCQUFpQixFQUMvQixNQUFNLHVCQUF1QixDQUFDO0FBRS9CLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFM0MsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztBQUMzQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3ZDLElBQTJCO0lBRTNCLGtDQUFrQztJQUNsQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQztRQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVsRSxtQkFBbUI7SUFDbkIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVyQyxvQ0FBb0M7SUFDcEMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQ2hFLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNuQixDQUFDO0lBRUYsaUNBQWlDO0lBQ2pDLE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7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aXRDb21wbGVtZW50YXJ5LmpzXG5cbmltcG9ydCB7XG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUFyZ3MsXG5cdFBhbGV0dGVHZW5lcmF0aW9uQXJncyxcblx0UGFsZXR0ZUl0ZW1cbn0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2FwcC9kYi9JREJNYW5hZ2VyLmpzJztcbmltcG9ydCB7IGNvbW1vbkZuIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnN0c0RhdGEgYXMgY29uc3RzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25zdHMuanMnO1xuaW1wb3J0IHtcblx0aGVscGVycyBhcyBwYWxldHRlSGVscGVycyxcblx0c3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlsc1xufSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuXG5jb25zdCBwYWxldHRlUmFuZ2VzID0gY29uc3RzLnBhbGV0dGVSYW5nZXM7XG5cbmNvbnN0IGNvcmUgPSBjb21tb25Gbi5jb3JlO1xuY29uc3QgdXRpbHMgPSBjb21tb25Gbi51dGlscztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNwbGl0Q29tcGxlbWVudGFyeShcblx0YXJnczogUGFsZXR0ZUdlbmVyYXRpb25BcmdzXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Ly8gZW5zdXJlIGV4YWN0bHkgMyBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyAhPT0gMykgcGFsZXR0ZUhlbHBlcnMuZW5mb3JjZS5zd2F0Y2hSdWxlcygzLCAzKTtcblxuXHQvLyBiYXNlIGNvbG9yIHNldHVwXG5cdGNvbnN0IGJhc2VDb2xvciA9IHV0aWxzLnJhbmRvbS5oc2woKTtcblxuXHQvLyBnZW5lcmF0ZSBzcGxpdCBjb21wbGVtZW50YXJ5IGh1ZXNcblx0Y29uc3QgW2h1ZTEsIGh1ZTJdID0gcGFsZXR0ZVN1cGVyVXRpbHMuZ2VuSHVlcy5zcGxpdENvbXBsZW1lbnRhcnkoXG5cdFx0YmFzZUNvbG9yLnZhbHVlLmh1ZVxuXHQpO1xuXG5cdC8vIGluaXRpYWxpemUgcGFsZXR0ZSBpdGVtcyBhcnJheVxuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXTtcblxuXHQvLyBhZGQgYmFzZSBjb2xvciBhcyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgYXJyYXlcblx0Y29uc3QgYmFzZVBhbGV0dGVJdGVtID1cblx0XHRhd2FpdCBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGUucGFsZXR0ZUl0ZW0oYmFzZUNvbG9yKTtcblx0cGFsZXR0ZUl0ZW1zLnB1c2goYmFzZVBhbGV0dGVJdGVtKTtcblxuXHRmb3IgKGNvbnN0IFtpbmRleCwgaHVlXSBvZiBbaHVlMSwgaHVlMl0uZW50cmllcygpKSB7XG5cdFx0Y29uc3QgYWRqdXN0ZWRIU0w6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZS5icmFuZC5hc1JhZGlhbChodWUpLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy5zaGlmdC5zcGxpdENvbXAuc2F0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMuc2hpZnQuc3BsaXRDb21wLnNhdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnNoaWZ0LnNwbGl0Q29tcC5saWdodFxuXHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnNoaWZ0LnNwbGl0Q29tcC5saWdodCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0Y29uc3QgYWRqdXN0ZWRDb2xvciA9XG5cdFx0XHR1dGlscy5jb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKGFkanVzdGVkSFNMKS5oc2w7XG5cblx0XHRpZiAoYWRqdXN0ZWRDb2xvcikge1xuXHRcdFx0Y29uc3QgcGFsZXR0ZUl0ZW0gPVxuXHRcdFx0XHRhd2FpdCBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGUucGFsZXR0ZUl0ZW0oYWRqdXN0ZWRDb2xvcik7XG5cblx0XHRcdHBhbGV0dGVJdGVtcy5wdXNoKHBhbGV0dGVJdGVtKTtcblx0XHR9XG5cdH1cblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRjb25zdCBwYWxldHRlSUQgPSAoYXdhaXQgaWRiTWFuYWdlci5nZXRDdXJyZW50UGFsZXR0ZUlEKCkpICsgMTtcblxuXHRpZiAoIXBhbGV0dGVJRCkgdGhyb3cgbmV3IEVycm9yKCdQYWxldHRlIElEIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHRjb25zdCBwYWxldHRlQXJnczogUGFsZXR0ZUFyZ3MgPSB7XG5cdFx0dHlwZTogJ3NwbGl0Q29tcGxlbWVudGFyeScsXG5cdFx0aXRlbXM6IHBhbGV0dGVJdGVtcyxcblx0XHRwYWxldHRlSUQsXG5cdFx0c3dhdGNoZXM6IGFyZ3Muc3dhdGNoZXMsXG5cdFx0bGltaXREYXJrOiBhcmdzLmxpbWl0RGFyayxcblx0XHRsaW1pdEdyYXk6IGFyZ3MubGltaXRHcmF5LFxuXHRcdGxpbWl0TGlnaHQ6IGFyZ3MubGltaXRMaWdodFxuXHR9O1xuXG5cdGNvbnN0IHNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGUgPVxuXHRcdGF3YWl0IGlkYk1hbmFnZXIuc2F2ZVBhbGV0dGVUb0RCKHBhbGV0dGVBcmdzKTtcblxuXHRpZiAoIXNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHQnU3BsaXQgY29tcGxlbWVudGFyeSBwYWxldHRlIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nXG5cdFx0KTtcblx0fVxuXG5cdHJldHVybiBzcGxpdENvbXBsZW1lbnRhcnlQYWxldHRlO1xufVxuIl19