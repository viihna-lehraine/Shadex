// File: palette/main/types/diadic.js
import { IDBManager } from '../../../app/db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const paletteRanges = consts.paletteRanges;
const core = commonFn.core;
const utils = commonFn.utils;
export async function diadic(args) {
    // ensure exactly 2 color swatches
    if (args.swatches !== 2)
        paletteHelpers.enforce.swatchRules(2, 2);
    const baseColor = utils.random.hsl();
    const hues = paletteSuperUtils.genHues.diadic(baseColor.value.hue);
    const paletteItems = [];
    for (let i = 0; i < 2; i++) {
        const saturationShift = Math.random() * paletteRanges.shift.diadic.sat -
            paletteRanges.shift.diadic.sat / 2;
        const lightnessShift = Math.random() * paletteRanges.shift.diadic.light -
            paletteRanges.shift.diadic.light / 2;
        const newColor = {
            value: {
                hue: core.brand.asRadial(hues[i % hues.length]),
                saturation: core.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.saturation + saturationShift))),
                lightness: core.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.lightness + lightnessShift)))
            },
            format: 'hsl'
        };
        const paletteItem = await paletteSuperUtils.create.paletteItem(newColor);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = (await idbManager.getCurrentPaletteID()) + 1;
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const paletteArgs = {
        type: 'diadic',
        items: paletteItems,
        paletteID,
        swatches: args.swatches,
        limitDark: args.limitDark,
        limitGray: args.limitGray,
        limitLight: args.limitLight
    };
    const diadicPalette = await idbManager.savePaletteToDB(paletteArgs);
    if (!diadicPalette)
        throw new Error(`Diadic palette is either null or undefined.`);
    else
        return diadicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZGljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9kaWFkaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDO0FBU3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQ04sT0FBTyxJQUFJLGNBQWMsRUFDekIsVUFBVSxJQUFJLGlCQUFpQixFQUMvQixNQUFNLHVCQUF1QixDQUFDO0FBRS9CLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFM0MsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztBQUMzQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUFDLElBQTJCO0lBQ3ZELGtDQUFrQztJQUNsQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQztRQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVsRSxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuRSxNQUFNLFlBQVksR0FBa0IsRUFBRSxDQUFDO0lBRXZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QixNQUFNLGVBQWUsR0FDcEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDOUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FDbkIsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUs7WUFDaEQsYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUN0QyxNQUFNLFFBQVEsR0FBUTtZQUNyQixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUMvQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQ2xDLElBQUksQ0FBQyxHQUFHLENBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQ1AsQ0FBQyxFQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FDNUMsQ0FDRCxDQUNEO2dCQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FDakMsSUFBSSxDQUFDLEdBQUcsQ0FDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDLENBQ3ZELENBQ0Q7YUFDRDtZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUNoQixNQUFNLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxVQUFVLEdBQUcsTUFBTSxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRS9ELElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sV0FBVyxHQUFnQjtRQUNoQyxJQUFJLEVBQUUsUUFBUTtRQUNkLEtBQUssRUFBRSxZQUFZO1FBQ25CLFNBQVM7UUFDVCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7UUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1FBQ3pCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztRQUN6QixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7S0FDM0IsQ0FBQztJQUVGLE1BQU0sYUFBYSxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVwRSxJQUFJLENBQUMsYUFBYTtRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7O1FBQzNELE9BQU8sYUFBYSxDQUFDO0FBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBwYWxldHRlL21haW4vdHlwZXMvZGlhZGljLmpzXG5cbmltcG9ydCB7XG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUFyZ3MsXG5cdFBhbGV0dGVHZW5lcmF0aW9uQXJncyxcblx0UGFsZXR0ZUl0ZW1cbn0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2FwcC9kYi9JREJNYW5hZ2VyLmpzJztcbmltcG9ydCB7IGNvbW1vbkZuIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnN0c0RhdGEgYXMgY29uc3RzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25zdHMuanMnO1xuaW1wb3J0IHtcblx0aGVscGVycyBhcyBwYWxldHRlSGVscGVycyxcblx0c3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlsc1xufSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuXG5jb25zdCBwYWxldHRlUmFuZ2VzID0gY29uc3RzLnBhbGV0dGVSYW5nZXM7XG5cbmNvbnN0IGNvcmUgPSBjb21tb25Gbi5jb3JlO1xuY29uc3QgdXRpbHMgPSBjb21tb25Gbi51dGlscztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRpYWRpYyhhcmdzOiBQYWxldHRlR2VuZXJhdGlvbkFyZ3MpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Ly8gZW5zdXJlIGV4YWN0bHkgMiBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyAhPT0gMikgcGFsZXR0ZUhlbHBlcnMuZW5mb3JjZS5zd2F0Y2hSdWxlcygyLCAyKTtcblxuXHRjb25zdCBiYXNlQ29sb3IgPSB1dGlscy5yYW5kb20uaHNsKCk7XG5cdGNvbnN0IGh1ZXMgPSBwYWxldHRlU3VwZXJVdGlscy5nZW5IdWVzLmRpYWRpYyhiYXNlQ29sb3IudmFsdWUuaHVlKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW107XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcblx0XHRjb25zdCBzYXR1cmF0aW9uU2hpZnQgPVxuXHRcdFx0TWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuc2hpZnQuZGlhZGljLnNhdCAtXG5cdFx0XHRwYWxldHRlUmFuZ2VzLnNoaWZ0LmRpYWRpYy5zYXQgLyAyO1xuXHRcdGNvbnN0IGxpZ2h0bmVzc1NoaWZ0ID1cblx0XHRcdE1hdGgucmFuZG9tKCkgKiBwYWxldHRlUmFuZ2VzLnNoaWZ0LmRpYWRpYy5saWdodCAtXG5cdFx0XHRwYWxldHRlUmFuZ2VzLnNoaWZ0LmRpYWRpYy5saWdodCAvIDI7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZS5icmFuZC5hc1JhZGlhbChodWVzW2kgJSBodWVzLmxlbmd0aF0pLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArIHNhdHVyYXRpb25TaGlmdFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRcdE1hdGgubWF4KDAsIGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgKyBsaWdodG5lc3NTaGlmdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdClcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdGNvbnN0IHBhbGV0dGVJdGVtID1cblx0XHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShuZXdDb2xvcik7XG5cdFx0cGFsZXR0ZUl0ZW1zLnB1c2gocGFsZXR0ZUl0ZW0pO1xuXHR9XG5cblx0Y29uc3QgaWRiTWFuYWdlciA9IGF3YWl0IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0Y29uc3QgcGFsZXR0ZUlEID0gKGF3YWl0IGlkYk1hbmFnZXIuZ2V0Q3VycmVudFBhbGV0dGVJRCgpKSArIDE7XG5cblx0aWYgKCFwYWxldHRlSUQpIHRocm93IG5ldyBFcnJvcignUGFsZXR0ZSBJRCBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0Y29uc3QgcGFsZXR0ZUFyZ3M6IFBhbGV0dGVBcmdzID0ge1xuXHRcdHR5cGU6ICdkaWFkaWMnLFxuXHRcdGl0ZW1zOiBwYWxldHRlSXRlbXMsXG5cdFx0cGFsZXR0ZUlELFxuXHRcdHN3YXRjaGVzOiBhcmdzLnN3YXRjaGVzLFxuXHRcdGxpbWl0RGFyazogYXJncy5saW1pdERhcmssXG5cdFx0bGltaXRHcmF5OiBhcmdzLmxpbWl0R3JheSxcblx0XHRsaW1pdExpZ2h0OiBhcmdzLmxpbWl0TGlnaHRcblx0fTtcblxuXHRjb25zdCBkaWFkaWNQYWxldHRlID0gYXdhaXQgaWRiTWFuYWdlci5zYXZlUGFsZXR0ZVRvREIocGFsZXR0ZUFyZ3MpO1xuXG5cdGlmICghZGlhZGljUGFsZXR0ZSlcblx0XHR0aHJvdyBuZXcgRXJyb3IoYERpYWRpYyBwYWxldHRlIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC5gKTtcblx0ZWxzZSByZXR1cm4gZGlhZGljUGFsZXR0ZTtcbn1cbiJdfQ==