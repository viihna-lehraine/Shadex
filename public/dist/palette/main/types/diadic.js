// File: palette/main/types/diadic.js
import { IDBManager } from '../../../db/index.js';
import { coreUtils } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { superUtils as paletteSuperUtils } from '../../common/index.js';
import { uiFn } from '../../../ui/index.js';
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
const paletteRanges = consts.paletteRanges;
export async function diadic(args) {
    // ensure exactly 2 color swatches
    if (args.swatches !== 2)
        uiFn.enforceSwatchRules(2, 2);
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const hues = genHues.diadic(baseColor.value.hue);
    const paletteItems = [];
    for (let i = 0; i < 2; i++) {
        const saturationShift = Math.random() * paletteRanges.diadic.satShift -
            paletteRanges.diadic.satShift / 2;
        const lightnessShift = Math.random() * paletteRanges.diadic.lightShift -
            paletteRanges.diadic.lightShift / 2;
        const newColor = {
            value: {
                hue: coreUtils.brand.asRadial(hues[i % hues.length]),
                saturation: coreUtils.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.saturation + saturationShift))),
                lightness: coreUtils.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.lightness + lightnessShift))),
                alpha: args.enableAlpha
                    ? coreUtils.brand.asAlphaRange(Math.random())
                    : coreUtils.brand.asAlphaRange(1)
            },
            format: 'hsl'
        };
        const paletteItem = await create.paletteItem(newColor, args.enableAlpha);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const diadicPalette = await idbManager.savePaletteToDB('diadic', paletteItems, paletteID, 2, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!diadicPalette)
        throw new Error(`Diadic palette is either null or undefined.`);
    else
        return diadicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZGljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9kaWFkaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDO0FBUXJDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxJQUFJLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTVDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDMUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUUzQyxNQUFNLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxJQUFvQjtJQUNoRCxrQ0FBa0M7SUFDbEMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUM7UUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXZELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkUsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7SUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzVCLE1BQU0sZUFBZSxHQUNwQixJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRO1lBQzdDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNuQyxNQUFNLGNBQWMsR0FDbkIsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUMvQyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDckMsTUFBTSxRQUFRLEdBQVE7WUFDckIsS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDcEQsVUFBVSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUN2QyxJQUFJLENBQUMsR0FBRyxDQUNQLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQzVDLENBQ0QsQ0FDRDtnQkFDRCxTQUFTLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQ3RDLElBQUksQ0FBQyxHQUFHLENBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxDQUN2RCxDQUNEO2dCQUNELEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVztvQkFDdEIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztvQkFDN0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUNsQztZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FDM0MsUUFBUSxFQUNSLElBQUksQ0FBQyxXQUFXLENBQ2hCLENBQUM7UUFDRixZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXRELElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sYUFBYSxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FDckQsUUFBUSxFQUNSLFlBQVksRUFDWixTQUFTLEVBQ1QsQ0FBQyxFQUNELElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQUM7SUFFRixJQUFJLENBQUMsYUFBYTtRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7O1FBQzNELE9BQU8sYUFBYSxDQUFDO0FBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBwYWxldHRlL21haW4vdHlwZXMvZGlhZGljLmpzXG5cbmltcG9ydCB7XG5cdEdlblBhbGV0dGVBcmdzLFxuXHRIU0wsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9kYi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgY29uc3RzRGF0YSBhcyBjb25zdHMgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2NvbnN0cy5qcyc7XG5pbXBvcnQgeyBzdXBlclV0aWxzIGFzIHBhbGV0dGVTdXBlclV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IHVpRm4gfSBmcm9tICcuLi8uLi8uLi91aS9pbmRleC5qcyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcbmNvbnN0IGdlbkh1ZXMgPSBwYWxldHRlU3VwZXJVdGlscy5nZW5IdWVzO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGNvbnN0cy5wYWxldHRlUmFuZ2VzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGlhZGljKGFyZ3M6IEdlblBhbGV0dGVBcmdzKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdC8vIGVuc3VyZSBleGFjdGx5IDIgY29sb3Igc3dhdGNoZXNcblx0aWYgKGFyZ3Muc3dhdGNoZXMgIT09IDIpIHVpRm4uZW5mb3JjZVN3YXRjaFJ1bGVzKDIsIDIpO1xuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoYXJncy5jdXN0b21Db2xvciwgYXJncy5lbmFibGVBbHBoYSk7XG5cdGNvbnN0IGh1ZXMgPSBnZW5IdWVzLmRpYWRpYyhiYXNlQ29sb3IudmFsdWUuaHVlKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW107XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcblx0XHRjb25zdCBzYXR1cmF0aW9uU2hpZnQgPVxuXHRcdFx0TWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuZGlhZGljLnNhdFNoaWZ0IC1cblx0XHRcdHBhbGV0dGVSYW5nZXMuZGlhZGljLnNhdFNoaWZ0IC8gMjtcblx0XHRjb25zdCBsaWdodG5lc3NTaGlmdCA9XG5cdFx0XHRNYXRoLnJhbmRvbSgpICogcGFsZXR0ZVJhbmdlcy5kaWFkaWMubGlnaHRTaGlmdCAtXG5cdFx0XHRwYWxldHRlUmFuZ2VzLmRpYWRpYy5saWdodFNoaWZ0IC8gMjtcblx0XHRjb25zdCBuZXdDb2xvcjogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlVXRpbHMuYnJhbmQuYXNSYWRpYWwoaHVlc1tpICUgaHVlcy5sZW5ndGhdKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZVV0aWxzLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArIHNhdHVyYXRpb25TaGlmdFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlVXRpbHMuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIGxpZ2h0bmVzc1NoaWZ0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGFyZ3MuZW5hYmxlQWxwaGFcblx0XHRcdFx0XHQ/IGNvcmVVdGlscy5icmFuZC5hc0FscGhhUmFuZ2UoTWF0aC5yYW5kb20oKSlcblx0XHRcdFx0XHQ6IGNvcmVVdGlscy5icmFuZC5hc0FscGhhUmFuZ2UoMSlcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdGNvbnN0IHBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKFxuXHRcdFx0bmV3Q29sb3IsXG5cdFx0XHRhcmdzLmVuYWJsZUFscGhhXG5cdFx0KTtcblx0XHRwYWxldHRlSXRlbXMucHVzaChwYWxldHRlSXRlbSk7XG5cdH1cblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRjb25zdCBwYWxldHRlSUQgPSBhd2FpdCBpZGJNYW5hZ2VyLmdldE5leHRQYWxldHRlSUQoKTtcblxuXHRpZiAoIXBhbGV0dGVJRCkgdGhyb3cgbmV3IEVycm9yKCdQYWxldHRlIElEIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHRjb25zdCBkaWFkaWNQYWxldHRlID0gYXdhaXQgaWRiTWFuYWdlci5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J2RpYWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdHBhbGV0dGVJRCxcblx0XHQyLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGEsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0aWYgKCFkaWFkaWNQYWxldHRlKVxuXHRcdHRocm93IG5ldyBFcnJvcihgRGlhZGljIHBhbGV0dGUgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLmApO1xuXHRlbHNlIHJldHVybiBkaWFkaWNQYWxldHRlO1xufVxuIl19