// File: palette/main/types/analogous.js
import { IDBManager } from '../../../db/IDBManager.js';
import { coreUtils } from '../../../common/index.js';
import { superUtils as paletteSuperUtils } from '../../common/index.js';
import { uiFn } from '../../../ui/index.js';
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
export async function analogous(args) {
    // ensure at least 2 color swatches
    if (args.swatches < 2)
        uiFn.enforceSwatchRules(2);
    const baseColor = create.baseColor(args.customColor);
    const hues = genHues.analogous(baseColor, args.swatches);
    const paletteItems = [];
    for (const [i, hue] of hues.entries()) {
        const newColor = {
            value: {
                hue: coreUtils.brand.asRadial(hue),
                saturation: coreUtils.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.saturation +
                    (Math.random() - 0.5) * 10))),
                lightness: coreUtils.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.lightness + (i % 2 === 0 ? 5 : -5))))
            },
            format: 'hsl'
        };
        const paletteItem = await create.paletteItem(newColor);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const analogousPalette = await idbManager.savePaletteToDB('analogous', paletteItems, paletteID, args.swatches, args.limitDark, args.limitGray, args.limitLight);
    if (!analogousPalette)
        throw new Error('Analogous palette is null or undefined.');
    else
        return analogousPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbG9nb3VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9hbmFsb2dvdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBUXhDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsSUFBSSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1QyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDeEMsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLElBQTJCO0lBQzFELG1DQUFtQztJQUNuQyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQztRQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekQsTUFBTSxZQUFZLEdBQWtCLEVBQUUsQ0FBQztJQUV2QyxLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7UUFDdkMsTUFBTSxRQUFRLEdBQVE7WUFDckIsS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7Z0JBQ2xDLFVBQVUsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FDdkMsSUFBSSxDQUFDLEdBQUcsQ0FDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FDUCxDQUFDLEVBQ0QsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVO29CQUN6QixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQzNCLENBQ0QsQ0FDRDtnQkFDRCxTQUFTLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQ3RDLElBQUksQ0FBQyxHQUFHLENBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQ1AsQ0FBQyxFQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEQsQ0FDRCxDQUNEO2FBQ0Q7WUFDRCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7UUFFRixNQUFNLFdBQVcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdkQsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxVQUFVLEdBQUcsTUFBTSxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFbEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUV0RCxJQUFJLENBQUMsU0FBUztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztJQUUzRSxNQUFNLGdCQUFnQixHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FDeEQsV0FBVyxFQUNYLFlBQVksRUFDWixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FDZixDQUFDO0lBRUYsSUFBSSxDQUFDLGdCQUFnQjtRQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7O1FBQ3ZELE9BQU8sZ0JBQWdCLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHBhbGV0dGUvbWFpbi90eXBlcy9hbmFsb2dvdXMuanNcblxuaW1wb3J0IHtcblx0SFNMLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlR2VuZXJhdGlvbkFyZ3MsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9kYi9JREJNYW5hZ2VyLmpzJztcbmltcG9ydCB7IGNvcmVVdGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBzdXBlclV0aWxzIGFzIHBhbGV0dGVTdXBlclV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IHVpRm4gfSBmcm9tICcuLi8uLi8uLi91aS9pbmRleC5qcyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcbmNvbnN0IGdlbkh1ZXMgPSBwYWxldHRlU3VwZXJVdGlscy5nZW5IdWVzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYW5hbG9nb3VzKGFyZ3M6IFBhbGV0dGVHZW5lcmF0aW9uQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgYXQgbGVhc3QgMiBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyA8IDIpIHVpRm4uZW5mb3JjZVN3YXRjaFJ1bGVzKDIpO1xuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoYXJncy5jdXN0b21Db2xvcik7XG5cdGNvbnN0IGh1ZXMgPSBnZW5IdWVzLmFuYWxvZ291cyhiYXNlQ29sb3IsIGFyZ3Muc3dhdGNoZXMpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXTtcblxuXHRmb3IgKGNvbnN0IFtpLCBodWVdIG9mIGh1ZXMuZW50cmllcygpKSB7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZVV0aWxzLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmVVdGlscy5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDEwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmVVdGlscy5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIChpICUgMiA9PT0gMCA/IDUgOiAtNSlcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdClcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdGNvbnN0IHBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKG5ld0NvbG9yKTtcblxuXHRcdHBhbGV0dGVJdGVtcy5wdXNoKHBhbGV0dGVJdGVtKTtcblx0fVxuXG5cdGNvbnN0IGlkYk1hbmFnZXIgPSBhd2FpdCBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cblx0Y29uc3QgcGFsZXR0ZUlEID0gYXdhaXQgaWRiTWFuYWdlci5nZXROZXh0UGFsZXR0ZUlEKCk7XG5cblx0aWYgKCFwYWxldHRlSUQpIHRocm93IG5ldyBFcnJvcignUGFsZXR0ZSBJRCBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0Y29uc3QgYW5hbG9nb3VzUGFsZXR0ZSA9IGF3YWl0IGlkYk1hbmFnZXIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCdhbmFsb2dvdXMnLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRwYWxldHRlSUQsXG5cdFx0YXJncy5zd2F0Y2hlcyxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIWFuYWxvZ291c1BhbGV0dGUpXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdBbmFsb2dvdXMgcGFsZXR0ZSBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0ZWxzZSByZXR1cm4gYW5hbG9nb3VzUGFsZXR0ZTtcbn1cbiJdfQ==