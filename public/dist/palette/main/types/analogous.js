// File: palette/main/types/analogous.js
import { IDBManager } from '../../../db/index.js';
import { coreUtils } from '../../../common/index.js';
import { superUtils as paletteSuperUtils } from '../../common/index.js';
import { uiFn } from '../../../ui/index.js';
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
export async function analogous(args) {
    // ensure at least 2 color swatches
    if (args.swatches < 2)
        uiFn.enforceSwatchRules(2);
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const hues = genHues.analogous(baseColor, args.swatches);
    const paletteItems = [];
    for (const [i, hue] of hues.entries()) {
        const newColor = {
            value: {
                hue: coreUtils.brand.asRadial(hue),
                saturation: coreUtils.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.saturation +
                    (Math.random() - 0.5) * 10))),
                lightness: coreUtils.brand.asPercentile(Math.min(100, Math.max(0, baseColor.value.lightness + (i % 2 === 0 ? 5 : -5)))),
                alpha: args.enableAlpha
                    ? coreUtils.brand.asAlphaRange(Math.random())
                    : coreUtils.brand.asAlphaRange(1)
            },
            format: 'hsl'
        };
        const paletteItem = await create.paletteItem(newColor, args.enableAlpha);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const analogousPalette = await idbManager.savePaletteToDB('analogous', paletteItems, paletteID, args.swatches, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!analogousPalette)
        throw new Error('Analogous palette is null or undefined.');
    else
        return analogousPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbG9nb3VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9hbmFsb2dvdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBUXhDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsSUFBSSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1QyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDeEMsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLElBQW9CO0lBQ25ELG1DQUFtQztJQUNuQyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQztRQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6RCxNQUFNLFlBQVksR0FBa0IsRUFBRSxDQUFDO0lBRXZDLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUN2QyxNQUFNLFFBQVEsR0FBUTtZQUNyQixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztnQkFDbEMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUN2QyxJQUFJLENBQUMsR0FBRyxDQUNQLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7b0JBQ3pCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FDM0IsQ0FDRCxDQUNEO2dCQUNELFNBQVMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FDdEMsSUFBSSxDQUFDLEdBQUcsQ0FDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FDUCxDQUFDLEVBQ0QsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNsRCxDQUNELENBQ0Q7Z0JBQ0QsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXO29CQUN0QixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUM3QyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRUYsTUFBTSxXQUFXLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUMzQyxRQUFRLEVBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FDaEIsQ0FBQztRQUVGLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRWxELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEQsSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFFM0UsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLFVBQVUsQ0FBQyxlQUFlLENBQ3hELFdBQVcsRUFDWCxZQUFZLEVBQ1osU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxVQUFVLENBQ2YsQ0FBQztJQUVGLElBQUksQ0FBQyxnQkFBZ0I7UUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDOztRQUN2RCxPQUFPLGdCQUFnQixDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBwYWxldHRlL21haW4vdHlwZXMvYW5hbG9nb3VzLmpzXG5cbmltcG9ydCB7XG5cdEdlblBhbGV0dGVBcmdzLFxuXHRIU0wsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9kYi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgc3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyB1aUZuIH0gZnJvbSAnLi4vLi4vLi4vdWkvaW5kZXguanMnO1xuXG5jb25zdCBjcmVhdGUgPSBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGU7XG5jb25zdCBnZW5IdWVzID0gcGFsZXR0ZVN1cGVyVXRpbHMuZ2VuSHVlcztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFuYWxvZ291cyhhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgYXQgbGVhc3QgMiBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyA8IDIpIHVpRm4uZW5mb3JjZVN3YXRjaFJ1bGVzKDIpO1xuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoYXJncy5jdXN0b21Db2xvciwgYXJncy5lbmFibGVBbHBoYSk7XG5cdGNvbnN0IGh1ZXMgPSBnZW5IdWVzLmFuYWxvZ291cyhiYXNlQ29sb3IsIGFyZ3Muc3dhdGNoZXMpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXTtcblxuXHRmb3IgKGNvbnN0IFtpLCBodWVdIG9mIGh1ZXMuZW50cmllcygpKSB7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZVV0aWxzLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmVVdGlscy5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDEwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmVVdGlscy5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIChpICUgMiA9PT0gMCA/IDUgOiAtNSlcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGFscGhhOiBhcmdzLmVuYWJsZUFscGhhXG5cdFx0XHRcdFx0PyBjb3JlVXRpbHMuYnJhbmQuYXNBbHBoYVJhbmdlKE1hdGgucmFuZG9tKCkpXG5cdFx0XHRcdFx0OiBjb3JlVXRpbHMuYnJhbmQuYXNBbHBoYVJhbmdlKDEpXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHRjb25zdCBwYWxldHRlSXRlbSA9IGF3YWl0IGNyZWF0ZS5wYWxldHRlSXRlbShcblx0XHRcdG5ld0NvbG9yLFxuXHRcdFx0YXJncy5lbmFibGVBbHBoYVxuXHRcdCk7XG5cblx0XHRwYWxldHRlSXRlbXMucHVzaChwYWxldHRlSXRlbSk7XG5cdH1cblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG5cdGNvbnN0IHBhbGV0dGVJRCA9IGF3YWl0IGlkYk1hbmFnZXIuZ2V0TmV4dFBhbGV0dGVJRCgpO1xuXG5cdGlmICghcGFsZXR0ZUlEKSB0aHJvdyBuZXcgRXJyb3IoJ1BhbGV0dGUgSUQgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXG5cdGNvbnN0IGFuYWxvZ291c1BhbGV0dGUgPSBhd2FpdCBpZGJNYW5hZ2VyLnNhdmVQYWxldHRlVG9EQihcblx0XHQnYW5hbG9nb3VzJyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0cGFsZXR0ZUlELFxuXHRcdGFyZ3Muc3dhdGNoZXMsXG5cdFx0YXJncy5lbmFibGVBbHBoYSxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIWFuYWxvZ291c1BhbGV0dGUpXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdBbmFsb2dvdXMgcGFsZXR0ZSBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0ZWxzZSByZXR1cm4gYW5hbG9nb3VzUGFsZXR0ZTtcbn1cbiJdfQ==