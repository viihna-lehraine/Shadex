// File: palette/main/types/tetradic.js
import { IDBManager } from '../../../app/db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const paletteRanges = consts.paletteRanges;
const core = commonFn.core;
const utils = commonFn.utils;
export async function tetradic(args) {
    // ensure exactly 4 swatches
    if (args.swatches !== 4)
        paletteHelpers.enforce.swatchRules(4, 4);
    // base color setup
    const baseColor = utils.random.hsl();
    // generate tetradic hues
    const tetradicHues = paletteSuperUtils.genHues.tetradic(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add the base color as the first palette item
    const basePaletteItem = await paletteSuperUtils.create.paletteItem(baseColor);
    paletteItems.push(basePaletteItem);
    // add the tetradic colors sequentially
    for (let index = 0; index < tetradicHues.length; index++) {
        const hue = tetradicHues[index];
        const adjustedHSL = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index % 2 === 0
                        ? -paletteRanges.shift.tetra.sat
                        : paletteRanges.shift.tetra.sat), 100))),
                lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index % 2 === 0
                        ? -paletteRanges.shift.tetra.light
                        : paletteRanges.shift.tetra.light), 100)))
            },
            format: 'hsl'
        };
        // generate all color values and create the palette item
        const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL)
            .hsl;
        const paletteItem = await paletteSuperUtils.create.paletteItem(adjustedColor);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = (await idbManager.getCurrentPaletteID()) + 1;
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const paletteArgs = {
        type: 'tetradic',
        items: paletteItems,
        paletteID,
        swatches: args.swatches,
        limitDark: args.limitDark,
        limitGray: args.limitGray,
        limitLight: args.limitLight
    };
    // save the palette to the database
    const tetradicPalette = await idbManager.savePaletteToDB(paletteArgs);
    // handle null or undefined palette
    if (!tetradicPalette) {
        throw new Error('Tetradic palette is either null or undefined.');
    }
    return tetradicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFkaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFsZXR0ZS9tYWluL3R5cGVzL3RldHJhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVDQUF1QztBQVN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUNOLE9BQU8sSUFBSSxjQUFjLEVBQ3pCLFVBQVUsSUFBSSxpQkFBaUIsRUFDL0IsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBRTNDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDM0IsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUU3QixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxJQUEyQjtJQUN6RCw0QkFBNEI7SUFDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUM7UUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFbEUsbUJBQW1CO0lBQ25CLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFckMseUJBQXlCO0lBQ3pCLE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQ3RELFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNuQixDQUFDO0lBRUYsaUNBQWlDO0lBQ2pDLE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7SUFFdkMsK0NBQStDO0lBQy9DLE1BQU0sZUFBZSxHQUNwQixNQUFNLGlCQUFp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dGUvbWFpbi90eXBlcy90ZXRyYWRpYy5qc1xuXG5pbXBvcnQge1xuXHRIU0wsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVBcmdzLFxuXHRQYWxldHRlR2VuZXJhdGlvbkFyZ3MsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9hcHAvZGIvSURCTWFuYWdlci5qcyc7XG5pbXBvcnQgeyBjb21tb25GbiB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb25zdHNEYXRhIGFzIGNvbnN0cyB9IGZyb20gJy4uLy4uLy4uL2RhdGEvY29uc3RzLmpzJztcbmltcG9ydCB7XG5cdGhlbHBlcnMgYXMgcGFsZXR0ZUhlbHBlcnMsXG5cdHN1cGVyVXRpbHMgYXMgcGFsZXR0ZVN1cGVyVXRpbHNcbn0gZnJvbSAnLi4vLi4vY29tbW9uL2luZGV4LmpzJztcblxuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGNvbnN0cy5wYWxldHRlUmFuZ2VzO1xuXG5jb25zdCBjb3JlID0gY29tbW9uRm4uY29yZTtcbmNvbnN0IHV0aWxzID0gY29tbW9uRm4udXRpbHM7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXRyYWRpYyhhcmdzOiBQYWxldHRlR2VuZXJhdGlvbkFyZ3MpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Ly8gZW5zdXJlIGV4YWN0bHkgNCBzd2F0Y2hlc1xuXHRpZiAoYXJncy5zd2F0Y2hlcyAhPT0gNCkgcGFsZXR0ZUhlbHBlcnMuZW5mb3JjZS5zd2F0Y2hSdWxlcyg0LCA0KTtcblxuXHQvLyBiYXNlIGNvbG9yIHNldHVwXG5cdGNvbnN0IGJhc2VDb2xvciA9IHV0aWxzLnJhbmRvbS5oc2woKTtcblxuXHQvLyBnZW5lcmF0ZSB0ZXRyYWRpYyBodWVzXG5cdGNvbnN0IHRldHJhZGljSHVlcyA9IHBhbGV0dGVTdXBlclV0aWxzLmdlbkh1ZXMudGV0cmFkaWMoXG5cdFx0YmFzZUNvbG9yLnZhbHVlLmh1ZVxuXHQpO1xuXG5cdC8vIGluaXRpYWxpemUgcGFsZXR0ZSBpdGVtcyBhcnJheVxuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXTtcblxuXHQvLyBhZGQgdGhlIGJhc2UgY29sb3IgYXMgdGhlIGZpcnN0IHBhbGV0dGUgaXRlbVxuXHRjb25zdCBiYXNlUGFsZXR0ZUl0ZW0gPVxuXHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IpO1xuXG5cdHBhbGV0dGVJdGVtcy5wdXNoKGJhc2VQYWxldHRlSXRlbSk7XG5cblx0Ly8gYWRkIHRoZSB0ZXRyYWRpYyBjb2xvcnMgc2VxdWVudGlhbGx5XG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0ZXRyYWRpY0h1ZXMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0Y29uc3QgaHVlID0gdGV0cmFkaWNIdWVzW2luZGV4XTtcblx0XHRjb25zdCBhZGp1c3RlZEhTTDogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ICUgMiA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy5zaGlmdC50ZXRyYS5zYXRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy5zaGlmdC50ZXRyYS5zYXQpLFxuXHRcdFx0XHRcdFx0XHQxMDBcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGxpZ2h0bmVzczogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCAlIDIgPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc2hpZnQudGV0cmEubGlnaHRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy5zaGlmdC50ZXRyYS5saWdodCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0Ly8gZ2VuZXJhdGUgYWxsIGNvbG9yIHZhbHVlcyBhbmQgY3JlYXRlIHRoZSBwYWxldHRlIGl0ZW1cblx0XHRjb25zdCBhZGp1c3RlZENvbG9yID0gdXRpbHMuY29udmVyc2lvbi5nZW5BbGxDb2xvclZhbHVlcyhhZGp1c3RlZEhTTClcblx0XHRcdC5oc2wgYXMgSFNMO1xuXHRcdGNvbnN0IHBhbGV0dGVJdGVtID1cblx0XHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShhZGp1c3RlZENvbG9yKTtcblx0XHRwYWxldHRlSXRlbXMucHVzaChwYWxldHRlSXRlbSk7XG5cdH1cblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRjb25zdCBwYWxldHRlSUQgPSAoYXdhaXQgaWRiTWFuYWdlci5nZXRDdXJyZW50UGFsZXR0ZUlEKCkpICsgMTtcblxuXHRpZiAoIXBhbGV0dGVJRCkgdGhyb3cgbmV3IEVycm9yKCdQYWxldHRlIElEIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHRjb25zdCBwYWxldHRlQXJnczogUGFsZXR0ZUFyZ3MgPSB7XG5cdFx0dHlwZTogJ3RldHJhZGljJyxcblx0XHRpdGVtczogcGFsZXR0ZUl0ZW1zLFxuXHRcdHBhbGV0dGVJRCxcblx0XHRzd2F0Y2hlczogYXJncy5zd2F0Y2hlcyxcblx0XHRsaW1pdERhcms6IGFyZ3MubGltaXREYXJrLFxuXHRcdGxpbWl0R3JheTogYXJncy5saW1pdEdyYXksXG5cdFx0bGltaXRMaWdodDogYXJncy5saW1pdExpZ2h0XG5cdH07XG5cblx0Ly8gc2F2ZSB0aGUgcGFsZXR0ZSB0byB0aGUgZGF0YWJhc2Vcblx0Y29uc3QgdGV0cmFkaWNQYWxldHRlID0gYXdhaXQgaWRiTWFuYWdlci5zYXZlUGFsZXR0ZVRvREIocGFsZXR0ZUFyZ3MpO1xuXG5cdC8vIGhhbmRsZSBudWxsIG9yIHVuZGVmaW5lZCBwYWxldHRlXG5cdGlmICghdGV0cmFkaWNQYWxldHRlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUZXRyYWRpYyBwYWxldHRlIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0fVxuXG5cdHJldHVybiB0ZXRyYWRpY1BhbGV0dGU7XG59XG4iXX0=