// File: palette/main/types/tetradic.js
import { IDBManager } from '../../../db/IDBManager.js';
import { coreUtils, utils } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { superUtils as paletteSuperUtils } from '../../common/index.js';
import { uiFn } from '../../../ui/index.js';
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
const paletteRanges = consts.paletteRanges;
export async function tetradic(args) {
    // ensure exactly 4 swatches
    if (args.swatches !== 4)
        uiFn.enforceSwatchRules(4, 4);
    // base color setup
    const baseColor = create.baseColor(args.customColor);
    // generate tetradic hues
    const tetradicHues = genHues.tetradic(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add the base color as the first palette item
    const basePaletteItem = await create.paletteItem(baseColor);
    paletteItems.push(basePaletteItem);
    // add the tetradic colors sequentially
    for (let index = 0; index < tetradicHues.length; index++) {
        const hue = tetradicHues[index];
        const adjustedHSL = {
            value: {
                hue: coreUtils.brand.asRadial(hue),
                saturation: coreUtils.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index % 2 === 0
                        ? -paletteRanges.shift.tetra.sat
                        : paletteRanges.shift.tetra.sat), 100))),
                lightness: coreUtils.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index % 2 === 0
                        ? -paletteRanges.shift.tetra.light
                        : paletteRanges.shift.tetra.light), 100)))
            },
            format: 'hsl'
        };
        // generate all color values and create the palette item
        const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL)
            .hsl;
        const paletteItem = await create.paletteItem(adjustedColor);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    // save the palette to the database
    const tetradicPalette = await idbManager.savePaletteToDB('tetradic', paletteItems, paletteID, args.swatches, args.limitDark, args.limitGray, args.limitLight);
    // handle null or undefined palette
    if (!tetradicPalette) {
        throw new Error('Tetradic palette is either null or undefined.');
    }
    return tetradicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFkaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFsZXR0ZS9tYWluL3R5cGVzL3RldHJhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVDQUF1QztBQVF2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsVUFBVSxJQUFJLE1BQU0sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLElBQUksaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFNUMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQ3hDLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztBQUMxQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBRTNDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsUUFBUSxDQUFDLElBQTJCO0lBQ3pELDRCQUE0QjtJQUM1QixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQztRQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFdkQsbUJBQW1CO0lBQ25CLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXJELHlCQUF5QjtJQUN6QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFM0QsaUNBQWlDO0lBQ2pDLE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7SUFFdkMsK0NBQStDO0lBQy9DLE1BQU0sZUFBZSxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU1RCxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRW5DLHVDQUF1QztJQUN2QyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQzFELE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxNQUFNLFdBQVcsR0FBUTtZQUN4QixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztnQkFDbEMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUN2QyxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVTtvQkFDekIsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUM7d0JBQ2YsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRzt3QkFDaEMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUNsQyxHQUFHLENBQ0gsQ0FDRCxDQUNEO2dCQUNELFNBQVMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FDdEMsSUFBSSxDQUFDLEdBQUcsQ0FDUCxDQUFDLEVBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVM7b0JBQ3hCLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDO3dCQUNmLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUs7d0JBQ2xDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFDcEMsR0FBRyxDQUNILENBQ0QsQ0FDRDthQUNEO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRUYsd0RBQXdEO1FBQ3hELE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDO2FBQ25FLEdBQVUsQ0FBQztRQUNiLE1BQU0sV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RCxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXRELElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBRTNFLG1DQUFtQztJQUNuQyxNQUFNLGVBQWUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxlQUFlLENBQ3ZELFVBQVUsRUFDVixZQUFZLEVBQ1osU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxVQUFVLENBQ2YsQ0FBQztJQUVGLG1DQUFtQztJQUNuQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxPQUFPLGVBQWUsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogcGFsZXR0ZS9tYWluL3R5cGVzL3RldHJhZGljLmpzXG5cbmltcG9ydCB7XG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUdlbmVyYXRpb25BcmdzLFxuXHRQYWxldHRlSXRlbVxufSBmcm9tICcuLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBJREJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vLi4vZGIvSURCTWFuYWdlci5qcyc7XG5pbXBvcnQgeyBjb3JlVXRpbHMsIHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnN0c0RhdGEgYXMgY29uc3RzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25zdHMuanMnO1xuaW1wb3J0IHsgc3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyB1aUZuIH0gZnJvbSAnLi4vLi4vLi4vdWkvaW5kZXguanMnO1xuXG5jb25zdCBjcmVhdGUgPSBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGU7XG5jb25zdCBnZW5IdWVzID0gcGFsZXR0ZVN1cGVyVXRpbHMuZ2VuSHVlcztcbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBjb25zdHMucGFsZXR0ZVJhbmdlcztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRldHJhZGljKGFyZ3M6IFBhbGV0dGVHZW5lcmF0aW9uQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgZXhhY3RseSA0IHN3YXRjaGVzXG5cdGlmIChhcmdzLnN3YXRjaGVzICE9PSA0KSB1aUZuLmVuZm9yY2VTd2F0Y2hSdWxlcyg0LCA0KTtcblxuXHQvLyBiYXNlIGNvbG9yIHNldHVwXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoYXJncy5jdXN0b21Db2xvcik7XG5cblx0Ly8gZ2VuZXJhdGUgdGV0cmFkaWMgaHVlc1xuXHRjb25zdCB0ZXRyYWRpY0h1ZXMgPSBnZW5IdWVzLnRldHJhZGljKGJhc2VDb2xvci52YWx1ZS5odWUpO1xuXG5cdC8vIGluaXRpYWxpemUgcGFsZXR0ZSBpdGVtcyBhcnJheVxuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXTtcblxuXHQvLyBhZGQgdGhlIGJhc2UgY29sb3IgYXMgdGhlIGZpcnN0IHBhbGV0dGUgaXRlbVxuXHRjb25zdCBiYXNlUGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oYmFzZUNvbG9yKTtcblxuXHRwYWxldHRlSXRlbXMucHVzaChiYXNlUGFsZXR0ZUl0ZW0pO1xuXG5cdC8vIGFkZCB0aGUgdGV0cmFkaWMgY29sb3JzIHNlcXVlbnRpYWxseVxuXHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGV0cmFkaWNIdWVzLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdGNvbnN0IGh1ZSA9IHRldHJhZGljSHVlc1tpbmRleF07XG5cdFx0Y29uc3QgYWRqdXN0ZWRIU0w6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZVV0aWxzLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmVVdGlscy5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggJSAyID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnNoaWZ0LnRldHJhLnNhdFxuXHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnNoaWZ0LnRldHJhLnNhdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlVXRpbHMuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggJSAyID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnNoaWZ0LnRldHJhLmxpZ2h0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMuc2hpZnQudGV0cmEubGlnaHQpLFxuXHRcdFx0XHRcdFx0XHQxMDBcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdClcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdC8vIGdlbmVyYXRlIGFsbCBjb2xvciB2YWx1ZXMgYW5kIGNyZWF0ZSB0aGUgcGFsZXR0ZSBpdGVtXG5cdFx0Y29uc3QgYWRqdXN0ZWRDb2xvciA9IHV0aWxzLmNvbnZlcnNpb24uZ2VuQWxsQ29sb3JWYWx1ZXMoYWRqdXN0ZWRIU0wpXG5cdFx0XHQuaHNsIGFzIEhTTDtcblx0XHRjb25zdCBwYWxldHRlSXRlbSA9IGF3YWl0IGNyZWF0ZS5wYWxldHRlSXRlbShhZGp1c3RlZENvbG9yKTtcblx0XHRwYWxldHRlSXRlbXMucHVzaChwYWxldHRlSXRlbSk7XG5cdH1cblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRjb25zdCBwYWxldHRlSUQgPSBhd2FpdCBpZGJNYW5hZ2VyLmdldE5leHRQYWxldHRlSUQoKTtcblxuXHRpZiAoIXBhbGV0dGVJRCkgdGhyb3cgbmV3IEVycm9yKCdQYWxldHRlIElEIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHQvLyBzYXZlIHRoZSBwYWxldHRlIHRvIHRoZSBkYXRhYmFzZVxuXHRjb25zdCB0ZXRyYWRpY1BhbGV0dGUgPSBhd2FpdCBpZGJNYW5hZ2VyLnNhdmVQYWxldHRlVG9EQihcblx0XHQndGV0cmFkaWMnLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRwYWxldHRlSUQsXG5cdFx0YXJncy5zd2F0Y2hlcyxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHQvLyBoYW5kbGUgbnVsbCBvciB1bmRlZmluZWQgcGFsZXR0ZVxuXHRpZiAoIXRldHJhZGljUGFsZXR0ZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignVGV0cmFkaWMgcGFsZXR0ZSBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cdH1cblxuXHRyZXR1cm4gdGV0cmFkaWNQYWxldHRlO1xufVxuIl19