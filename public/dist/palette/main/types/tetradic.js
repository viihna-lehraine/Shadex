// File: palette/main/types/tetradic.js
import { IDBManager } from '../../../db/IDBManager.js';
import { commonFn } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
const paletteRanges = consts.paletteRanges;
const core = commonFn.core;
const utils = commonFn.utils;
export async function tetradic(args) {
    // ensure exactly 4 swatches
    if (args.swatches !== 4)
        paletteHelpers.enforce.swatchRules(4, 4);
    // base color setup
    const baseColor = utils.random.hsl();
    // generate tetradic hues
    const tetradicHues = paletteSuperUtils.genHues.tetradic(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add the base color as the first palette item
    const basePaletteItem = await paletteSuperUtils.create.paletteItem(baseColor);
    paletteItems.push(basePaletteItem);
    // add the tetradic colors sequentially
    for (let index = 0; index < tetradicHues.length; index++) {
        const hue = tetradicHues[index];
        const adjustedHSL = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index % 2 === 0
                        ? -paletteRanges.shift.tetra.sat
                        : paletteRanges.shift.tetra.sat), 100))),
                lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index % 2 === 0
                        ? -paletteRanges.shift.tetra.light
                        : paletteRanges.shift.tetra.light), 100)))
            },
            format: 'hsl'
        };
        // generate all color values and create the palette item
        const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL)
            .hsl;
        const paletteItem = await paletteSuperUtils.create.paletteItem(adjustedColor);
        paletteItems.push(paletteItem);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    // save the palette to the database
    const tetradicPalette = await idbManager.savePaletteToDB('tetradic', paletteItems, paletteID, args.swatches, args.limitDark, args.limitGray, args.limitLight);
    // handle null or undefined palette
    if (!tetradicPalette) {
        throw new Error('Tetradic palette is either null or undefined.');
    }
    return tetradicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFkaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFsZXR0ZS9tYWluL3R5cGVzL3RldHJhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVDQUF1QztBQVF2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUNOLE9BQU8sSUFBSSxjQUFjLEVBQ3pCLFVBQVUsSUFBSSxpQkFBaUIsRUFDL0IsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBRTNDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDM0IsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUU3QixNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxJQUEyQjtJQUN6RCw0QkFBNEI7SUFDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUM7UUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFbEUsbUJBQW1CO0lBQ25CLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFckMseUJBQXlCO0lBQ3pCLE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQ3RELFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNuQixDQUFDO0lBRUYsaUNBQWlDO0lBQ2pDLE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7SUFFdkMsK0NBQStDO0lBQy9DLE1BQU0sZUFBZSxHQUNwQixNQUFNLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdkQsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUVuQyx1Q0FBdUM7SUFDdkMsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUMxRCxNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsTUFBTSxXQUFXLEdBQVE7WUFDeEIsS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7Z0JBQzdCLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FDUCxDQUFDLEVBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7b0JBQ3pCLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDO3dCQUNmLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUc7d0JBQ2hDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDbEMsR0FBRyxDQUNILENBQ0QsQ0FDRDtnQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQ2pDLElBQUksQ0FBQyxHQUFHLENBQ1AsQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQ1AsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTO29CQUN4QixDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQzt3QkFDZixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLO3dCQUNsQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQ3BDLEdBQUcsQ0FDSCxDQUNELENBQ0Q7YUFDRDtZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLHdEQUF3RDtRQUN4RCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQzthQUNuRSxHQUFVLENBQUM7UUFDYixNQUFNLFdBQVcsR0FDaEIsTUFBTSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNELFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEQsSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFFM0UsbUNBQW1DO0lBQ25DLE1BQU0sZUFBZSxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FDdkQsVUFBVSxFQUNWLFlBQVksRUFDWixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FDZixDQUFDO0lBRUYsbUNBQW1DO0lBQ25DLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELE9BQU8sZUFBZSxDQUFDO0FBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBwYWxldHRlL21haW4vdHlwZXMvdGV0cmFkaWMuanNcblxuaW1wb3J0IHtcblx0SFNMLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlR2VuZXJhdGlvbkFyZ3MsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9kYi9JREJNYW5hZ2VyLmpzJztcbmltcG9ydCB7IGNvbW1vbkZuIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnN0c0RhdGEgYXMgY29uc3RzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25zdHMuanMnO1xuaW1wb3J0IHtcblx0aGVscGVycyBhcyBwYWxldHRlSGVscGVycyxcblx0c3VwZXJVdGlscyBhcyBwYWxldHRlU3VwZXJVdGlsc1xufSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuXG5jb25zdCBwYWxldHRlUmFuZ2VzID0gY29uc3RzLnBhbGV0dGVSYW5nZXM7XG5cbmNvbnN0IGNvcmUgPSBjb21tb25Gbi5jb3JlO1xuY29uc3QgdXRpbHMgPSBjb21tb25Gbi51dGlscztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRldHJhZGljKGFyZ3M6IFBhbGV0dGVHZW5lcmF0aW9uQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgZXhhY3RseSA0IHN3YXRjaGVzXG5cdGlmIChhcmdzLnN3YXRjaGVzICE9PSA0KSBwYWxldHRlSGVscGVycy5lbmZvcmNlLnN3YXRjaFJ1bGVzKDQsIDQpO1xuXG5cdC8vIGJhc2UgY29sb3Igc2V0dXBcblx0Y29uc3QgYmFzZUNvbG9yID0gdXRpbHMucmFuZG9tLmhzbCgpO1xuXG5cdC8vIGdlbmVyYXRlIHRldHJhZGljIGh1ZXNcblx0Y29uc3QgdGV0cmFkaWNIdWVzID0gcGFsZXR0ZVN1cGVyVXRpbHMuZ2VuSHVlcy50ZXRyYWRpYyhcblx0XHRiYXNlQ29sb3IudmFsdWUuaHVlXG5cdCk7XG5cblx0Ly8gaW5pdGlhbGl6ZSBwYWxldHRlIGl0ZW1zIGFycmF5XG5cdGNvbnN0IHBhbGV0dGVJdGVtczogUGFsZXR0ZUl0ZW1bXSA9IFtdO1xuXG5cdC8vIGFkZCB0aGUgYmFzZSBjb2xvciBhcyB0aGUgZmlyc3QgcGFsZXR0ZSBpdGVtXG5cdGNvbnN0IGJhc2VQYWxldHRlSXRlbSA9XG5cdFx0YXdhaXQgcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvcik7XG5cblx0cGFsZXR0ZUl0ZW1zLnB1c2goYmFzZVBhbGV0dGVJdGVtKTtcblxuXHQvLyBhZGQgdGhlIHRldHJhZGljIGNvbG9ycyBzZXF1ZW50aWFsbHlcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRldHJhZGljSHVlcy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRjb25zdCBodWUgPSB0ZXRyYWRpY0h1ZXNbaW5kZXhdO1xuXHRcdGNvbnN0IGFkanVzdGVkSFNMOiBIU0wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IGNvcmUuYnJhbmQuYXNSYWRpYWwoaHVlKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggJSAyID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnNoaWZ0LnRldHJhLnNhdFxuXHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnNoaWZ0LnRldHJhLnNhdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ICUgMiA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy5zaGlmdC50ZXRyYS5saWdodFxuXHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnNoaWZ0LnRldHJhLmxpZ2h0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHQvLyBnZW5lcmF0ZSBhbGwgY29sb3IgdmFsdWVzIGFuZCBjcmVhdGUgdGhlIHBhbGV0dGUgaXRlbVxuXHRcdGNvbnN0IGFkanVzdGVkQ29sb3IgPSB1dGlscy5jb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKGFkanVzdGVkSFNMKVxuXHRcdFx0LmhzbCBhcyBIU0w7XG5cdFx0Y29uc3QgcGFsZXR0ZUl0ZW0gPVxuXHRcdFx0YXdhaXQgcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlLnBhbGV0dGVJdGVtKGFkanVzdGVkQ29sb3IpO1xuXHRcdHBhbGV0dGVJdGVtcy5wdXNoKHBhbGV0dGVJdGVtKTtcblx0fVxuXG5cdGNvbnN0IGlkYk1hbmFnZXIgPSBhd2FpdCBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdGNvbnN0IHBhbGV0dGVJRCA9IGF3YWl0IGlkYk1hbmFnZXIuZ2V0TmV4dFBhbGV0dGVJRCgpO1xuXG5cdGlmICghcGFsZXR0ZUlEKSB0aHJvdyBuZXcgRXJyb3IoJ1BhbGV0dGUgSUQgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXG5cdC8vIHNhdmUgdGhlIHBhbGV0dGUgdG8gdGhlIGRhdGFiYXNlXG5cdGNvbnN0IHRldHJhZGljUGFsZXR0ZSA9IGF3YWl0IGlkYk1hbmFnZXIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCd0ZXRyYWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdHBhbGV0dGVJRCxcblx0XHRhcmdzLnN3YXRjaGVzLFxuXHRcdGFyZ3MubGltaXREYXJrLFxuXHRcdGFyZ3MubGltaXRHcmF5LFxuXHRcdGFyZ3MubGltaXRMaWdodFxuXHQpO1xuXG5cdC8vIGhhbmRsZSBudWxsIG9yIHVuZGVmaW5lZCBwYWxldHRlXG5cdGlmICghdGV0cmFkaWNQYWxldHRlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUZXRyYWRpYyBwYWxldHRlIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0fVxuXG5cdHJldHVybiB0ZXRyYWRpY1BhbGV0dGU7XG59XG4iXX0=