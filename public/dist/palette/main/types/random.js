// File: paletteGen/palettes/types/random.js
import { IDBManager } from '../../../db/IDBManager.js';
import { helpers as paletteHelpers, superUtils as paletteSuperUtils } from '../../common/index.js';
import { commonFn } from '../../../common/index.js';
const utils = commonFn.utils;
export async function random(args) {
    const baseColor = utils.random.hsl();
    const paletteItems = [
        await paletteSuperUtils.create.paletteItem(baseColor)
    ];
    for (let i = 1; i < args.swatches; i++) {
        const randomColor = utils.random.hsl();
        const nextPaletteItem = await paletteSuperUtils.create.paletteItem(randomColor);
        paletteItems.push(nextPaletteItem);
        paletteHelpers.update.colorBox(randomColor, i);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const randomPalette = await idbManager.savePaletteToDB('random', paletteItems, paletteID, args.swatches, args.limitDark, args.limitGray, args.limitLight);
    if (!randomPalette)
        throw new Error('Random palette is either null or undefined.');
    else
        return randomPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBTzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQ04sT0FBTyxJQUFJLGNBQWMsRUFDekIsVUFBVSxJQUFJLGlCQUFpQixFQUMvQixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUFDLElBQTJCO0lBQ3ZELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLE1BQU0saUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7S0FDckQsQ0FBQztJQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QyxNQUFNLGVBQWUsR0FDcEIsTUFBTSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXpELFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFbkMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXRELElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sYUFBYSxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FDckQsUUFBUSxFQUNSLFlBQVksRUFDWixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FDZixDQUFDO0lBRUYsSUFBSSxDQUFDLGFBQWE7UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDOztRQUMzRCxPQUFPLGFBQWEsQ0FBQztBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogcGFsZXR0ZUdlbi9wYWxldHRlcy90eXBlcy9yYW5kb20uanNcblxuaW1wb3J0IHtcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUdlbmVyYXRpb25BcmdzLFxuXHRQYWxldHRlSXRlbVxufSBmcm9tICcuLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBJREJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vLi4vZGIvSURCTWFuYWdlci5qcyc7XG5pbXBvcnQge1xuXHRoZWxwZXJzIGFzIHBhbGV0dGVIZWxwZXJzLFxuXHRzdXBlclV0aWxzIGFzIHBhbGV0dGVTdXBlclV0aWxzXG59IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb21tb25GbiB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IHV0aWxzID0gY29tbW9uRm4udXRpbHM7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByYW5kb20oYXJnczogUGFsZXR0ZUdlbmVyYXRpb25BcmdzKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdGNvbnN0IGJhc2VDb2xvciA9IHV0aWxzLnJhbmRvbS5oc2woKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW1xuXHRcdGF3YWl0IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IpXG5cdF07XG5cblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLnN3YXRjaGVzOyBpKyspIHtcblx0XHRjb25zdCByYW5kb21Db2xvciA9IHV0aWxzLnJhbmRvbS5oc2woKTtcblx0XHRjb25zdCBuZXh0UGFsZXR0ZUl0ZW0gPVxuXHRcdFx0YXdhaXQgcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlLnBhbGV0dGVJdGVtKHJhbmRvbUNvbG9yKTtcblxuXHRcdHBhbGV0dGVJdGVtcy5wdXNoKG5leHRQYWxldHRlSXRlbSk7XG5cblx0XHRwYWxldHRlSGVscGVycy51cGRhdGUuY29sb3JCb3gocmFuZG9tQ29sb3IsIGkpO1xuXHR9XG5cblx0Y29uc3QgaWRiTWFuYWdlciA9IGF3YWl0IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0Y29uc3QgcGFsZXR0ZUlEID0gYXdhaXQgaWRiTWFuYWdlci5nZXROZXh0UGFsZXR0ZUlEKCk7XG5cblx0aWYgKCFwYWxldHRlSUQpIHRocm93IG5ldyBFcnJvcignUGFsZXR0ZSBJRCBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0Y29uc3QgcmFuZG9tUGFsZXR0ZSA9IGF3YWl0IGlkYk1hbmFnZXIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCdyYW5kb20nLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRwYWxldHRlSUQsXG5cdFx0YXJncy5zd2F0Y2hlcyxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIXJhbmRvbVBhbGV0dGUpXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdSYW5kb20gcGFsZXR0ZSBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cdGVsc2UgcmV0dXJuIHJhbmRvbVBhbGV0dGU7XG59XG4iXX0=