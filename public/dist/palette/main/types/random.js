// File: src/paletteGen/palettes/types/random.js
import { IDBManager } from '../../../db/index.js';
import { paletteHelpers, paletteSuperUtils } from '../../common/index.js';
import { utils } from '../../../common/index.js';
const create = paletteSuperUtils.create;
const update = paletteHelpers.update;
export async function random(args) {
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const paletteItems = [
        await create.paletteItem(baseColor, args.enableAlpha)
    ];
    for (let i = 1; i < args.swatches; i++) {
        const randomColor = utils.random.hsl(args.enableAlpha);
        const nextPaletteItem = await create.paletteItem(randomColor, args.enableAlpha);
        paletteItems.push(nextPaletteItem);
        update.colorBox(randomColor, i);
    }
    const idbManager = await IDBManager.getInstance();
    const paletteID = await idbManager.getNextPaletteID();
    if (!paletteID)
        throw new Error('Palette ID is either null or undefined.');
    const randomPalette = await idbManager.savePaletteToDB('random', paletteItems, paletteID, args.swatches, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!randomPalette)
        throw new Error('Random palette is either null or undefined.');
    else
        return randomPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBR2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWpELE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUFDLElBQW9CO0lBQ2hELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkUsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQztLQUNyRCxDQUFDO0lBRUYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN4QyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsTUFBTSxlQUFlLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUMvQyxXQUFXLEVBQ1gsSUFBSSxDQUFDLFdBQVcsQ0FDaEIsQ0FBQztRQUVGLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFbkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEQsSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFFM0UsTUFBTSxhQUFhLEdBQUcsTUFBTSxVQUFVLENBQUMsZUFBZSxDQUNyRCxRQUFRLEVBQ1IsWUFBWSxFQUNaLFNBQVMsRUFDVCxJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQUM7SUFFRixJQUFJLENBQUMsYUFBYTtRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7O1FBQzNELE9BQU8sYUFBYSxDQUFDO0FBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZUdlbi9wYWxldHRlcy90eXBlcy9yYW5kb20uanNcblxuaW1wb3J0IHsgR2VuUGFsZXR0ZUFyZ3MsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2RiL2luZGV4LmpzJztcbmltcG9ydCB7IHBhbGV0dGVIZWxwZXJzLCBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcbmNvbnN0IHVwZGF0ZSA9IHBhbGV0dGVIZWxwZXJzLnVwZGF0ZTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJhbmRvbShhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGFyZ3MuY3VzdG9tQ29sb3IsIGFyZ3MuZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXG5cdFx0YXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvciwgYXJncy5lbmFibGVBbHBoYSlcblx0XTtcblxuXHRmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3Muc3dhdGNoZXM7IGkrKykge1xuXHRcdGNvbnN0IHJhbmRvbUNvbG9yID0gdXRpbHMucmFuZG9tLmhzbChhcmdzLmVuYWJsZUFscGhhKTtcblx0XHRjb25zdCBuZXh0UGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0XHRyYW5kb21Db2xvcixcblx0XHRcdGFyZ3MuZW5hYmxlQWxwaGFcblx0XHQpO1xuXG5cdFx0cGFsZXR0ZUl0ZW1zLnB1c2gobmV4dFBhbGV0dGVJdGVtKTtcblxuXHRcdHVwZGF0ZS5jb2xvckJveChyYW5kb21Db2xvciwgaSk7XG5cdH1cblxuXHRjb25zdCBpZGJNYW5hZ2VyID0gYXdhaXQgSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRjb25zdCBwYWxldHRlSUQgPSBhd2FpdCBpZGJNYW5hZ2VyLmdldE5leHRQYWxldHRlSUQoKTtcblxuXHRpZiAoIXBhbGV0dGVJRCkgdGhyb3cgbmV3IEVycm9yKCdQYWxldHRlIElEIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHRjb25zdCByYW5kb21QYWxldHRlID0gYXdhaXQgaWRiTWFuYWdlci5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J3JhbmRvbScsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdHBhbGV0dGVJRCxcblx0XHRhcmdzLnN3YXRjaGVzLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGEsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0aWYgKCFyYW5kb21QYWxldHRlKVxuXHRcdHRocm93IG5ldyBFcnJvcignUmFuZG9tIHBhbGV0dGUgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXHRlbHNlIHJldHVybiByYW5kb21QYWxldHRlO1xufVxuIl19