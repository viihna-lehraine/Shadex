// File: paelette/common/utils/probability.js
import { constsData as consts } from '../../../data/consts.js';
import { createLogger } from '../../../logger/index.js';
import { modeData as mode } from '../../../data/mode.js';
const logMode = mode.logging;
const probabilities = consts.probabilities;
const thisModule = 'common/utils/probabilities.js';
const logger = await createLogger();
function getWeightedRandomInterval() {
    const thisFunction = 'getWeightedRandomInterval()';
    try {
        const weights = probabilities.weights;
        const probabilityValues = probabilities.values;
        const cumulativeProbabilities = probabilityValues.reduce((acc, prob, i) => {
            acc[i] = (acc[i - 1] || 0) + prob;
            return acc;
        }, []);
        const random = Math.random();
        for (let i = 0; i < cumulativeProbabilities.length; i++) {
            if (random < cumulativeProbabilities[i])
                return weights[i];
        }
        return weights[weights.length - 1];
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating weighted random interval: ${error}`, `${thisModule} > ${thisFunction}`);
        return 50;
    }
}
export const probability = {
    getWeightedRandomInterval
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvYmFiaWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFsZXR0ZS9jb21tb24vdXRpbHMvcHJvYmFiaWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkNBQTZDO0FBRTdDLE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM3QixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBRTNDLE1BQU0sVUFBVSxHQUFHLCtCQUErQixDQUFDO0FBRW5ELE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsU0FBUyx5QkFBeUI7SUFDakMsTUFBTSxZQUFZLEdBQUcsNkJBQTZCLENBQUM7SUFFbkQsSUFBSSxDQUFDO1FBQ0osTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUN0QyxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFDL0MsTUFBTSx1QkFBdUIsR0FBYSxpQkFBaUIsQ0FBQyxNQUFNLENBQ2pFLENBQUMsR0FBYSxFQUFFLElBQVksRUFBRSxDQUFTLEVBQUUsRUFBRTtZQUMxQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUVsQyxPQUFPLEdBQUcsQ0FBQztRQUNaLENBQUMsRUFDRCxFQUFFLENBQ0YsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUU3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsdUJBQXVCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDekQsSUFBSSxNQUFNLEdBQUcsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO2dCQUFFLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FDWCw4Q0FBOEMsS0FBSyxFQUFFLEVBQ3JELEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO1FBRUgsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRztJQUMxQix5QkFBeUI7Q0FDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHBhZWxldHRlL2NvbW1vbi91dGlscy9wcm9iYWJpbGl0eS5qc1xuXG5pbXBvcnQgeyBjb25zdHNEYXRhIGFzIGNvbnN0cyB9IGZyb20gJy4uLy4uLy4uL2RhdGEvY29uc3RzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uLy4uL2xvZ2dlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBtb2RlRGF0YSBhcyBtb2RlIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9tb2RlLmpzJztcblxuY29uc3QgbG9nTW9kZSA9IG1vZGUubG9nZ2luZztcbmNvbnN0IHByb2JhYmlsaXRpZXMgPSBjb25zdHMucHJvYmFiaWxpdGllcztcblxuY29uc3QgdGhpc01vZHVsZSA9ICdjb21tb24vdXRpbHMvcHJvYmFiaWxpdGllcy5qcyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5mdW5jdGlvbiBnZXRXZWlnaHRlZFJhbmRvbUludGVydmFsKCk6IG51bWJlciB7XG5cdGNvbnN0IHRoaXNGdW5jdGlvbiA9ICdnZXRXZWlnaHRlZFJhbmRvbUludGVydmFsKCknO1xuXG5cdHRyeSB7XG5cdFx0Y29uc3Qgd2VpZ2h0cyA9IHByb2JhYmlsaXRpZXMud2VpZ2h0cztcblx0XHRjb25zdCBwcm9iYWJpbGl0eVZhbHVlcyA9IHByb2JhYmlsaXRpZXMudmFsdWVzO1xuXHRcdGNvbnN0IGN1bXVsYXRpdmVQcm9iYWJpbGl0aWVzOiBudW1iZXJbXSA9IHByb2JhYmlsaXR5VmFsdWVzLnJlZHVjZShcblx0XHRcdChhY2M6IG51bWJlcltdLCBwcm9iOiBudW1iZXIsIGk6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRhY2NbaV0gPSAoYWNjW2kgLSAxXSB8fCAwKSArIHByb2I7XG5cblx0XHRcdFx0cmV0dXJuIGFjYztcblx0XHRcdH0sXG5cdFx0XHRbXVxuXHRcdCk7XG5cdFx0Y29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY3VtdWxhdGl2ZVByb2JhYmlsaXRpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChyYW5kb20gPCBjdW11bGF0aXZlUHJvYmFiaWxpdGllc1tpXSkgcmV0dXJuIHdlaWdodHNbaV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdlaWdodHNbd2VpZ2h0cy5sZW5ndGggLSAxXTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcilcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVycm9yIGdlbmVyYXRpbmcgd2VpZ2h0ZWQgcmFuZG9tIGludGVydmFsOiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdHJldHVybiA1MDtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgcHJvYmFiaWxpdHkgPSB7XG5cdGdldFdlaWdodGVkUmFuZG9tSW50ZXJ2YWxcbn0gYXMgY29uc3Q7XG4iXX0=