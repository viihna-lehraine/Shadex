// File: src/palette/common/paletteSuperUtils/create.js
import { convert, core, utils } from '../../../common/index.js';
import { paletteHelpers } from '../paletteHelpers/index.js';
const limits = paletteHelpers.limits;
const update = paletteHelpers.update;
const hslTo = convert.hslTo;
function baseColor(customColor, enableAlpha) {
    const color = core.base.clone(customColor ?? utils.random.hsl(enableAlpha));
    return color;
}
async function paletteItem(color, enableAlpha) {
    const clonedColor = core.base.clone(color);
    clonedColor.value.alpha = enableAlpha
        ? core.brand.asAlphaRange(Math.random())
        : core.brand.asAlphaRange(1);
    return {
        colors: {
            cmyk: hslTo(clonedColor, 'cmyk').value,
            hex: hslTo(clonedColor, 'hex').value,
            hsl: clonedColor.value,
            hsv: hslTo(clonedColor, 'hsv').value,
            lab: hslTo(clonedColor, 'lab').value,
            rgb: hslTo(clonedColor, 'rgb').value,
            xyz: hslTo(clonedColor, 'xyz').value
        },
        colorStrings: {
            cmykString: utils.color.colorToColorString(hslTo(clonedColor, 'cmyk')).value,
            hexString: utils.color.colorToColorString(hslTo(clonedColor, 'hex')).value,
            hslString: utils.color.colorToColorString(clonedColor).value,
            hsvString: utils.color.colorToColorString(hslTo(clonedColor, 'hsv')).value,
            labString: utils.color.colorToColorString(hslTo(clonedColor, 'lab')).value,
            rgbString: utils.color.colorToColorString(hslTo(clonedColor, 'rgb')).value,
            xyzString: utils.color.colorToColorString(hslTo(clonedColor, 'xyz')).value
        },
        cssStrings: {
            cmykCSSString: await core.convert.colorToCSSColorString(hslTo(clonedColor, 'cmyk')),
            hexCSSString: await core.convert.colorToCSSColorString(hslTo(clonedColor, 'hex')),
            hslCSSString: await core.convert.colorToCSSColorString(clonedColor),
            hsvCSSString: await core.convert.colorToCSSColorString(hslTo(clonedColor, 'hsv')),
            labCSSString: await core.convert.colorToCSSColorString(hslTo(clonedColor, 'lab')),
            rgbCSSString: await core.convert.colorToCSSColorString(hslTo(clonedColor, 'rgb')),
            xyzCSSString: await core.convert.colorToCSSColorString(hslTo(clonedColor, 'xyz'))
        }
    };
}
async function paletteItemArray(baseColor, hues, enableAlpha, limitDark, limitGray, limitLight) {
    const paletteItems = [
        await paletteItem(baseColor, enableAlpha)
    ];
    for (const [i, hue] of hues.entries()) {
        let newColor = null;
        do {
            const sl = utils.random.sl(enableAlpha);
            newColor = utils.conversion.genAllColorValues({
                value: {
                    hue: core.brand.asRadial(hue),
                    ...sl.value
                },
                format: 'hsl'
            }).hsl;
        } while (newColor &&
            ((limitGray && limits.isTooGray(newColor)) ||
                (limitDark && limits.isTooDark(newColor)) ||
                (limitLight && limits.isTooLight(newColor))));
        if (newColor) {
            const newPaletteItem = await paletteItem(newColor, enableAlpha);
            paletteItems.push(newPaletteItem);
            update.colorBox(newColor, i + 1);
        }
    }
    return paletteItems;
}
export const create = {
    baseColor,
    paletteItem,
    paletteItemArray
};
//# sourceMappingURL=data:application/json;base64,