// File: palette/common/helpers/limits.js
import { coreUtils } from '../../../common/index.js';
import { constsData as consts } from '../../../data/consts.js';
import { createLogger } from '../../../logger/index.js';
import { modeData as mode } from '../../../data/mode.js';
const logMode = mode.logging;
const thisModule = 'palette/common/helpers/limits.js';
const logger = await createLogger();
function isColorInBounds(hsl) {
    const thisFunction = 'paletteHelpers > limits > isColorInBounds()';
    if (!coreUtils.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isColorInBounds: Invalid HSL value ${JSON.stringify(hsl)}`, `${thisModule} > ${thisFunction}`);
        return false;
    }
    return isTooDark(hsl) || isTooGray(hsl) || isTooLight(hsl);
}
function isTooDark(hsl) {
    const thisFunction = 'isTooDark()';
    if (!coreUtils.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isTooDark: Invalid HSL value ${JSON.stringify(hsl)}`, `${thisModule} > ${thisFunction}`);
        return false;
    }
    return coreUtils.base.clone(hsl).value.lightness < consts.thresholds.dark;
}
function isTooGray(hsl) {
    const thisFunction = 'isTooGray()';
    if (!coreUtils.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isTooGray: Invalid HSL value ${JSON.stringify(hsl)}`, `${thisModule} > ${thisFunction}`);
        return false;
    }
    return coreUtils.base.clone(hsl).value.saturation < consts.thresholds.gray;
}
function isTooLight(hsl) {
    const thisFunction = 'isTooLight()';
    if (!coreUtils.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isTooLight: Invalid HSL value ${JSON.stringify(hsl)}`, `${thisModule} > ${thisFunction}`);
        return false;
    }
    return coreUtils.base.clone(hsl).value.lightness > consts.thresholds.light;
}
export const limits = {
    isColorInBounds,
    isTooDark,
    isTooGray,
    isTooLight
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvY29tbW9uL2hlbHBlcnMvbGltaXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUd6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsSUFBSSxJQUFJLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzdCLE1BQU0sVUFBVSxHQUFHLGtDQUFrQyxDQUFDO0FBRXRELE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsU0FBUyxlQUFlLENBQUMsR0FBUTtJQUNoQyxNQUFNLFlBQVksR0FBRyw2Q0FBNkMsQ0FBQztJQUVuRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMxQyxJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsc0NBQXNDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFDM0QsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFRO0lBQzFCLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQztJQUVuQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMxQyxJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsZ0NBQWdDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFDckQsR0FBRyxVQUFVLE1BQU0sWUFBWSxFQUFFLENBQ2pDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDM0UsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQVE7SUFDMUIsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDO0lBRW5DLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzFDLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxnQ0FBZ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUNyRCxHQUFHLFVBQVUsTUFBTSxZQUFZLEVBQUUsQ0FDakMsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztBQUM1RSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBUTtJQUMzQixNQUFNLFlBQVksR0FBRyxjQUFjLENBQUM7SUFFcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDMUMsSUFBSSxPQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLGlDQUFpQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQ3RELEdBQUcsVUFBVSxNQUFNLFlBQVksRUFBRSxDQUNqQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0FBQzVFLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDckIsZUFBZTtJQUNmLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtDQUNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBwYWxldHRlL2NvbW1vbi9oZWxwZXJzL2xpbWl0cy5qc1xuXG5pbXBvcnQgeyBIU0wgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgY29uc3RzRGF0YSBhcyBjb25zdHMgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2NvbnN0cy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi8uLi9sb2dnZXIvaW5kZXguanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5jb25zdCB0aGlzTW9kdWxlID0gJ3BhbGV0dGUvY29tbW9uL2hlbHBlcnMvbGltaXRzLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmZ1bmN0aW9uIGlzQ29sb3JJbkJvdW5kcyhoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRjb25zdCB0aGlzRnVuY3Rpb24gPSAncGFsZXR0ZUhlbHBlcnMgPiBsaW1pdHMgPiBpc0NvbG9ySW5Cb3VuZHMoKSc7XG5cblx0aWYgKCFjb3JlVXRpbHMudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgaXNDb2xvckluQm91bmRzOiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGlzVG9vRGFyayhoc2wpIHx8IGlzVG9vR3JheShoc2wpIHx8IGlzVG9vTGlnaHQoaHNsKTtcbn1cblxuZnVuY3Rpb24gaXNUb29EYXJrKGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGNvbnN0IHRoaXNGdW5jdGlvbiA9ICdpc1Rvb0RhcmsoKSc7XG5cblx0aWYgKCFjb3JlVXRpbHMudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgaXNUb29EYXJrOiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmVVdGlscy5iYXNlLmNsb25lKGhzbCkudmFsdWUubGlnaHRuZXNzIDwgY29uc3RzLnRocmVzaG9sZHMuZGFyaztcbn1cblxuZnVuY3Rpb24gaXNUb29HcmF5KGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGNvbnN0IHRoaXNGdW5jdGlvbiA9ICdpc1Rvb0dyYXkoKSc7XG5cblx0aWYgKCFjb3JlVXRpbHMudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgaXNUb29HcmF5OiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNGdW5jdGlvbn1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmVVdGlscy5iYXNlLmNsb25lKGhzbCkudmFsdWUuc2F0dXJhdGlvbiA8IGNvbnN0cy50aHJlc2hvbGRzLmdyYXk7XG59XG5cbmZ1bmN0aW9uIGlzVG9vTGlnaHQoaHNsOiBIU0wpOiBib29sZWFuIHtcblx0Y29uc3QgdGhpc0Z1bmN0aW9uID0gJ2lzVG9vTGlnaHQoKSc7XG5cblx0aWYgKCFjb3JlVXRpbHMudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgaXNUb29MaWdodDogSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzRnVuY3Rpb259YFxuXHRcdFx0KTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBjb3JlVXRpbHMuYmFzZS5jbG9uZShoc2wpLnZhbHVlLmxpZ2h0bmVzcyA+IGNvbnN0cy50aHJlc2hvbGRzLmxpZ2h0O1xufVxuXG5leHBvcnQgY29uc3QgbGltaXRzID0ge1xuXHRpc0NvbG9ySW5Cb3VuZHMsXG5cdGlzVG9vRGFyayxcblx0aXNUb29HcmF5LFxuXHRpc1Rvb0xpZ2h0XG59IGFzIGNvbnN0O1xuIl19