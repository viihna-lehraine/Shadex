// File: src/palette/common/paletteHelpers/limits.js
import { core } from '../../../common/index.js';
import { consts, mode } from '../../../common/data/base.js';
import { createLogger } from '../../../logger/index.js';
const logger = await createLogger();
const logMode = mode.logging;
function isColorInBounds(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isColorInBounds: Invalid HSL value ${JSON.stringify(hsl)}`, 'paletteHelpers > limits > isColorInBounds()');
        return false;
    }
    return isTooDark(hsl) || isTooGray(hsl) || isTooLight(hsl);
}
function isTooDark(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isTooDark: Invalid HSL value ${JSON.stringify(hsl)}`, 'paletteHelpers > limits > isTooDark()');
        return false;
    }
    return core.base.clone(hsl).value.lightness < consts.thresholds.dark;
}
function isTooGray(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isTooGray: Invalid HSL value ${JSON.stringify(hsl)}`, 'paletteHelpers > limits > isTooGray()');
        return false;
    }
    return core.base.clone(hsl).value.saturation < consts.thresholds.gray;
}
function isTooLight(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.error)
            logger.error(`isTooLight: Invalid HSL value ${JSON.stringify(hsl)}`, 'paletteHelpers > limits > isTooLight()');
        return false;
    }
    return core.base.clone(hsl).value.lightness > consts.thresholds.light;
}
export const limits = {
    isColorInBounds,
    isTooDark,
    isTooGray,
    isTooLight
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvY29tbW9uL3BhbGV0dGVIZWxwZXJzL2xpbWl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvREFBb0Q7QUFHcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXhELE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUU3QixTQUFTLGVBQWUsQ0FBQyxHQUFRO0lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxzQ0FBc0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUMzRCw2Q0FBNkMsQ0FDN0MsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQVE7SUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDckMsSUFBSSxPQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLGdDQUFnQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQ3JELHVDQUF1QyxDQUN2QyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQ3RFLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFRO0lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxnQ0FBZ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUNyRCx1Q0FBdUMsQ0FDdkMsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztBQUN2RSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBUTtJQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNyQyxJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsaUNBQWlDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFDdEQsd0NBQXdDLENBQ3hDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFDdkUsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNyQixlQUFlO0lBQ2YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0NBQ0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL2NvbW1vbi9wYWxldHRlSGVscGVycy9saW1pdHMuanNcblxuaW1wb3J0IHsgSFNMIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgY29yZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb25zdHMsIG1vZGUgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZGF0YS9iYXNlLmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uLy4uL2xvZ2dlci9pbmRleC5qcyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5mdW5jdGlvbiBpc0NvbG9ySW5Cb3VuZHMoaHNsOiBIU0wpOiBib29sZWFuIHtcblx0aWYgKCFjb3JlLnZhbGlkYXRlLmNvbG9yVmFsdWVzKGhzbCkpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcilcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YGlzQ29sb3JJbkJvdW5kczogSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWAsXG5cdFx0XHRcdCdwYWxldHRlSGVscGVycyA+IGxpbWl0cyA+IGlzQ29sb3JJbkJvdW5kcygpJ1xuXHRcdFx0KTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBpc1Rvb0RhcmsoaHNsKSB8fCBpc1Rvb0dyYXkoaHNsKSB8fCBpc1Rvb0xpZ2h0KGhzbCk7XG59XG5cbmZ1bmN0aW9uIGlzVG9vRGFyayhoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgaXNUb29EYXJrOiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCxcblx0XHRcdFx0J3BhbGV0dGVIZWxwZXJzID4gbGltaXRzID4gaXNUb29EYXJrKCknXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuYmFzZS5jbG9uZShoc2wpLnZhbHVlLmxpZ2h0bmVzcyA8IGNvbnN0cy50aHJlc2hvbGRzLmRhcms7XG59XG5cbmZ1bmN0aW9uIGlzVG9vR3JheShoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgaXNUb29HcmF5OiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCxcblx0XHRcdFx0J3BhbGV0dGVIZWxwZXJzID4gbGltaXRzID4gaXNUb29HcmF5KCknXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuYmFzZS5jbG9uZShoc2wpLnZhbHVlLnNhdHVyYXRpb24gPCBjb25zdHMudGhyZXNob2xkcy5ncmF5O1xufVxuXG5mdW5jdGlvbiBpc1Rvb0xpZ2h0KGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29yZS52YWxpZGF0ZS5jb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBpc1Rvb0xpZ2h0OiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCxcblx0XHRcdFx0J3BhbGV0dGVIZWxwZXJzID4gbGltaXRzID4gaXNUb29MaWdodCgpJ1xuXHRcdFx0KTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBjb3JlLmJhc2UuY2xvbmUoaHNsKS52YWx1ZS5saWdodG5lc3MgPiBjb25zdHMudGhyZXNob2xkcy5saWdodDtcbn1cblxuZXhwb3J0IGNvbnN0IGxpbWl0cyA9IHtcblx0aXNDb2xvckluQm91bmRzLFxuXHRpc1Rvb0RhcmssXG5cdGlzVG9vR3JheSxcblx0aXNUb29MaWdodFxufSBhcyBjb25zdDtcbiJdfQ==