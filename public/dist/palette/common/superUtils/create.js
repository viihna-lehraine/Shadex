// File: palette/common/superUtils/create.js
import { coreConversionUtils, coreUtils, utils } from '../../../common/index.js';
import { helpers as paletteHelpers } from '../helpers/index.js';
const limits = paletteHelpers.limits;
const update = paletteHelpers.update;
const hslTo = coreConversionUtils.hslTo;
function baseColor(customColor) {
    const color = coreUtils.base.clone(customColor);
    return color;
}
async function paletteItem(color) {
    const clonedColor = coreUtils.base.clone(color);
    return {
        colors: {
            main: {
                cmyk: hslTo(clonedColor, 'cmyk').value,
                hex: hslTo(clonedColor, 'hex').value,
                hsl: clonedColor.value,
                hsv: hslTo(clonedColor, 'hsv').value,
                lab: hslTo(clonedColor, 'lab').value,
                rgb: hslTo(clonedColor, 'rgb').value,
                xyz: hslTo(clonedColor, 'xyz').value
            },
            stringProps: {
                cmyk: utils.color.colorToColorString(hslTo(clonedColor, 'cmyk')).value,
                hex: utils.color.colorToColorString(hslTo(clonedColor, 'hex')).value,
                hsl: utils.color.colorToColorString(clonedColor).value,
                hsv: utils.color.colorToColorString(hslTo(clonedColor, 'hsv')).value,
                lab: utils.color.colorToColorString(hslTo(clonedColor, 'lab')).value,
                rgb: utils.color.colorToColorString(hslTo(clonedColor, 'rgb')).value,
                xyz: utils.color.colorToColorString(hslTo(clonedColor, 'xyz')).value
            },
            css: {
                cmyk: await coreUtils.convert.colorToCSSColorString(hslTo(clonedColor, 'cmyk')),
                hex: await coreUtils.convert.colorToCSSColorString(hslTo(clonedColor, 'hex')),
                hsl: await coreUtils.convert.colorToCSSColorString(clonedColor),
                hsv: await coreUtils.convert.colorToCSSColorString(hslTo(clonedColor, 'hsv')),
                lab: await coreUtils.convert.colorToCSSColorString(hslTo(clonedColor, 'lab')),
                rgb: await coreUtils.convert.colorToCSSColorString(hslTo(clonedColor, 'rgb')),
                xyz: await coreUtils.convert.colorToCSSColorString(hslTo(clonedColor, 'xyz'))
            }
        }
    };
}
async function paletteItemArray(baseColor, hues, limitDark, limitGray, limitLight) {
    const paletteItems = [await paletteItem(baseColor)];
    for (const [i, hue] of hues.entries()) {
        let newColor = null;
        do {
            const sl = utils.random.sl();
            newColor = utils.conversion.genAllColorValues({
                value: {
                    hue: coreUtils.brand.asRadial(hue),
                    ...sl.value
                },
                format: 'hsl'
            }).hsl;
        } while (newColor &&
            ((limitGray && limits.isTooGray(newColor)) ||
                (limitDark && limits.isTooDark(newColor)) ||
                (limitLight && limits.isTooLight(newColor))));
        if (newColor) {
            const newPaletteItem = await paletteItem(newColor);
            paletteItems.push(newPaletteItem);
            update.colorBox(newColor, i + 1);
        }
    }
    return paletteItems;
}
export const create = {
    baseColor,
    paletteItem,
    paletteItemArray
};
//# sourceMappingURL=data:application/json;base64,