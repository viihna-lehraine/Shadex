// File: palette/common/superUtils/genHues.js
import { coreUtils, utils } from '../../../common/index.js';
import { createLogger } from '../../../logger/index.js';
import { modeData as mode } from '../../../data/mode.js';
import { utils as paletteUtils } from '../utils/index.js';
const logMode = mode.logging;
const thisModule = 'palette/common/superUtils/genHues.js';
const logger = await createLogger();
const genAllColorValues = utils.conversion.genAllColorValues;
const getWeightedRandomInterval = paletteUtils.probability.getWeightedRandomInterval;
const validateColorValues = coreUtils.validate.colorValues;
function analogous(color, numBoxes) {
    const thisFunction = 'analogous()';
    try {
        if (!validateColorValues(color)) {
            if (logMode.error)
                logger.error(`Invalid color value ${JSON.stringify(color)}`, `${thisModule} > ${thisFunction}`);
            return [];
        }
        const clonedColor = coreUtils.base.clone(color);
        const analogousHues = [];
        const baseHue = clonedColor.value.hue;
        const maxTotalDistance = 60;
        const minTotalDistance = Math.max(20, 10 + (numBoxes - 2) * 12);
        const totalIncrement = Math.floor(Math.random() * (maxTotalDistance - minTotalDistance + 1)) + minTotalDistance;
        const increment = Math.floor(totalIncrement / (numBoxes - 1));
        for (let i = 1; i < numBoxes; i++) {
            analogousHues.push((baseHue + increment * i) % 360);
        }
        return analogousHues;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating analogous hues: ${error}`, `${thisModule} > ${thisFunction}`);
        return [];
    }
}
function diadic(baseHue) {
    const thisFunction = 'diadic()';
    try {
        const clonedBaseHue = coreUtils.base.clone(baseHue);
        const diadicHues = [];
        const randomDistance = getWeightedRandomInterval();
        const hue1 = clonedBaseHue;
        const hue2 = (hue1 + randomDistance) % 360;
        diadicHues.push(hue1, hue2);
        return diadicHues;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating diadic hues: ${error}`, `${thisModule} > ${thisFunction}`);
        return [];
    }
}
function hexadic(color) {
    const thisFunction = 'hexadic()';
    try {
        const clonedColor = coreUtils.base.clone(color);
        if (!validateColorValues(clonedColor)) {
            if (logMode.error)
                logger.error(`Invalid color value ${JSON.stringify(clonedColor)}`, `${thisModule} > ${thisFunction}`);
            return [];
        }
        const clonedBaseHSL = genAllColorValues(clonedColor).hsl;
        if (!clonedBaseHSL) {
            if (!mode.gracefulErrors)
                throw new Error('Unable to generate hexadic hues - missing HSL values');
            else if (logMode.error)
                logger.error('Unable to generate hexadic hues - missing HSL values', `${thisModule} > ${thisFunction}`);
            else if (!mode.quiet && logMode.verbosity > 0)
                logger.error('Error generating hexadic hues', `${thisModule} > ${thisFunction}`);
            return [];
        }
        const hexadicHues = [];
        const baseHue = clonedBaseHSL.value.hue;
        const hue1 = baseHue;
        const hue2 = (hue1 + 180) % 360;
        const randomDistance = Math.floor(Math.random() * 61 + 30);
        const hue3 = (hue1 + randomDistance) % 360;
        const hue4 = (hue3 + 180) % 360;
        const hue5 = (hue1 + 360 - randomDistance) % 360;
        const hue6 = (hue5 + 180) % 360;
        hexadicHues.push(hue1, hue2, hue3, hue4, hue5, hue6);
        return hexadicHues;
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating hexadic hues: ${error}`, `${thisModule} > ${thisFunction}`);
        return [];
    }
}
function splitComplementary(baseHue) {
    const thisFunction = 'splitComplementary()';
    try {
        const clonedBaseHue = coreUtils.base.clone(baseHue);
        const modifier = Math.floor(Math.random() * 11) + 20;
        return [
            (clonedBaseHue + 180 + modifier) % 360,
            (clonedBaseHue + 180 - modifier + 360) % 360
        ];
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating split complementary hues: ${error}`, `${thisModule} > ${thisFunction}`);
        return [];
    }
}
function tetradic(baseHue) {
    const thisFunction = 'tetradic()';
    try {
        const clonedBaseHue = coreUtils.base.clone(baseHue);
        const randomOffset = Math.floor(Math.random() * 46) + 20;
        const distance = 90 + (Math.random() < 0.5 ? -randomOffset : randomOffset);
        return [
            clonedBaseHue,
            (clonedBaseHue + 180) % 360,
            (clonedBaseHue + distance) % 360,
            (clonedBaseHue + distance + 180) % 360
        ];
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating tetradic hues: ${error}`, `${thisModule} > ${thisFunction}`);
        return [];
    }
}
function triadic(baseHue) {
    const thisFunction = 'triadic()';
    try {
        const clonedBaseHue = coreUtils.base.clone(baseHue);
        return [120, 240].map(increment => (clonedBaseHue + increment) % 360);
    }
    catch (error) {
        if (logMode.error)
            logger.error(`Error generating triadic hues: ${error}`, `${thisModule} > ${thisFunction}`);
        return [];
    }
}
export const genHues = {
    analogous,
    diadic,
    hexadic,
    splitComplementary,
    tetradic,
    triadic
};
//# sourceMappingURL=data:application/json;base64,