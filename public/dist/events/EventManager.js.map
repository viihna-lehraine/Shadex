{"version":3,"file":"EventManager.js","sources":["../../../../src/events/EventManager.ts"],"sourcesContent":["// File: events/EventManager.js\n\nexport class EventManager {\n\tprivate static instance: EventManager | null = null;\n\tprivate static listeners: Map<\n\t\tstring,\n\t\t{\n\t\t\telement: Element | Document;\n\t\t\thandler: EventListenerOrEventListenerObject;\n\t\t}\n\t> = new Map();\n\n\tprivate constructor() {}\n\n\tpublic static getInstance(): EventManager {\n\t\tif (!EventManager.instance) {\n\t\t\tEventManager.instance = new EventManager();\n\t\t}\n\n\t\treturn EventManager.instance;\n\t}\n\n\tpublic static add(\n\t\telement: Element | Document,\n\t\teventType: string,\n\t\thandler: EventListenerOrEventListenerObject\n\t): void {\n\t\telement.addEventListener(eventType, handler);\n\t\tEventManager.listeners.set(`${eventType}_${handler}`, {\n\t\t\telement,\n\t\t\thandler\n\t\t});\n\t}\n\n\tpublic static listAll(): void {\n\t\tconsole.groupCollapsed(`Active Listeners.`);\n\t\tEventManager.listeners.forEach(({ element, handler }, key) => {\n\t\t\tconsole.log(`🛠️ Event: ${key.split('_')[0]}`, { element, handler });\n\t\t});\n\t\tconsole.groupEnd();\n\t}\n\n\tpublic static listByType(eventType: string): void {\n\t\tconsole.groupCollapsed(`Event Listeners for: ${eventType}`);\n\t\tEventManager.listeners.forEach(({ element, handler }, key) => {\n\t\t\tif (key.startsWith(`${eventType}_`)) {\n\t\t\t\tconsole.log({ element, handler });\n\t\t\t}\n\t\t});\n\t\tconsole.groupEnd();\n\t}\n\n\tpublic static remove(\n\t\telement: Element | Document,\n\t\teventType: string,\n\t\thandler: EventListenerOrEventListenerObject\n\t): void {\n\t\telement.removeEventListener(eventType, handler);\n\t\tEventManager.listeners.delete(`${eventType}_${handler}`);\n\t}\n\n\tpublic static removeAll(): void {\n\t\tEventManager.listeners.forEach(({ element, handler }, key) => {\n\t\t\tconst [eventType] = key.split('_');\n\t\t\telement.removeEventListener(eventType, handler);\n\t\t});\n\n\t\tEventManager.listeners.clear();\n\t}\n}\n"],"names":[],"mappings":"AAAA;MAEa,YAAY,CAAA;AAChB,IAAA,OAAO,QAAQ,GAAwB,IAAI;AAC3C,IAAA,OAAO,SAAS,GAMpB,IAAI,GAAG,EAAE;AAEb,IAAA,WAAA,GAAA;AAEO,IAAA,OAAO,WAAW,GAAA;AACxB,QAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;AAC3B,YAAA,YAAY,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE;;QAG3C,OAAO,YAAY,CAAC,QAAQ;;AAGtB,IAAA,OAAO,GAAG,CAChB,OAA2B,EAC3B,SAAiB,EACjB,OAA2C,EAAA;AAE3C,QAAA,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC;QAC5C,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,SAAS,CAAA,CAAA,EAAI,OAAO,CAAA,CAAE,EAAE;YACrD,OAAO;YACP;AACA,SAAA,CAAC;;AAGI,IAAA,OAAO,OAAO,GAAA;AACpB,QAAA,OAAO,CAAC,cAAc,CAAC,CAAA,iBAAA,CAAmB,CAAC;AAC3C,QAAA,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,GAAG,KAAI;YAC5D,OAAO,CAAC,GAAG,CAAC,CAAA,WAAA,EAAc,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AACrE,SAAC,CAAC;QACF,OAAO,CAAC,QAAQ,EAAE;;IAGZ,OAAO,UAAU,CAAC,SAAiB,EAAA;AACzC,QAAA,OAAO,CAAC,cAAc,CAAC,wBAAwB,SAAS,CAAA,CAAE,CAAC;AAC3D,QAAA,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,GAAG,KAAI;YAC5D,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,SAAS,CAAA,CAAA,CAAG,CAAC,EAAE;gBACpC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;;AAEnC,SAAC,CAAC;QACF,OAAO,CAAC,QAAQ,EAAE;;AAGZ,IAAA,OAAO,MAAM,CACnB,OAA2B,EAC3B,SAAiB,EACjB,OAA2C,EAAA;AAE3C,QAAA,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC;QAC/C,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,CAAG,EAAA,SAAS,CAAI,CAAA,EAAA,OAAO,CAAE,CAAA,CAAC;;AAGlD,IAAA,OAAO,SAAS,GAAA;AACtB,QAAA,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,GAAG,KAAI;YAC5D,MAAM,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;AAClC,YAAA,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC;AAChD,SAAC,CAAC;AAEF,QAAA,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE;;;;;;"}