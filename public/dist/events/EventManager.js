// File: events/EventManager.js
export class EventManager {
    static instance = null;
    static listeners = new Map();
    constructor() { }
    static getInstance() {
        if (!EventManager.instance) {
            EventManager.instance = new EventManager();
        }
        return EventManager.instance;
    }
    static add(element, eventType, handler) {
        try {
            element.addEventListener(eventType, handler);
            EventManager.listeners.set(`${eventType}_${handler}`, {
                element,
                handler
            });
        }
        catch (error) {
            console.error(`Failed to add event listener for ${eventType}:`, error);
        }
    }
    static listAll() {
        try {
            console.groupCollapsed(`Active Listeners.`);
            EventManager.listeners.forEach(({ element, handler }, key) => {
                console.log(`🛠️ Event: ${key.split('_')[0]}`, {
                    element,
                    handler
                });
            });
            console.groupEnd();
        }
        catch (error) {
            console.error('Failed to list all event listeners:', error);
        }
    }
    static listByType(eventType) {
        try {
            console.groupCollapsed(`Event Listeners for: ${eventType}`);
            EventManager.listeners.forEach(({ element, handler }, key) => {
                if (key.startsWith(`${eventType}_`)) {
                    console.log({ element, handler });
                }
            });
            console.groupEnd();
        }
        catch (error) {
            console.error(`Failed to list event listeners for ${eventType}:`, error);
        }
    }
    static remove(element, eventType, handler) {
        try {
            element.removeEventListener(eventType, handler);
            EventManager.listeners.delete(`${eventType}_${handler}`);
        }
        catch (error) {
            console.error(`Failed to remove event listener for ${eventType}:`, error);
        }
    }
    static removeAll() {
        try {
            EventManager.listeners.forEach(({ element, handler }, key) => {
                const [eventType] = key.split('_');
                element.removeEventListener(eventType, handler);
            });
            EventManager.listeners.clear();
        }
        catch (error) {
            console.error('Failed to remove all event listeners:', error);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V2ZW50cy9FdmVudE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBRS9CLE1BQU0sT0FBTyxZQUFZO0lBQ2hCLE1BQU0sQ0FBQyxRQUFRLEdBQXdCLElBQUksQ0FBQztJQUM1QyxNQUFNLENBQUMsU0FBUyxHQU1wQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRWQsZ0JBQXVCLENBQUM7SUFFakIsTUFBTSxDQUFDLFdBQVc7UUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM1QixZQUFZLENBQUMsUUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDNUMsQ0FBQztRQUVELE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQUcsQ0FDaEIsT0FBMkIsRUFDM0IsU0FBaUIsRUFDakIsT0FBMkM7UUFFM0MsSUFBSSxDQUFDO1lBQ0osT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM3QyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsSUFBSSxPQUFPLEVBQUUsRUFBRTtnQkFDckQsT0FBTztnQkFDUCxPQUFPO2FBQ1AsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FDWixvQ0FBb0MsU0FBUyxHQUFHLEVBQ2hELEtBQUssQ0FDTCxDQUFDO1FBQ0gsQ0FBQztJQUNGLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTztRQUNwQixJQUFJLENBQUM7WUFDSixPQUFPLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDNUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDOUMsT0FBTztvQkFDUCxPQUFPO2lCQUNQLENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BCLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMscUNBQXFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0QsQ0FBQztJQUNGLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQWlCO1FBQ3pDLElBQUksQ0FBQztZQUNKLE9BQU8sQ0FBQyxjQUFjLENBQUMsd0JBQXdCLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFDNUQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDNUQsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ25DLENBQUM7WUFDRixDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwQixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUNaLHNDQUFzQyxTQUFTLEdBQUcsRUFDbEQsS0FBSyxDQUNMLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQ25CLE9BQTJCLEVBQzNCLFNBQWlCLEVBQ2pCLE9BQTJDO1FBRTNDLElBQUksQ0FBQztZQUNKLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDaEQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUNaLHVDQUF1QyxTQUFTLEdBQUcsRUFDbkQsS0FBSyxDQUNMLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTO1FBQ3RCLElBQUksQ0FBQztZQUNKLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQzVELE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2pELENBQUMsQ0FBQyxDQUFDO1lBQ0gsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9ELENBQUM7SUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogZXZlbnRzL0V2ZW50TWFuYWdlci5qc1xuXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEV2ZW50TWFuYWdlciB8IG51bGwgPSBudWxsO1xuXHRwcml2YXRlIHN0YXRpYyBsaXN0ZW5lcnM6IE1hcDxcblx0XHRzdHJpbmcsXG5cdFx0e1xuXHRcdFx0ZWxlbWVudDogRWxlbWVudCB8IERvY3VtZW50O1xuXHRcdFx0aGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdDtcblx0XHR9XG5cdD4gPSBuZXcgTWFwKCk7XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cblx0cHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBFdmVudE1hbmFnZXIge1xuXHRcdGlmICghRXZlbnRNYW5hZ2VyLmluc3RhbmNlKSB7XG5cdFx0XHRFdmVudE1hbmFnZXIuaW5zdGFuY2UgPSBuZXcgRXZlbnRNYW5hZ2VyKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIEV2ZW50TWFuYWdlci5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYWRkKFxuXHRcdGVsZW1lbnQ6IEVsZW1lbnQgfCBEb2N1bWVudCxcblx0XHRldmVudFR5cGU6IHN0cmluZyxcblx0XHRoYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0XG5cdCk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyKTtcblx0XHRcdEV2ZW50TWFuYWdlci5saXN0ZW5lcnMuc2V0KGAke2V2ZW50VHlwZX1fJHtoYW5kbGVyfWAsIHtcblx0XHRcdFx0ZWxlbWVudCxcblx0XHRcdFx0aGFuZGxlclxuXHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gYWRkIGV2ZW50IGxpc3RlbmVyIGZvciAke2V2ZW50VHlwZX06YCxcblx0XHRcdFx0ZXJyb3Jcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHN0YXRpYyBsaXN0QWxsKCk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zb2xlLmdyb3VwQ29sbGFwc2VkKGBBY3RpdmUgTGlzdGVuZXJzLmApO1xuXHRcdFx0RXZlbnRNYW5hZ2VyLmxpc3RlbmVycy5mb3JFYWNoKCh7IGVsZW1lbnQsIGhhbmRsZXIgfSwga2V5KSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGDwn5ug77iPIEV2ZW50OiAke2tleS5zcGxpdCgnXycpWzBdfWAsIHtcblx0XHRcdFx0XHRlbGVtZW50LFxuXHRcdFx0XHRcdGhhbmRsZXJcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxpc3QgYWxsIGV2ZW50IGxpc3RlbmVyczonLCBlcnJvcik7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHN0YXRpYyBsaXN0QnlUeXBlKGV2ZW50VHlwZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoYEV2ZW50IExpc3RlbmVycyBmb3I6ICR7ZXZlbnRUeXBlfWApO1xuXHRcdFx0RXZlbnRNYW5hZ2VyLmxpc3RlbmVycy5mb3JFYWNoKCh7IGVsZW1lbnQsIGhhbmRsZXIgfSwga2V5KSA9PiB7XG5cdFx0XHRcdGlmIChrZXkuc3RhcnRzV2l0aChgJHtldmVudFR5cGV9X2ApKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coeyBlbGVtZW50LCBoYW5kbGVyIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0YEZhaWxlZCB0byBsaXN0IGV2ZW50IGxpc3RlbmVycyBmb3IgJHtldmVudFR5cGV9OmAsXG5cdFx0XHRcdGVycm9yXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgcmVtb3ZlKFxuXHRcdGVsZW1lbnQ6IEVsZW1lbnQgfCBEb2N1bWVudCxcblx0XHRldmVudFR5cGU6IHN0cmluZyxcblx0XHRoYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0XG5cdCk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyKTtcblx0XHRcdEV2ZW50TWFuYWdlci5saXN0ZW5lcnMuZGVsZXRlKGAke2V2ZW50VHlwZX1fJHtoYW5kbGVyfWApO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lciBmb3IgJHtldmVudFR5cGV9OmAsXG5cdFx0XHRcdGVycm9yXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgcmVtb3ZlQWxsKCk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRFdmVudE1hbmFnZXIubGlzdGVuZXJzLmZvckVhY2goKHsgZWxlbWVudCwgaGFuZGxlciB9LCBrZXkpID0+IHtcblx0XHRcdFx0Y29uc3QgW2V2ZW50VHlwZV0gPSBrZXkuc3BsaXQoJ18nKTtcblx0XHRcdFx0ZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlcik7XG5cdFx0XHR9KTtcblx0XHRcdEV2ZW50TWFuYWdlci5saXN0ZW5lcnMuY2xlYXIoKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIHJlbW92ZSBhbGwgZXZlbnQgbGlzdGVuZXJzOicsIGVycm9yKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==