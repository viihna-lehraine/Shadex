{"version":3,"file":"palette.js","sources":["../../../../../src/core/utils/palette.ts"],"sourcesContent":["// File: core/utils/palette.ts\n\nimport {\n\tAllColors,\n\tBrandingUtilities,\n\tCMYK,\n\tColorUtilities,\n\tDOMUtilities,\n\tHelpers,\n\tHex,\n\tHSL,\n\tHSV,\n\tLAB,\n\tPalette,\n\tPaletteConfig,\n\tPaletteItem,\n\tPaletteType,\n\tPaletteUtilities,\n\tRGB,\n\tSelectedPaletteOptions,\n\tServices,\n\tValidationUtilities,\n\tXYZ\n} from '../../types/index.js';\nimport { domIndex, paletteConfig } from '../../config/index.js';\n\nconst ids = domIndex.ids;\n\nexport function paletteUtilitiesFactory(\n\tbrand: BrandingUtilities,\n\tcolorUtils: ColorUtilities,\n\tdom: DOMUtilities,\n\thelpers: Helpers,\n\tservices: Services,\n\tvalidate: ValidationUtilities\n): PaletteUtilities {\n\tconst {\n\t\tdata: { clone },\n\t\tdom: { getElement }\n\t} = helpers;\n\tconst { errors, log } = services;\n\n\tfunction createPaletteItem(color: HSL, itemID: number): PaletteItem {\n\t\treturn errors.handleSync(() => {\n\t\t\tconst clonedColor = clone(color) as HSL;\n\n\t\t\treturn {\n\t\t\t\titemID,\n\t\t\t\tcolors: {\n\t\t\t\t\tcmyk: (colorUtils.convertHSL(clonedColor, 'cmyk') as CMYK).value,\n\t\t\t\t\thex: (colorUtils.convertHSL(clonedColor, 'hex') as Hex).value,\n\t\t\t\t\thsl: clonedColor.value,\n\t\t\t\t\thsv: (colorUtils.convertHSL(clonedColor, 'hsv') as HSV).value,\n\t\t\t\t\tlab: (colorUtils.convertHSL(clonedColor, 'lab') as LAB).value,\n\t\t\t\t\trgb: (colorUtils.convertHSL(clonedColor, 'rgb') as RGB).value,\n\t\t\t\t\txyz: (colorUtils.convertHSL(clonedColor, 'xyz') as XYZ).value\n\t\t\t\t},\n\t\t\t\tcss: {\n\t\t\t\t\tcmyk: colorUtils.formatColorAsCSS(\n\t\t\t\t\t\tcolorUtils.convertHSL(clonedColor, 'cmyk')\n\t\t\t\t\t),\n\t\t\t\t\thex: colorUtils.formatColorAsCSS(\n\t\t\t\t\t\tcolorUtils.convertHSL(clonedColor, 'hex')\n\t\t\t\t\t),\n\t\t\t\t\thsl: colorUtils.formatColorAsCSS(clonedColor),\n\t\t\t\t\thsv: colorUtils.formatColorAsCSS(\n\t\t\t\t\t\tcolorUtils.convertHSL(clonedColor, 'hsv')\n\t\t\t\t\t),\n\t\t\t\t\tlab: colorUtils.formatColorAsCSS(\n\t\t\t\t\t\tcolorUtils.convertHSL(clonedColor, 'lab')\n\t\t\t\t\t),\n\t\t\t\t\trgb: colorUtils.formatColorAsCSS(\n\t\t\t\t\t\tcolorUtils.convertHSL(clonedColor, 'rgb')\n\t\t\t\t\t),\n\t\t\t\t\txyz: colorUtils.formatColorAsCSS(\n\t\t\t\t\t\tcolorUtils.convertHSL(clonedColor, 'xyz')\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t};\n\t\t}, 'Error occurred while creating palette item');\n\t}\n\n\tfunction createPaletteItemArray(\n\t\tbaseColor: HSL,\n\t\thues: number[]\n\t): PaletteItem[] {\n\t\treturn errors.handleSync(() => {\n\t\t\tconst paletteItems: PaletteItem[] = [];\n\n\t\t\t// base color always gets itemID = 1\n\t\t\tpaletteItems.push(\n\t\t\t\tcreatePaletteItem(\n\t\t\t\t\tbaseColor,\n\t\t\t\t\t1 // ID 1 for base color\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// iterate over hues and generate PaletteItems\n\t\t\tfor (const [i, hue] of hues.entries()) {\n\t\t\t\tconst newColor: HSL = {\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\thue: brand.asRadial(hue),\n\t\t\t\t\t\tsaturation: brand.asPercentile(Math.random() * 100),\n\t\t\t\t\t\tlightness: brand.asPercentile(Math.random() * 100)\n\t\t\t\t\t},\n\t\t\t\t\tformat: 'hsl'\n\t\t\t\t};\n\n\t\t\t\tconst newPaletteItem = createPaletteItem(\n\t\t\t\t\tnewColor,\n\t\t\t\t\ti + 2 // IDs start at 2 for generated colors\n\t\t\t\t);\n\n\t\t\t\tpaletteItems.push(newPaletteItem);\n\t\t\t\tdom.updateColorBox(newColor, String(i + 2));\n\t\t\t}\n\n\t\t\treturn paletteItems;\n\t\t}, 'Error occurred while creating palette item array');\n\t}\n\n\tfunction createPaletteObject(\n\t\toptions: SelectedPaletteOptions,\n\t\tpaletteItems: PaletteItem[]\n\t): Palette {\n\t\treturn errors.handleSync(() => {\n\t\t\treturn {\n\t\t\t\tid: `${options.paletteType}_${crypto.randomUUID()}`,\n\t\t\t\titems: paletteItems,\n\t\t\t\tmetadata: {\n\t\t\t\t\tcolumnCount: options.columnCount,\n\t\t\t\t\tlimitDark: options.limitDark,\n\t\t\t\t\tlimitGray: options.limitGray,\n\t\t\t\t\tlimitLight: options.limitLight,\n\t\t\t\t\ttimestamp: helpers.data.getFormattedTimestamp(),\n\t\t\t\t\ttype: options.paletteType\n\t\t\t\t}\n\t\t\t};\n\t\t}, 'Error occurred while creating palette object');\n\t}\n\n\tfunction generateAllColorValues(color: HSL): AllColors {\n\t\treturn errors.handleSync(() => {\n\t\t\tconst clonedColor = clone(color);\n\n\t\t\tif (!validate.colorValue(clonedColor)) {\n\t\t\t\tlog.error(\n\t\t\t\t\t`Invalid color: ${JSON.stringify(clonedColor)}`,\n\t\t\t\t\t`utils.palette.generateAllColorValues`\n\t\t\t\t);\n\t\t\t\tthrow new Error('Invalid HSL color provided');\n\t\t\t}\n\n\t\t\tconst convert = <T extends keyof AllColors>(target: T): AllColors[T] =>\n\t\t\t\tcolorUtils.convertHSL(clonedColor, target) as AllColors[T];\n\n\t\t\treturn {\n\t\t\t\tcmyk: convert('cmyk'),\n\t\t\t\thex: convert('hex'),\n\t\t\t\thsl: clonedColor,\n\t\t\t\thsv: convert('hsv'),\n\t\t\t\tlab: convert('lab'),\n\t\t\t\trgb: convert('rgb'),\n\t\t\t\tsl: convert('sl'),\n\t\t\t\tsv: convert('sv'),\n\t\t\t\txyz: convert('xyz')\n\t\t\t};\n\t\t}, 'Error occurred while generating all color values');\n\t}\n\n\tfunction getPaletteOptionsFromUI(): SelectedPaletteOptions {\n\t\treturn errors.handleSync(() => {\n\t\t\tconst columnCountElement = getElement<HTMLInputElement>(\n\t\t\t\tids.inputs.columnCount\n\t\t\t);\n\t\t\tconst paletteTypeElement = getElement<HTMLInputElement>(\n\t\t\t\tids.inputs.paletteType\n\t\t\t);\n\t\t\tconst limitDarkChkbx = getElement<HTMLInputElement>(\n\t\t\t\tids.inputs.limitDarkChkbx\n\t\t\t);\n\t\t\tconst limitGrayChkbx = getElement<HTMLInputElement>(\n\t\t\t\tids.inputs.limitGrayChkbx\n\t\t\t);\n\t\t\tconst limitLightChkbx = getElement<HTMLInputElement>(\n\t\t\t\tids.inputs.limitLightChkbx\n\t\t\t);\n\n\t\t\tif (!paletteTypeElement) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t'paletteTypeOptions DOM element not found',\n\t\t\t\t\t`utils.palette.getPaletteOptionsFromUI`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!columnCountElement) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t`columnCount DOM element not found`,\n\t\t\t\t\t`utils.palette.getPaletteOptionsFromUI`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!limitDarkChkbx || !limitGrayChkbx || !limitLightChkbx) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t`One or more checkboxes not found`,\n\t\t\t\t\t`utils.palette.getPaletteOptionsFromUI`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!helpers.typeguards.isPaletteType(paletteTypeElement!.value)) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t`Invalid palette type: ${paletteTypeElement!.value}.`,\n\t\t\t\t\t`utils.palette.getPaletteOptionsFromUI`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcolumnCount: columnCountElement\n\t\t\t\t\t? parseInt(columnCountElement.value, 10)\n\t\t\t\t\t: 0,\n\t\t\t\tdistributionType: 'soft',\n\t\t\t\tlimitDark: limitDarkChkbx?.checked || false,\n\t\t\t\tlimitGray: limitGrayChkbx?.checked || false,\n\t\t\t\tlimitLight: limitLightChkbx?.checked || false,\n\t\t\t\tpaletteType: paletteTypeElement!.value as PaletteType\n\t\t\t};\n\t\t}, 'Error occurred while getting palette options from UI');\n\t}\n\n\tfunction getRandomizedPaleteOptions(): SelectedPaletteOptions {\n\t\treturn errors.handleSync(() => {\n\t\t\tconst paletteTypeMap: Record<number, PaletteType> = {\n\t\t\t\t0: 'analogous',\n\t\t\t\t1: 'complementary',\n\t\t\t\t2: 'diadic',\n\t\t\t\t3: 'hexadic',\n\t\t\t\t4: 'monochromatic',\n\t\t\t\t5: 'random',\n\t\t\t\t6: 'splitComplementary',\n\t\t\t\t7: 'tetradic',\n\t\t\t\t8: 'triadic'\n\t\t\t};\n\t\t\tconst distributionTypeMap: Record<\n\t\t\t\tnumber,\n\t\t\t\tkeyof PaletteConfig['probabilities']\n\t\t\t> = {\n\t\t\t\t0: 'base',\n\t\t\t\t1: 'chaotic',\n\t\t\t\t2: 'soft',\n\t\t\t\t3: 'strong'\n\t\t\t};\n\t\t\tconst randomPaletteTypeIndex = Math.floor(\n\t\t\t\tMath.random() * Object.values(paletteTypeMap).length\n\t\t\t);\n\t\t\tconst randomDistributionTypeIndex = Math.floor(\n\t\t\t\tMath.random() * Object.values(distributionTypeMap).length\n\t\t\t);\n\t\t\tconst paletteType =\n\t\t\t\tpaletteTypeMap[randomPaletteTypeIndex as keyof typeof paletteTypeMap];\n\t\t\tconst distributionType =\n\t\t\t\tdistributionTypeMap[\n\t\t\t\t\trandomDistributionTypeIndex as keyof typeof distributionTypeMap\n\t\t\t\t];\n\t\t\tconst columnCount = Math.floor(Math.random() * 6) + 1;\n\t\t\tconst limitDark = Math.random() < 0.5;\n\t\t\tconst limitGray = Math.random() < 0.5;\n\t\t\tconst limitLight = Math.random() < 0.5;\n\t\t\treturn {\n\t\t\t\tcolumnCount,\n\t\t\t\tdistributionType,\n\t\t\t\tlimitDark,\n\t\t\t\tlimitGray,\n\t\t\t\tlimitLight,\n\t\t\t\tpaletteType\n\t\t\t};\n\t\t}, 'Error occurred while getting randomized palette options');\n\t}\n\n\tfunction isHSLInBounds(hsl: HSL): boolean {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.error(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}`,\n\t\t\t\t\t`utils.palette.isHSLInBounds`\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isHSLTooDark(hsl) || isHSLTooGray(hsl) || isHSLTooLight(hsl);\n\t\t}, 'Error occurred while checking if HSL is in bounds');\n\t}\n\n\tfunction isHSLTooDark(hsl: HSL): boolean {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.error(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}`,\n\t\t\t\t\t`utils.palette.isHSLTooDark`\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn clone(hsl).value.lightness < paletteConfig.thresholds.dark;\n\t\t}, 'Error occurred while checking if HSL is too dark');\n\t}\n\n\tfunction isHSLTooGray(hsl: HSL): boolean {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.error(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}`,\n\t\t\t\t\t`utils.palette.isHSLTooGray`\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn clone(hsl).value.saturation < paletteConfig.thresholds.gray;\n\t\t}, 'Error occurred while checking if HSL is too gray');\n\t}\n\n\tfunction isHSLTooLight(hsl: HSL): boolean {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.error(\n\t\t\t\t\t'Invalid HSL value ${JSON.stringify(hsl)}',\n\t\t\t\t\t`utils.palette.isHSLTooLight`\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn clone(hsl).value.lightness > paletteConfig.thresholds.light;\n\t\t}, 'Error occurred while checking if HSL is too light');\n\t}\n\n\tconst paletteUtilities: PaletteUtilities = {\n\t\tcreatePaletteItem,\n\t\tcreatePaletteItemArray,\n\t\tcreatePaletteObject,\n\t\tgenerateAllColorValues,\n\t\tgetPaletteOptionsFromUI,\n\t\tgetRandomizedPaleteOptions,\n\t\tisHSLInBounds,\n\t\tisHSLTooDark,\n\t\tisHSLTooGray,\n\t\tisHSLTooLight\n\t};\n\n\treturn errors.handleSync(\n\t\t() => paletteUtilities,\n\t\t'Error creating palette utilities group group.'\n\t);\n}\n"],"names":[],"mappings":";;;;;AAAA;AA0BA,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG;AAER,SAAA,uBAAuB,CACtC,KAAwB,EACxB,UAA0B,EAC1B,GAAiB,EACjB,OAAgB,EAChB,QAAkB,EAClB,QAA6B,EAAA;AAE7B,IAAA,MAAM,EACL,IAAI,EAAE,EAAE,KAAK,EAAE,EACf,GAAG,EAAE,EAAE,UAAU,EAAE,EACnB,GAAG,OAAO;AACX,IAAA,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ;AAEhC,IAAA,SAAS,iBAAiB,CAAC,KAAU,EAAE,MAAc,EAAA;AACpD,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;AAC7B,YAAA,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAQ;YAEvC,OAAO;gBACN,MAAM;AACN,gBAAA,MAAM,EAAE;oBACP,IAAI,EAAG,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAU,CAAC,KAAK;oBAChE,GAAG,EAAG,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAS,CAAC,KAAK;oBAC7D,GAAG,EAAE,WAAW,CAAC,KAAK;oBACtB,GAAG,EAAG,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAS,CAAC,KAAK;oBAC7D,GAAG,EAAG,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAS,CAAC,KAAK;oBAC7D,GAAG,EAAG,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAS,CAAC,KAAK;oBAC7D,GAAG,EAAG,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAS,CAAC;AACxD,iBAAA;AACD,gBAAA,GAAG,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU,CAAC,gBAAgB,CAChC,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1C;AACD,oBAAA,GAAG,EAAE,UAAU,CAAC,gBAAgB,CAC/B,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CACzC;AACD,oBAAA,GAAG,EAAE,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC;AAC7C,oBAAA,GAAG,EAAE,UAAU,CAAC,gBAAgB,CAC/B,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CACzC;AACD,oBAAA,GAAG,EAAE,UAAU,CAAC,gBAAgB,CAC/B,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CACzC;AACD,oBAAA,GAAG,EAAE,UAAU,CAAC,gBAAgB,CAC/B,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CACzC;AACD,oBAAA,GAAG,EAAE,UAAU,CAAC,gBAAgB,CAC/B,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC;AAE1C;aACD;SACD,EAAE,4CAA4C,CAAC;;AAGjD,IAAA,SAAS,sBAAsB,CAC9B,SAAc,EACd,IAAc,EAAA;AAEd,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;YAC7B,MAAM,YAAY,GAAkB,EAAE;;YAGtC,YAAY,CAAC,IAAI,CAChB,iBAAiB,CAChB,SAAS,EACT,CAAC;AACD,aAAA,CACD;;AAGD,YAAA,KAAK,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;AACtC,gBAAA,MAAM,QAAQ,GAAQ;AACrB,oBAAA,KAAK,EAAE;AACN,wBAAA,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;wBACxB,UAAU,EAAE,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;wBACnD,SAAS,EAAE,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;AACjD,qBAAA;AACD,oBAAA,MAAM,EAAE;iBACR;gBAED,MAAM,cAAc,GAAG,iBAAiB,CACvC,QAAQ,EACR,CAAC,GAAG,CAAC;iBACL;AAED,gBAAA,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC;AACjC,gBAAA,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;AAG5C,YAAA,OAAO,YAAY;SACnB,EAAE,kDAAkD,CAAC;;AAGvD,IAAA,SAAS,mBAAmB,CAC3B,OAA+B,EAC/B,YAA2B,EAAA;AAE3B,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;YAC7B,OAAO;gBACN,EAAE,EAAE,CAAG,EAAA,OAAO,CAAC,WAAW,IAAI,MAAM,CAAC,UAAU,EAAE,CAAE,CAAA;AACnD,gBAAA,KAAK,EAAE,YAAY;AACnB,gBAAA,QAAQ,EAAE;oBACT,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;AAC9B,oBAAA,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE;oBAC/C,IAAI,EAAE,OAAO,CAAC;AACd;aACD;SACD,EAAE,8CAA8C,CAAC;;IAGnD,SAAS,sBAAsB,CAAC,KAAU,EAAA;AACzC,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;AAC7B,YAAA,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC;YAEhC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;AACtC,gBAAA,GAAG,CAAC,KAAK,CACR,CAAA,eAAA,EAAkB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA,CAAE,EAC/C,CAAA,oCAAA,CAAsC,CACtC;AACD,gBAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAG9C,YAAA,MAAM,OAAO,GAAG,CAA4B,MAAS,KACpD,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAiB;YAE3D,OAAO;AACN,gBAAA,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC;AACrB,gBAAA,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC;AACnB,gBAAA,GAAG,EAAE,WAAW;AAChB,gBAAA,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC;AACnB,gBAAA,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC;AACnB,gBAAA,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC;AACnB,gBAAA,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC;AACjB,gBAAA,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC;AACjB,gBAAA,GAAG,EAAE,OAAO,CAAC,KAAK;aAClB;SACD,EAAE,kDAAkD,CAAC;;AAGvD,IAAA,SAAS,uBAAuB,GAAA;AAC/B,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;YAC7B,MAAM,kBAAkB,GAAG,UAAU,CACpC,GAAG,CAAC,MAAM,CAAC,WAAW,CACtB;YACD,MAAM,kBAAkB,GAAG,UAAU,CACpC,GAAG,CAAC,MAAM,CAAC,WAAW,CACtB;YACD,MAAM,cAAc,GAAG,UAAU,CAChC,GAAG,CAAC,MAAM,CAAC,cAAc,CACzB;YACD,MAAM,cAAc,GAAG,UAAU,CAChC,GAAG,CAAC,MAAM,CAAC,cAAc,CACzB;YACD,MAAM,eAAe,GAAG,UAAU,CACjC,GAAG,CAAC,MAAM,CAAC,eAAe,CAC1B;YAED,IAAI,CAAC,kBAAkB,EAAE;AACxB,gBAAA,GAAG,CAAC,IAAI,CACP,0CAA0C,EAC1C,CAAA,qCAAA,CAAuC,CACvC;;YAEF,IAAI,CAAC,kBAAkB,EAAE;AACxB,gBAAA,GAAG,CAAC,IAAI,CACP,mCAAmC,EACnC,CAAA,qCAAA,CAAuC,CACvC;;YAEF,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,IAAI,CAAC,eAAe,EAAE;AAC3D,gBAAA,GAAG,CAAC,IAAI,CACP,kCAAkC,EAClC,CAAA,qCAAA,CAAuC,CACvC;;AAGF,YAAA,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,kBAAmB,CAAC,KAAK,CAAC,EAAE;gBACjE,GAAG,CAAC,IAAI,CACP,CAAyB,sBAAA,EAAA,kBAAmB,CAAC,KAAK,CAAG,CAAA,CAAA,EACrD,CAAuC,qCAAA,CAAA,CACvC;;YAGF,OAAO;AACN,gBAAA,WAAW,EAAE;sBACV,QAAQ,CAAC,kBAAkB,CAAC,KAAK,EAAE,EAAE;AACvC,sBAAE,CAAC;AACJ,gBAAA,gBAAgB,EAAE,MAAM;AACxB,gBAAA,SAAS,EAAE,cAAc,EAAE,OAAO,IAAI,KAAK;AAC3C,gBAAA,SAAS,EAAE,cAAc,EAAE,OAAO,IAAI,KAAK;AAC3C,gBAAA,UAAU,EAAE,eAAe,EAAE,OAAO,IAAI,KAAK;gBAC7C,WAAW,EAAE,kBAAmB,CAAC;aACjC;SACD,EAAE,sDAAsD,CAAC;;AAG3D,IAAA,SAAS,0BAA0B,GAAA;AAClC,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;AAC7B,YAAA,MAAM,cAAc,GAAgC;AACnD,gBAAA,CAAC,EAAE,WAAW;AACd,gBAAA,CAAC,EAAE,eAAe;AAClB,gBAAA,CAAC,EAAE,QAAQ;AACX,gBAAA,CAAC,EAAE,SAAS;AACZ,gBAAA,CAAC,EAAE,eAAe;AAClB,gBAAA,CAAC,EAAE,QAAQ;AACX,gBAAA,CAAC,EAAE,oBAAoB;AACvB,gBAAA,CAAC,EAAE,UAAU;AACb,gBAAA,CAAC,EAAE;aACH;AACD,YAAA,MAAM,mBAAmB,GAGrB;AACH,gBAAA,CAAC,EAAE,MAAM;AACT,gBAAA,CAAC,EAAE,SAAS;AACZ,gBAAA,CAAC,EAAE,MAAM;AACT,gBAAA,CAAC,EAAE;aACH;YACD,MAAM,sBAAsB,GAAG,IAAI,CAAC,KAAK,CACxC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CACpD;YACD,MAAM,2BAA2B,GAAG,IAAI,CAAC,KAAK,CAC7C,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,MAAM,CACzD;AACD,YAAA,MAAM,WAAW,GAChB,cAAc,CAAC,sBAAqD,CAAC;AACtE,YAAA,MAAM,gBAAgB,GACrB,mBAAmB,CAClB,2BAA+D,CAC/D;AACF,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;YACrD,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;YACrC,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;YACrC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;YACtC,OAAO;gBACN,WAAW;gBACX,gBAAgB;gBAChB,SAAS;gBACT,SAAS;gBACT,UAAU;gBACV;aACA;SACD,EAAE,yDAAyD,CAAC;;IAG9D,SAAS,aAAa,CAAC,GAAQ,EAAA;AAC9B,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;YAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AAC9B,gBAAA,GAAG,CAAC,KAAK,CACR,CAAA,kBAAA,EAAqB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA,CAAE,EAC1C,CAAA,2BAAA,CAA6B,CAC7B;AAED,gBAAA,OAAO,KAAK;;AAGb,YAAA,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC;SACnE,EAAE,mDAAmD,CAAC;;IAGxD,SAAS,YAAY,CAAC,GAAQ,EAAA;AAC7B,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;YAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AAC9B,gBAAA,GAAG,CAAC,KAAK,CACR,CAAA,kBAAA,EAAqB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA,CAAE,EAC1C,CAAA,0BAAA,CAA4B,CAC5B;AAED,gBAAA,OAAO,KAAK;;AAGb,YAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI;SACjE,EAAE,kDAAkD,CAAC;;IAGvD,SAAS,YAAY,CAAC,GAAQ,EAAA;AAC7B,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;YAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AAC9B,gBAAA,GAAG,CAAC,KAAK,CACR,CAAA,kBAAA,EAAqB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA,CAAE,EAC1C,CAAA,0BAAA,CAA4B,CAC5B;AAED,gBAAA,OAAO,KAAK;;AAGb,YAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI;SAClE,EAAE,kDAAkD,CAAC;;IAGvD,SAAS,aAAa,CAAC,GAAQ,EAAA;AAC9B,QAAA,OAAO,MAAM,CAAC,UAAU,CAAC,MAAK;YAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AAC9B,gBAAA,GAAG,CAAC,KAAK,CACR,0CAA0C,EAC1C,CAAA,2BAAA,CAA6B,CAC7B;AAED,gBAAA,OAAO,KAAK;;AAGb,YAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK;SAClE,EAAE,mDAAmD,CAAC;;AAGxD,IAAA,MAAM,gBAAgB,GAAqB;QAC1C,iBAAiB;QACjB,sBAAsB;QACtB,mBAAmB;QACnB,sBAAsB;QACtB,uBAAuB;QACvB,0BAA0B;QAC1B,aAAa;QACb,YAAY;QACZ,YAAY;QACZ;KACA;IAED,OAAO,MAAM,CAAC,UAAU,CACvB,MAAM,gBAAgB,EACtB,+CAA+C,CAC/C;AACF;;;;"}