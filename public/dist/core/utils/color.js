// File: core/utils/color.ts
export async function colorUtilitiesFactory(adjust, brand, format, helpers, sanitize, services, validate) {
    const { errors, log } = services;
    const caller = '[COLOR_UTILS_FACTORY]';
    log.info('Executing colorUtilitiesFactory.', `${caller} constructor`);
    return errors.handleAsync(async () => {
        const { colorBrandingUtilitiesFactory } = await import('./partials/color/brand.js');
        const { colorConversionUtilitiesFactory } = await import('./partials/color/conversion.js');
        const { colorFormattingUtilitiesFactory } = await import('./partials/color/format.js');
        const { colorGenerationUtilitiesFactory } = await import('./partials/color/generate.js');
        const { colorParsingUtilitiesFactory } = await import('./partials/color/parse.js');
        const colorBrandUtils = colorBrandingUtilitiesFactory(brand, helpers, services);
        const colorFormatUtils = colorFormattingUtilitiesFactory(format, helpers, services);
        const colorGenerationUtils = colorGenerationUtilitiesFactory(sanitize, services, validate);
        const colorParseUtils = colorParsingUtilitiesFactory(services);
        const colorConversionUtils = colorConversionUtilitiesFactory(adjust, brand, format, helpers, sanitize, services, validate);
        const colorUtilities = {
            ...colorBrandUtils,
            ...colorConversionUtils,
            ...colorFormatUtils,
            ...colorParseUtils,
            ...colorGenerationUtils
        };
        console.log(`${caller}: Color utilities group created`, colorUtilities);
        return colorUtilities;
    }, 'Error occurred while creating color utilities group');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS91dGlscy9jb2xvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEI7QUFhNUIsTUFBTSxDQUFDLEtBQUssVUFBVSxxQkFBcUIsQ0FDMUMsTUFBMkIsRUFDM0IsS0FBd0IsRUFDeEIsTUFBMkIsRUFDM0IsT0FBZ0IsRUFDaEIsUUFBNkIsRUFDN0IsUUFBa0IsRUFDbEIsUUFBNkI7SUFFN0IsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxRQUFRLENBQUM7SUFDakMsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQUM7SUFFdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLE1BQU0sY0FBYyxDQUFDLENBQUM7SUFFdEUsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BDLE1BQU0sRUFBRSw2QkFBNkIsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUNyRCwyQkFBMkIsQ0FDM0IsQ0FBQztRQUNGLE1BQU0sRUFBRSwrQkFBK0IsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUN2RCxnQ0FBZ0MsQ0FDaEMsQ0FBQztRQUNGLE1BQU0sRUFBRSwrQkFBK0IsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUN2RCw0QkFBNEIsQ0FDNUIsQ0FBQztRQUNGLE1BQU0sRUFBRSwrQkFBK0IsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUN2RCw4QkFBOEIsQ0FDOUIsQ0FBQztRQUNGLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUNwRCwyQkFBMkIsQ0FDM0IsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLDZCQUE2QixDQUNwRCxLQUFLLEVBQ0wsT0FBTyxFQUNQLFFBQVEsQ0FDUixDQUFDO1FBQ0YsTUFBTSxnQkFBZ0IsR0FBRywrQkFBK0IsQ0FDdkQsTUFBTSxFQUNOLE9BQU8sRUFDUCxRQUFRLENBQ1IsQ0FBQztRQUNGLE1BQU0sb0JBQW9CLEdBQUcsK0JBQStCLENBQzNELFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxDQUNSLENBQUM7UUFDRixNQUFNLGVBQWUsR0FBRyw0QkFBNEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvRCxNQUFNLG9CQUFvQixHQUFHLCtCQUErQixDQUMzRCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixPQUFPLEVBQ1AsUUFBUSxFQUNSLFFBQVEsRUFDUixRQUFRLENBQ1IsQ0FBQztRQUVGLE1BQU0sY0FBYyxHQUFtQjtZQUN0QyxHQUFHLGVBQWU7WUFDbEIsR0FBRyxvQkFBb0I7WUFDdkIsR0FBRyxnQkFBZ0I7WUFDbkIsR0FBRyxlQUFlO1lBQ2xCLEdBQUcsb0JBQW9CO1NBQ3ZCLENBQUM7UUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxpQ0FBaUMsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUV4RSxPQUFPLGNBQWMsQ0FBQztJQUN2QixDQUFDLEVBQUUscURBQXFELENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogY29yZS91dGlscy9jb2xvci50c1xuXG5pbXBvcnQge1xuXHRBZGp1c3RtZW50VXRpbGl0aWVzLFxuXHRCcmFuZGluZ1V0aWxpdGllcyxcblx0Q29sb3JVdGlsaXRpZXMsXG5cdEZvcm1hdHRpbmdVdGlsaXRpZXMsXG5cdEhlbHBlcnMsXG5cdFNhbml0YXRpb25VdGlsaXRpZXMsXG5cdFNlcnZpY2VzLFxuXHRWYWxpZGF0aW9uVXRpbGl0aWVzXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbG9yVXRpbGl0aWVzRmFjdG9yeShcblx0YWRqdXN0OiBBZGp1c3RtZW50VXRpbGl0aWVzLFxuXHRicmFuZDogQnJhbmRpbmdVdGlsaXRpZXMsXG5cdGZvcm1hdDogRm9ybWF0dGluZ1V0aWxpdGllcyxcblx0aGVscGVyczogSGVscGVycyxcblx0c2FuaXRpemU6IFNhbml0YXRpb25VdGlsaXRpZXMsXG5cdHNlcnZpY2VzOiBTZXJ2aWNlcyxcblx0dmFsaWRhdGU6IFZhbGlkYXRpb25VdGlsaXRpZXNcbik6IFByb21pc2U8Q29sb3JVdGlsaXRpZXM+IHtcblx0Y29uc3QgeyBlcnJvcnMsIGxvZyB9ID0gc2VydmljZXM7XG5cdGNvbnN0IGNhbGxlciA9ICdbQ09MT1JfVVRJTFNfRkFDVE9SWV0nO1xuXG5cdGxvZy5pbmZvKCdFeGVjdXRpbmcgY29sb3JVdGlsaXRpZXNGYWN0b3J5LicsIGAke2NhbGxlcn0gY29uc3RydWN0b3JgKTtcblxuXHRyZXR1cm4gZXJyb3JzLmhhbmRsZUFzeW5jKGFzeW5jICgpID0+IHtcblx0XHRjb25zdCB7IGNvbG9yQnJhbmRpbmdVdGlsaXRpZXNGYWN0b3J5IH0gPSBhd2FpdCBpbXBvcnQoXG5cdFx0XHQnLi9wYXJ0aWFscy9jb2xvci9icmFuZC5qcydcblx0XHQpO1xuXHRcdGNvbnN0IHsgY29sb3JDb252ZXJzaW9uVXRpbGl0aWVzRmFjdG9yeSB9ID0gYXdhaXQgaW1wb3J0KFxuXHRcdFx0Jy4vcGFydGlhbHMvY29sb3IvY29udmVyc2lvbi5qcydcblx0XHQpO1xuXHRcdGNvbnN0IHsgY29sb3JGb3JtYXR0aW5nVXRpbGl0aWVzRmFjdG9yeSB9ID0gYXdhaXQgaW1wb3J0KFxuXHRcdFx0Jy4vcGFydGlhbHMvY29sb3IvZm9ybWF0LmpzJ1xuXHRcdCk7XG5cdFx0Y29uc3QgeyBjb2xvckdlbmVyYXRpb25VdGlsaXRpZXNGYWN0b3J5IH0gPSBhd2FpdCBpbXBvcnQoXG5cdFx0XHQnLi9wYXJ0aWFscy9jb2xvci9nZW5lcmF0ZS5qcydcblx0XHQpO1xuXHRcdGNvbnN0IHsgY29sb3JQYXJzaW5nVXRpbGl0aWVzRmFjdG9yeSB9ID0gYXdhaXQgaW1wb3J0KFxuXHRcdFx0Jy4vcGFydGlhbHMvY29sb3IvcGFyc2UuanMnXG5cdFx0KTtcblxuXHRcdGNvbnN0IGNvbG9yQnJhbmRVdGlscyA9IGNvbG9yQnJhbmRpbmdVdGlsaXRpZXNGYWN0b3J5KFxuXHRcdFx0YnJhbmQsXG5cdFx0XHRoZWxwZXJzLFxuXHRcdFx0c2VydmljZXNcblx0XHQpO1xuXHRcdGNvbnN0IGNvbG9yRm9ybWF0VXRpbHMgPSBjb2xvckZvcm1hdHRpbmdVdGlsaXRpZXNGYWN0b3J5KFxuXHRcdFx0Zm9ybWF0LFxuXHRcdFx0aGVscGVycyxcblx0XHRcdHNlcnZpY2VzXG5cdFx0KTtcblx0XHRjb25zdCBjb2xvckdlbmVyYXRpb25VdGlscyA9IGNvbG9yR2VuZXJhdGlvblV0aWxpdGllc0ZhY3RvcnkoXG5cdFx0XHRzYW5pdGl6ZSxcblx0XHRcdHNlcnZpY2VzLFxuXHRcdFx0dmFsaWRhdGVcblx0XHQpO1xuXHRcdGNvbnN0IGNvbG9yUGFyc2VVdGlscyA9IGNvbG9yUGFyc2luZ1V0aWxpdGllc0ZhY3Rvcnkoc2VydmljZXMpO1xuXHRcdGNvbnN0IGNvbG9yQ29udmVyc2lvblV0aWxzID0gY29sb3JDb252ZXJzaW9uVXRpbGl0aWVzRmFjdG9yeShcblx0XHRcdGFkanVzdCxcblx0XHRcdGJyYW5kLFxuXHRcdFx0Zm9ybWF0LFxuXHRcdFx0aGVscGVycyxcblx0XHRcdHNhbml0aXplLFxuXHRcdFx0c2VydmljZXMsXG5cdFx0XHR2YWxpZGF0ZVxuXHRcdCk7XG5cblx0XHRjb25zdCBjb2xvclV0aWxpdGllczogQ29sb3JVdGlsaXRpZXMgPSB7XG5cdFx0XHQuLi5jb2xvckJyYW5kVXRpbHMsXG5cdFx0XHQuLi5jb2xvckNvbnZlcnNpb25VdGlscyxcblx0XHRcdC4uLmNvbG9yRm9ybWF0VXRpbHMsXG5cdFx0XHQuLi5jb2xvclBhcnNlVXRpbHMsXG5cdFx0XHQuLi5jb2xvckdlbmVyYXRpb25VdGlsc1xuXHRcdH07XG5cblx0XHRjb25zb2xlLmxvZyhgJHtjYWxsZXJ9OiBDb2xvciB1dGlsaXRpZXMgZ3JvdXAgY3JlYXRlZGAsIGNvbG9yVXRpbGl0aWVzKTtcblxuXHRcdHJldHVybiBjb2xvclV0aWxpdGllcztcblx0fSwgJ0Vycm9yIG9jY3VycmVkIHdoaWxlIGNyZWF0aW5nIGNvbG9yIHV0aWxpdGllcyBncm91cCcpO1xufVxuIl19