{"version":3,"file":"conversion.js","sources":["../../../../../../../src/core/utils/partials/color/conversion.ts"],"sourcesContent":["import {\n\tAdjustmentUtilities,\n\tBrandingUtilities,\n\tCMYK,\n\tColor,\n\tColorConversionUtilities,\n\tColorSpaceExtended,\n\tFormattingUtilities,\n\tHelpers,\n\tHex,\n\tHSL,\n\tHSV,\n\tLAB,\n\tRGB,\n\tSanitationUtilities,\n\tServices,\n\tSL,\n\tSV,\n\tValidationUtilities,\n\tXYZ,\n\tXYZ_X,\n\tXYZ_Y,\n\tXYZ_Z\n} from '../../../../types/index.js';\nimport { config, defaults } from '../../../../config/index.js';\n\nconst defaultCMYK = defaults.colors.cmyk;\nconst defaultHex = defaults.colors.hex;\nconst defaultHSL = defaults.colors.hsl;\nconst defaultHSV = defaults.colors.hsv;\nconst defaultLAB = defaults.colors.lab;\nconst defaultRGB = defaults.colors.rgb;\nconst defaultSL = defaults.colors.sl;\nconst defaultSV = defaults.colors.sv;\nconst defaultXYZ = defaults.colors.xyz;\n\nconst math = config.math;\n\nexport function colorConversionUtilitiesFactory(\n\tadjust: AdjustmentUtilities,\n\tbrand: BrandingUtilities,\n\tformat: FormattingUtilities,\n\thelpers: Helpers,\n\tsanitize: SanitationUtilities,\n\tservices: Services,\n\tvalidate: ValidationUtilities\n): ColorConversionUtilities {\n\tconst {\n\t\tcolor: { hueToRGB },\n\t\tdata: { deepClone }\n\t} = helpers;\n\tconst { errors, log } = services;\n\n\tfunction cmykToHSL(cmyk: CMYK): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(cmyk)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid CMYK value ${JSON.stringify(cmyk)}. Returning default HSL`,\n\t\t\t\t\t`utils.color.cmykToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\treturn rgbToHSL(cmykToRGB(deepClone(cmyk)));\n\t\t}, 'Error converting CMYK to HSL');\n\t}\n\n\tfunction cmykToRGB(cmyk: CMYK): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(cmyk)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid CMYK value ${JSON.stringify(cmyk)}. Returning default RGB.`,\n\t\t\t\t\t`utils.color.cmykToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\tconst clonedCMYK = deepClone(cmyk);\n\t\t\tconst r =\n\t\t\t\t255 *\n\t\t\t\t(1 - clonedCMYK.value.cyan / 100) *\n\t\t\t\t(1 - clonedCMYK.value.key / 100);\n\t\t\tconst g =\n\t\t\t\t255 *\n\t\t\t\t(1 - clonedCMYK.value.magenta / 100) *\n\t\t\t\t(1 - clonedCMYK.value.key / 100);\n\t\t\tconst b =\n\t\t\t\t255 *\n\t\t\t\t(1 - clonedCMYK.value.yellow / 100) *\n\t\t\t\t(1 - clonedCMYK.value.key / 100);\n\t\t\tconst rgb: RGB = {\n\t\t\t\tvalue: {\n\t\t\t\t\tred: brand.asByteRange(sanitize.percentile(r)),\n\t\t\t\t\tgreen: brand.asByteRange(sanitize.percentile(g)),\n\t\t\t\t\tblue: brand.asByteRange(sanitize.percentile(b))\n\t\t\t\t},\n\t\t\t\tformat: 'rgb'\n\t\t\t};\n\n\t\t\treturn adjust.clampRGB(rgb);\n\t\t}, 'Error converting CMYK to RGB');\n\t}\n\n\tfunction convertHSL(color: HSL, colorSpace: ColorSpaceExtended): Color {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(color)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid color value ${JSON.stringify(color)}. Returning default HSL.`,\n\t\t\t\t\t`utils.color.convertHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\tconst clonedColor = deepClone(color) as HSL;\n\n\t\t\tswitch (colorSpace) {\n\t\t\t\tcase 'cmyk':\n\t\t\t\t\treturn hslToCMYK(clonedColor);\n\t\t\t\tcase 'hex':\n\t\t\t\t\treturn hslToHex(clonedColor);\n\t\t\t\tcase 'hsl':\n\t\t\t\t\treturn deepClone(clonedColor);\n\t\t\t\tcase 'hsv':\n\t\t\t\t\treturn hslToHSV(clonedColor);\n\t\t\t\tcase 'lab':\n\t\t\t\t\treturn hslToLAB(clonedColor);\n\t\t\t\tcase 'rgb':\n\t\t\t\t\treturn hslToRGB(clonedColor);\n\t\t\t\tcase 'sl':\n\t\t\t\t\treturn hslToSL(clonedColor);\n\t\t\t\tcase 'sv':\n\t\t\t\t\treturn hslToSV(clonedColor);\n\t\t\t\tcase 'xyz':\n\t\t\t\t\treturn hslToXYZ(clonedColor);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Invalid color format');\n\t\t\t}\n\t\t}, 'Error converting HSL to color');\n\t}\n\n\tfunction convertToHSL(color: Exclude<Color, SL | SV>): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(color)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid color value ${JSON.stringify(color)}. Returning default HSL`,\n\t\t\t\t\t`utils.color.convertToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\tconst clonedColor = deepClone(color);\n\n\t\t\tswitch (color.format) {\n\t\t\t\tcase 'cmyk':\n\t\t\t\t\treturn cmykToHSL(clonedColor as CMYK);\n\t\t\t\tcase 'hex':\n\t\t\t\t\treturn hexToHSL(clonedColor as Hex);\n\t\t\t\tcase 'hsl':\n\t\t\t\t\treturn deepClone(clonedColor as HSL);\n\t\t\t\tcase 'hsv':\n\t\t\t\t\treturn hsvToHSL(clonedColor as HSV);\n\t\t\t\tcase 'lab':\n\t\t\t\t\treturn labToHSL(clonedColor as LAB);\n\t\t\t\tcase 'rgb':\n\t\t\t\t\treturn rgbToHSL(clonedColor as RGB);\n\t\t\t\tcase 'xyz':\n\t\t\t\t\treturn xyzToHSL(clonedColor as XYZ);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Invalid color format');\n\t\t\t}\n\t\t}, 'Error converting color to HSL');\n\t}\n\n\tfunction hexToHSL(hex: Hex): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hex)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid Hex value ${JSON.stringify(hex)}. Returning default HSL`,\n\t\t\t\t\t`utils.color.hexToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\treturn rgbToHSL(hexToRGB(deepClone(hex)));\n\t\t}, 'Error converting Hex to HSL');\n\t}\n\n\tfunction hexToHSLWrapper(input: string | Hex): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tconst clonedInput = deepClone(input);\n\n\t\t\tconst hex: Hex =\n\t\t\t\ttypeof clonedInput === 'string'\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\thex: brand.asHexSet(clonedInput)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tformat: 'hex'\n\t\t\t\t\t\t}\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\thex: brand.asHexSet(clonedInput.value.hex)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tformat: 'hex'\n\t\t\t\t\t\t};\n\t\t\treturn hexToHSL(hex);\n\t\t}, 'Error converting Hex to HSL');\n\t}\n\n\tfunction hexToRGB(hex: Hex): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hex)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid Hex value ${JSON.stringify(hex)}. Returning default RGB`,\n\t\t\t\t\t`utils.color.hexToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\tconst clonedHex = deepClone(hex);\n\t\t\tconst strippedHex = format.stripHashFromHex(clonedHex).value.hex;\n\t\t\tconst bigint = parseInt(strippedHex, 16);\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\tred: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile((bigint >> 16) & 255)\n\t\t\t\t\t),\n\t\t\t\t\tgreen: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile((bigint >> 8) & 255)\n\t\t\t\t\t),\n\t\t\t\t\tblue: brand.asByteRange(sanitize.percentile(bigint & 255))\n\t\t\t\t},\n\t\t\t\tformat: 'rgb'\n\t\t\t};\n\t\t}, 'Error converting Hex to RGB');\n\t}\n\n\tfunction hslToCMYK(hsl: HSL): CMYK {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default CMYK.`,\n\t\t\t\t\t`utils.color.hslToCMYK`\n\t\t\t\t);\n\n\t\t\t\treturn defaultCMYK;\n\t\t\t}\n\n\t\t\treturn rgbToCMYK(hslToRGB(deepClone(hsl)));\n\t\t}, 'Error converting HSL to CMYK');\n\t}\n\n\tfunction hslToHex(hsl: HSL): Hex {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default Hex`,\n\t\t\t\t\t`utils.color.hslToHex`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHex;\n\t\t\t}\n\n\t\t\treturn rgbToHex(hslToRGB(deepClone(hsl)));\n\t\t}, 'Error converting HSL to Hex');\n\t}\n\n\tfunction hslToHSV(hsl: HSL): HSV {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default HSV`,\n\t\t\t\t\t`utils.color.hslToHSV`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSV;\n\t\t\t}\n\n\t\t\tconst clonedHSL = deepClone(hsl);\n\t\t\tconst s = clonedHSL.value.saturation / 100;\n\t\t\tconst l = clonedHSL.value.lightness / 100;\n\t\t\tconst value = l + s * Math.min(l, 1 - 1);\n\t\t\tconst newSaturation = value === 0 ? 0 : 2 * (1 - l / value);\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\thue: brand.asRadial(\n\t\t\t\t\t\tsanitize.percentile(clonedHSL.value.hue)\n\t\t\t\t\t),\n\t\t\t\t\tsaturation: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(newSaturation * 100)\n\t\t\t\t\t),\n\t\t\t\t\tvalue: brand.asPercentile(sanitize.percentile(value * 100))\n\t\t\t\t},\n\t\t\t\tformat: 'hsv'\n\t\t\t};\n\t\t}, 'Error converting HSL to HSV');\n\t}\n\n\tfunction hslToLAB(hsl: HSL): LAB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default LAB`,\n\t\t\t\t\t`utils.color.hslToLAB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultLAB;\n\t\t\t}\n\n\t\t\treturn xyzToLAB(rgbToXYZ(hslToRGB(deepClone(hsl))));\n\t\t}, 'Error converting HSL to LAB');\n\t}\n\n\tfunction hslToRGB(hsl: HSL): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default RGB`,\n\t\t\t\t\t`utils.color.hslToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\tconst clonedHSL = deepClone(hsl);\n\t\t\tconst hue = clonedHSL.value.hue / 360;\n\n\t\t\tconst s = clonedHSL.value.saturation / 100;\n\t\t\tconst l = clonedHSL.value.lightness / 100;\n\t\t\tconst q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\tconst p = 2 * l - q;\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\tred: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile(hueToRGB(p, q, hue + 1 / 3) * 255)\n\t\t\t\t\t),\n\t\t\t\t\tgreen: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile(hueToRGB(p, q, hue) * 255)\n\t\t\t\t\t),\n\t\t\t\t\tblue: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile(hueToRGB(p, q, hue - 1 / 3) * 255)\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'rgb'\n\t\t\t};\n\t\t}, 'Error converting HSL to RGB');\n\t}\n\n\tfunction hslToSL(hsl: HSL): SL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default SL`,\n\t\t\t\t\t`utils.color.hslToSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultSL;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\tsaturation: hsl.value.saturation,\n\t\t\t\t\tlightness: hsl.value.lightness\n\t\t\t\t},\n\t\t\t\tformat: 'sl' as 'sl'\n\t\t\t};\n\t\t}, 'Error converting HSL to SL');\n\t}\n\n\tfunction hslToSV(hsl: HSL): SV {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default SV`,\n\t\t\t\t\t`utils.color.hslToSV`\n\t\t\t\t);\n\n\t\t\t\treturn defaultSV;\n\t\t\t}\n\n\t\t\treturn hsvToSV(rgbToHSV(hslToRGB(deepClone(hsl))));\n\t\t}, 'Error converting HSL to SV');\n\t}\n\n\tfunction hslToXYZ(hsl: HSL): XYZ {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default HSL.`,\n\t\t\t\t\t`utils.color.hslToXYZ`\n\t\t\t\t);\n\n\t\t\t\treturn defaultXYZ;\n\t\t\t}\n\n\t\t\treturn labToXYZ(hslToLAB(deepClone(hsl)));\n\t\t}, 'Error converting HSL to XYZ');\n\t}\n\n\tfunction hsvToHSL(hsv: HSV): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsv)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSV value ${JSON.stringify(hsv)}. Returning default HSL`,\n\t\t\t\t\t`utils.color.hsvToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\tconst clonedHSV = deepClone(hsv);\n\n\t\t\tconst s = clonedHSV.value.saturation / 100;\n\t\t\tconst v = clonedHSV.value.value / 100;\n\t\t\tconst l = v * (1 - s / 2);\n\n\t\t\tconst newSaturation =\n\t\t\t\tl === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l);\n\t\t\tconst lightness =\n\t\t\t\tclonedHSV.value.value * (1 - clonedHSV.value.saturation / 200);\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\thue: brand.asRadial(\n\t\t\t\t\t\tsanitize.percentile(clonedHSV.value.hue)\n\t\t\t\t\t),\n\t\t\t\t\tsaturation: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(newSaturation * 100)\n\t\t\t\t\t),\n\t\t\t\t\tlightness: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(lightness)\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'hsl'\n\t\t\t};\n\t\t}, 'Error converting HSV to HSL');\n\t}\n\n\tfunction hsvToSV(hsv: HSV): SV {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsv)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSV value ${JSON.stringify(hsv)}. Returning default SV`,\n\t\t\t\t\t`utils.color.hsvToSV`\n\t\t\t\t);\n\n\t\t\t\treturn defaultSV;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\tsaturation: hsv.value.saturation,\n\t\t\t\t\tvalue: hsv.value.value\n\t\t\t\t},\n\t\t\t\tformat: 'sv' as 'sv'\n\t\t\t};\n\t\t}, 'Error converting HSV to SV');\n\t}\n\n\tfunction labToHSL(lab: LAB): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(lab)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid LAB value ${JSON.stringify(lab)}. Returning default HSL.`,\n\t\t\t\t\t`utils.color.labToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\treturn rgbToHSL(labToRGB(deepClone(lab)));\n\t\t}, 'Error converting LAB to HSL');\n\t}\n\n\tfunction labToRGB(lab: LAB): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(lab)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid LAB value ${JSON.stringify(lab)}. . Returning default RGB.`,\n\t\t\t\t\t`utils.color.labToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\treturn xyzToRGB(labToXYZ(deepClone(lab)));\n\t\t}, 'Error converting LAB to RGB');\n\t}\n\n\tfunction labToXYZ(lab: LAB): XYZ {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(lab)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid LAB value ${JSON.stringify(lab)}. Returning default XYZ.`,\n\t\t\t\t\t`utils.color.labToXYZ`\n\t\t\t\t);\n\n\t\t\t\treturn defaultXYZ;\n\t\t\t}\n\n\t\t\tconst clonedLAB = deepClone(lab);\n\t\t\tconst refX = 95.047,\n\t\t\t\trefY = 100.0,\n\t\t\t\trefZ = 108.883;\n\n\t\t\tlet y = (clonedLAB.value.l + 16) / 116;\n\t\t\tlet x = clonedLAB.value.a / 500 + y;\n\t\t\tlet z = y - clonedLAB.value.b / 200;\n\n\t\t\tconst pow = Math.pow;\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\tx: brand.asXYZ_X(\n\t\t\t\t\t\tsanitize.percentile(\n\t\t\t\t\t\t\trefX *\n\t\t\t\t\t\t\t\t(pow(x, 3) > 0.008856\n\t\t\t\t\t\t\t\t\t? pow(x, 3)\n\t\t\t\t\t\t\t\t\t: (x - 16 / 116) / 7.787)\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\ty: brand.asXYZ_Y(\n\t\t\t\t\t\tsanitize.percentile(\n\t\t\t\t\t\t\trefY *\n\t\t\t\t\t\t\t\t(pow(y, 3) > 0.008856\n\t\t\t\t\t\t\t\t\t? pow(y, 3)\n\t\t\t\t\t\t\t\t\t: (y - 16 / 116) / 7.787)\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tz: brand.asXYZ_Z(\n\t\t\t\t\t\tsanitize.percentile(\n\t\t\t\t\t\t\trefZ *\n\t\t\t\t\t\t\t\t(pow(z, 3) > 0.008856\n\t\t\t\t\t\t\t\t\t? pow(z, 3)\n\t\t\t\t\t\t\t\t\t: (z - 16 / 116) / 7.787)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'xyz'\n\t\t\t};\n\t\t}, 'Error converting LAB to XYZ');\n\t}\n\n\tfunction rgbToCMYK(rgb: RGB): CMYK {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}.. Returning default CMYK`,\n\t\t\t\t\t`utils.color.rgbToCMYK`\n\t\t\t\t);\n\n\t\t\t\treturn defaultCMYK;\n\t\t\t}\n\n\t\t\tconst clonedRGB = deepClone(rgb);\n\n\t\t\tconst redPrime = clonedRGB.value.red / 255;\n\t\t\tconst greenPrime = clonedRGB.value.green / 255;\n\t\t\tconst bluePrime = clonedRGB.value.blue / 255;\n\n\t\t\tconst key = 1 - Math.max(redPrime, greenPrime, bluePrime);\n\n\t\t\tif (key === 1) {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tcyan: brand.asPercentile(0),\n\t\t\t\t\t\tmagenta: brand.asPercentile(0),\n\t\t\t\t\t\tyellow: brand.asPercentile(0),\n\t\t\t\t\t\tkey: brand.asPercentile(1)\n\t\t\t\t\t},\n\t\t\t\t\tformat: 'cmyk' as 'cmyk'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst invK = 1 - key;\n\t\t\tconst cyan = (1 - redPrime - key) / invK;\n\t\t\tconst magenta = (1 - greenPrime - key) / invK;\n\t\t\tconst yellow = (1 - bluePrime - key) / invK;\n\n\t\t\tconst cmyk = {\n\t\t\t\tvalue: {\n\t\t\t\t\tcyan: sanitize.percentile(brand.asPercentile(cyan)),\n\t\t\t\t\tmagenta: sanitize.percentile(brand.asPercentile(magenta)),\n\t\t\t\t\tyellow: sanitize.percentile(brand.asPercentile(yellow)),\n\t\t\t\t\tkey: sanitize.percentile(brand.asPercentile(key))\n\t\t\t\t},\n\t\t\t\tformat: 'cmyk' as 'cmyk'\n\t\t\t};\n\n\t\t\tlog.info(\n\t\t\t\t`Converted RGB ${JSON.stringify(clonedRGB)} to CMYK: ${JSON.stringify(deepClone(cmyk))}`,\n\t\t\t\t`utils.color.rgbToCMYK`\n\t\t\t);\n\n\t\t\treturn cmyk;\n\t\t}, 'Error converting RGB to CMYK');\n\t}\n\n\tfunction rgbToHex(rgb: RGB): Hex {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}. . Returning default Hex.`,\n\t\t\t\t\t`utils.color.rgbToHex`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHex;\n\t\t\t}\n\n\t\t\tconst clonedRGB = deepClone(rgb);\n\n\t\t\tif (\n\t\t\t\t[\n\t\t\t\t\tclonedRGB.value.red,\n\t\t\t\t\tclonedRGB.value.green,\n\t\t\t\t\tclonedRGB.value.blue\n\t\t\t\t].some(v => isNaN(v) || v < 0 || v > 255)\n\t\t\t) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB values:\\nR=${JSON.stringify(clonedRGB.value.red)}\\nG=${JSON.stringify(clonedRGB.value.green)}\\nB=${JSON.stringify(clonedRGB.value.blue)}\\nReturning default Hex.`,\n\t\t\t\t\t`utils.color.rgbToHex`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHex;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\thex: brand.asHexSet(\n\t\t\t\t\t\t`#${format.componentToHex(clonedRGB.value.red)}${format.componentToHex(clonedRGB.value.green)}${format.componentToHex(clonedRGB.value.blue)}`\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'hex' as 'hex'\n\t\t\t};\n\t\t}, 'Error converting RGB to Hex');\n\t}\n\n\tfunction rgbToHSL(rgb: RGB): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}. Returning default HSL.`,\n\t\t\t\t\t`utils.color.rgbToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\tconst clonedRGB = deepClone(rgb);\n\n\t\t\tconst red = (clonedRGB.value.red as unknown as number) / 255;\n\t\t\tconst green = (clonedRGB.value.green as unknown as number) / 255;\n\t\t\tconst blue = (clonedRGB.value.blue as unknown as number) / 255;\n\n\t\t\tconst max = Math.max(red, green, blue);\n\t\t\tconst min = Math.min(red, green, blue);\n\n\t\t\tlet hue = 0,\n\t\t\t\tsaturation = 0,\n\t\t\t\tlightness = (max + min) / 2;\n\n\t\t\tif (max !== min) {\n\t\t\t\tconst delta = max - min;\n\n\t\t\t\tsaturation =\n\t\t\t\t\tlightness > 0.5\n\t\t\t\t\t\t? delta / (2 - max - min)\n\t\t\t\t\t\t: delta / (max + min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase red:\n\t\t\t\t\t\thue = (green - blue) / delta + (green < blue ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase green:\n\t\t\t\t\t\thue = (blue - red) / delta + 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase blue:\n\t\t\t\t\t\thue = (red - green) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\thue *= 60;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\thue: brand.asRadial(sanitize.percentile(hue)),\n\t\t\t\t\tsaturation: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(saturation * 100)\n\t\t\t\t\t),\n\t\t\t\t\tlightness: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(lightness * 100)\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'hsl'\n\t\t\t};\n\t\t}, 'Error converting RGB to HSL');\n\t}\n\n\tfunction rgbToHSV(rgb: RGB): HSV {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}. Returning default HSV.`,\n\t\t\t\t\t`utils.color.rgbToHSV`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSV;\n\t\t\t}\n\n\t\t\tconst red = (rgb.value.red as unknown as number) / 255;\n\t\t\tconst green = (rgb.value.green as unknown as number) / 255;\n\t\t\tconst blue = (rgb.value.blue as unknown as number) / 255;\n\n\t\t\tconst max = Math.max(red, green, blue);\n\t\t\tconst min = Math.min(red, green, blue);\n\t\t\tconst delta = max - min;\n\n\t\t\tlet hue = 0;\n\n\t\t\tconst value = max;\n\t\t\tconst saturation = max === 0 ? 0 : delta / max;\n\n\t\t\tif (max !== min) {\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase red:\n\t\t\t\t\t\thue = (green - blue) / delta + (green < blue ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase green:\n\t\t\t\t\t\thue = (blue - red) / delta + 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase blue:\n\t\t\t\t\t\thue = (red - green) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue *= 60;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\thue: brand.asRadial(sanitize.percentile(hue)),\n\t\t\t\t\tsaturation: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(saturation * 100)\n\t\t\t\t\t),\n\t\t\t\t\tvalue: brand.asPercentile(sanitize.percentile(value * 100))\n\t\t\t\t},\n\t\t\t\tformat: 'hsv'\n\t\t\t};\n\t\t}, 'Error converting RGB to HSV');\n\t}\n\n\tfunction rgbToXYZ(rgb: RGB): XYZ {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}. Returning default XYZ`,\n\t\t\t\t\t`utils.color.rgbToXYZ`\n\t\t\t\t);\n\n\t\t\t\treturn defaultXYZ;\n\t\t\t}\n\n\t\t\t// convert RGB values to linear space\n\t\t\tconst red = (rgb.value.red as number) / 255;\n\t\t\tconst green = (rgb.value.green as number) / 255;\n\t\t\tconst blue = (rgb.value.blue as number) / 255;\n\n\t\t\tconst linearRed =\n\t\t\t\tred > 0.04045\n\t\t\t\t\t? Math.pow((red + 0.055) / 1.055, 2.4)\n\t\t\t\t\t: red / 12.92;\n\t\t\tconst linearGreen =\n\t\t\t\tgreen > 0.04045\n\t\t\t\t\t? Math.pow((green + 0.055) / 1.055, 2.4)\n\t\t\t\t\t: green / 12.92;\n\t\t\tconst linearBlue =\n\t\t\t\tblue > 0.04045\n\t\t\t\t\t? Math.pow((blue + 0.055) / 1.055, 2.4)\n\t\t\t\t\t: blue / 12.92;\n\n\t\t\t// scale to 100\n\t\t\tconst scaledRed = linearRed * 100;\n\t\t\tconst scaledGreen = linearGreen * 100;\n\t\t\tconst scaledBlue = linearBlue * 100;\n\n\t\t\tconst x = brand.asXYZ_X(\n\t\t\t\tadjust.clampXYZ(\n\t\t\t\t\tscaledRed * 0.4124 +\n\t\t\t\t\t\tscaledGreen * 0.3576 +\n\t\t\t\t\t\tscaledBlue * 0.1805,\n\t\t\t\t\tmath.maxXYZ_X\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst y = brand.asXYZ_Y(\n\t\t\t\tadjust.clampXYZ(\n\t\t\t\t\tscaledRed * 0.2126 +\n\t\t\t\t\t\tscaledGreen * 0.7152 +\n\t\t\t\t\t\tscaledBlue * 0.0722,\n\t\t\t\t\tmath.maxXYZ_Y\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst z = brand.asXYZ_Z(\n\t\t\t\tadjust.clampXYZ(\n\t\t\t\t\tscaledRed * 0.0193 +\n\t\t\t\t\t\tscaledGreen * 0.1192 +\n\t\t\t\t\t\tscaledBlue * 0.9505,\n\t\t\t\t\tmath.maxXYZ_Z\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tconst xyz: XYZ = { value: { x, y, z }, format: 'xyz' };\n\n\t\t\treturn validate.colorValue(xyz) ? xyz : defaultXYZ;\n\t\t}, 'Error converting RGB to XYZ');\n\t}\n\n\tfunction xyzToHSL(xyz: XYZ): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(xyz)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid XYZ value ${JSON.stringify(xyz)}. Returning default HSL.`,\n\t\t\t\t\t`utils.color.xyzToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\treturn rgbToHSL(xyzToRGB(deepClone(xyz)));\n\t\t}, 'Error converting XYZ to HSL');\n\t}\n\n\tfunction xyzToLAB(xyz: XYZ): LAB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(xyz)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid XYZ value ${JSON.stringify(xyz)}. Returning default LAB.`,\n\t\t\t\t\t`utils.color.xyzToLAB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultLAB;\n\t\t\t}\n\n\t\t\tconst clonedXYZ = deepClone(xyz);\n\t\t\tconst refX = math.maxXYZ_X,\n\t\t\t\trefY = math.maxXYZ_Y,\n\t\t\t\trefZ = math.maxXYZ_Z;\n\n\t\t\tclonedXYZ.value.x = adjust.normalizeXYZ(\n\t\t\t\tclonedXYZ.value.x,\n\t\t\t\trefX\n\t\t\t) as XYZ_X;\n\t\t\tclonedXYZ.value.y = adjust.normalizeXYZ(\n\t\t\t\tclonedXYZ.value.y,\n\t\t\t\trefY\n\t\t\t) as XYZ_Y;\n\t\t\tclonedXYZ.value.z = adjust.normalizeXYZ(\n\t\t\t\tclonedXYZ.value.z,\n\t\t\t\trefZ\n\t\t\t) as XYZ_Z;\n\n\t\t\tclonedXYZ.value.x =\n\t\t\t\tclonedXYZ.value.x > 0.008856\n\t\t\t\t\t? (Math.pow(clonedXYZ.value.x, 1 / 3) as XYZ_X)\n\t\t\t\t\t: ((7.787 * clonedXYZ.value.x + 16 / 116) as XYZ_X);\n\t\t\tclonedXYZ.value.y =\n\t\t\t\tclonedXYZ.value.y > 0.008856\n\t\t\t\t\t? (Math.pow(clonedXYZ.value.y, 1 / 3) as XYZ_Y)\n\t\t\t\t\t: ((7.787 * clonedXYZ.value.y + 16 / 116) as XYZ_Y);\n\t\t\tclonedXYZ.value.z =\n\t\t\t\tclonedXYZ.value.z > 0.008856\n\t\t\t\t\t? (Math.pow(clonedXYZ.value.z, 1 / 3) as XYZ_Z)\n\t\t\t\t\t: ((7.787 * clonedXYZ.value.z + 16 / 116) as XYZ_Z);\n\n\t\t\tconst l = sanitize.percentile(\n\t\t\t\tparseFloat((116 * clonedXYZ.value.y - 16).toFixed(2))\n\t\t\t);\n\t\t\tconst a = sanitize.lab(\n\t\t\t\tparseFloat(\n\t\t\t\t\t(500 * (clonedXYZ.value.x - clonedXYZ.value.y)).toFixed(2)\n\t\t\t\t),\n\t\t\t\t'a'\n\t\t\t);\n\t\t\tconst b = sanitize.lab(\n\t\t\t\tparseFloat(\n\t\t\t\t\t(200 * (clonedXYZ.value.y - clonedXYZ.value.z)).toFixed(2)\n\t\t\t\t),\n\t\t\t\t'b'\n\t\t\t);\n\n\t\t\tconst lab: LAB = {\n\t\t\t\tvalue: {\n\t\t\t\t\tl: brand.asLAB_L(sanitize.percentile(l)),\n\t\t\t\t\ta: brand.asLAB_A(sanitize.percentile(a)),\n\t\t\t\t\tb: brand.asLAB_B(sanitize.percentile(b))\n\t\t\t\t},\n\t\t\t\tformat: 'lab'\n\t\t\t};\n\n\t\t\tif (!validate.colorValue(lab)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid LAB value ${JSON.stringify(lab)}. Returning default LAB.`,\n\t\t\t\t\t`utils.color.xyzToLAB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultLAB;\n\t\t\t}\n\n\t\t\treturn lab;\n\t\t}, 'Error converting XYZ to LAB');\n\t}\n\n\tfunction xyzToRGB(xyz: XYZ): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(xyz)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid XYZ value ${JSON.stringify(xyz)}. Returning default RGB.`,\n\t\t\t\t\t`utils.color.xyzToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\tconst x = (xyz.value.x as unknown as number) / 100;\n\t\t\tconst y = (xyz.value.y as unknown as number) / 100;\n\t\t\tconst z = (xyz.value.z as unknown as number) / 100;\n\n\t\t\tlet red = x * 3.2406 + y * -1.5372 + z * -0.4986;\n\t\t\tlet green = x * -0.9689 + y * 1.8758 + z * 0.0415;\n\t\t\tlet blue = x * 0.0557 + y * -0.204 + z * 1.057;\n\n\t\t\tred = adjust.applyGammaCorrection(red);\n\t\t\tgreen = adjust.applyGammaCorrection(green);\n\t\t\tblue = adjust.applyGammaCorrection(blue);\n\n\t\t\tconst rgb: RGB = adjust.clampRGB({\n\t\t\t\tvalue: {\n\t\t\t\t\tred: brand.asByteRange(sanitize.percentile(red)),\n\t\t\t\t\tgreen: brand.asByteRange(sanitize.percentile(green)),\n\t\t\t\t\tblue: brand.asByteRange(sanitize.percentile(blue))\n\t\t\t\t},\n\t\t\t\tformat: 'rgb'\n\t\t\t});\n\n\t\t\treturn rgb;\n\t\t}, 'Error converting XYZ to RGB');\n\t}\n\n\tconst colorConversionUtilities: ColorConversionUtilities = {\n\t\tcmykToHSL,\n\t\tcmykToRGB,\n\t\tconvertHSL,\n\t\tconvertToHSL,\n\t\thexToHSL,\n\t\thexToHSLWrapper,\n\t\thexToRGB,\n\t\thslToCMYK,\n\t\thslToHex,\n\t\thslToHSV,\n\t\thslToLAB,\n\t\thslToRGB,\n\t\thslToSL,\n\t\thslToSV,\n\t\thslToXYZ,\n\t\thsvToHSL,\n\t\thsvToSV,\n\t\tlabToHSL,\n\t\tlabToRGB,\n\t\tlabToXYZ,\n\t\trgbToCMYK,\n\t\trgbToHex,\n\t\trgbToHSL,\n\t\trgbToHSV,\n\t\trgbToXYZ,\n\t\txyzToHSL,\n\t\txyzToLAB,\n\t\txyzToRGB\n\t};\n\n\treturn errors.handleSync(() => {\n\t\treturn colorConversionUtilities;\n\t}, 'Error creating color conversion utilities sub-group.');\n}\n"],"names":[],"mappings":"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"}