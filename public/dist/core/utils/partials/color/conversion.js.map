{"version":3,"file":"conversion.js","sources":["../../../../../../../src/core/utils/partials/color/conversion.ts"],"sourcesContent":["import {\n\tAdjustmentUtilities,\n\tBrandingUtilities,\n\tCMYK,\n\tColor,\n\tColorConversionUtilities,\n\tColorSpace,\n\tFormattingUtilities,\n\tHelpers,\n\tHex,\n\tHSL,\n\tRGB,\n\tSanitationUtilities,\n\tServices,\n\tValidationUtilities\n} from '../../../../types/index.js';\nimport { defaults } from '../../../../config/index.js';\n\nconst defaultCMYK = defaults.colors.cmyk;\nconst defaultHex = defaults.colors.hex;\nconst defaultHSL = defaults.colors.hsl;\nconst defaultRGB = defaults.colors.rgb;\n\nexport function colorConversionUtilitiesFactory(\n\tadjust: AdjustmentUtilities,\n\tbrand: BrandingUtilities,\n\tformat: FormattingUtilities,\n\thelpers: Helpers,\n\tsanitize: SanitationUtilities,\n\tservices: Services,\n\tvalidate: ValidationUtilities\n): ColorConversionUtilities {\n\tconst {\n\t\tcolor: { hueToRGB },\n\t\tdata: { deepClone }\n\t} = helpers;\n\tconst { errors, log } = services;\n\n\tfunction cmykToHSL(cmyk: CMYK): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(cmyk)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid CMYK value ${JSON.stringify(cmyk)}. Returning default HSL`,\n\t\t\t\t\t`utils.color.cmykToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\treturn rgbToHSL(cmykToRGB(deepClone(cmyk)));\n\t\t}, 'Error converting CMYK to HSL');\n\t}\n\n\tfunction cmykToRGB(cmyk: CMYK): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(cmyk)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid CMYK value ${JSON.stringify(cmyk)}. Returning default RGB.`,\n\t\t\t\t\t`utils.color.cmykToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\tconst clonedCMYK = deepClone(cmyk);\n\t\t\tconst r =\n\t\t\t\t255 *\n\t\t\t\t(1 - clonedCMYK.value.cyan / 100) *\n\t\t\t\t(1 - clonedCMYK.value.key / 100);\n\t\t\tconst g =\n\t\t\t\t255 *\n\t\t\t\t(1 - clonedCMYK.value.magenta / 100) *\n\t\t\t\t(1 - clonedCMYK.value.key / 100);\n\t\t\tconst b =\n\t\t\t\t255 *\n\t\t\t\t(1 - clonedCMYK.value.yellow / 100) *\n\t\t\t\t(1 - clonedCMYK.value.key / 100);\n\t\t\tconst rgb: RGB = {\n\t\t\t\tvalue: {\n\t\t\t\t\tred: brand.asByteRange(sanitize.percentile(r)),\n\t\t\t\t\tgreen: brand.asByteRange(sanitize.percentile(g)),\n\t\t\t\t\tblue: brand.asByteRange(sanitize.percentile(b))\n\t\t\t\t},\n\t\t\t\tformat: 'rgb'\n\t\t\t};\n\n\t\t\treturn adjust.clampRGB(rgb);\n\t\t}, 'Error converting CMYK to RGB');\n\t}\n\n\tfunction convertHSL(color: HSL, colorSpace: ColorSpace): Color {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(color)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid color value ${JSON.stringify(color)}. Returning default HSL.`,\n\t\t\t\t\t`utils.color.convertHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\tconst clonedColor = deepClone(color) as HSL;\n\n\t\t\tswitch (colorSpace) {\n\t\t\t\tcase 'cmyk':\n\t\t\t\t\treturn hslToCMYK(clonedColor);\n\t\t\t\tcase 'hex':\n\t\t\t\t\treturn hslToHex(clonedColor);\n\t\t\t\tcase 'hsl':\n\t\t\t\t\treturn deepClone(clonedColor);\n\t\t\t\tcase 'rgb':\n\t\t\t\t\treturn hslToRGB(clonedColor);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Invalid color format');\n\t\t\t}\n\t\t}, 'Error converting HSL to color');\n\t}\n\n\tfunction convertToHSL(color: Color): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(color)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid color value ${JSON.stringify(color)}. Returning default HSL`,\n\t\t\t\t\t`utils.color.convertToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\tconst clonedColor = deepClone(color);\n\n\t\t\tswitch (color.format) {\n\t\t\t\tcase 'cmyk':\n\t\t\t\t\treturn cmykToHSL(clonedColor as CMYK);\n\t\t\t\tcase 'hex':\n\t\t\t\t\treturn hexToHSL(clonedColor as Hex);\n\t\t\t\tcase 'hsl':\n\t\t\t\t\treturn deepClone(clonedColor as HSL);\n\t\t\t\tcase 'rgb':\n\t\t\t\t\treturn rgbToHSL(clonedColor as RGB);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Invalid color format');\n\t\t\t}\n\t\t}, 'Error converting color to HSL');\n\t}\n\n\tfunction hexToHSL(hex: Hex): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hex)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid Hex value ${JSON.stringify(hex)}. Returning default HSL`,\n\t\t\t\t\t`utils.color.hexToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\treturn rgbToHSL(hexToRGB(deepClone(hex)));\n\t\t}, 'Error converting Hex to HSL');\n\t}\n\n\tfunction hexToHSLWrapper(input: string | Hex): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tconst clonedInput = deepClone(input);\n\n\t\t\tconst hex: Hex =\n\t\t\t\ttypeof clonedInput === 'string'\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\thex: brand.asHexSet(clonedInput)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tformat: 'hex'\n\t\t\t\t\t\t}\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\thex: brand.asHexSet(clonedInput.value.hex)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tformat: 'hex'\n\t\t\t\t\t\t};\n\t\t\treturn hexToHSL(hex);\n\t\t}, 'Error converting Hex to HSL');\n\t}\n\n\tfunction hexToRGB(hex: Hex): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hex)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid Hex value ${JSON.stringify(hex)}. Returning default RGB`,\n\t\t\t\t\t`utils.color.hexToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\tconst clonedHex = deepClone(hex);\n\t\t\tconst strippedHex = format.stripHashFromHex(clonedHex).value.hex;\n\t\t\tconst bigint = parseInt(strippedHex, 16);\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\tred: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile((bigint >> 16) & 255)\n\t\t\t\t\t),\n\t\t\t\t\tgreen: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile((bigint >> 8) & 255)\n\t\t\t\t\t),\n\t\t\t\t\tblue: brand.asByteRange(sanitize.percentile(bigint & 255))\n\t\t\t\t},\n\t\t\t\tformat: 'rgb'\n\t\t\t};\n\t\t}, 'Error converting Hex to RGB');\n\t}\n\n\tfunction hslToCMYK(hsl: HSL): CMYK {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default CMYK.`,\n\t\t\t\t\t`utils.color.hslToCMYK`\n\t\t\t\t);\n\n\t\t\t\treturn defaultCMYK;\n\t\t\t}\n\n\t\t\treturn rgbToCMYK(hslToRGB(deepClone(hsl)));\n\t\t}, 'Error converting HSL to CMYK');\n\t}\n\n\tfunction hslToHex(hsl: HSL): Hex {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default Hex`,\n\t\t\t\t\t`utils.color.hslToHex`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHex;\n\t\t\t}\n\n\t\t\treturn rgbToHex(hslToRGB(deepClone(hsl)));\n\t\t}, 'Error converting HSL to Hex');\n\t}\n\n\tfunction hslToRGB(hsl: HSL): RGB {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(hsl)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid HSL value ${JSON.stringify(hsl)}. Returning default RGB`,\n\t\t\t\t\t`utils.color.hslToRGB`\n\t\t\t\t);\n\n\t\t\t\treturn defaultRGB;\n\t\t\t}\n\n\t\t\tconst clonedHSL = deepClone(hsl);\n\t\t\tconst hue = clonedHSL.value.hue / 360;\n\n\t\t\tconst s = clonedHSL.value.saturation / 100;\n\t\t\tconst l = clonedHSL.value.lightness / 100;\n\t\t\tconst q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\tconst p = 2 * l - q;\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\tred: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile(hueToRGB(p, q, hue + 1 / 3) * 255)\n\t\t\t\t\t),\n\t\t\t\t\tgreen: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile(hueToRGB(p, q, hue) * 255)\n\t\t\t\t\t),\n\t\t\t\t\tblue: brand.asByteRange(\n\t\t\t\t\t\tsanitize.percentile(hueToRGB(p, q, hue - 1 / 3) * 255)\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'rgb'\n\t\t\t};\n\t\t}, 'Error converting HSL to RGB');\n\t}\n\n\tfunction rgbToCMYK(rgb: RGB): CMYK {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}.. Returning default CMYK`,\n\t\t\t\t\t`utils.color.rgbToCMYK`\n\t\t\t\t);\n\n\t\t\t\treturn defaultCMYK;\n\t\t\t}\n\n\t\t\tconst clonedRGB = deepClone(rgb);\n\n\t\t\tconst redPrime = clonedRGB.value.red / 255;\n\t\t\tconst greenPrime = clonedRGB.value.green / 255;\n\t\t\tconst bluePrime = clonedRGB.value.blue / 255;\n\n\t\t\tconst key = 1 - Math.max(redPrime, greenPrime, bluePrime);\n\n\t\t\tif (key === 1) {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tcyan: brand.asPercentile(0),\n\t\t\t\t\t\tmagenta: brand.asPercentile(0),\n\t\t\t\t\t\tyellow: brand.asPercentile(0),\n\t\t\t\t\t\tkey: brand.asPercentile(1)\n\t\t\t\t\t},\n\t\t\t\t\tformat: 'cmyk' as 'cmyk'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst invK = 1 - key;\n\t\t\tconst cyan = (1 - redPrime - key) / invK;\n\t\t\tconst magenta = (1 - greenPrime - key) / invK;\n\t\t\tconst yellow = (1 - bluePrime - key) / invK;\n\n\t\t\tconst cmyk = {\n\t\t\t\tvalue: {\n\t\t\t\t\tcyan: sanitize.percentile(brand.asPercentile(cyan)),\n\t\t\t\t\tmagenta: sanitize.percentile(brand.asPercentile(magenta)),\n\t\t\t\t\tyellow: sanitize.percentile(brand.asPercentile(yellow)),\n\t\t\t\t\tkey: sanitize.percentile(brand.asPercentile(key))\n\t\t\t\t},\n\t\t\t\tformat: 'cmyk' as 'cmyk'\n\t\t\t};\n\n\t\t\tlog.info(\n\t\t\t\t`Converted RGB ${JSON.stringify(clonedRGB)} to CMYK: ${JSON.stringify(deepClone(cmyk))}`,\n\t\t\t\t`utils.color.rgbToCMYK`\n\t\t\t);\n\n\t\t\treturn cmyk;\n\t\t}, 'Error converting RGB to CMYK');\n\t}\n\n\tfunction rgbToHex(rgb: RGB): Hex {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}. . Returning default Hex.`,\n\t\t\t\t\t`utils.color.rgbToHex`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHex;\n\t\t\t}\n\n\t\t\tconst clonedRGB = deepClone(rgb);\n\n\t\t\tif (\n\t\t\t\t[\n\t\t\t\t\tclonedRGB.value.red,\n\t\t\t\t\tclonedRGB.value.green,\n\t\t\t\t\tclonedRGB.value.blue\n\t\t\t\t].some(v => isNaN(v) || v < 0 || v > 255)\n\t\t\t) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB values:\\nR=${JSON.stringify(clonedRGB.value.red)}\\nG=${JSON.stringify(clonedRGB.value.green)}\\nB=${JSON.stringify(clonedRGB.value.blue)}\\nReturning default Hex.`,\n\t\t\t\t\t`utils.color.rgbToHex`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHex;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\thex: brand.asHexSet(\n\t\t\t\t\t\t`#${format.componentToHex(clonedRGB.value.red)}${format.componentToHex(clonedRGB.value.green)}${format.componentToHex(clonedRGB.value.blue)}`\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'hex' as 'hex'\n\t\t\t};\n\t\t}, 'Error converting RGB to Hex');\n\t}\n\n\tfunction rgbToHSL(rgb: RGB): HSL {\n\t\treturn errors.handleSync(() => {\n\t\t\tif (!validate.colorValue(rgb)) {\n\t\t\t\tlog.info(\n\t\t\t\t\t`Invalid RGB value ${JSON.stringify(rgb)}. Returning default HSL.`,\n\t\t\t\t\t`utils.color.rgbToHSL`\n\t\t\t\t);\n\n\t\t\t\treturn defaultHSL;\n\t\t\t}\n\n\t\t\tconst clonedRGB = deepClone(rgb);\n\n\t\t\tconst red = (clonedRGB.value.red as unknown as number) / 255;\n\t\t\tconst green = (clonedRGB.value.green as unknown as number) / 255;\n\t\t\tconst blue = (clonedRGB.value.blue as unknown as number) / 255;\n\n\t\t\tconst max = Math.max(red, green, blue);\n\t\t\tconst min = Math.min(red, green, blue);\n\n\t\t\tlet hue = 0,\n\t\t\t\tsaturation = 0,\n\t\t\t\tlightness = (max + min) / 2;\n\n\t\t\tif (max !== min) {\n\t\t\t\tconst delta = max - min;\n\n\t\t\t\tsaturation =\n\t\t\t\t\tlightness > 0.5\n\t\t\t\t\t\t? delta / (2 - max - min)\n\t\t\t\t\t\t: delta / (max + min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase red:\n\t\t\t\t\t\thue = (green - blue) / delta + (green < blue ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase green:\n\t\t\t\t\t\thue = (blue - red) / delta + 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase blue:\n\t\t\t\t\t\thue = (red - green) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\thue *= 60;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tvalue: {\n\t\t\t\t\thue: brand.asRadial(sanitize.percentile(hue)),\n\t\t\t\t\tsaturation: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(saturation * 100)\n\t\t\t\t\t),\n\t\t\t\t\tlightness: brand.asPercentile(\n\t\t\t\t\t\tsanitize.percentile(lightness * 100)\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tformat: 'hsl'\n\t\t\t};\n\t\t}, 'Error converting RGB to HSL');\n\t}\n\n\tconst colorConversionUtilities: ColorConversionUtilities = {\n\t\tcmykToHSL,\n\t\tcmykToRGB,\n\t\tconvertHSL,\n\t\tconvertToHSL,\n\t\thexToHSL,\n\t\thexToHSLWrapper,\n\t\thexToRGB,\n\t\thslToCMYK,\n\t\thslToHex,\n\t\thslToRGB,\n\t\trgbToCMYK,\n\t\trgbToHex,\n\t\trgbToHSL\n\t};\n\n\treturn errors.handleSync(() => {\n\t\treturn colorConversionUtilities;\n\t}, 'Error creating color conversion utilities sub-group.');\n}\n"],"names":[],"mappings":"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"}