// File: core/utils/partials/color/generate.ts
import { defaults } from '../../../../config/index.js';
const defaultColors = defaults.colors;
export function colorGenerationUtilitiesFactory(sanitize, services, validate) {
    const { errors, log } = services;
    function generateRandomHSL() {
        return errors.handleSync(() => {
            const hsl = {
                value: {
                    hue: sanitize.radial(Math.floor(Math.random() * 360)),
                    saturation: sanitize.percentile(Math.floor(Math.random() * 101)),
                    lightness: sanitize.percentile(Math.floor(Math.random() * 101))
                },
                format: 'hsl'
            };
            if (!validate.colorValue(hsl)) {
                log.error(`Invalid random HSL color value ${JSON.stringify(hsl)}`, `generateRandomHSL`);
                return defaultColors.hsl;
            }
            log.debug(`Generated randomHSL: ${JSON.stringify(hsl)}`, `generateRandomHSL`);
            return hsl;
        }, 'Error generating random HSL color.');
    }
    function generateRandomSL() {
        return errors.handleSync(() => {
            const sl = {
                value: {
                    saturation: sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100))),
                    lightness: sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100)))
                },
                format: 'sl'
            };
            if (!validate.colorValue(sl)) {
                log.error(`Invalid random SV color value ${JSON.stringify(sl)}`, `generateRandomSL`);
                return defaultColors.sl;
            }
            log.debug(`Generated randomSL: ${JSON.stringify(sl)}`, `generateRandomSL`);
            return sl;
        }, 'Error generating random SL color');
    }
    const colorGenerationUtilities = {
        generateRandomHSL,
        generateRandomSL
    };
    return errors.handleSync(() => colorGenerationUtilities, 'Error creating color generation sub-utilities group.');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS91dGlscy9wYXJ0aWFscy9jb2xvci9nZW5lcmF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFVOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXZELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFFdEMsTUFBTSxVQUFVLCtCQUErQixDQUM5QyxRQUE2QixFQUM3QixRQUFrQixFQUNsQixRQUE2QjtJQUU3QixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQztJQUVqQyxTQUFTLGlCQUFpQjtRQUN6QixPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzdCLE1BQU0sR0FBRyxHQUFRO2dCQUNoQixLQUFLLEVBQUU7b0JBQ04sR0FBRyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7b0JBQ3JELFVBQVUsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FDL0I7b0JBQ0QsU0FBUyxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUMvQjtpQkFDRDtnQkFDRCxNQUFNLEVBQUUsS0FBSzthQUNiLENBQUM7WUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUMvQixHQUFHLENBQUMsS0FBSyxDQUNSLGtDQUFrQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQ3ZELG1CQUFtQixDQUNuQixDQUFDO2dCQUVGLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQztZQUMxQixDQUFDO1lBRUQsR0FBRyxDQUFDLEtBQUssQ0FDUix3QkFBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUM3QyxtQkFBbUIsQ0FDbkIsQ0FBQztZQUVGLE9BQU8sR0FBRyxDQUFDO1FBQ1osQ0FBQyxFQUFFLG9DQUFvQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFNBQVMsZ0JBQWdCO1FBQ3hCLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDN0IsTUFBTSxFQUFFLEdBQU87Z0JBQ2QsS0FBSyxFQUFFO29CQUNOLFVBQVUsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FDL0M7b0JBQ0QsU0FBUyxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQzdCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUMvQztpQkFDRDtnQkFDRCxNQUFNLEVBQUUsSUFBSTthQUNaLENBQUM7WUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNwQyxHQUFHLENBQUMsS0FBSyxDQUNSLGlDQUFpQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQ3JELGtCQUFrQixDQUNsQixDQUFDO2dCQUVGLE9BQU8sYUFBYSxDQUFDLEVBQUUsQ0FBQztZQUN6QixDQUFDO1lBRUQsR0FBRyxDQUFDLEtBQUssQ0FDUix1QkFBdUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUMzQyxrQkFBa0IsQ0FDbEIsQ0FBQztZQUVGLE9BQU8sRUFBRSxDQUFDO1FBQ1gsQ0FBQyxFQUFFLGtDQUFrQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU0sd0JBQXdCLEdBQTZCO1FBQzFELGlCQUFpQjtRQUNqQixnQkFBZ0I7S0FDaEIsQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FDdkIsR0FBRyxFQUFFLENBQUMsd0JBQXdCLEVBQzlCLHNEQUFzRCxDQUN0RCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGNvcmUvdXRpbHMvcGFydGlhbHMvY29sb3IvZ2VuZXJhdGUudHNcblxuaW1wb3J0IHtcblx0Q29sb3JHZW5lcmF0aW9uVXRpbGl0aWVzLFxuXHRIU0wsXG5cdFNMLFxuXHRTYW5pdGF0aW9uVXRpbGl0aWVzLFxuXHRTZXJ2aWNlcyxcblx0VmFsaWRhdGlvblV0aWxpdGllc1xufSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbmZpZy9pbmRleC5qcyc7XG5cbmNvbnN0IGRlZmF1bHRDb2xvcnMgPSBkZWZhdWx0cy5jb2xvcnM7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvckdlbmVyYXRpb25VdGlsaXRpZXNGYWN0b3J5KFxuXHRzYW5pdGl6ZTogU2FuaXRhdGlvblV0aWxpdGllcyxcblx0c2VydmljZXM6IFNlcnZpY2VzLFxuXHR2YWxpZGF0ZTogVmFsaWRhdGlvblV0aWxpdGllc1xuKTogQ29sb3JHZW5lcmF0aW9uVXRpbGl0aWVzIHtcblx0Y29uc3QgeyBlcnJvcnMsIGxvZyB9ID0gc2VydmljZXM7XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21IU0woKTogSFNMIHtcblx0XHRyZXR1cm4gZXJyb3JzLmhhbmRsZVN5bmMoKCkgPT4ge1xuXHRcdFx0Y29uc3QgaHNsOiBIU0wgPSB7XG5cdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0aHVlOiBzYW5pdGl6ZS5yYWRpYWwoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYwKSksXG5cdFx0XHRcdFx0c2F0dXJhdGlvbjogc2FuaXRpemUucGVyY2VudGlsZShcblx0XHRcdFx0XHRcdE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSlcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGxpZ2h0bmVzczogc2FuaXRpemUucGVyY2VudGlsZShcblx0XHRcdFx0XHRcdE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSlcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdH07XG5cblx0XHRcdGlmICghdmFsaWRhdGUuY29sb3JWYWx1ZShoc2wpKSB7XG5cdFx0XHRcdGxvZy5lcnJvcihcblx0XHRcdFx0XHRgSW52YWxpZCByYW5kb20gSFNMIGNvbG9yIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gLFxuXHRcdFx0XHRcdGBnZW5lcmF0ZVJhbmRvbUhTTGBcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRyZXR1cm4gZGVmYXVsdENvbG9ycy5oc2w7XG5cdFx0XHR9XG5cblx0XHRcdGxvZy5kZWJ1Zyhcblx0XHRcdFx0YEdlbmVyYXRlZCByYW5kb21IU0w6ICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gLFxuXHRcdFx0XHRgZ2VuZXJhdGVSYW5kb21IU0xgXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gaHNsO1xuXHRcdH0sICdFcnJvciBnZW5lcmF0aW5nIHJhbmRvbSBIU0wgY29sb3IuJyk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbVNMKCk6IFNMIHtcblx0XHRyZXR1cm4gZXJyb3JzLmhhbmRsZVN5bmMoKCkgPT4ge1xuXHRcdFx0Y29uc3Qgc2w6IFNMID0ge1xuXHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdHNhdHVyYXRpb246IHNhbml0aXplLnBlcmNlbnRpbGUoXG5cdFx0XHRcdFx0XHRNYXRoLm1heCgwLCBNYXRoLm1pbigxMDAsIE1hdGgucmFuZG9tKCkgKiAxMDApKVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0bGlnaHRuZXNzOiBzYW5pdGl6ZS5wZXJjZW50aWxlKFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBNYXRoLnJhbmRvbSgpICogMTAwKSlcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZvcm1hdDogJ3NsJ1xuXHRcdFx0fTtcblxuXHRcdFx0aWYgKCF2YWxpZGF0ZS5jb2xvclZhbHVlKHNsIGFzIFNMKSkge1xuXHRcdFx0XHRsb2cuZXJyb3IoXG5cdFx0XHRcdFx0YEludmFsaWQgcmFuZG9tIFNWIGNvbG9yIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoc2wpfWAsXG5cdFx0XHRcdFx0YGdlbmVyYXRlUmFuZG9tU0xgXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cmV0dXJuIGRlZmF1bHRDb2xvcnMuc2w7XG5cdFx0XHR9XG5cblx0XHRcdGxvZy5kZWJ1Zyhcblx0XHRcdFx0YEdlbmVyYXRlZCByYW5kb21TTDogJHtKU09OLnN0cmluZ2lmeShzbCl9YCxcblx0XHRcdFx0YGdlbmVyYXRlUmFuZG9tU0xgXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gc2w7XG5cdFx0fSwgJ0Vycm9yIGdlbmVyYXRpbmcgcmFuZG9tIFNMIGNvbG9yJyk7XG5cdH1cblxuXHRjb25zdCBjb2xvckdlbmVyYXRpb25VdGlsaXRpZXM6IENvbG9yR2VuZXJhdGlvblV0aWxpdGllcyA9IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUhTTCxcblx0XHRnZW5lcmF0ZVJhbmRvbVNMXG5cdH07XG5cblx0cmV0dXJuIGVycm9ycy5oYW5kbGVTeW5jKFxuXHRcdCgpID0+IGNvbG9yR2VuZXJhdGlvblV0aWxpdGllcyxcblx0XHQnRXJyb3IgY3JlYXRpbmcgY29sb3IgZ2VuZXJhdGlvbiBzdWItdXRpbGl0aWVzIGdyb3VwLidcblx0KTtcbn1cbiJdfQ==