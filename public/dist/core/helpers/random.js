// File: core/helpers/random.ts
export const randomHelpersFactory = () => ({
    selectRandomFromWeights(obj) {
        return this.selectWeightedRandom(obj.weights, obj.values);
    },
    selectWeightedRandom(weights, values) {
        try {
            if (weights.length !== values.length || weights.length === 0) {
                throw new Error('Weights and values must have the same non-zero length.');
            }
            const cumulativeProbabilities = values.reduce((acc, value, i) => {
                acc[i] = (acc[i - 1] ?? 0) + value;
                return acc;
            }, []);
            const random = Math.random();
            const selectedIndex = cumulativeProbabilities.findIndex(prob => random < prob);
            return weights[selectedIndex >= 0 ? selectedIndex : weights.length - 1];
        }
        catch (error) {
            throw new Error(`[getWeightedRandomValue-ERR]: Error generating weighted random value: ${error instanceof Error ? error.message : error}`);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvaGVscGVycy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBSS9CLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELHVCQUF1QixDQUFDLEdBR3ZCO1FBQ0EsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUNELG9CQUFvQixDQUNuQixPQUEwQixFQUMxQixNQUF5QjtRQUV6QixJQUFJLENBQUM7WUFDSixJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUM5RCxNQUFNLElBQUksS0FBSyxDQUNkLHdEQUF3RCxDQUN4RCxDQUFDO1lBQ0gsQ0FBQztZQUVELE1BQU0sdUJBQXVCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDNUMsQ0FBQyxHQUFhLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDbkMsT0FBTyxHQUFHLENBQUM7WUFDWixDQUFDLEVBQ0QsRUFBRSxDQUNGLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDN0IsTUFBTSxhQUFhLEdBQUcsdUJBQXVCLENBQUMsU0FBUyxDQUN0RCxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQ3JCLENBQUM7WUFFRixPQUFPLE9BQU8sQ0FDYixhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUN2RCxDQUFDO1FBQ0gsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FDZCx5RUFDQyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUMxQyxFQUFFLENBQ0YsQ0FBQztRQUNILENBQUM7SUFDRixDQUFDO0NBQ0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogY29yZS9oZWxwZXJzL3JhbmRvbS50c1xuXG5pbXBvcnQgeyBSYW5kb21IZWxwZXJzIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuXG5leHBvcnQgY29uc3QgcmFuZG9tSGVscGVyc0ZhY3RvcnkgPSAoKTogUmFuZG9tSGVscGVycyA9PiAoe1xuXHRzZWxlY3RSYW5kb21Gcm9tV2VpZ2h0cyhvYmo6IHtcblx0XHR3ZWlnaHRzOiByZWFkb25seSBudW1iZXJbXTtcblx0XHR2YWx1ZXM6IHJlYWRvbmx5IG51bWJlcltdO1xuXHR9KTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5zZWxlY3RXZWlnaHRlZFJhbmRvbShvYmoud2VpZ2h0cywgb2JqLnZhbHVlcyk7XG5cdH0sXG5cdHNlbGVjdFdlaWdodGVkUmFuZG9tKFxuXHRcdHdlaWdodHM6IHJlYWRvbmx5IG51bWJlcltdLFxuXHRcdHZhbHVlczogcmVhZG9ubHkgbnVtYmVyW11cblx0KTogbnVtYmVyIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKHdlaWdodHMubGVuZ3RoICE9PSB2YWx1ZXMubGVuZ3RoIHx8IHdlaWdodHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHQnV2VpZ2h0cyBhbmQgdmFsdWVzIG11c3QgaGF2ZSB0aGUgc2FtZSBub24temVybyBsZW5ndGguJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBjdW11bGF0aXZlUHJvYmFiaWxpdGllcyA9IHZhbHVlcy5yZWR1Y2U8bnVtYmVyW10+KFxuXHRcdFx0XHQoYWNjOiBudW1iZXJbXSwgdmFsdWUsIGkpID0+IHtcblx0XHRcdFx0XHRhY2NbaV0gPSAoYWNjW2kgLSAxXSA/PyAwKSArIHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybiBhY2M7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFtdXG5cdFx0XHQpO1xuXG5cdFx0XHRjb25zdCByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuXHRcdFx0Y29uc3Qgc2VsZWN0ZWRJbmRleCA9IGN1bXVsYXRpdmVQcm9iYWJpbGl0aWVzLmZpbmRJbmRleChcblx0XHRcdFx0cHJvYiA9PiByYW5kb20gPCBwcm9iXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gd2VpZ2h0c1tcblx0XHRcdFx0c2VsZWN0ZWRJbmRleCA+PSAwID8gc2VsZWN0ZWRJbmRleCA6IHdlaWdodHMubGVuZ3RoIC0gMVxuXHRcdFx0XTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgW2dldFdlaWdodGVkUmFuZG9tVmFsdWUtRVJSXTogRXJyb3IgZ2VuZXJhdGluZyB3ZWlnaHRlZCByYW5kb20gdmFsdWU6ICR7XG5cdFx0XHRcdFx0ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvclxuXHRcdFx0XHR9YFxuXHRcdFx0KTtcblx0XHR9XG5cdH1cbn0pO1xuIl19