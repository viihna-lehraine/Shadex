// ColorGen - version 0.6.3-dev
// Author: Viihna Leraine (viihna@ViihnaTech.com / viihna.78 (Signal) / Viihna-Lehraine (Github))
// License: GNU GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html)
// You may use this code for any purpose EXCEPT for the creation of proprietary derivatives. I encourage you to improve on my code or to include it in other projects if you find it helpful. Please credit me as the original author.
// This application comes with ABSOLUTELY NO WARRANTY OR GUARANTEE.
// File: index.ts
import { EventManager } from './dom/index.js';
import { config } from './config/index.js';
const mode = config.mode;
async function initializeApp() {
    // 1. Bootstrap minimal dependencies
    console.log('[STARTUP]: Importing bootstrap module...');
    const { bootstrap } = await import('./app/bootstrap.js');
    console.log('[STARTUP]: Executing bootstrap process.');
    const { helpers, services } = await bootstrap();
    const { errors, log } = services;
    log.info('Boostrap process complete.', 'STARTUP');
    log.info('Registering global error handlers...', 'STARTUP');
    window.onerror = function (message, source, lineno, colno, error) {
        log.info(`Unhandled error: ${message} at ${source}:${lineno}:${colno}`, 'GLOBAL ERROR HANDLER');
        if (error && error.stack) {
            log.info(`Stack trace:\n${error.stack}`, 'GLOBAL ERROR HANDLER');
        }
        return false;
    };
    window.addEventListener('unhandledrejection', function (event) {
        log.info(`Unhandled promise rejection: ${event.reason}`, 'GLOBAL ERROR HANDLER');
    });
    const { registerDependencies } = await import('./app/registry.js');
    log.info('Registering dependencies.', 'STARTUP');
    const deps = await registerDependencies(helpers, services);
    log.info('Dependencies registered.', 'STARTUP');
    console.log(`mode.exposeClasses ${mode.exposeClasses}`);
    if (mode.exposeClasses) {
        log.info(`Exposing classes to console.`, 'STARTUP_OPTION');
        const { exposeClasses } = await import('./app/init.js');
        await exposeClasses(deps.eventManager, deps.events.palette, deps.paletteManager, deps.common.services, deps.stateManager, deps.events.ui);
    }
    await errors.handleAsync(async () => {
        if (mode.debugLevel >= 3) {
            setTimeout(() => {
                EventManager.listAll();
            }, 100);
        }
    }, `[initializeApp]: Application startup failed.`);
}
if (document.readyState === 'loading') {
    console.log('[anon@index.ts]: DOM content not yet loaded. Adding DOMContentLoaded event listener and awaiting...');
    document.addEventListener('DOMContentLoaded', initializeApp);
}
else {
    console.log('[anon@index.ts]: DOM content already loaded. Initializing application immediately.');
    initializeApp();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBRS9CLGlHQUFpRztBQUNqRyxpRUFBaUU7QUFFakUsc09BQXNPO0FBRXRPLG1FQUFtRTtBQUVuRSxpQkFBaUI7QUFFakIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBRXpCLEtBQUssVUFBVSxhQUFhO0lBQzNCLG9DQUFvQztJQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxTQUFTLEVBQUUsQ0FBQztJQUVoRCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQztJQUNqQyxHQUFHLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWxELEdBQUcsQ0FBQyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDNUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQy9ELEdBQUcsQ0FBQyxJQUFJLENBQ1Asb0JBQW9CLE9BQU8sT0FBTyxNQUFNLElBQUksTUFBTSxJQUFJLEtBQUssRUFBRSxFQUM3RCxzQkFBc0IsQ0FDdEIsQ0FBQztRQUVGLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUNsRSxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxLQUFLO1FBQzVELEdBQUcsQ0FBQyxJQUFJLENBQ1AsZ0NBQWdDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFDOUMsc0JBQXNCLENBQ3RCLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbkUsR0FBRyxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRCxNQUFNLElBQUksR0FBRyxNQUFNLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMzRCxHQUFHLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWhELE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUMzRCxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDeEQsTUFBTSxhQUFhLENBQ2xCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUNuQixJQUFJLENBQUMsY0FBYyxFQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFDcEIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQ2QsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkMsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2YsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3hCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNULENBQUM7SUFDRixDQUFDLEVBQUUsOENBQThDLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRUQsSUFBSSxRQUFRLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRSxDQUFDO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQ1YscUdBQXFHLENBQ3JHLENBQUM7SUFFRixRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDOUQsQ0FBQztLQUFNLENBQUM7SUFDUCxPQUFPLENBQUMsR0FBRyxDQUNWLG9GQUFvRixDQUNwRixDQUFDO0lBRUYsYUFBYSxFQUFFLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvbG9yR2VuIC0gdmVyc2lvbiAwLjYuMy1kZXZcblxuLy8gQXV0aG9yOiBWaWlobmEgTGVyYWluZSAodmlpaG5hQFZpaWhuYVRlY2guY29tIC8gdmlpaG5hLjc4IChTaWduYWwpIC8gVmlpaG5hLUxlaHJhaW5lIChHaXRodWIpKVxuLy8gTGljZW5zZTogR05VIEdQTHYzIChodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAuaHRtbClcblxuLy8gWW91IG1heSB1c2UgdGhpcyBjb2RlIGZvciBhbnkgcHVycG9zZSBFWENFUFQgZm9yIHRoZSBjcmVhdGlvbiBvZiBwcm9wcmlldGFyeSBkZXJpdmF0aXZlcy4gSSBlbmNvdXJhZ2UgeW91IHRvIGltcHJvdmUgb24gbXkgY29kZSBvciB0byBpbmNsdWRlIGl0IGluIG90aGVyIHByb2plY3RzIGlmIHlvdSBmaW5kIGl0IGhlbHBmdWwuIFBsZWFzZSBjcmVkaXQgbWUgYXMgdGhlIG9yaWdpbmFsIGF1dGhvci5cblxuLy8gVGhpcyBhcHBsaWNhdGlvbiBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkgT1IgR1VBUkFOVEVFLlxuXG4vLyBGaWxlOiBpbmRleC50c1xuXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tICcuL2RvbS9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZy9pbmRleC5qcyc7XG5cbmNvbnN0IG1vZGUgPSBjb25maWcubW9kZTtcblxuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcCgpIHtcblx0Ly8gMS4gQm9vdHN0cmFwIG1pbmltYWwgZGVwZW5kZW5jaWVzXG5cdGNvbnNvbGUubG9nKCdbU1RBUlRVUF06IEltcG9ydGluZyBib290c3RyYXAgbW9kdWxlLi4uJyk7XG5cdGNvbnN0IHsgYm9vdHN0cmFwIH0gPSBhd2FpdCBpbXBvcnQoJy4vYXBwL2Jvb3RzdHJhcC5qcycpO1xuXG5cdGNvbnNvbGUubG9nKCdbU1RBUlRVUF06IEV4ZWN1dGluZyBib290c3RyYXAgcHJvY2Vzcy4nKTtcblx0Y29uc3QgeyBoZWxwZXJzLCBzZXJ2aWNlcyB9ID0gYXdhaXQgYm9vdHN0cmFwKCk7XG5cblx0Y29uc3QgeyBlcnJvcnMsIGxvZyB9ID0gc2VydmljZXM7XG5cdGxvZy5pbmZvKCdCb29zdHJhcCBwcm9jZXNzIGNvbXBsZXRlLicsICdTVEFSVFVQJyk7XG5cblx0bG9nLmluZm8oJ1JlZ2lzdGVyaW5nIGdsb2JhbCBlcnJvciBoYW5kbGVycy4uLicsICdTVEFSVFVQJyk7XG5cdHdpbmRvdy5vbmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHNvdXJjZSwgbGluZW5vLCBjb2xubywgZXJyb3IpIHtcblx0XHRsb2cuaW5mbyhcblx0XHRcdGBVbmhhbmRsZWQgZXJyb3I6ICR7bWVzc2FnZX0gYXQgJHtzb3VyY2V9OiR7bGluZW5vfToke2NvbG5vfWAsXG5cdFx0XHQnR0xPQkFMIEVSUk9SIEhBTkRMRVInXG5cdFx0KTtcblxuXHRcdGlmIChlcnJvciAmJiBlcnJvci5zdGFjaykge1xuXHRcdFx0bG9nLmluZm8oYFN0YWNrIHRyYWNlOlxcbiR7ZXJyb3Iuc3RhY2t9YCwgJ0dMT0JBTCBFUlJPUiBIQU5ETEVSJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5oYW5kbGVkcmVqZWN0aW9uJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0bG9nLmluZm8oXG5cdFx0XHRgVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uOiAke2V2ZW50LnJlYXNvbn1gLFxuXHRcdFx0J0dMT0JBTCBFUlJPUiBIQU5ETEVSJ1xuXHRcdCk7XG5cdH0pO1xuXG5cdGNvbnN0IHsgcmVnaXN0ZXJEZXBlbmRlbmNpZXMgfSA9IGF3YWl0IGltcG9ydCgnLi9hcHAvcmVnaXN0cnkuanMnKTtcblx0bG9nLmluZm8oJ1JlZ2lzdGVyaW5nIGRlcGVuZGVuY2llcy4nLCAnU1RBUlRVUCcpO1xuXHRjb25zdCBkZXBzID0gYXdhaXQgcmVnaXN0ZXJEZXBlbmRlbmNpZXMoaGVscGVycywgc2VydmljZXMpO1xuXHRsb2cuaW5mbygnRGVwZW5kZW5jaWVzIHJlZ2lzdGVyZWQuJywgJ1NUQVJUVVAnKTtcblxuXHRjb25zb2xlLmxvZyhgbW9kZS5leHBvc2VDbGFzc2VzICR7bW9kZS5leHBvc2VDbGFzc2VzfWApO1xuXHRpZiAobW9kZS5leHBvc2VDbGFzc2VzKSB7XG5cdFx0bG9nLmluZm8oYEV4cG9zaW5nIGNsYXNzZXMgdG8gY29uc29sZS5gLCAnU1RBUlRVUF9PUFRJT04nKTtcblx0XHRjb25zdCB7IGV4cG9zZUNsYXNzZXMgfSA9IGF3YWl0IGltcG9ydCgnLi9hcHAvaW5pdC5qcycpO1xuXHRcdGF3YWl0IGV4cG9zZUNsYXNzZXMoXG5cdFx0XHRkZXBzLmV2ZW50TWFuYWdlcixcblx0XHRcdGRlcHMuZXZlbnRzLnBhbGV0dGUsXG5cdFx0XHRkZXBzLnBhbGV0dGVNYW5hZ2VyLFxuXHRcdFx0ZGVwcy5jb21tb24uc2VydmljZXMsXG5cdFx0XHRkZXBzLnN0YXRlTWFuYWdlcixcblx0XHRcdGRlcHMuZXZlbnRzLnVpXG5cdFx0KTtcblx0fVxuXG5cdGF3YWl0IGVycm9ycy5oYW5kbGVBc3luYyhhc3luYyAoKSA9PiB7XG5cdFx0aWYgKG1vZGUuZGVidWdMZXZlbCA+PSAzKSB7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0RXZlbnRNYW5hZ2VyLmxpc3RBbGwoKTtcblx0XHRcdH0sIDEwMCk7XG5cdFx0fVxuXHR9LCBgW2luaXRpYWxpemVBcHBdOiBBcHBsaWNhdGlvbiBzdGFydHVwIGZhaWxlZC5gKTtcbn1cblxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuXHRjb25zb2xlLmxvZyhcblx0XHQnW2Fub25AaW5kZXgudHNdOiBET00gY29udGVudCBub3QgeWV0IGxvYWRlZC4gQWRkaW5nIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgbGlzdGVuZXIgYW5kIGF3YWl0aW5nLi4uJ1xuXHQpO1xuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0aWFsaXplQXBwKTtcbn0gZWxzZSB7XG5cdGNvbnNvbGUubG9nKFxuXHRcdCdbYW5vbkBpbmRleC50c106IERPTSBjb250ZW50IGFscmVhZHkgbG9hZGVkLiBJbml0aWFsaXppbmcgYXBwbGljYXRpb24gaW1tZWRpYXRlbHkuJ1xuXHQpO1xuXG5cdGluaXRpYWxpemVBcHAoKTtcbn1cbiJdfQ==