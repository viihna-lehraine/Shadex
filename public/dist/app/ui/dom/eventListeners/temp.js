// File: app/ui/dom/eventListeners/temp.js
import { createLogger } from '../../../../logger/factory.js';
import { constsData as consts } from '../../../../data/consts.js';
import { modeData as mode } from '../../../../data/mode.js';
const logMode = mode.logging;
const timeouts = consts.timeouts;
const thisModule = 'dom/eventListeners/groups/temp.js';
const logger = await createLogger();
export function showToast(message) {
    const thisMethod = 'showToast()';
    const toast = document.createElement('div');
    toast.className = 'toast-message';
    toast.textContent = message;
    document.body.appendChild(toast);
    if (logMode.debug && logMode.verbosity >= 4)
        logger.debug('Toast message added', `${thisModule} > ${thisMethod}`);
    setTimeout(() => {
        toast.classList.add('fade-out');
        if (logMode.debug && logMode.verbosity >= 4)
            logger.debug('Toast message faded out', `${thisModule} > ${thisMethod}`);
        toast.addEventListener('transitioned', () => toast.remove());
    }, timeouts.toast || 3000);
}
export function showTooltip(tooltipElement) {
    const thisMethod = 'showTooltip()';
    try {
        const tooltip = tooltipElement.querySelector('.tooltiptext');
        if (tooltip) {
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
            setTimeout(() => {
                tooltip.style.visibility = 'hidden';
                tooltip.style.opacity = '0';
            }, consts.timeouts.tooltip || 1000);
        }
        if (logMode.debug && logMode.verbosity >= 4)
            logger.info('showTooltip executed', `${thisModule} > ${thisMethod}`);
    }
    catch (error) {
        if (logMode.error && logMode.verbosity >= 4)
            logger.error(`Failed to execute showTooltip: ${error}`, `${thisModule} > ${thisMethod}`);
    }
}
export const tempListeners = {
    showToast,
    showTooltip
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvdWkvZG9tL2V2ZW50TGlzdGVuZXJzL3RlbXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMENBQTBDO0FBRTFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxJQUFJLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFNUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM3QixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBRWpDLE1BQU0sVUFBVSxHQUFHLG1DQUFtQyxDQUFDO0FBRXZELE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsTUFBTSxVQUFVLFNBQVMsQ0FBQyxPQUFlO0lBQ3hDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQztJQUNqQyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVDLEtBQUssQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDO0lBRWxDLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0lBRTVCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWpDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUM7UUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLFVBQVUsTUFBTSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBRXRFLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZixLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxLQUFLLENBQ1gseUJBQXlCLEVBQ3pCLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO1FBRUgsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDLEVBQUUsUUFBUSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxjQUEyQjtJQUN0RCxNQUFNLFVBQVUsR0FBRyxlQUFlLENBQUM7SUFFbkMsSUFBSSxDQUFDO1FBQ0osTUFBTSxPQUFPLEdBQ1osY0FBYyxDQUFDLGFBQWEsQ0FBYyxjQUFjLENBQUMsQ0FBQztRQUUzRCxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztZQUM1QixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztnQkFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1lBQzdCLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNyQyxDQUFDO1FBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQztZQUMxQyxNQUFNLENBQUMsSUFBSSxDQUNWLHNCQUFzQixFQUN0QixHQUFHLFVBQVUsTUFBTSxVQUFVLEVBQUUsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUM7WUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FDWCxrQ0FBa0MsS0FBSyxFQUFFLEVBQ3pDLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUc7SUFDNUIsU0FBUztJQUNULFdBQVc7Q0FDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogYXBwL3VpL2RvbS9ldmVudExpc3RlbmVycy90ZW1wLmpzXG5cbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uLy4uLy4uL2xvZ2dlci9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGNvbnN0c0RhdGEgYXMgY29uc3RzIH0gZnJvbSAnLi4vLi4vLi4vLi4vZGF0YS9jb25zdHMuanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgYXMgbW9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5jb25zdCB0aW1lb3V0cyA9IGNvbnN0cy50aW1lb3V0cztcblxuY29uc3QgdGhpc01vZHVsZSA9ICdkb20vZXZlbnRMaXN0ZW5lcnMvZ3JvdXBzL3RlbXAuanMnO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dUb2FzdChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0Y29uc3QgdGhpc01ldGhvZCA9ICdzaG93VG9hc3QoKSc7XG5cdGNvbnN0IHRvYXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cblx0dG9hc3QuY2xhc3NOYW1lID0gJ3RvYXN0LW1lc3NhZ2UnO1xuXG5cdHRvYXN0LnRleHRDb250ZW50ID0gbWVzc2FnZTtcblxuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvYXN0KTtcblxuXHRpZiAobG9nTW9kZS5kZWJ1ZyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSA0KVxuXHRcdGxvZ2dlci5kZWJ1ZygnVG9hc3QgbWVzc2FnZSBhZGRlZCcsIGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWApO1xuXG5cdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdHRvYXN0LmNsYXNzTGlzdC5hZGQoJ2ZhZGUtb3V0Jyk7XG5cblx0XHRpZiAobG9nTW9kZS5kZWJ1ZyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSA0KVxuXHRcdFx0bG9nZ2VyLmRlYnVnKFxuXHRcdFx0XHQnVG9hc3QgbWVzc2FnZSBmYWRlZCBvdXQnLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHQpO1xuXG5cdFx0dG9hc3QuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVkJywgKCkgPT4gdG9hc3QucmVtb3ZlKCkpO1xuXHR9LCB0aW1lb3V0cy50b2FzdCB8fCAzMDAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dUb29sdGlwKHRvb2x0aXBFbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXHRjb25zdCB0aGlzTWV0aG9kID0gJ3Nob3dUb29sdGlwKCknO1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgdG9vbHRpcCA9XG5cdFx0XHR0b29sdGlwRWxlbWVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignLnRvb2x0aXB0ZXh0Jyk7XG5cblx0XHRpZiAodG9vbHRpcCkge1xuXHRcdFx0dG9vbHRpcC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuXHRcdFx0dG9vbHRpcC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRvb2x0aXAuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXHRcdFx0XHR0b29sdGlwLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG5cdFx0XHR9LCBjb25zdHMudGltZW91dHMudG9vbHRpcCB8fCAxMDAwKTtcblx0XHR9XG5cblx0XHRpZiAobG9nTW9kZS5kZWJ1ZyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSA0KVxuXHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdCdzaG93VG9vbHRpcCBleGVjdXRlZCcsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3IgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gNClcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEZhaWxlZCB0byBleGVjdXRlIHNob3dUb29sdGlwOiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHRlbXBMaXN0ZW5lcnMgPSB7XG5cdHNob3dUb2FzdCxcblx0c2hvd1Rvb2x0aXBcbn07XG4iXX0=