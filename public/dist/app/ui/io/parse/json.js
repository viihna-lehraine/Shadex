// File: app/ui/io/parse/json.js
import { createLogger } from '../../../../logger/factory.js';
import { modeData } from '../../../../data/mode.js';
const logMode = modeData.logging;
const mode = modeData;
const thisModule = 'io/parse/json.ts';
const logger = await createLogger();
function file(jsonData) {
    const caller = 'file()';
    try {
        const parsed = JSON.parse(jsonData);
        // Validate that the parsed object matches the expected structure
        if (!parsed.items || !Array.isArray(parsed.items)) {
            throw new Error('Invalid JSON structure for Palette');
        }
        return Promise.resolve(parsed);
    }
    catch (error) {
        if (logMode.error && logMode.verbosity > 1) {
            logger.error(`Error parsing JSON file: ${error}`, `${thisModule} > ${caller}`);
            if (mode.showAlerts)
                alert(`Error parsing JSON file. See console for details.`);
        }
        return Promise.resolve(null);
    }
}
export const json = {
    file
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvdWkvaW8vcGFyc2UvanNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7QUFHaEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO0FBQ2pDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQztBQUN0QixNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQztBQUV0QyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLFNBQVMsSUFBSSxDQUFDLFFBQWdCO0lBQzdCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUV4QixJQUFJLENBQUM7UUFDSixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBDLGlFQUFpRTtRQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBaUIsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQ1gsNEJBQTRCLEtBQUssRUFBRSxFQUNuQyxHQUFHLFVBQVUsTUFBTSxNQUFNLEVBQUUsQ0FDM0IsQ0FBQztZQUVGLElBQUksSUFBSSxDQUFDLFVBQVU7Z0JBQ2xCLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUc7SUFDbkIsSUFBSTtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBhcHAvdWkvaW8vcGFyc2UvanNvbi5qc1xuXG5pbXBvcnQgeyBQYWxldHRlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnLi4vLi4vLi4vLi4vbG9nZ2VyL2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgbW9kZURhdGEgfSBmcm9tICcuLi8uLi8uLi8uLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZURhdGEubG9nZ2luZztcbmNvbnN0IG1vZGUgPSBtb2RlRGF0YTtcbmNvbnN0IHRoaXNNb2R1bGUgPSAnaW8vcGFyc2UvanNvbi50cyc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IGNyZWF0ZUxvZ2dlcigpO1xuXG5mdW5jdGlvbiBmaWxlKGpzb25EYXRhOiBzdHJpbmcpOiBQcm9taXNlPFBhbGV0dGUgfCBudWxsPiB7XG5cdGNvbnN0IGNhbGxlciA9ICdmaWxlKCknO1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShqc29uRGF0YSk7XG5cblx0XHQvLyBWYWxpZGF0ZSB0aGF0IHRoZSBwYXJzZWQgb2JqZWN0IG1hdGNoZXMgdGhlIGV4cGVjdGVkIHN0cnVjdHVyZVxuXHRcdGlmICghcGFyc2VkLml0ZW1zIHx8ICFBcnJheS5pc0FycmF5KHBhcnNlZC5pdGVtcykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OIHN0cnVjdHVyZSBmb3IgUGFsZXR0ZScpO1xuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUocGFyc2VkIGFzIFBhbGV0dGUpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMSkge1xuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgRXJyb3IgcGFyc2luZyBKU09OIGZpbGU6ICR7ZXJyb3J9YCxcblx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke2NhbGxlcn1gXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAobW9kZS5zaG93QWxlcnRzKVxuXHRcdFx0XHRhbGVydChgRXJyb3IgcGFyc2luZyBKU09OIGZpbGUuIFNlZSBjb25zb2xlIGZvciBkZXRhaWxzLmApO1xuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGpzb24gPSB7XG5cdGZpbGVcbn07XG4iXX0=