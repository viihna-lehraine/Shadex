// File: app/ui/io/parse/colorValue.js
import { asColorString } from './color.js';
function asCMYKValue(colorString) {
    const parsed = asColorString('cmyk', colorString);
    if (parsed && parsed.format === 'cmyk') {
        return parsed.value;
    }
    throw new Error(`Invalid CMYK color string: ${colorString}`);
}
function asHexValue(colorValue) {
    const parsed = asColorString('hex', colorValue);
    if (parsed && parsed.format === 'hex') {
        return parsed.value;
    }
    throw new Error(`Invalid Hex color value: ${colorValue}`);
}
function asHSLValue(colorValue) {
    const parsed = asColorString('hsl', colorValue);
    if (parsed && parsed.format === 'hsl') {
        return parsed.value;
    }
    throw new Error(`Invalid HSL color value: ${colorValue}`);
}
function asHSVValue(colorValue) {
    const parsed = asColorString('hsv', colorValue);
    if (parsed && parsed.format === 'hsv') {
        return parsed.value;
    }
    throw new Error(`Invalid HSV color value: ${colorValue}`);
}
function asLABValue(colorValue) {
    const parsed = asColorString('lab', colorValue);
    if (parsed && parsed.format === 'lab') {
        return parsed.value;
    }
    throw new Error(`Invalid LAB color value: ${colorValue}`);
}
function asRGBValue(colorValue) {
    const parsed = asColorString('rgb', colorValue);
    if (parsed && parsed.format === 'rgb') {
        return parsed.value;
    }
    throw new Error(`Invalid RGB color value: ${colorValue}`);
}
function asXYZValue(colorValue) {
    const parsed = asColorString('xyz', colorValue);
    if (parsed && parsed.format === 'xyz') {
        return parsed.value;
    }
    throw new Error(`Invalid XYZ color value: ${colorValue}`);
}
export const asColorValue = {
    cmyk: asCMYKValue,
    hex: asHexValue,
    hsl: asHSLValue,
    hsv: asHSVValue,
    lab: asLABValue,
    rgb: asRGBValue,
    xyz: asXYZValue
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvdWkvaW8vcGFyc2UvY29sb3JWYWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFHdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUUzQyxTQUFTLFdBQVcsQ0FBQyxXQUFtQjtJQUN2QyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWxELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFLENBQUM7UUFDeEMsT0FBTyxNQUFNLENBQUMsS0FBc0IsQ0FBQztJQUN0QyxDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsVUFBa0I7SUFDckMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEtBQXFCLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQyxLQUFxQixDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxVQUFrQjtJQUNyQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUMsS0FBcUIsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsVUFBa0I7SUFDckMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEtBQXFCLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQyxLQUFxQixDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxVQUFrQjtJQUNyQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUMsS0FBcUIsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQzNCLElBQUksRUFBRSxXQUFXO0lBQ2pCLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtDQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBhcHAvdWkvaW8vcGFyc2UvY29sb3JWYWx1ZS5qc1xuXG5pbXBvcnQgeyBDTVlLLCBIZXgsIEhTTCwgSFNWLCBMQUIsIFJHQiwgWFlaIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgYXNDb2xvclN0cmluZyB9IGZyb20gJy4vY29sb3IuanMnO1xuXG5mdW5jdGlvbiBhc0NNWUtWYWx1ZShjb2xvclN0cmluZzogc3RyaW5nKTogQ01ZS1sndmFsdWUnXSB7XG5cdGNvbnN0IHBhcnNlZCA9IGFzQ29sb3JTdHJpbmcoJ2NteWsnLCBjb2xvclN0cmluZyk7XG5cblx0aWYgKHBhcnNlZCAmJiBwYXJzZWQuZm9ybWF0ID09PSAnY215aycpIHtcblx0XHRyZXR1cm4gcGFyc2VkLnZhbHVlIGFzIENNWUtbJ3ZhbHVlJ107XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQ01ZSyBjb2xvciBzdHJpbmc6ICR7Y29sb3JTdHJpbmd9YCk7XG59XG5cbmZ1bmN0aW9uIGFzSGV4VmFsdWUoY29sb3JWYWx1ZTogc3RyaW5nKTogSGV4Wyd2YWx1ZSddIHtcblx0Y29uc3QgcGFyc2VkID0gYXNDb2xvclN0cmluZygnaGV4JywgY29sb3JWYWx1ZSk7XG5cblx0aWYgKHBhcnNlZCAmJiBwYXJzZWQuZm9ybWF0ID09PSAnaGV4Jykge1xuXHRcdHJldHVybiBwYXJzZWQudmFsdWUgYXMgSGV4Wyd2YWx1ZSddO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEhleCBjb2xvciB2YWx1ZTogJHtjb2xvclZhbHVlfWApO1xufVxuXG5mdW5jdGlvbiBhc0hTTFZhbHVlKGNvbG9yVmFsdWU6IHN0cmluZyk6IEhTTFsndmFsdWUnXSB7XG5cdGNvbnN0IHBhcnNlZCA9IGFzQ29sb3JTdHJpbmcoJ2hzbCcsIGNvbG9yVmFsdWUpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ2hzbCcpIHtcblx0XHRyZXR1cm4gcGFyc2VkLnZhbHVlIGFzIEhTTFsndmFsdWUnXTtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBIU0wgY29sb3IgdmFsdWU6ICR7Y29sb3JWYWx1ZX1gKTtcbn1cblxuZnVuY3Rpb24gYXNIU1ZWYWx1ZShjb2xvclZhbHVlOiBzdHJpbmcpOiBIU1ZbJ3ZhbHVlJ10ge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCdoc3YnLCBjb2xvclZhbHVlKTtcblxuXHRpZiAocGFyc2VkICYmIHBhcnNlZC5mb3JtYXQgPT09ICdoc3YnKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBIU1ZbJ3ZhbHVlJ107XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSFNWIGNvbG9yIHZhbHVlOiAke2NvbG9yVmFsdWV9YCk7XG59XG5cbmZ1bmN0aW9uIGFzTEFCVmFsdWUoY29sb3JWYWx1ZTogc3RyaW5nKTogTEFCWyd2YWx1ZSddIHtcblx0Y29uc3QgcGFyc2VkID0gYXNDb2xvclN0cmluZygnbGFiJywgY29sb3JWYWx1ZSk7XG5cblx0aWYgKHBhcnNlZCAmJiBwYXJzZWQuZm9ybWF0ID09PSAnbGFiJykge1xuXHRcdHJldHVybiBwYXJzZWQudmFsdWUgYXMgTEFCWyd2YWx1ZSddO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIExBQiBjb2xvciB2YWx1ZTogJHtjb2xvclZhbHVlfWApO1xufVxuXG5mdW5jdGlvbiBhc1JHQlZhbHVlKGNvbG9yVmFsdWU6IHN0cmluZyk6IFJHQlsndmFsdWUnXSB7XG5cdGNvbnN0IHBhcnNlZCA9IGFzQ29sb3JTdHJpbmcoJ3JnYicsIGNvbG9yVmFsdWUpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ3JnYicpIHtcblx0XHRyZXR1cm4gcGFyc2VkLnZhbHVlIGFzIFJHQlsndmFsdWUnXTtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBSR0IgY29sb3IgdmFsdWU6ICR7Y29sb3JWYWx1ZX1gKTtcbn1cblxuZnVuY3Rpb24gYXNYWVpWYWx1ZShjb2xvclZhbHVlOiBzdHJpbmcpOiBYWVpbJ3ZhbHVlJ10ge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCd4eXonLCBjb2xvclZhbHVlKTtcblxuXHRpZiAocGFyc2VkICYmIHBhcnNlZC5mb3JtYXQgPT09ICd4eXonKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBYWVpbJ3ZhbHVlJ107XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgWFlaIGNvbG9yIHZhbHVlOiAke2NvbG9yVmFsdWV9YCk7XG59XG5cbmV4cG9ydCBjb25zdCBhc0NvbG9yVmFsdWUgPSB7XG5cdGNteWs6IGFzQ01ZS1ZhbHVlLFxuXHRoZXg6IGFzSGV4VmFsdWUsXG5cdGhzbDogYXNIU0xWYWx1ZSxcblx0aHN2OiBhc0hTVlZhbHVlLFxuXHRsYWI6IGFzTEFCVmFsdWUsXG5cdHJnYjogYXNSR0JWYWx1ZSxcblx0eHl6OiBhc1hZWlZhbHVlXG59O1xuIl19