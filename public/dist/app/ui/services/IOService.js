// File: app/ui/services/IOService.js
import { ioFn } from '../io/index.js';
export class IOService {
    static instance = null;
    ioFn;
    constructor() {
        this.ioFn = ioFn;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new IOService();
        }
        return this.instance;
    }
    async exportPalette(palette, format) {
        switch (format) {
            case 'css':
                return this.ioFn.exportPalette(palette, format);
            case 'json':
                return this.ioFn.exportPalette(palette, format);
            case 'xml':
                return this.ioFn.exportPalette(palette, format);
            default:
                throw new Error(`Unsupported export format: ${format}`);
        }
    }
    async importPalette(file, format) {
        const data = await readFile(file);
        let palette = null;
        switch (format) {
            case 'JSON':
                palette = await ioFn.deserialize.fromJSON(data);
                break;
            case 'XML':
                palette = await ioFn.deserialize.fromXML(data);
                break;
            case 'CSS':
                palette = await ioFn.deserialize.fromCSS(data);
                break;
            default:
                throw new Error(`Unsupported format: ${format}`);
        }
        if (palette) {
            await IDBManager.getInstance().addPaletteToHistory(palette);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSU9TZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC91aS9zZXJ2aWNlcy9JT1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDO0FBR3JDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0QyxNQUFNLE9BQU8sU0FBUztJQUNiLE1BQU0sQ0FBQyxRQUFRLEdBQXFCLElBQUksQ0FBQztJQUV6QyxJQUFJLENBQXVCO0lBRW5DO1FBQ0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVztRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNqQyxDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUN6QixPQUFnQixFQUNoQixNQUFjO1FBRWQsUUFBUSxNQUFNLEVBQUUsQ0FBQztZQUNoQixLQUFLLEtBQUs7Z0JBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDakQsS0FBSyxNQUFNO2dCQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELEtBQUssS0FBSztnQkFDVCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNqRDtnQkFDQyxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzFELENBQUM7SUFDRixDQUFDO0lBRU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFVLEVBQUUsTUFBOEI7UUFDcEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxPQUFPLEdBQW1CLElBQUksQ0FBQztRQUVuQyxRQUFRLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLEtBQUssTUFBTTtnQkFDVixPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEQsTUFBTTtZQUNQLEtBQUssS0FBSztnQkFDVCxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0MsTUFBTTtZQUNQLEtBQUssS0FBSztnQkFDVCxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0MsTUFBTTtZQUNQO2dCQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUVELElBQUksT0FBTyxFQUFFLENBQUM7WUFDYixNQUFNLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3RCxDQUFDO0lBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGFwcC91aS9zZXJ2aWNlcy9JT1NlcnZpY2UuanNcblxuaW1wb3J0IHsgSU9Gbl9NYXN0ZXJJbnRlcmZhY2UsIFBhbGV0dGUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBpb0ZuIH0gZnJvbSAnLi4vaW8vaW5kZXguanMnO1xuXG5leHBvcnQgY2xhc3MgSU9TZXJ2aWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IElPU2VydmljZSB8IG51bGwgPSBudWxsO1xuXG5cdHByaXZhdGUgaW9GbjogSU9Gbl9NYXN0ZXJJbnRlcmZhY2U7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5pb0ZuID0gaW9Gbjtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UoKSB7XG5cdFx0aWYgKCF0aGlzLmluc3RhbmNlKSB7XG5cdFx0XHR0aGlzLmluc3RhbmNlID0gbmV3IElPU2VydmljZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGV4cG9ydFBhbGV0dGUoXG5cdFx0cGFsZXR0ZTogUGFsZXR0ZSxcblx0XHRmb3JtYXQ6IHN0cmluZ1xuXHQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRzd2l0Y2ggKGZvcm1hdCkge1xuXHRcdFx0Y2FzZSAnY3NzJzpcblx0XHRcdFx0cmV0dXJuIHRoaXMuaW9Gbi5leHBvcnRQYWxldHRlKHBhbGV0dGUsIGZvcm1hdCk7XG5cdFx0XHRjYXNlICdqc29uJzpcblx0XHRcdFx0cmV0dXJuIHRoaXMuaW9Gbi5leHBvcnRQYWxldHRlKHBhbGV0dGUsIGZvcm1hdCk7XG5cdFx0XHRjYXNlICd4bWwnOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5pb0ZuLmV4cG9ydFBhbGV0dGUocGFsZXR0ZSwgZm9ybWF0KTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZXhwb3J0IGZvcm1hdDogJHtmb3JtYXR9YCk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGFzeW5jIGltcG9ydFBhbGV0dGUoZmlsZTogRmlsZSwgZm9ybWF0OiAnSlNPTicgfCAnWE1MJyB8ICdDU1MnKSB7XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlYWRGaWxlKGZpbGUpO1xuXHRcdGxldCBwYWxldHRlOiBQYWxldHRlIHwgbnVsbCA9IG51bGw7XG5cblx0XHRzd2l0Y2ggKGZvcm1hdCkge1xuXHRcdFx0Y2FzZSAnSlNPTic6XG5cdFx0XHRcdHBhbGV0dGUgPSBhd2FpdCBpb0ZuLmRlc2VyaWFsaXplLmZyb21KU09OKGRhdGEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1hNTCc6XG5cdFx0XHRcdHBhbGV0dGUgPSBhd2FpdCBpb0ZuLmRlc2VyaWFsaXplLmZyb21YTUwoZGF0YSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnQ1NTJzpcblx0XHRcdFx0cGFsZXR0ZSA9IGF3YWl0IGlvRm4uZGVzZXJpYWxpemUuZnJvbUNTUyhkYXRhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGZvcm1hdDogJHtmb3JtYXR9YCk7XG5cdFx0fVxuXG5cdFx0aWYgKHBhbGV0dGUpIHtcblx0XHRcdGF3YWl0IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5hZGRQYWxldHRlVG9IaXN0b3J5KHBhbGV0dGUpO1xuXHRcdH1cblx0fVxufVxuIl19