// File: app/ui/services/DOMService.js
import { domData } from '../../../data/dom.js';
export class DOMService {
    domData;
    constructor() {
        this.domData = domData;
    }
    updateHistoryUI(history) {
        const historyList = this.domData.elements.static.divs.paletteHistory;
        if (!historyList)
            return;
        historyList.innerHTML = '';
        history.forEach(palette => {
            const entry = document.createElement('div');
            entry.classList.add('history-item');
            entry.id = `palette_${palette.id}`;
            entry.innerHTML = `
				<p>Palette #${palette.metadata.name || palette.id}</p>
				<div class="color-preview">
					${palette.items.map(item => `<span class="color-box" style="background: ${item.colors.css.hex};"></span>`).join(' ')}
				</div>
				<button class="remove-history-item" data-id="${palette.id}-history-remove-btn">Remove</button>
			`;
            entry
                .querySelector('.remove-history-item')
                ?.addEventListener('click', async () => {
                await IDBManager.getInstance().removePaletteFromHistory(palette.id);
                this.updateHistoryUI(await IDBManager.getInstance().getPaletteHistory());
            });
            historyList.appendChild(entry);
        });
    }
    updateColorBox(color, boxId) {
        const colorBox = document.getElementById(boxId);
        if (colorBox) {
            colorBox.style.backgroundColor = this.colorToCSS(color);
        }
    }
    colorToCSS(color) {
        return `hsl(${color.h}, ${color.s}%, ${color.l}%)`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9NU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvdWkvc2VydmljZXMvRE9NU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFHdEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRS9DLE1BQU0sT0FBTyxVQUFVO0lBQ2QsT0FBTyxDQUFtQjtJQUVsQztRQUNDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxlQUFlLENBQUMsT0FBa0I7UUFDeEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7UUFFckUsSUFBSSxDQUFDLFdBQVc7WUFBRSxPQUFPO1FBRXpCLFdBQVcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBRTNCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwQyxLQUFLLENBQUMsRUFBRSxHQUFHLFdBQVcsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBRW5DLEtBQUssQ0FBQyxTQUFTLEdBQUc7a0JBQ0gsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEVBQUU7O09BRTlDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsOENBQThDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7bURBRXRFLE9BQU8sQ0FBQyxFQUFFO0lBQ3pELENBQUM7WUFFRixLQUFLO2lCQUNILGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDdEMsRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLEVBQUU7Z0JBQ3RDLE1BQU0sVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLHdCQUF3QixDQUN0RCxPQUFPLENBQUMsRUFBRSxDQUNWLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLGVBQWUsQ0FDbkIsTUFBTSxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FDbEQsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUosV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTSxjQUFjLENBQUMsS0FBVSxFQUFFLEtBQWE7UUFDOUMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ2QsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxDQUFDO0lBQ0YsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUFVO1FBQzVCLE9BQU8sT0FBTyxLQUFLLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BELENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGFwcC91aS9zZXJ2aWNlcy9ET01TZXJ2aWNlLmpzXG5cbmltcG9ydCB7IERPTURhdGFJbnRlcmZhY2UsIFBhbGV0dGUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBkb21EYXRhIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9kb20uanMnO1xuXG5leHBvcnQgY2xhc3MgRE9NU2VydmljZSB7XG5cdHByaXZhdGUgZG9tRGF0YTogRE9NRGF0YUludGVyZmFjZTtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmRvbURhdGEgPSBkb21EYXRhO1xuXHR9XG5cblx0cHVibGljIHVwZGF0ZUhpc3RvcnlVSShoaXN0b3J5OiBQYWxldHRlW10pOiB2b2lkIHtcblx0XHRjb25zdCBoaXN0b3J5TGlzdCA9IHRoaXMuZG9tRGF0YS5lbGVtZW50cy5zdGF0aWMuZGl2cy5wYWxldHRlSGlzdG9yeTtcblxuXHRcdGlmICghaGlzdG9yeUxpc3QpIHJldHVybjtcblxuXHRcdGhpc3RvcnlMaXN0LmlubmVySFRNTCA9ICcnO1xuXG5cdFx0aGlzdG9yeS5mb3JFYWNoKHBhbGV0dGUgPT4ge1xuXHRcdFx0Y29uc3QgZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdGVudHJ5LmNsYXNzTGlzdC5hZGQoJ2hpc3RvcnktaXRlbScpO1xuXHRcdFx0ZW50cnkuaWQgPSBgcGFsZXR0ZV8ke3BhbGV0dGUuaWR9YDtcblxuXHRcdFx0ZW50cnkuaW5uZXJIVE1MID0gYFxuXHRcdFx0XHQ8cD5QYWxldHRlICMke3BhbGV0dGUubWV0YWRhdGEubmFtZSB8fCBwYWxldHRlLmlkfTwvcD5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbG9yLXByZXZpZXdcIj5cblx0XHRcdFx0XHQke3BhbGV0dGUuaXRlbXMubWFwKGl0ZW0gPT4gYDxzcGFuIGNsYXNzPVwiY29sb3ItYm94XCIgc3R5bGU9XCJiYWNrZ3JvdW5kOiAke2l0ZW0uY29sb3JzLmNzcy5oZXh9O1wiPjwvc3Bhbj5gKS5qb2luKCcgJyl9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPVwicmVtb3ZlLWhpc3RvcnktaXRlbVwiIGRhdGEtaWQ9XCIke3BhbGV0dGUuaWR9LWhpc3RvcnktcmVtb3ZlLWJ0blwiPlJlbW92ZTwvYnV0dG9uPlxuXHRcdFx0YDtcblxuXHRcdFx0ZW50cnlcblx0XHRcdFx0LnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdmUtaGlzdG9yeS1pdGVtJylcblx0XHRcdFx0Py5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRhd2FpdCBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCkucmVtb3ZlUGFsZXR0ZUZyb21IaXN0b3J5KFxuXHRcdFx0XHRcdFx0cGFsZXR0ZS5pZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVIaXN0b3J5VUkoXG5cdFx0XHRcdFx0XHRhd2FpdCBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2V0UGFsZXR0ZUhpc3RvcnkoKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRoaXN0b3J5TGlzdC5hcHBlbmRDaGlsZChlbnRyeSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgdXBkYXRlQ29sb3JCb3goY29sb3I6IEhTTCwgYm94SWQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYm94SWQpO1xuXHRcdGlmIChjb2xvckJveCkge1xuXHRcdFx0Y29sb3JCb3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5jb2xvclRvQ1NTKGNvbG9yKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGNvbG9yVG9DU1MoY29sb3I6IEhTTCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGBoc2woJHtjb2xvci5ofSwgJHtjb2xvci5zfSUsICR7Y29sb3IubH0lKWA7XG5cdH1cbn1cbiJdfQ==