// File: app/main.ts
import { EventManager } from '../events/EventManager.js';
import { initializeApp, initializeServices } from './init.js';
import { data } from '../config/index.js';
const mode = data.mode;
console.log('[MAIN-1] Loading main.js...');
console.log('[MAIN-2] Calling initializeServices()');
const services = initializeServices();
const { log } = services;
log(`[MAIN-3] Calling initialize()`, 'info');
const init = (await initializeApp(services));
const { errors } = init.common.services;
log('[MAIN-4] Initialization complete.');
log(`[MAIN-5] Executing main loop...`);
if (log) {
    log('[MAIN-6] Executing main application script', 'debug');
    if (document.readyState === 'loading') {
        log('[MAIN-7A] DOM content not yet loaded. Adding DOMContentLoaded event listener and awaiting...');
        document.addEventListener('DOMContentLoaded', () => main());
    }
    else {
        log('[MAIN-7B] DOM content already loaded. Initializing application immediately.');
        main();
    }
}
else {
    console.error('[main-5E] > log function is undefined.');
}
async function main() {
    await errors.handleAsync(async () => {
        log('[1] DOM content loaded - Application initialized.');
        if (mode.debug) {
            setTimeout(() => {
                EventManager.listAll();
            }, 100);
        }
    }, 'Application initialization failed');
    if (mode.showAlerts) {
        alert('An error occurred during startup. Check console for details.');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFFcEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFFdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBRTNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUNyRCxNQUFNLFFBQVEsR0FBRyxrQkFBa0IsRUFBRSxDQUFDO0FBQ3RDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxRQUFRLENBQUM7QUFFekIsR0FBRyxDQUFDLCtCQUErQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUUsQ0FBQztBQUM5QyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFFeEMsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDekMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFFdkMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNULEdBQUcsQ0FBQyw0Q0FBNEMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUUzRCxJQUFJLFFBQVEsQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDdkMsR0FBRyxDQUNGLDhGQUE4RixDQUM5RixDQUFDO1FBRUYsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDN0QsQ0FBQztTQUFNLENBQUM7UUFDUCxHQUFHLENBQ0YsNkVBQTZFLENBQzdFLENBQUM7UUFFRixJQUFJLEVBQUUsQ0FBQztJQUNSLENBQUM7QUFDRixDQUFDO0tBQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQsS0FBSyxVQUFVLElBQUk7SUFDbEIsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25DLEdBQUcsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1FBRXpELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2hCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2YsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3hCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNULENBQUM7SUFDRixDQUFDLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztJQUV4QyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNyQixLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztJQUN2RSxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGFwcC9tYWluLnRzXG5cbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gJy4uL2V2ZW50cy9FdmVudE1hbmFnZXIuanMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCwgaW5pdGlhbGl6ZVNlcnZpY2VzIH0gZnJvbSAnLi9pbml0LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi9jb25maWcvaW5kZXguanMnO1xuXG5jb25zdCBtb2RlID0gZGF0YS5tb2RlO1xuXG5jb25zb2xlLmxvZygnW01BSU4tMV0gTG9hZGluZyBtYWluLmpzLi4uJyk7XG5cbmNvbnNvbGUubG9nKCdbTUFJTi0yXSBDYWxsaW5nIGluaXRpYWxpemVTZXJ2aWNlcygpJyk7XG5jb25zdCBzZXJ2aWNlcyA9IGluaXRpYWxpemVTZXJ2aWNlcygpO1xuY29uc3QgeyBsb2cgfSA9IHNlcnZpY2VzO1xuXG5sb2coYFtNQUlOLTNdIENhbGxpbmcgaW5pdGlhbGl6ZSgpYCwgJ2luZm8nKTtcbmNvbnN0IGluaXQgPSAoYXdhaXQgaW5pdGlhbGl6ZUFwcChzZXJ2aWNlcykpITtcbmNvbnN0IHsgZXJyb3JzIH0gPSBpbml0LmNvbW1vbi5zZXJ2aWNlcztcblxubG9nKCdbTUFJTi00XSBJbml0aWFsaXphdGlvbiBjb21wbGV0ZS4nKTtcbmxvZyhgW01BSU4tNV0gRXhlY3V0aW5nIG1haW4gbG9vcC4uLmApO1xuXG5pZiAobG9nKSB7XG5cdGxvZygnW01BSU4tNl0gRXhlY3V0aW5nIG1haW4gYXBwbGljYXRpb24gc2NyaXB0JywgJ2RlYnVnJyk7XG5cblx0aWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuXHRcdGxvZyhcblx0XHRcdCdbTUFJTi03QV0gRE9NIGNvbnRlbnQgbm90IHlldCBsb2FkZWQuIEFkZGluZyBET01Db250ZW50TG9hZGVkIGV2ZW50IGxpc3RlbmVyIGFuZCBhd2FpdGluZy4uLidcblx0XHQpO1xuXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IG1haW4oKSk7XG5cdH0gZWxzZSB7XG5cdFx0bG9nKFxuXHRcdFx0J1tNQUlOLTdCXSBET00gY29udGVudCBhbHJlYWR5IGxvYWRlZC4gSW5pdGlhbGl6aW5nIGFwcGxpY2F0aW9uIGltbWVkaWF0ZWx5Lidcblx0XHQpO1xuXG5cdFx0bWFpbigpO1xuXHR9XG59IGVsc2Uge1xuXHRjb25zb2xlLmVycm9yKCdbbWFpbi01RV0gPiBsb2cgZnVuY3Rpb24gaXMgdW5kZWZpbmVkLicpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuXHRhd2FpdCBlcnJvcnMuaGFuZGxlQXN5bmMoYXN5bmMgKCkgPT4ge1xuXHRcdGxvZygnWzFdIERPTSBjb250ZW50IGxvYWRlZCAtIEFwcGxpY2F0aW9uIGluaXRpYWxpemVkLicpO1xuXG5cdFx0aWYgKG1vZGUuZGVidWcpIHtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRFdmVudE1hbmFnZXIubGlzdEFsbCgpO1xuXHRcdFx0fSwgMTAwKTtcblx0XHR9XG5cdH0sICdBcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbiBmYWlsZWQnKTtcblxuXHRpZiAobW9kZS5zaG93QWxlcnRzKSB7XG5cdFx0YWxlcnQoJ0FuIGVycm9yIG9jY3VycmVkIGR1cmluZyBzdGFydHVwLiBDaGVjayBjb25zb2xlIGZvciBkZXRhaWxzLicpO1xuXHR9XG59XG4iXX0=