// File: app/io/base.js
import { deserialize } from './deserialize.js';
import { serialize } from './serialize.js';
import { utils as domUtils } from '../dom/utils.js';
// *DEV-NOTE* improve error handling and logging throughout
export const file = {
    async importFromFile(file) {
        return file.text().then(importPalette);
    },
    async exportToFile(palette, format) {
        const data = await exportPalette(palette, format);
        const mimeType = {
            css: 'text/css',
            json: 'application/json',
            xml: 'application/xml'
        }[format];
        domUtils.file.download(data, `palette_${palette.id}.${format}`, mimeType);
    }
};
function detectFileType(data) {
    if (data.trim().startsWith('{'))
        return 'json';
    if (data.trim().startsWith('<'))
        return 'xml';
    return 'css';
}
export async function exportPalette(palette, format) {
    switch (format) {
        case 'css':
            const cssData = await serialize.toCSS(palette);
            return cssData;
        case 'json':
            const jsonData = await serialize.toJSON(palette);
            return jsonData;
        case 'xml':
            const xmlData = await serialize.toXML(palette);
            return xmlData;
        default:
            throw new Error('Unsupported export format');
    }
}
export async function importPalette(data) {
    const fileType = detectFileType(data);
    switch (fileType) {
        case 'css':
            const cssPalette = await deserialize.fromCSS(data);
            if (!cssPalette)
                throw new Error('Invalid CSS');
            return cssPalette;
        case 'json':
            const jsonPalette = await deserialize.fromJSON(data);
            if (!jsonPalette)
                throw new Error('Invalid JSON');
            return jsonPalette;
        case 'xml':
            const xmlPalette = await deserialize.fromXML(data);
            if (!xmlPalette)
                throw new Error('Invalid XML');
            return xmlPalette;
        default:
            throw new Error('Unsupported file format');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvaW8vYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUI7QUFHdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsS0FBSyxJQUFJLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBELDJEQUEyRDtBQUUzRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUc7SUFDbkIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFVO1FBQzlCLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsS0FBSyxDQUFDLFlBQVksQ0FDakIsT0FBZ0IsRUFDaEIsTUFBOEI7UUFFOUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELE1BQU0sUUFBUSxHQUFHO1lBQ2hCLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixHQUFHLEVBQUUsaUJBQWlCO1NBQ3RCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFVixRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FDckIsSUFBSSxFQUNKLFdBQVcsT0FBTyxDQUFDLEVBQUUsSUFBSSxNQUFNLEVBQUUsRUFDakMsUUFBUSxDQUNSLENBQUM7SUFDSCxDQUFDO0NBQ0QsQ0FBQztBQUVGLFNBQVMsY0FBYyxDQUFDLElBQVk7SUFDbkMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUFFLE9BQU8sTUFBTSxDQUFDO0lBQy9DLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUU5QyxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDbEMsT0FBZ0IsRUFDaEIsTUFBOEI7SUFFOUIsUUFBUSxNQUFNLEVBQUUsQ0FBQztRQUNoQixLQUFLLEtBQUs7WUFDVCxNQUFNLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFL0MsT0FBTyxPQUFPLENBQUM7UUFDaEIsS0FBSyxNQUFNO1lBQ1YsTUFBTSxRQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWpELE9BQU8sUUFBUSxDQUFDO1FBQ2pCLEtBQUssS0FBSztZQUNULE1BQU0sT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUvQyxPQUFPLE9BQU8sQ0FBQztRQUNoQjtZQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUFDLElBQVk7SUFDL0MsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXRDLFFBQVEsUUFBUSxFQUFFLENBQUM7UUFDbEIsS0FBSyxLQUFLO1lBQ1QsTUFBTSxVQUFVLEdBQUcsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRW5ELElBQUksQ0FBQyxVQUFVO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFaEQsT0FBTyxVQUFVLENBQUM7UUFDbkIsS0FBSyxNQUFNO1lBQ1YsTUFBTSxXQUFXLEdBQUcsTUFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXJELElBQUksQ0FBQyxXQUFXO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFbEQsT0FBTyxXQUFXLENBQUM7UUFDcEIsS0FBSyxLQUFLO1lBQ1QsTUFBTSxVQUFVLEdBQUcsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRW5ELElBQUksQ0FBQyxVQUFVO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFaEQsT0FBTyxVQUFVLENBQUM7UUFDbkI7WUFDQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBhcHAvaW8vYmFzZS5qc1xuXG5pbXBvcnQgeyBQYWxldHRlIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgZGVzZXJpYWxpemUgfSBmcm9tICcuL2Rlc2VyaWFsaXplLmpzJztcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gJy4vc2VyaWFsaXplLmpzJztcbmltcG9ydCB7IHV0aWxzIGFzIGRvbVV0aWxzIH0gZnJvbSAnLi4vZG9tL3V0aWxzLmpzJztcblxuLy8gKkRFVi1OT1RFKiBpbXByb3ZlIGVycm9yIGhhbmRsaW5nIGFuZCBsb2dnaW5nIHRocm91Z2hvdXRcblxuZXhwb3J0IGNvbnN0IGZpbGUgPSB7XG5cdGFzeW5jIGltcG9ydEZyb21GaWxlKGZpbGU6IEZpbGUpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0XHRyZXR1cm4gZmlsZS50ZXh0KCkudGhlbihpbXBvcnRQYWxldHRlKTtcblx0fSxcblx0YXN5bmMgZXhwb3J0VG9GaWxlKFxuXHRcdHBhbGV0dGU6IFBhbGV0dGUsXG5cdFx0Zm9ybWF0OiAnY3NzJyB8ICdqc29uJyB8ICd4bWwnXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCBleHBvcnRQYWxldHRlKHBhbGV0dGUsIGZvcm1hdCk7XG5cdFx0Y29uc3QgbWltZVR5cGUgPSB7XG5cdFx0XHRjc3M6ICd0ZXh0L2NzcycsXG5cdFx0XHRqc29uOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHR4bWw6ICdhcHBsaWNhdGlvbi94bWwnXG5cdFx0fVtmb3JtYXRdO1xuXG5cdFx0ZG9tVXRpbHMuZmlsZS5kb3dubG9hZChcblx0XHRcdGRhdGEsXG5cdFx0XHRgcGFsZXR0ZV8ke3BhbGV0dGUuaWR9LiR7Zm9ybWF0fWAsXG5cdFx0XHRtaW1lVHlwZVxuXHRcdCk7XG5cdH1cbn07XG5cbmZ1bmN0aW9uIGRldGVjdEZpbGVUeXBlKGRhdGE6IHN0cmluZyk6ICdjc3MnIHwgJ2pzb24nIHwgJ3htbCcge1xuXHRpZiAoZGF0YS50cmltKCkuc3RhcnRzV2l0aCgneycpKSByZXR1cm4gJ2pzb24nO1xuXHRpZiAoZGF0YS50cmltKCkuc3RhcnRzV2l0aCgnPCcpKSByZXR1cm4gJ3htbCc7XG5cblx0cmV0dXJuICdjc3MnO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0UGFsZXR0ZShcblx0cGFsZXR0ZTogUGFsZXR0ZSxcblx0Zm9ybWF0OiAnY3NzJyB8ICdqc29uJyB8ICd4bWwnXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuXHRzd2l0Y2ggKGZvcm1hdCkge1xuXHRcdGNhc2UgJ2Nzcyc6XG5cdFx0XHRjb25zdCBjc3NEYXRhID0gYXdhaXQgc2VyaWFsaXplLnRvQ1NTKHBhbGV0dGUpO1xuXG5cdFx0XHRyZXR1cm4gY3NzRGF0YTtcblx0XHRjYXNlICdqc29uJzpcblx0XHRcdGNvbnN0IGpzb25EYXRhID0gYXdhaXQgc2VyaWFsaXplLnRvSlNPTihwYWxldHRlKTtcblxuXHRcdFx0cmV0dXJuIGpzb25EYXRhO1xuXHRcdGNhc2UgJ3htbCc6XG5cdFx0XHRjb25zdCB4bWxEYXRhID0gYXdhaXQgc2VyaWFsaXplLnRvWE1MKHBhbGV0dGUpO1xuXG5cdFx0XHRyZXR1cm4geG1sRGF0YTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBleHBvcnQgZm9ybWF0Jyk7XG5cdH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcG9ydFBhbGV0dGUoZGF0YTogc3RyaW5nKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdGNvbnN0IGZpbGVUeXBlID0gZGV0ZWN0RmlsZVR5cGUoZGF0YSk7XG5cblx0c3dpdGNoIChmaWxlVHlwZSkge1xuXHRcdGNhc2UgJ2Nzcyc6XG5cdFx0XHRjb25zdCBjc3NQYWxldHRlID0gYXdhaXQgZGVzZXJpYWxpemUuZnJvbUNTUyhkYXRhKTtcblxuXHRcdFx0aWYgKCFjc3NQYWxldHRlKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQ1NTJyk7XG5cblx0XHRcdHJldHVybiBjc3NQYWxldHRlO1xuXHRcdGNhc2UgJ2pzb24nOlxuXHRcdFx0Y29uc3QganNvblBhbGV0dGUgPSBhd2FpdCBkZXNlcmlhbGl6ZS5mcm9tSlNPTihkYXRhKTtcblxuXHRcdFx0aWYgKCFqc29uUGFsZXR0ZSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEpTT04nKTtcblxuXHRcdFx0cmV0dXJuIGpzb25QYWxldHRlO1xuXHRcdGNhc2UgJ3htbCc6XG5cdFx0XHRjb25zdCB4bWxQYWxldHRlID0gYXdhaXQgZGVzZXJpYWxpemUuZnJvbVhNTChkYXRhKTtcblxuXHRcdFx0aWYgKCF4bWxQYWxldHRlKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgWE1MJyk7XG5cblx0XHRcdHJldHVybiB4bWxQYWxldHRlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGZpbGUgZm9ybWF0Jyk7XG5cdH1cbn1cbiJdfQ==