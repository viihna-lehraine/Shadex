// File: app/db/services/MutationService.js
import { appUtils } from '../../appUtils.js';
import { configData as config } from '../../../data/config.js';
import { dbUtils } from '../dbUtils.js';
export class MutationService {
    static instance = null;
    storeNames = config.db.STORE_NAMES;
    appUtils;
    dbUtils;
    constructor() {
        this.appUtils = appUtils;
        this.dbUtils = dbUtils;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new MutationService();
        }
        return this.instance;
    }
    async createMutationLogger(obj, key) {
        const self = this;
        return new Proxy(obj, {
            set(target, property, value) {
                const oldValue = target[property];
                const success = Reflect.set(target, property, value);
                if (success) {
                    const mutationLog = {
                        timestamp: new Date().toISOString(),
                        key,
                        action: 'update',
                        newValue: { [property]: value },
                        oldValue: { [property]: oldValue },
                        origin: 'Proxy'
                    };
                    self.appUtils.log('debug', `Mutation detected: ${JSON.stringify(mutationLog)}`, `createMutationLogger()`, 2);
                    self.appUtils.handleAsync(() => self.persistMutation(mutationLog), 'Failed to persist mutation', 'MutationService.createMutationLogger()');
                }
                return success;
            }
        });
    }
    async getMutations() {
        return ((await this.appUtils.handleAsync(() => this.dbUtils.handleData(this.storeNames.MUTATIONS, 'mutation_logs', 'get'), 'Failed to fetch mutation logs', 'MutationService.getMutations()')) ?? []);
    }
    async persistMutation(data) {
        await this.appUtils.handleAsync(async () => {
            await this.dbUtils.withDB(async (db) => {
                await db.put('mutations', data);
                this.appUtils.log('debug', `Persisted mutation: ${JSON.stringify(data)}`, 'MutationService.persistMutation()', 4);
            });
        }, 'Failed to persist mutation', 'MutationService.persistMutation()');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXV0YXRpb25TZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9kYi9zZXJ2aWNlcy9NdXRhdGlvblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTJDO0FBVTNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxJQUFJLE1BQU0sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEMsTUFBTSxPQUFPLGVBQWU7SUFDbkIsTUFBTSxDQUFDLFFBQVEsR0FBMkIsSUFBSSxDQUFDO0lBRS9DLFVBQVUsR0FDakIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUM7SUFFZixRQUFRLENBQW9CO0lBQzVCLE9BQU8sQ0FBbUI7SUFFbEM7UUFDQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3ZDLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxvQkFBb0IsQ0FDaEMsR0FBTSxFQUNOLEdBQVc7UUFFWCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFFbEIsT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDckIsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSztnQkFDMUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQW1CLENBQUMsQ0FBQztnQkFDN0MsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUVyRCxJQUFJLE9BQU8sRUFBRSxDQUFDO29CQUNiLE1BQU0sV0FBVyxHQUFnQjt3QkFDaEMsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO3dCQUNuQyxHQUFHO3dCQUNILE1BQU0sRUFBRSxRQUFRO3dCQUNoQixRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRTt3QkFDL0IsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUU7d0JBQ2xDLE1BQU0sRUFBRSxPQUFPO3FCQUNmLENBQUM7b0JBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ2hCLE9BQU8sRUFDUCxzQkFBc0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUNuRCx3QkFBd0IsRUFDeEIsQ0FBQyxDQUNELENBQUM7b0JBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQ3hCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEVBQ3ZDLDRCQUE0QixFQUM1Qix3Q0FBd0MsQ0FDeEMsQ0FBQztnQkFDSCxDQUFDO2dCQUVELE9BQU8sT0FBTyxDQUFDO1lBQ2hCLENBQUM7U0FDRCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLFlBQVk7UUFDeEIsT0FBTyxDQUNOLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDL0IsR0FBRyxFQUFFLENBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBZ0MsRUFDaEQsZUFBZSxFQUNmLEtBQUssQ0FDTCxFQUNGLCtCQUErQixFQUMvQixnQ0FBZ0MsQ0FDaEMsQ0FBQyxJQUFJLEVBQUUsQ0FDUixDQUFDO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBaUI7UUFDN0MsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDOUIsS0FBSyxJQUFJLEVBQUU7WUFDVixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBQyxFQUFFLEVBQUMsRUFBRTtnQkFDcEMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ2hCLE9BQU8sRUFDUCx1QkFBdUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUM3QyxtQ0FBbUMsRUFDbkMsQ0FBQyxDQUNELENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsRUFDRCw0QkFBNEIsRUFDNUIsbUNBQW1DLENBQ25DLENBQUM7SUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogYXBwL2RiL3NlcnZpY2VzL011dGF0aW9uU2VydmljZS5qc1xuXG5pbXBvcnQge1xuXHRBcHBVdGlsc0ludGVyZmFjZSxcblx0Q29uZmlnRGF0YUludGVyZmFjZSxcblx0REJVdGlsc0ludGVyZmFjZSxcblx0TXV0YXRpb25Mb2csXG5cdE11dGF0aW9uU2VydmljZV9DbGFzc0ludGVyZmFjZSxcblx0UGFsZXR0ZVNjaGVtYVxufSBmcm9tICcuLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBhcHBVdGlscyB9IGZyb20gJy4uLy4uL2FwcFV0aWxzLmpzJztcbmltcG9ydCB7IGNvbmZpZ0RhdGEgYXMgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25maWcuanMnO1xuaW1wb3J0IHsgZGJVdGlscyB9IGZyb20gJy4uL2RiVXRpbHMuanMnO1xuXG5leHBvcnQgY2xhc3MgTXV0YXRpb25TZXJ2aWNlIGltcGxlbWVudHMgTXV0YXRpb25TZXJ2aWNlX0NsYXNzSW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IE11dGF0aW9uU2VydmljZSB8IG51bGwgPSBudWxsO1xuXG5cdHByaXZhdGUgc3RvcmVOYW1lczogQ29uZmlnRGF0YUludGVyZmFjZVsnZGInXVsnU1RPUkVfTkFNRVMnXSA9XG5cdFx0Y29uZmlnLmRiLlNUT1JFX05BTUVTO1xuXG5cdHByaXZhdGUgYXBwVXRpbHM6IEFwcFV0aWxzSW50ZXJmYWNlO1xuXHRwcml2YXRlIGRiVXRpbHM6IERCVXRpbHNJbnRlcmZhY2U7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5hcHBVdGlscyA9IGFwcFV0aWxzO1xuXHRcdHRoaXMuZGJVdGlscyA9IGRiVXRpbHM7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEluc3RhbmNlKCkge1xuXHRcdGlmICghdGhpcy5pbnN0YW5jZSkge1xuXHRcdFx0dGhpcy5pbnN0YW5jZSA9IG5ldyBNdXRhdGlvblNlcnZpY2UoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBjcmVhdGVNdXRhdGlvbkxvZ2dlcjxUIGV4dGVuZHMgb2JqZWN0Pihcblx0XHRvYmo6IFQsXG5cdFx0a2V5OiBzdHJpbmdcblx0KTogUHJvbWlzZTxUPiB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cblx0XHRyZXR1cm4gbmV3IFByb3h5KG9iaiwge1xuXHRcdFx0c2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG5cdFx0XHRcdGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W3Byb3BlcnR5IGFzIGtleW9mIFRdO1xuXHRcdFx0XHRjb25zdCBzdWNjZXNzID0gUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpO1xuXG5cdFx0XHRcdGlmIChzdWNjZXNzKSB7XG5cdFx0XHRcdFx0Y29uc3QgbXV0YXRpb25Mb2c6IE11dGF0aW9uTG9nID0ge1xuXHRcdFx0XHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRcdFx0XHRrZXksXG5cdFx0XHRcdFx0XHRhY3Rpb246ICd1cGRhdGUnLFxuXHRcdFx0XHRcdFx0bmV3VmFsdWU6IHsgW3Byb3BlcnR5XTogdmFsdWUgfSxcblx0XHRcdFx0XHRcdG9sZFZhbHVlOiB7IFtwcm9wZXJ0eV06IG9sZFZhbHVlIH0sXG5cdFx0XHRcdFx0XHRvcmlnaW46ICdQcm94eSdcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0c2VsZi5hcHBVdGlscy5sb2coXG5cdFx0XHRcdFx0XHQnZGVidWcnLFxuXHRcdFx0XHRcdFx0YE11dGF0aW9uIGRldGVjdGVkOiAke0pTT04uc3RyaW5naWZ5KG11dGF0aW9uTG9nKX1gLFxuXHRcdFx0XHRcdFx0YGNyZWF0ZU11dGF0aW9uTG9nZ2VyKClgLFxuXHRcdFx0XHRcdFx0MlxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRzZWxmLmFwcFV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0XHRcdFx0KCkgPT4gc2VsZi5wZXJzaXN0TXV0YXRpb24obXV0YXRpb25Mb2cpLFxuXHRcdFx0XHRcdFx0J0ZhaWxlZCB0byBwZXJzaXN0IG11dGF0aW9uJyxcblx0XHRcdFx0XHRcdCdNdXRhdGlvblNlcnZpY2UuY3JlYXRlTXV0YXRpb25Mb2dnZXIoKSdcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHN1Y2Nlc3M7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0TXV0YXRpb25zKCk6IFByb21pc2U8TXV0YXRpb25Mb2dbXT4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHQoYXdhaXQgdGhpcy5hcHBVdGlscy5oYW5kbGVBc3luYyhcblx0XHRcdFx0KCkgPT5cblx0XHRcdFx0XHR0aGlzLmRiVXRpbHMuaGFuZGxlRGF0YTxNdXRhdGlvbkxvZ1tdPihcblx0XHRcdFx0XHRcdHRoaXMuc3RvcmVOYW1lcy5NVVRBVElPTlMgYXMga2V5b2YgUGFsZXR0ZVNjaGVtYSxcblx0XHRcdFx0XHRcdCdtdXRhdGlvbl9sb2dzJyxcblx0XHRcdFx0XHRcdCdnZXQnXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0J0ZhaWxlZCB0byBmZXRjaCBtdXRhdGlvbiBsb2dzJyxcblx0XHRcdFx0J011dGF0aW9uU2VydmljZS5nZXRNdXRhdGlvbnMoKSdcblx0XHRcdCkpID8/IFtdXG5cdFx0KTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBwZXJzaXN0TXV0YXRpb24oZGF0YTogTXV0YXRpb25Mb2cpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRhd2FpdCB0aGlzLmFwcFV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0YXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRhd2FpdCB0aGlzLmRiVXRpbHMud2l0aERCKGFzeW5jIGRiID0+IHtcblx0XHRcdFx0XHRhd2FpdCBkYi5wdXQoJ211dGF0aW9ucycsIGRhdGEpO1xuXHRcdFx0XHRcdHRoaXMuYXBwVXRpbHMubG9nKFxuXHRcdFx0XHRcdFx0J2RlYnVnJyxcblx0XHRcdFx0XHRcdGBQZXJzaXN0ZWQgbXV0YXRpb246ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCxcblx0XHRcdFx0XHRcdCdNdXRhdGlvblNlcnZpY2UucGVyc2lzdE11dGF0aW9uKCknLFxuXHRcdFx0XHRcdFx0NFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdCdGYWlsZWQgdG8gcGVyc2lzdCBtdXRhdGlvbicsXG5cdFx0XHQnTXV0YXRpb25TZXJ2aWNlLnBlcnNpc3RNdXRhdGlvbigpJ1xuXHRcdCk7XG5cdH1cbn1cbiJdfQ==