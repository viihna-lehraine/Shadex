// File: app/db/services/HistoryService.js
import { configData as config } from '../../../data/config.js';
import { dbUtils } from '../dbUtils.js';
export class HistoryService {
    static instance = null;
    dbUtils;
    storeNames = config.db.STORE_NAMES;
    constructor() {
        this.dbUtils = dbUtils;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new HistoryService();
        }
        return this.instance;
    }
    async addPaletteToHistory(palette) {
        const history = await this.getPaletteHistory();
        const newID = history.length + 1;
        const idString = `${palette.metadata.type}_${newID}`;
        history.unshift({ ...palette, id: idString });
        const settings = await dbUtils.handleAsync(() => this.dbUtils.handleData('settings', 'APP_SETTINGS', 'get'), 'Failed to fetch settings', 'HistoryService.addPaletteToHistory()');
        const maxHistory = settings?.maxHistory ?? 5;
        if (history.length > maxHistory)
            history.pop();
        await this.savePaletteHistory(history);
    }
    async getPaletteHistory() {
        return ((await this.dbUtils.handleAsync(() => this.dbUtils.handleData('settings', 'paletteHistory', 'get'), 'Failed to fetch palette history', 'HistoryService.getPaletteHistory()'))?.palettes ?? []);
    }
    async savePaletteHistory(paletteHistory) {
        await this.dbUtils.handleAsync(() => this.dbUtils.handleData(this.storeNames.SETTINGS, 'paletteHistory', 'put', { palettes: paletteHistory }), 'Failed to save palette history', 'HistoryService.savePaletteHistory()');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlzdG9yeVNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2RiL3NlcnZpY2VzL0hpc3RvcnlTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBDQUEwQztBQVMxQyxPQUFPLEVBQUUsVUFBVSxJQUFJLE1BQU0sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEMsTUFBTSxPQUFPLGNBQWM7SUFDbEIsTUFBTSxDQUFDLFFBQVEsR0FBMEIsSUFBSSxDQUFDO0lBRTlDLE9BQU8sQ0FBbUI7SUFFMUIsVUFBVSxHQUNqQixNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUV2QjtRQUNDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVc7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7UUFDdEMsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDO0lBRU0sS0FBSyxDQUFDLG1CQUFtQixDQUFDLE9BQWdCO1FBQ2hELE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDL0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDakMsTUFBTSxRQUFRLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUVyRCxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxPQUFPLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsV0FBVyxDQUN6QyxHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsVUFBVSxFQUNWLGNBQWMsRUFDZCxLQUFLLENBQ0wsRUFDRiwwQkFBMEIsRUFDMUIsc0NBQXNDLENBQ3RDLENBQUM7UUFFRixNQUFNLFVBQVUsR0FBRyxRQUFRLEVBQUUsVUFBVSxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsVUFBVTtZQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUUvQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sS0FBSyxDQUFDLGlCQUFpQjtRQUM3QixPQUFPLENBQ04sQ0FDQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUM3QixHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixLQUFLLENBQ0wsRUFDRixpQ0FBaUMsRUFDakMsb0NBQW9DLENBQ3BDLENBQ0QsRUFBRSxRQUFRLElBQUksRUFBRSxDQUNqQixDQUFDO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxjQUF5QjtRQUN4RCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUM3QixHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUErQixFQUMvQyxnQkFBZ0IsRUFDaEIsS0FBSyxFQUNMLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUM1QixFQUNGLGdDQUFnQyxFQUNoQyxxQ0FBcUMsQ0FDckMsQ0FBQztJQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBhcHAvZGIvc2VydmljZXMvSGlzdG9yeVNlcnZpY2UuanNcblxuaW1wb3J0IHtcblx0Q29uZmlnRGF0YUludGVyZmFjZSxcblx0REJVdGlsc0ludGVyZmFjZSxcblx0SGlzdG9yeVNlcnZpY2VfQ2xhc3NJbnRlcmZhY2UsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVTY2hlbWFcbn0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgY29uZmlnRGF0YSBhcyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBkYlV0aWxzIH0gZnJvbSAnLi4vZGJVdGlscy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBIaXN0b3J5U2VydmljZSBpbXBsZW1lbnRzIEhpc3RvcnlTZXJ2aWNlX0NsYXNzSW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEhpc3RvcnlTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cblx0cHJpdmF0ZSBkYlV0aWxzOiBEQlV0aWxzSW50ZXJmYWNlO1xuXG5cdHByaXZhdGUgc3RvcmVOYW1lczogQ29uZmlnRGF0YUludGVyZmFjZVsnZGInXVsnU1RPUkVfTkFNRVMnXSA9XG5cdFx0Y29uZmlnLmRiLlNUT1JFX05BTUVTO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuZGJVdGlscyA9IGRiVXRpbHM7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEluc3RhbmNlKCkge1xuXHRcdGlmICghdGhpcy5pbnN0YW5jZSkge1xuXHRcdFx0dGhpcy5pbnN0YW5jZSA9IG5ldyBIaXN0b3J5U2VydmljZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGFkZFBhbGV0dGVUb0hpc3RvcnkocGFsZXR0ZTogUGFsZXR0ZSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGhpc3RvcnkgPSBhd2FpdCB0aGlzLmdldFBhbGV0dGVIaXN0b3J5KCk7XG5cdFx0Y29uc3QgbmV3SUQgPSBoaXN0b3J5Lmxlbmd0aCArIDE7XG5cdFx0Y29uc3QgaWRTdHJpbmcgPSBgJHtwYWxldHRlLm1ldGFkYXRhLnR5cGV9XyR7bmV3SUR9YDtcblxuXHRcdGhpc3RvcnkudW5zaGlmdCh7IC4uLnBhbGV0dGUsIGlkOiBpZFN0cmluZyB9KTtcblxuXHRcdGNvbnN0IHNldHRpbmdzID0gYXdhaXQgZGJVdGlscy5oYW5kbGVBc3luYyhcblx0XHRcdCgpID0+XG5cdFx0XHRcdHRoaXMuZGJVdGlscy5oYW5kbGVEYXRhPHsgbWF4SGlzdG9yeTogbnVtYmVyIH0+KFxuXHRcdFx0XHRcdCdzZXR0aW5ncycsXG5cdFx0XHRcdFx0J0FQUF9TRVRUSU5HUycsXG5cdFx0XHRcdFx0J2dldCdcblx0XHRcdFx0KSxcblx0XHRcdCdGYWlsZWQgdG8gZmV0Y2ggc2V0dGluZ3MnLFxuXHRcdFx0J0hpc3RvcnlTZXJ2aWNlLmFkZFBhbGV0dGVUb0hpc3RvcnkoKSdcblx0XHQpO1xuXG5cdFx0Y29uc3QgbWF4SGlzdG9yeSA9IHNldHRpbmdzPy5tYXhIaXN0b3J5ID8/IDU7XG5cdFx0aWYgKGhpc3RvcnkubGVuZ3RoID4gbWF4SGlzdG9yeSkgaGlzdG9yeS5wb3AoKTtcblxuXHRcdGF3YWl0IHRoaXMuc2F2ZVBhbGV0dGVIaXN0b3J5KGhpc3RvcnkpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGdldFBhbGV0dGVIaXN0b3J5KCk6IFByb21pc2U8UGFsZXR0ZVtdPiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdChcblx0XHRcdFx0YXdhaXQgdGhpcy5kYlV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0XHRcdCgpID0+XG5cdFx0XHRcdFx0XHR0aGlzLmRiVXRpbHMuaGFuZGxlRGF0YTx7IHBhbGV0dGVzOiBQYWxldHRlW10gfT4oXG5cdFx0XHRcdFx0XHRcdCdzZXR0aW5ncycsXG5cdFx0XHRcdFx0XHRcdCdwYWxldHRlSGlzdG9yeScsXG5cdFx0XHRcdFx0XHRcdCdnZXQnXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdCdGYWlsZWQgdG8gZmV0Y2ggcGFsZXR0ZSBoaXN0b3J5Jyxcblx0XHRcdFx0XHQnSGlzdG9yeVNlcnZpY2UuZ2V0UGFsZXR0ZUhpc3RvcnkoKSdcblx0XHRcdFx0KVxuXHRcdFx0KT8ucGFsZXR0ZXMgPz8gW11cblx0XHQpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIHNhdmVQYWxldHRlSGlzdG9yeShwYWxldHRlSGlzdG9yeTogUGFsZXR0ZVtdKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgdGhpcy5kYlV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0KCkgPT5cblx0XHRcdFx0dGhpcy5kYlV0aWxzLmhhbmRsZURhdGEoXG5cdFx0XHRcdFx0dGhpcy5zdG9yZU5hbWVzLlNFVFRJTkdTIGFzIGtleW9mIFBhbGV0dGVTY2hlbWEsXG5cdFx0XHRcdFx0J3BhbGV0dGVIaXN0b3J5Jyxcblx0XHRcdFx0XHQncHV0Jyxcblx0XHRcdFx0XHR7IHBhbGV0dGVzOiBwYWxldHRlSGlzdG9yeSB9XG5cdFx0XHRcdCksXG5cdFx0XHQnRmFpbGVkIHRvIHNhdmUgcGFsZXR0ZSBoaXN0b3J5Jyxcblx0XHRcdCdIaXN0b3J5U2VydmljZS5zYXZlUGFsZXR0ZUhpc3RvcnkoKSdcblx0XHQpO1xuXHR9XG59XG4iXX0=