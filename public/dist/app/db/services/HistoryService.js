// File: app/db/services/HistoryService.js
import { appUtils } from '../../appUtils.js';
import { configData as config } from '../../../data/config.js';
import { dbUtils } from '../dbUtils.js';
export class HistoryService {
    static instance = null;
    appUtils;
    dbUtils;
    storeNames = config.db.STORE_NAMES;
    constructor() {
        this.appUtils = appUtils;
        this.dbUtils = dbUtils;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new HistoryService();
        }
        return this.instance;
    }
    async addPaletteToHistory(palette) {
        const history = await this.getPaletteHistory();
        const newID = history.length + 1;
        const idString = `${palette.metadata.type}_${newID}`;
        history.unshift({ ...palette, id: idString });
        const settings = await appUtils.handleAsync(() => this.dbUtils.handleData('settings', 'APP_SETTINGS', 'get'), 'Failed to fetch settings', 'HistoryService.addPaletteToHistory()');
        const maxHistory = settings?.maxHistory ?? 5;
        if (history.length > maxHistory)
            history.pop();
        await this.savePaletteHistory(history);
    }
    async getPaletteHistory() {
        return ((await this.appUtils.handleAsync(() => this.dbUtils.handleData('settings', 'paletteHistory', 'get'), 'Failed to fetch palette history', 'HistoryService.getPaletteHistory()'))?.palettes ?? []);
    }
    async savePaletteHistory(paletteHistory) {
        await this.appUtils.handleAsync(() => this.dbUtils.handleData(this.storeNames.SETTINGS, 'paletteHistory', 'put', { palettes: paletteHistory }), 'Failed to save palette history', 'HistoryService.savePaletteHistory()');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlzdG9yeVNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2RiL3NlcnZpY2VzL0hpc3RvcnlTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBDQUEwQztBQVUxQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhDLE1BQU0sT0FBTyxjQUFjO0lBQ2xCLE1BQU0sQ0FBQyxRQUFRLEdBQTBCLElBQUksQ0FBQztJQUU5QyxRQUFRLENBQW9CO0lBQzVCLE9BQU8sQ0FBbUI7SUFFMUIsVUFBVSxHQUNqQixNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUV2QjtRQUNDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVc7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7UUFDdEMsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDO0lBRU0sS0FBSyxDQUFDLG1CQUFtQixDQUFDLE9BQWdCO1FBQ2hELE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDL0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDakMsTUFBTSxRQUFRLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUVyRCxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxPQUFPLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxRQUFRLENBQUMsV0FBVyxDQUMxQyxHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsVUFBVSxFQUNWLGNBQWMsRUFDZCxLQUFLLENBQ0wsRUFDRiwwQkFBMEIsRUFDMUIsc0NBQXNDLENBQ3RDLENBQUM7UUFFRixNQUFNLFVBQVUsR0FBRyxRQUFRLEVBQUUsVUFBVSxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsVUFBVTtZQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUUvQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sS0FBSyxDQUFDLGlCQUFpQjtRQUM3QixPQUFPLENBQ04sQ0FDQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUM5QixHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixLQUFLLENBQ0wsRUFDRixpQ0FBaUMsRUFDakMsb0NBQW9DLENBQ3BDLENBQ0QsRUFBRSxRQUFRLElBQUksRUFBRSxDQUNqQixDQUFDO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxjQUF5QjtRQUN4RCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUM5QixHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUErQixFQUMvQyxnQkFBZ0IsRUFDaEIsS0FBSyxFQUNMLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUM1QixFQUNGLGdDQUFnQyxFQUNoQyxxQ0FBcUMsQ0FDckMsQ0FBQztJQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBhcHAvZGIvc2VydmljZXMvSGlzdG9yeVNlcnZpY2UuanNcblxuaW1wb3J0IHtcblx0QXBwVXRpbHNJbnRlcmZhY2UsXG5cdENvbmZpZ0RhdGFJbnRlcmZhY2UsXG5cdERCVXRpbHNJbnRlcmZhY2UsXG5cdEhpc3RvcnlTZXJ2aWNlX0NsYXNzSW50ZXJmYWNlLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlU2NoZW1hXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGFwcFV0aWxzIH0gZnJvbSAnLi4vLi4vYXBwVXRpbHMuanMnO1xuaW1wb3J0IHsgY29uZmlnRGF0YSBhcyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBkYlV0aWxzIH0gZnJvbSAnLi4vZGJVdGlscy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBIaXN0b3J5U2VydmljZSBpbXBsZW1lbnRzIEhpc3RvcnlTZXJ2aWNlX0NsYXNzSW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEhpc3RvcnlTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cblx0cHJpdmF0ZSBhcHBVdGlsczogQXBwVXRpbHNJbnRlcmZhY2U7XG5cdHByaXZhdGUgZGJVdGlsczogREJVdGlsc0ludGVyZmFjZTtcblxuXHRwcml2YXRlIHN0b3JlTmFtZXM6IENvbmZpZ0RhdGFJbnRlcmZhY2VbJ2RiJ11bJ1NUT1JFX05BTUVTJ10gPVxuXHRcdGNvbmZpZy5kYi5TVE9SRV9OQU1FUztcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmFwcFV0aWxzID0gYXBwVXRpbHM7XG5cdFx0dGhpcy5kYlV0aWxzID0gZGJVdGlscztcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UoKSB7XG5cdFx0aWYgKCF0aGlzLmluc3RhbmNlKSB7XG5cdFx0XHR0aGlzLmluc3RhbmNlID0gbmV3IEhpc3RvcnlTZXJ2aWNlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2U7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgYWRkUGFsZXR0ZVRvSGlzdG9yeShwYWxldHRlOiBQYWxldHRlKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgaGlzdG9yeSA9IGF3YWl0IHRoaXMuZ2V0UGFsZXR0ZUhpc3RvcnkoKTtcblx0XHRjb25zdCBuZXdJRCA9IGhpc3RvcnkubGVuZ3RoICsgMTtcblx0XHRjb25zdCBpZFN0cmluZyA9IGAke3BhbGV0dGUubWV0YWRhdGEudHlwZX1fJHtuZXdJRH1gO1xuXG5cdFx0aGlzdG9yeS51bnNoaWZ0KHsgLi4ucGFsZXR0ZSwgaWQ6IGlkU3RyaW5nIH0pO1xuXG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSBhd2FpdCBhcHBVdGlscy5oYW5kbGVBc3luYyhcblx0XHRcdCgpID0+XG5cdFx0XHRcdHRoaXMuZGJVdGlscy5oYW5kbGVEYXRhPHsgbWF4SGlzdG9yeTogbnVtYmVyIH0+KFxuXHRcdFx0XHRcdCdzZXR0aW5ncycsXG5cdFx0XHRcdFx0J0FQUF9TRVRUSU5HUycsXG5cdFx0XHRcdFx0J2dldCdcblx0XHRcdFx0KSxcblx0XHRcdCdGYWlsZWQgdG8gZmV0Y2ggc2V0dGluZ3MnLFxuXHRcdFx0J0hpc3RvcnlTZXJ2aWNlLmFkZFBhbGV0dGVUb0hpc3RvcnkoKSdcblx0XHQpO1xuXG5cdFx0Y29uc3QgbWF4SGlzdG9yeSA9IHNldHRpbmdzPy5tYXhIaXN0b3J5ID8/IDU7XG5cdFx0aWYgKGhpc3RvcnkubGVuZ3RoID4gbWF4SGlzdG9yeSkgaGlzdG9yeS5wb3AoKTtcblxuXHRcdGF3YWl0IHRoaXMuc2F2ZVBhbGV0dGVIaXN0b3J5KGhpc3RvcnkpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGdldFBhbGV0dGVIaXN0b3J5KCk6IFByb21pc2U8UGFsZXR0ZVtdPiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdChcblx0XHRcdFx0YXdhaXQgdGhpcy5hcHBVdGlscy5oYW5kbGVBc3luYyhcblx0XHRcdFx0XHQoKSA9PlxuXHRcdFx0XHRcdFx0dGhpcy5kYlV0aWxzLmhhbmRsZURhdGE8eyBwYWxldHRlczogUGFsZXR0ZVtdIH0+KFxuXHRcdFx0XHRcdFx0XHQnc2V0dGluZ3MnLFxuXHRcdFx0XHRcdFx0XHQncGFsZXR0ZUhpc3RvcnknLFxuXHRcdFx0XHRcdFx0XHQnZ2V0J1xuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHQnRmFpbGVkIHRvIGZldGNoIHBhbGV0dGUgaGlzdG9yeScsXG5cdFx0XHRcdFx0J0hpc3RvcnlTZXJ2aWNlLmdldFBhbGV0dGVIaXN0b3J5KCknXG5cdFx0XHRcdClcblx0XHRcdCk/LnBhbGV0dGVzID8/IFtdXG5cdFx0KTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBzYXZlUGFsZXR0ZUhpc3RvcnkocGFsZXR0ZUhpc3Rvcnk6IFBhbGV0dGVbXSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGF3YWl0IHRoaXMuYXBwVXRpbHMuaGFuZGxlQXN5bmMoXG5cdFx0XHQoKSA9PlxuXHRcdFx0XHR0aGlzLmRiVXRpbHMuaGFuZGxlRGF0YShcblx0XHRcdFx0XHR0aGlzLnN0b3JlTmFtZXMuU0VUVElOR1MgYXMga2V5b2YgUGFsZXR0ZVNjaGVtYSxcblx0XHRcdFx0XHQncGFsZXR0ZUhpc3RvcnknLFxuXHRcdFx0XHRcdCdwdXQnLFxuXHRcdFx0XHRcdHsgcGFsZXR0ZXM6IHBhbGV0dGVIaXN0b3J5IH1cblx0XHRcdFx0KSxcblx0XHRcdCdGYWlsZWQgdG8gc2F2ZSBwYWxldHRlIGhpc3RvcnknLFxuXHRcdFx0J0hpc3RvcnlTZXJ2aWNlLnNhdmVQYWxldHRlSGlzdG9yeSgpJ1xuXHRcdCk7XG5cdH1cbn1cbiJdfQ==