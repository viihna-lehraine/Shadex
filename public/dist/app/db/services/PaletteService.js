// File: app/db/services/PaletteService.js
import { appUtils } from '../../appUtils.js';
import { configData as config } from '../../../data/config.js';
import { dbUtils } from '../dbUtils.js';
import { commonFn } from '../../../common/index.js';
const PALETTE_STORE = 'palettes';
export class PaletteService {
    static instance = null;
    appUtils;
    dbUtils;
    utils;
    storeNames = config.db.STORE_NAMES;
    constructor() {
        this.appUtils = appUtils;
        this.dbUtils = dbUtils;
        this.utils = commonFn.utils;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new PaletteService();
        }
        return this.instance;
    }
    async getCurrentPaletteID() {
        return ((await this.appUtils.handleAsync(() => this.dbUtils.handleData('settings', this.dbUtils.getDefaultKey('APP_SETTINGS'), 'get'), 'Failed to fetch current palette ID', 'PaletteService.getCurrentPaletteID()'))?.lastPaletteID ?? 0);
    }
    async getNextTableID() {
        const lastTableID = (await this.appUtils.handleAsync(() => this.dbUtils.handleData(this.storeNames.SETTINGS, this.dbUtils.getDefaultKey('APP_SETTINGS'), 'get'), 'Failed to fetch last table ID', 'PaletteService.getNextTableID()'))?.lastTableID ?? 0;
        const nextID = lastTableID + 1;
        await this.appUtils.handleAsync(() => this.dbUtils.updateData(this.storeNames.SETTINGS, this.dbUtils.getDefaultKey('APP_SETTINGS'), s => ({ ...s, lastTableID: nextID })), 'Failed to update next table ID', 'PaletteService.getNextTableID()');
        return `palette_${nextID}`;
    }
    async getPalette(id) {
        return await this.appUtils.handleAsync(() => this.dbUtils.handleData(PALETTE_STORE, id, 'get'), `Failed to fetch palette with ID ${id}`, 'PaletteService.getPalette()');
    }
    async resetPaletteID() {
        await this.appUtils.handleAsync(() => this.dbUtils.updateData(this.storeNames.SETTINGS, this.dbUtils.getDefaultKey('APP_SETTINGS'), s => ({ ...s, lastPaletteID: 0 })), 'Failed to reset palette ID', 'PaletteService.resetPaletteID()');
    }
    async savePalette(id, palette) {
        await this.appUtils.handleAsync(() => this.dbUtils.handleData(PALETTE_STORE, id, 'put', palette), `Failed to save palette with ID ${id}`, 'PaletteService.savePalette()');
    }
    async savePaletteToDB(args) {
        const result = await this.appUtils.handleAsync(async () => {
            const newPalette = this.utils.palette.createObject(args);
            const parsedPaletteFormat = Number(newPalette.id.split('_')[1]);
            if (isNaN(parsedPaletteFormat) ||
                parsedPaletteFormat <= 0 ||
                parsedPaletteFormat >= 9) {
                throw new Error(`Invalid palette ID format: ${newPalette.id}`);
            }
            await this.savePalette(newPalette.id, newPalette);
            return newPalette;
        }, 'Failed to save palette to database', 'PaletteService.savePaletteToDB()');
        if (!result) {
            throw new Error('savePaletteToDB failed and returned null.');
        }
        return result;
    }
    async updateEntryInPalette(tableID, entryIndex, newEntry) {
        const palette = await this.appUtils.handleAsync(() => this.dbUtils.handleData(PALETTE_STORE, tableID, 'get'), `Failed to fetch palette with ID ${tableID}`, 'PaletteService.updateEntryInPalette()');
        if (!palette)
            throw new Error(`Palette ${tableID} not found.`);
        if (entryIndex >= palette.items.length)
            throw new Error(`Invalid index ${entryIndex}`);
        palette.items[entryIndex] = newEntry;
        await this.savePalette(tableID, palette);
    }
}
//# sourceMappingURL=data:application/json;base64,