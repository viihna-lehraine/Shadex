// File: app/db/services/DBService.js
import { appUtils } from '../../appUtils.js';
import { configData as config } from '../../../data/config.js';
import { dbUtils } from '../dbUtils.js';
export class DBService {
    static instance = null;
    defaultSettings = config.db.DEFAULT_SETTINGS;
    storeNames = config.db.STORE_NAMES;
    appUtils;
    dbUtils;
    constructor() {
        this.appUtils = appUtils;
        this.dbUtils = dbUtils;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new DBService();
        }
        return this.instance;
    }
    async deleteDatabase() {
        await this.appUtils.handleAsync(async () => {
            const dbName = 'paletteDB';
            const dbExists = await new Promise(resolve => {
                const request = indexedDB.open(dbName);
                request.onsuccess = () => {
                    request.result.close();
                    resolve(true);
                };
                request.onerror = () => resolve(false);
            });
            if (dbExists) {
                const deleteRequest = indexedDB.deleteDatabase(dbName);
                deleteRequest.onsuccess = () => this.appUtils.log('debug', `Database "${dbName}" deleted successfully.`, 'deleteDatabase');
                deleteRequest.onerror = event => this.appUtils.log('error', `Error deleting database "${dbName}":\nEvent: ${event}`, 'deleteDatabase');
                deleteRequest.onblocked = () => this.appUtils.log('warn', `Delete operation blocked for "${dbName}".`, 'deleteDatabase');
            }
            else {
                this.appUtils.log('warn', `Database "${dbName}" does not exist.`, 'deleteDatabase');
            }
        }, 'Failed to delete database', 'DBService.deleteDatabase');
    }
    async deleteEntries(store, keys) {
        await this.appUtils.handleAsync(async () => {
            await this.dbUtils.withDB(async (db) => {
                const storeRef = db
                    .transaction(store, 'readwrite')
                    .objectStore(store);
                for (const key of keys) {
                    if ((await this.dbUtils.handleData(store, key, 'get')) !== null) {
                        await storeRef.delete(key);
                    }
                }
            });
        }, `Failed to delete entries in store "${store}"`, 'DBService.deleteEntries');
    }
    async resetDatabase() {
        await this.appUtils.handleAsync(async () => {
            await this.dbUtils.withDB(async (db) => {
                await Promise.all(Object.values(this.storeNames).map(store => db
                    .transaction(store, 'readwrite')
                    .objectStore(store)
                    .clear()));
                await this.dbUtils.handleData(this.storeNames.SETTINGS, this.dbUtils.getDefaultKey('APP_SETTINGS'), 'put', this.defaultSettings);
            });
        }, 'Failed to reset database', 'DBService.resetDatabase');
    }
}
//# sourceMappingURL=data:application/json;base64,