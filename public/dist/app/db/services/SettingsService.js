// File: app/settings/SettingsService.js
import { appUtils } from '../../appUtils.js';
import { configData as config } from '../../../data/config.js';
import { dbUtils } from '../dbUtils.js';
const defaultSettings = config.db.DEFAULT_SETTINGS;
const SETTINGS_STORE = 'settings';
const SETTINGS_KEY = 'APP_SETTINGS';
export class SettingsService {
    static instance = null;
    cache = {};
    _maxHistory = 5;
    appUtils;
    dbUtils;
    constructor() {
        this.appUtils = appUtils;
        this.dbUtils = dbUtils;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new SettingsService();
        }
        return this.instance;
    }
    get maxHistory() {
        return Math.round(this._maxHistory);
    }
    set maxHistory(value) {
        this._maxHistory = Math.round(Math.max(3, Math.min(10, value)));
    }
    async getCachedSettings() {
        if (!this.cache.settings) {
            this.cache.settings =
                (await this.appUtils.handleAsync(() => this.getSettings(), 'Failed to fetch cached settings', 'SettingsService.getCachedSettings()')) ?? defaultSettings;
        }
        return this.cache.settings;
    }
    async getSettings() {
        const storedSettings = await this.appUtils.handleAsync(() => this.dbUtils.handleData(SETTINGS_STORE, SETTINGS_KEY, 'get'), 'Failed to retrieve settings', 'SettingsService.getSettings');
        return { ...defaultSettings, ...(storedSettings ?? {}) };
    }
    async saveSettings(newSettings) {
        await this.appUtils.handleAsync(() => this.dbUtils.handleData(SETTINGS_STORE, SETTINGS_KEY, 'put', newSettings), 'Failed to save settings', 'SettingsService.saveSettings');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3NTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9kYi9zZXJ2aWNlcy9TZXR0aW5nc1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBU3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxJQUFJLE1BQU0sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEMsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNuRCxNQUFNLGNBQWMsR0FBRyxVQUFpQyxDQUFDO0FBQ3pELE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQztBQUVwQyxNQUFNLE9BQU8sZUFBZTtJQUNuQixNQUFNLENBQUMsUUFBUSxHQUEyQixJQUFJLENBQUM7SUFFL0MsS0FBSyxHQUFvQyxFQUFFLENBQUM7SUFDNUMsV0FBVyxHQUFXLENBQUMsQ0FBQztJQUV4QixRQUFRLENBQW9CO0lBQzVCLE9BQU8sQ0FBbUI7SUFFbEM7UUFDQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3ZDLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFXLFVBQVUsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUI7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO2dCQUNsQixDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQy9CLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFDeEIsaUNBQWlDLEVBQ2pDLHFDQUFxQyxDQUNyQyxDQUFDLElBQUksZUFBZSxDQUFDO1FBQ3hCLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVztRQUN2QixNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUNyRCxHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsY0FBYyxFQUNkLFlBQVksRUFDWixLQUFLLENBQ0wsRUFDRiw2QkFBNkIsRUFDN0IsNkJBQTZCLENBQzdCLENBQUM7UUFFRixPQUFPLEVBQUUsR0FBRyxlQUFlLEVBQUUsR0FBRyxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFTSxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQXFCO1FBQzlDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQzlCLEdBQUcsRUFBRSxDQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUN0QixjQUFjLEVBQ2QsWUFBWSxFQUNaLEtBQUssRUFDTCxXQUFXLENBQ1gsRUFDRix5QkFBeUIsRUFDekIsOEJBQThCLENBQzlCLENBQUM7SUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogYXBwL3NldHRpbmdzL1NldHRpbmdzU2VydmljZS5qc1xuXG5pbXBvcnQge1xuXHRBcHBVdGlsc0ludGVyZmFjZSxcblx0REJVdGlsc0ludGVyZmFjZSxcblx0UGFsZXR0ZVNjaGVtYSxcblx0U2V0dGluZ3MsXG5cdFNldHRpbmdzU2VydmljZV9DbGFzc0ludGVyZmFjZVxufSBmcm9tICcuLi8uLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBhcHBVdGlscyB9IGZyb20gJy4uLy4uL2FwcFV0aWxzLmpzJztcbmltcG9ydCB7IGNvbmZpZ0RhdGEgYXMgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25maWcuanMnO1xuaW1wb3J0IHsgZGJVdGlscyB9IGZyb20gJy4uL2RiVXRpbHMuanMnO1xuXG5jb25zdCBkZWZhdWx0U2V0dGluZ3MgPSBjb25maWcuZGIuREVGQVVMVF9TRVRUSU5HUztcbmNvbnN0IFNFVFRJTkdTX1NUT1JFID0gJ3NldHRpbmdzJyBhcyBrZXlvZiBQYWxldHRlU2NoZW1hO1xuY29uc3QgU0VUVElOR1NfS0VZID0gJ0FQUF9TRVRUSU5HUyc7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1NlcnZpY2UgaW1wbGVtZW50cyBTZXR0aW5nc1NlcnZpY2VfQ2xhc3NJbnRlcmZhY2Uge1xuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogU2V0dGluZ3NTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cblx0cHJpdmF0ZSBjYWNoZTogUGFydGlhbDx7IHNldHRpbmdzOiBTZXR0aW5ncyB9PiA9IHt9O1xuXHRwcml2YXRlIF9tYXhIaXN0b3J5OiBudW1iZXIgPSA1O1xuXG5cdHByaXZhdGUgYXBwVXRpbHM6IEFwcFV0aWxzSW50ZXJmYWNlO1xuXHRwcml2YXRlIGRiVXRpbHM6IERCVXRpbHNJbnRlcmZhY2U7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5hcHBVdGlscyA9IGFwcFV0aWxzO1xuXHRcdHRoaXMuZGJVdGlscyA9IGRiVXRpbHM7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEluc3RhbmNlKCkge1xuXHRcdGlmICghdGhpcy5pbnN0YW5jZSkge1xuXHRcdFx0dGhpcy5pbnN0YW5jZSA9IG5ldyBTZXR0aW5nc1NlcnZpY2UoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgbWF4SGlzdG9yeSgpOiBudW1iZXIge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHRoaXMuX21heEhpc3RvcnkpO1xuXHR9XG5cblx0cHVibGljIHNldCBtYXhIaXN0b3J5KHZhbHVlOiBudW1iZXIpIHtcblx0XHR0aGlzLl9tYXhIaXN0b3J5ID0gTWF0aC5yb3VuZChNYXRoLm1heCgzLCBNYXRoLm1pbigxMCwgdmFsdWUpKSk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0Q2FjaGVkU2V0dGluZ3MoKTogUHJvbWlzZTxTZXR0aW5ncz4ge1xuXHRcdGlmICghdGhpcy5jYWNoZS5zZXR0aW5ncykge1xuXHRcdFx0dGhpcy5jYWNoZS5zZXR0aW5ncyA9XG5cdFx0XHRcdChhd2FpdCB0aGlzLmFwcFV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0XHRcdCgpID0+IHRoaXMuZ2V0U2V0dGluZ3MoKSxcblx0XHRcdFx0XHQnRmFpbGVkIHRvIGZldGNoIGNhY2hlZCBzZXR0aW5ncycsXG5cdFx0XHRcdFx0J1NldHRpbmdzU2VydmljZS5nZXRDYWNoZWRTZXR0aW5ncygpJ1xuXHRcdFx0XHQpKSA/PyBkZWZhdWx0U2V0dGluZ3M7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuY2FjaGUuc2V0dGluZ3M7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0U2V0dGluZ3MoKTogUHJvbWlzZTxTZXR0aW5ncz4ge1xuXHRcdGNvbnN0IHN0b3JlZFNldHRpbmdzID0gYXdhaXQgdGhpcy5hcHBVdGlscy5oYW5kbGVBc3luYyhcblx0XHRcdCgpID0+XG5cdFx0XHRcdHRoaXMuZGJVdGlscy5oYW5kbGVEYXRhPFBhcnRpYWw8U2V0dGluZ3M+Pihcblx0XHRcdFx0XHRTRVRUSU5HU19TVE9SRSxcblx0XHRcdFx0XHRTRVRUSU5HU19LRVksXG5cdFx0XHRcdFx0J2dldCdcblx0XHRcdFx0KSxcblx0XHRcdCdGYWlsZWQgdG8gcmV0cmlldmUgc2V0dGluZ3MnLFxuXHRcdFx0J1NldHRpbmdzU2VydmljZS5nZXRTZXR0aW5ncydcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHsgLi4uZGVmYXVsdFNldHRpbmdzLCAuLi4oc3RvcmVkU2V0dGluZ3MgPz8ge30pIH07XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgc2F2ZVNldHRpbmdzKG5ld1NldHRpbmdzOiBTZXR0aW5ncyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGF3YWl0IHRoaXMuYXBwVXRpbHMuaGFuZGxlQXN5bmMoXG5cdFx0XHQoKSA9PlxuXHRcdFx0XHR0aGlzLmRiVXRpbHMuaGFuZGxlRGF0YShcblx0XHRcdFx0XHRTRVRUSU5HU19TVE9SRSxcblx0XHRcdFx0XHRTRVRUSU5HU19LRVksXG5cdFx0XHRcdFx0J3B1dCcsXG5cdFx0XHRcdFx0bmV3U2V0dGluZ3Ncblx0XHRcdFx0KSxcblx0XHRcdCdGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncycsXG5cdFx0XHQnU2V0dGluZ3NTZXJ2aWNlLnNhdmVTZXR0aW5ncydcblx0XHQpO1xuXHR9XG59XG4iXX0=