// File: app/settings/SettingsService.js
import { configData as config } from '../../../data/config.js';
import { dbUtils } from '../dbUtils.js';
const defaultSettings = config.db.DEFAULT_SETTINGS;
const SETTINGS_STORE = 'settings';
const SETTINGS_KEY = 'APP_SETTINGS';
export class SettingsService {
    static instance = null;
    cache = {};
    _maxHistory = 5;
    dbUtils;
    constructor() {
        this.dbUtils = dbUtils;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = new SettingsService();
        }
        return this.instance;
    }
    get maxHistory() {
        return Math.round(this._maxHistory);
    }
    set maxHistory(value) {
        this._maxHistory = Math.round(Math.max(3, Math.min(10, value)));
    }
    async getCachedSettings() {
        if (!this.cache.settings) {
            this.cache.settings =
                (await this.dbUtils.handleAsync(() => this.getSettings(), 'Failed to fetch cached settings', 'SettingsService.getCachedSettings()')) ?? defaultSettings;
        }
        return this.cache.settings;
    }
    async getSettings() {
        const storedSettings = await this.dbUtils.handleAsync(() => this.dbUtils.handleData(SETTINGS_STORE, SETTINGS_KEY, 'get'), 'Failed to retrieve settings', 'SettingsService.getSettings');
        return { ...defaultSettings, ...(storedSettings ?? {}) };
    }
    async saveSettings(newSettings) {
        await this.dbUtils.handleAsync(() => this.dbUtils.handleData(SETTINGS_STORE, SETTINGS_KEY, 'put', newSettings), 'Failed to save settings', 'SettingsService.saveSettings');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3NTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9kYi9zZXJ2aWNlcy9TZXR0aW5nc1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBUXhDLE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4QyxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO0FBQ25ELE1BQU0sY0FBYyxHQUFHLFVBQWlDLENBQUM7QUFDekQsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDO0FBRXBDLE1BQU0sT0FBTyxlQUFlO0lBQ25CLE1BQU0sQ0FBQyxRQUFRLEdBQTJCLElBQUksQ0FBQztJQUUvQyxLQUFLLEdBQW9DLEVBQUUsQ0FBQztJQUM1QyxXQUFXLEdBQVcsQ0FBQyxDQUFDO0lBRXhCLE9BQU8sQ0FBbUI7SUFFbEM7UUFDQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3ZDLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFXLFVBQVUsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUI7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO2dCQUNsQixDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQzlCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFDeEIsaUNBQWlDLEVBQ2pDLHFDQUFxQyxDQUNyQyxDQUFDLElBQUksZUFBZSxDQUFDO1FBQ3hCLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVztRQUN2QixNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUNwRCxHQUFHLEVBQUUsQ0FDSixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDdEIsY0FBYyxFQUNkLFlBQVksRUFDWixLQUFLLENBQ0wsRUFDRiw2QkFBNkIsRUFDN0IsNkJBQTZCLENBQzdCLENBQUM7UUFFRixPQUFPLEVBQUUsR0FBRyxlQUFlLEVBQUUsR0FBRyxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFTSxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQXFCO1FBQzlDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQzdCLEdBQUcsRUFBRSxDQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUN0QixjQUFjLEVBQ2QsWUFBWSxFQUNaLEtBQUssRUFDTCxXQUFXLENBQ1gsRUFDRix5QkFBeUIsRUFDekIsOEJBQThCLENBQzlCLENBQUM7SUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogYXBwL3NldHRpbmdzL1NldHRpbmdzU2VydmljZS5qc1xuXG5pbXBvcnQge1xuXHREQlV0aWxzSW50ZXJmYWNlLFxuXHRQYWxldHRlU2NoZW1hLFxuXHRTZXR0aW5ncyxcblx0U2V0dGluZ3NTZXJ2aWNlX0NsYXNzSW50ZXJmYWNlXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNvbmZpZ0RhdGEgYXMgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9jb25maWcuanMnO1xuaW1wb3J0IHsgZGJVdGlscyB9IGZyb20gJy4uL2RiVXRpbHMuanMnO1xuXG5jb25zdCBkZWZhdWx0U2V0dGluZ3MgPSBjb25maWcuZGIuREVGQVVMVF9TRVRUSU5HUztcbmNvbnN0IFNFVFRJTkdTX1NUT1JFID0gJ3NldHRpbmdzJyBhcyBrZXlvZiBQYWxldHRlU2NoZW1hO1xuY29uc3QgU0VUVElOR1NfS0VZID0gJ0FQUF9TRVRUSU5HUyc7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1NlcnZpY2UgaW1wbGVtZW50cyBTZXR0aW5nc1NlcnZpY2VfQ2xhc3NJbnRlcmZhY2Uge1xuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogU2V0dGluZ3NTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cblx0cHJpdmF0ZSBjYWNoZTogUGFydGlhbDx7IHNldHRpbmdzOiBTZXR0aW5ncyB9PiA9IHt9O1xuXHRwcml2YXRlIF9tYXhIaXN0b3J5OiBudW1iZXIgPSA1O1xuXG5cdHByaXZhdGUgZGJVdGlsczogREJVdGlsc0ludGVyZmFjZTtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmRiVXRpbHMgPSBkYlV0aWxzO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRJbnN0YW5jZSgpIHtcblx0XHRpZiAoIXRoaXMuaW5zdGFuY2UpIHtcblx0XHRcdHRoaXMuaW5zdGFuY2UgPSBuZXcgU2V0dGluZ3NTZXJ2aWNlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2U7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IG1heEhpc3RvcnkoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCh0aGlzLl9tYXhIaXN0b3J5KTtcblx0fVxuXG5cdHB1YmxpYyBzZXQgbWF4SGlzdG9yeSh2YWx1ZTogbnVtYmVyKSB7XG5cdFx0dGhpcy5fbWF4SGlzdG9yeSA9IE1hdGgucm91bmQoTWF0aC5tYXgoMywgTWF0aC5taW4oMTAsIHZhbHVlKSkpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGdldENhY2hlZFNldHRpbmdzKCk6IFByb21pc2U8U2V0dGluZ3M+IHtcblx0XHRpZiAoIXRoaXMuY2FjaGUuc2V0dGluZ3MpIHtcblx0XHRcdHRoaXMuY2FjaGUuc2V0dGluZ3MgPVxuXHRcdFx0XHQoYXdhaXQgdGhpcy5kYlV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0XHRcdCgpID0+IHRoaXMuZ2V0U2V0dGluZ3MoKSxcblx0XHRcdFx0XHQnRmFpbGVkIHRvIGZldGNoIGNhY2hlZCBzZXR0aW5ncycsXG5cdFx0XHRcdFx0J1NldHRpbmdzU2VydmljZS5nZXRDYWNoZWRTZXR0aW5ncygpJ1xuXHRcdFx0XHQpKSA/PyBkZWZhdWx0U2V0dGluZ3M7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuY2FjaGUuc2V0dGluZ3M7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0U2V0dGluZ3MoKTogUHJvbWlzZTxTZXR0aW5ncz4ge1xuXHRcdGNvbnN0IHN0b3JlZFNldHRpbmdzID0gYXdhaXQgdGhpcy5kYlV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0KCkgPT5cblx0XHRcdFx0dGhpcy5kYlV0aWxzLmhhbmRsZURhdGE8UGFydGlhbDxTZXR0aW5ncz4+KFxuXHRcdFx0XHRcdFNFVFRJTkdTX1NUT1JFLFxuXHRcdFx0XHRcdFNFVFRJTkdTX0tFWSxcblx0XHRcdFx0XHQnZ2V0J1xuXHRcdFx0XHQpLFxuXHRcdFx0J0ZhaWxlZCB0byByZXRyaWV2ZSBzZXR0aW5ncycsXG5cdFx0XHQnU2V0dGluZ3NTZXJ2aWNlLmdldFNldHRpbmdzJ1xuXHRcdCk7XG5cblx0XHRyZXR1cm4geyAuLi5kZWZhdWx0U2V0dGluZ3MsIC4uLihzdG9yZWRTZXR0aW5ncyA/PyB7fSkgfTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBzYXZlU2V0dGluZ3MobmV3U2V0dGluZ3M6IFNldHRpbmdzKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgdGhpcy5kYlV0aWxzLmhhbmRsZUFzeW5jKFxuXHRcdFx0KCkgPT5cblx0XHRcdFx0dGhpcy5kYlV0aWxzLmhhbmRsZURhdGEoXG5cdFx0XHRcdFx0U0VUVElOR1NfU1RPUkUsXG5cdFx0XHRcdFx0U0VUVElOR1NfS0VZLFxuXHRcdFx0XHRcdCdwdXQnLFxuXHRcdFx0XHRcdG5ld1NldHRpbmdzXG5cdFx0XHRcdCksXG5cdFx0XHQnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MnLFxuXHRcdFx0J1NldHRpbmdzU2VydmljZS5zYXZlU2V0dGluZ3MnXG5cdFx0KTtcblx0fVxufVxuIl19