// File: app/db/dbUtils.js
import { configData as config } from '../../data/config.js';
const defaultSettings = config.db.DEFAULT_SETTINGS;
let idbManager = null;
export function setIDBManagerInstance(instance) {
    idbManager = instance;
}
function getDefaultKey(key) {
    const defaultKey = defaultSettings[key];
    if (!defaultKey)
        throw new Error(`[getDefaultKey()]: Invalid key ${key}`);
    return defaultKey;
}
async function handleData(store, key, action, data) {
    return await dbUtils.withDB(async (db) => {
        const storeRef = db.transaction(store, 'readwrite').objectStore(store);
        if (action === 'get') {
            const result = await storeRef.get(key);
            return result ?? null;
        }
        if (action === 'put' && data) {
            await storeRef.put({ key, ...data });
            return data;
        }
        if (action === 'delete') {
            await storeRef.delete(key);
            return null;
        }
        return null;
    });
}
async function updateData(store, key, updateFn) {
    const existing = await handleData(store, key, 'get');
    if (!existing)
        throw new Error(`${store} entry not found\ndb/IDBManager.js > updateData()`);
    await dbUtils.handleData(store, key, 'put', updateFn(existing));
}
async function withDB(callback) {
    if (!idbManager)
        throw new Error('IDBManager instance is not set.');
    const db = await idbManager.getDB();
    return callback(db);
}
export const dbUtils = {
    getDefaultKey,
    handleData,
    updateData,
    withDB
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvZGIvZGJVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEI7QUFTMUIsT0FBTyxFQUFFLFVBQVUsSUFBSSxNQUFNLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1RCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO0FBRW5ELElBQUksVUFBVSxHQUFzQixJQUFJLENBQUM7QUFFekMsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFFBQW9CO0lBQ3pELFVBQVUsR0FBRyxRQUFRLENBQUM7QUFDdkIsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUNyQixHQUFtRDtJQUVuRCxNQUFNLFVBQVUsR0FBRyxlQUFlLENBQUMsR0FBbUMsQ0FBQyxDQUFDO0lBRXhFLElBQUksQ0FBQyxVQUFVO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUUxRSxPQUFPLFVBQWlDLENBQUM7QUFDMUMsQ0FBQztBQUVELEtBQUssVUFBVSxVQUFVLENBQ3hCLEtBQTBCLEVBQzFCLEdBQVcsRUFDWCxNQUFnQyxFQUNoQyxJQUFRO0lBRVIsT0FBTyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFDLEVBQUUsRUFBQyxFQUFFO1FBQ3RDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2RSxJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUN0QixNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkMsT0FBTyxNQUFNLElBQUksSUFBSSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxJQUFJLE1BQU0sS0FBSyxLQUFLLElBQUksSUFBSSxFQUFFLENBQUM7WUFDOUIsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNyQyxPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7UUFDRCxJQUFJLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUN6QixNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxLQUFLLFVBQVUsVUFBVSxDQUN4QixLQUEwQixFQUMxQixHQUFXLEVBQ1gsUUFBNEI7SUFFNUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxVQUFVLENBQUksS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV4RCxJQUFJLENBQUMsUUFBUTtRQUNaLE1BQU0sSUFBSSxLQUFLLENBQ2QsR0FBRyxLQUFLLG1EQUFtRCxDQUMzRCxDQUFDO0lBRUgsTUFBTSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFFRCxLQUFLLFVBQVUsTUFBTSxDQUFJLFFBQXVDO0lBQy9ELElBQUksQ0FBQyxVQUFVO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0lBRXBFLE1BQU0sRUFBRSxHQUFHLE1BQU0sVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRXBDLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQXFCO0lBQ3hDLGFBQWE7SUFDYixVQUFVO0lBQ1YsVUFBVTtJQUNWLE1BQU07Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogYXBwL2RiL2RiVXRpbHMuanNcblxuaW1wb3J0IHtcblx0Q29uZmlnRGF0YUludGVyZmFjZSxcblx0REJVdGlsc0ludGVyZmFjZSxcblx0UGFsZXR0ZURCLFxuXHRQYWxldHRlU2NoZW1hXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuL0lEQk1hbmFnZXIuanMnO1xuaW1wb3J0IHsgY29uZmlnRGF0YSBhcyBjb25maWcgfSBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZy5qcyc7XG5cbmNvbnN0IGRlZmF1bHRTZXR0aW5ncyA9IGNvbmZpZy5kYi5ERUZBVUxUX1NFVFRJTkdTO1xuXG5sZXQgaWRiTWFuYWdlcjogSURCTWFuYWdlciB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0SURCTWFuYWdlckluc3RhbmNlKGluc3RhbmNlOiBJREJNYW5hZ2VyKSB7XG5cdGlkYk1hbmFnZXIgPSBpbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEtleShcblx0a2V5OiBrZXlvZiBDb25maWdEYXRhSW50ZXJmYWNlWydkYiddWydTVE9SRV9OQU1FUyddXG4pOiBzdHJpbmcge1xuXHRjb25zdCBkZWZhdWx0S2V5ID0gZGVmYXVsdFNldHRpbmdzW2tleSBhcyBrZXlvZiB0eXBlb2YgZGVmYXVsdFNldHRpbmdzXTtcblxuXHRpZiAoIWRlZmF1bHRLZXkpIHRocm93IG5ldyBFcnJvcihgW2dldERlZmF1bHRLZXkoKV06IEludmFsaWQga2V5ICR7a2V5fWApO1xuXG5cdHJldHVybiBkZWZhdWx0S2V5IGFzIGtleW9mIFBhbGV0dGVTY2hlbWE7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZURhdGE8VD4oXG5cdHN0b3JlOiBrZXlvZiBQYWxldHRlU2NoZW1hLFxuXHRrZXk6IHN0cmluZyxcblx0YWN0aW9uOiAnZ2V0JyB8ICdwdXQnIHwgJ2RlbGV0ZScsXG5cdGRhdGE/OiBUXG4pOiBQcm9taXNlPFQgfCBudWxsPiB7XG5cdHJldHVybiBhd2FpdCBkYlV0aWxzLndpdGhEQihhc3luYyBkYiA9PiB7XG5cdFx0Y29uc3Qgc3RvcmVSZWYgPSBkYi50cmFuc2FjdGlvbihzdG9yZSwgJ3JlYWR3cml0ZScpLm9iamVjdFN0b3JlKHN0b3JlKTtcblxuXHRcdGlmIChhY3Rpb24gPT09ICdnZXQnKSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBzdG9yZVJlZi5nZXQoa2V5KTtcblx0XHRcdHJldHVybiByZXN1bHQgPz8gbnVsbDtcblx0XHR9XG5cdFx0aWYgKGFjdGlvbiA9PT0gJ3B1dCcgJiYgZGF0YSkge1xuXHRcdFx0YXdhaXQgc3RvcmVSZWYucHV0KHsga2V5LCAuLi5kYXRhIH0pO1xuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXHRcdGlmIChhY3Rpb24gPT09ICdkZWxldGUnKSB7XG5cdFx0XHRhd2FpdCBzdG9yZVJlZi5kZWxldGUoa2V5KTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlRGF0YTxUIGV4dGVuZHMgb2JqZWN0Pihcblx0c3RvcmU6IGtleW9mIFBhbGV0dGVTY2hlbWEsXG5cdGtleTogc3RyaW5nLFxuXHR1cGRhdGVGbjogKGV4aXN0aW5nOiBUKSA9PiBUXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgZXhpc3RpbmcgPSBhd2FpdCBoYW5kbGVEYXRhPFQ+KHN0b3JlLCBrZXksICdnZXQnKTtcblxuXHRpZiAoIWV4aXN0aW5nKVxuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdGAke3N0b3JlfSBlbnRyeSBub3QgZm91bmRcXG5kYi9JREJNYW5hZ2VyLmpzID4gdXBkYXRlRGF0YSgpYFxuXHRcdCk7XG5cblx0YXdhaXQgZGJVdGlscy5oYW5kbGVEYXRhKHN0b3JlLCBrZXksICdwdXQnLCB1cGRhdGVGbihleGlzdGluZykpO1xufVxuXG5hc3luYyBmdW5jdGlvbiB3aXRoREI8VD4oY2FsbGJhY2s6IChkYjogUGFsZXR0ZURCKSA9PiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiB7XG5cdGlmICghaWRiTWFuYWdlcikgdGhyb3cgbmV3IEVycm9yKCdJREJNYW5hZ2VyIGluc3RhbmNlIGlzIG5vdCBzZXQuJyk7XG5cblx0Y29uc3QgZGIgPSBhd2FpdCBpZGJNYW5hZ2VyLmdldERCKCk7XG5cblx0cmV0dXJuIGNhbGxiYWNrKGRiKTtcbn1cblxuZXhwb3J0IGNvbnN0IGRiVXRpbHM6IERCVXRpbHNJbnRlcmZhY2UgPSB7XG5cdGdldERlZmF1bHRLZXksXG5cdGhhbmRsZURhdGEsXG5cdHVwZGF0ZURhdGEsXG5cdHdpdGhEQlxufTtcbiJdfQ==