// File: app/db/dbUtils.js
import { createLogger } from '../../logger/factory.js';
import { configData as config } from '../../data/config.js';
import { modeData as mode } from '../../data/mode.js';
const logMode = mode.logging;
const defaultSettings = config.db.DEFAULT_SETTINGS;
const logger = await createLogger();
let idbManager = null;
export function setIDBManagerInstance(instance) {
    idbManager = instance;
}
function getDefaultKey(key) {
    const defaultKey = defaultSettings[key];
    if (!defaultKey)
        throw new Error(`[getDefaultKey()]: Invalid key ${key}`);
    return defaultKey;
}
async function handleAsync(action, errorMessage, caller = 'unknown caller', context) {
    try {
        return await action();
    }
    catch (error) {
        if (logMode.error)
            if (error instanceof Error) {
                logger.error(`${errorMessage}: ${error.message}. Context: ${context}`, `${caller}`);
            }
            else {
                logger.error(`${errorMessage}: ${error}. Context: ${context}`, `${caller}`);
            }
        return null;
    }
}
async function handleData(store, key, action, data) {
    return await dbUtils.withDB(async (db) => {
        const storeRef = db.transaction(store, 'readwrite').objectStore(store);
        if (action === 'get') {
            const result = await storeRef.get(key);
            return result ?? null;
        }
        if (action === 'put' && data) {
            await storeRef.put({ key, ...data });
            return data;
        }
        if (action === 'delete') {
            await storeRef.delete(key);
            return null;
        }
        return null;
    });
}
function log(level, message, method, verbosityRequirement) {
    if (logMode[level] && logMode.verbosity >= (verbosityRequirement ?? 0)) {
        logger[level](`${message}`, `${method}`);
    }
}
async function updateData(store, key, updateFn) {
    const existing = await handleData(store, key, 'get');
    if (!existing)
        throw new Error(`${store} entry not found\ndb/IDBManager.js > updateData()`);
    await dbUtils.handleData(store, key, 'put', updateFn(existing));
}
async function withDB(callback) {
    if (!idbManager)
        throw new Error('IDBManager instance is not set.');
    const db = await idbManager.getDB();
    return callback(db);
}
export const dbUtils = {
    getDefaultKey,
    handleAsync,
    handleData,
    log,
    updateData,
    withDB
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvZGIvZGJVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEI7QUFTMUIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsSUFBSSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRTdCLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7QUFFbkQsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztBQUVwQyxJQUFJLFVBQVUsR0FBc0IsSUFBSSxDQUFDO0FBRXpDLE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxRQUFvQjtJQUN6RCxVQUFVLEdBQUcsUUFBUSxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FDckIsR0FBbUQ7SUFFbkQsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLEdBQW1DLENBQUMsQ0FBQztJQUV4RSxJQUFJLENBQUMsVUFBVTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFMUUsT0FBTyxVQUFpQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUN6QixNQUF3QixFQUN4QixZQUFvQixFQUNwQixTQUFpQixnQkFBZ0IsRUFDakMsT0FBaUM7SUFFakMsSUFBSSxDQUFDO1FBQ0osT0FBTyxNQUFNLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEIsSUFBSSxLQUFLLFlB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Q29udGVudCI6WyIvLyBGaWxlOiBhcHAvZGIvZGJVdGlscy5qc1xuXG5pbXBvcnQge1xuXHRDb25maWdEYXRhSW50ZXJmYWNlLFxuXHREQlV0aWxzSW50ZXJmYWNlLFxuXHRQYWxldHRlREIsXG5cdFBhbGV0dGVTY2hlbWFcbn0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4vSURCTWFuYWdlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjb25maWdEYXRhIGFzIGNvbmZpZyB9IGZyb20gJy4uLy4uL2RhdGEvY29uZmlnLmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIGFzIG1vZGUgfSBmcm9tICcuLi8uLi9kYXRhL21vZGUuanMnO1xuXG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5jb25zdCBkZWZhdWx0U2V0dGluZ3MgPSBjb25maWcuZGIuREVGQVVMVF9TRVRUSU5HUztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmxldCBpZGJNYW5hZ2VyOiBJREJNYW5hZ2VyIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRJREJNYW5hZ2VySW5zdGFuY2UoaW5zdGFuY2U6IElEQk1hbmFnZXIpIHtcblx0aWRiTWFuYWdlciA9IGluc3RhbmNlO1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0S2V5KFxuXHRrZXk6IGtleW9mIENvbmZpZ0RhdGFJbnRlcmZhY2VbJ2RiJ11bJ1NUT1JFX05BTUVTJ11cbik6IHN0cmluZyB7XG5cdGNvbnN0IGRlZmF1bHRLZXkgPSBkZWZhdWx0U2V0dGluZ3Nba2V5IGFzIGtleW9mIHR5cGVvZiBkZWZhdWx0U2V0dGluZ3NdO1xuXG5cdGlmICghZGVmYXVsdEtleSkgdGhyb3cgbmV3IEVycm9yKGBbZ2V0RGVmYXVsdEtleSgpXTogSW52YWxpZCBrZXkgJHtrZXl9YCk7XG5cblx0cmV0dXJuIGRlZmF1bHRLZXkgYXMga2V5b2YgUGFsZXR0ZVNjaGVtYTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQXN5bmM8VD4oXG5cdGFjdGlvbjogKCkgPT4gUHJvbWlzZTxUPixcblx0ZXJyb3JNZXNzYWdlOiBzdHJpbmcsXG5cdGNhbGxlcjogc3RyaW5nID0gJ3Vua25vd24gY2FsbGVyJyxcblx0Y29udGV4dD86IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4pOiBQcm9taXNlPFQgfCBudWxsPiB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGF3YWl0IGFjdGlvbigpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9yKVxuXHRcdFx0aWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRcdGAke2Vycm9yTWVzc2FnZX06ICR7ZXJyb3IubWVzc2FnZX0uIENvbnRleHQ6ICR7Y29udGV4dH1gLFxuXHRcdFx0XHRcdGAke2NhbGxlcn1gXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0YCR7ZXJyb3JNZXNzYWdlfTogJHtlcnJvcn0uIENvbnRleHQ6ICR7Y29udGV4dH1gLFxuXHRcdFx0XHRcdGAke2NhbGxlcn1gXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVEYXRhPFQ+KFxuXHRzdG9yZToga2V5b2YgUGFsZXR0ZVNjaGVtYSxcblx0a2V5OiBzdHJpbmcsXG5cdGFjdGlvbjogJ2dldCcgfCAncHV0JyB8ICdkZWxldGUnLFxuXHRkYXRhPzogVFxuKTogUHJvbWlzZTxUIHwgbnVsbD4ge1xuXHRyZXR1cm4gYXdhaXQgZGJVdGlscy53aXRoREIoYXN5bmMgZGIgPT4ge1xuXHRcdGNvbnN0IHN0b3JlUmVmID0gZGIudHJhbnNhY3Rpb24oc3RvcmUsICdyZWFkd3JpdGUnKS5vYmplY3RTdG9yZShzdG9yZSk7XG5cblx0XHRpZiAoYWN0aW9uID09PSAnZ2V0Jykge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgc3RvcmVSZWYuZ2V0KGtleSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0ID8/IG51bGw7XG5cdFx0fVxuXHRcdGlmIChhY3Rpb24gPT09ICdwdXQnICYmIGRhdGEpIHtcblx0XHRcdGF3YWl0IHN0b3JlUmVmLnB1dCh7IGtleSwgLi4uZGF0YSB9KTtcblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblx0XHRpZiAoYWN0aW9uID09PSAnZGVsZXRlJykge1xuXHRcdFx0YXdhaXQgc3RvcmVSZWYuZGVsZXRlKGtleSk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGxvZyhcblx0bGV2ZWw6ICdkZWJ1ZycgfCAnd2FybicgfCAnZXJyb3InLFxuXHRtZXNzYWdlOiBzdHJpbmcsXG5cdG1ldGhvZDogc3RyaW5nLFxuXHR2ZXJib3NpdHlSZXF1aXJlbWVudD86IG51bWJlclxuKTogdm9pZCB7XG5cdGlmIChsb2dNb2RlW2xldmVsXSAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSAodmVyYm9zaXR5UmVxdWlyZW1lbnQgPz8gMCkpIHtcblx0XHRsb2dnZXJbbGV2ZWxdKGAke21lc3NhZ2V9YCwgYCR7bWV0aG9kfWApO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURhdGE8VCBleHRlbmRzIG9iamVjdD4oXG5cdHN0b3JlOiBrZXlvZiBQYWxldHRlU2NoZW1hLFxuXHRrZXk6IHN0cmluZyxcblx0dXBkYXRlRm46IChleGlzdGluZzogVCkgPT4gVFxuKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgaGFuZGxlRGF0YTxUPihzdG9yZSwga2V5LCAnZ2V0Jyk7XG5cblx0aWYgKCFleGlzdGluZylcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRgJHtzdG9yZX0gZW50cnkgbm90IGZvdW5kXFxuZGIvSURCTWFuYWdlci5qcyA+IHVwZGF0ZURhdGEoKWBcblx0XHQpO1xuXG5cdGF3YWl0IGRiVXRpbHMuaGFuZGxlRGF0YShzdG9yZSwga2V5LCAncHV0JywgdXBkYXRlRm4oZXhpc3RpbmcpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gd2l0aERCPFQ+KGNhbGxiYWNrOiAoZGI6IFBhbGV0dGVEQikgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuXHRpZiAoIWlkYk1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignSURCTWFuYWdlciBpbnN0YW5jZSBpcyBub3Qgc2V0LicpO1xuXG5cdGNvbnN0IGRiID0gYXdhaXQgaWRiTWFuYWdlci5nZXREQigpO1xuXG5cdHJldHVybiBjYWxsYmFjayhkYik7XG59XG5cbmV4cG9ydCBjb25zdCBkYlV0aWxzOiBEQlV0aWxzSW50ZXJmYWNlID0ge1xuXHRnZXREZWZhdWx0S2V5LFxuXHRoYW5kbGVBc3luYyxcblx0aGFuZGxlRGF0YSxcblx0bG9nLFxuXHR1cGRhdGVEYXRhLFxuXHR3aXRoREJcbn07XG4iXX0=