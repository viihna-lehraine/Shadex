// File: app/db/IDBManager.js
import { DBService } from './services/DBService.js';
import { HistoryService } from './services/HistoryService.js';
import { MutationService } from './services/MutationService.js';
import { PaletteService } from './services/PaletteService.js';
import { SettingsService } from './services/SettingsService.js';
import { dbUtils, setIDBManagerInstance } from './dbUtils.js';
import { initializeDB } from './initialize.js';
export class IDBManager {
    static instance = null;
    dbPromise;
    dbUtils;
    dbService;
    historyService;
    mutationService;
    paletteService;
    settingsService;
    constructor() {
        this.dbPromise = initializeDB();
        this.dbUtils = dbUtils;
        this.initializeServices();
    }
    /// * * * * * * STATIC METHODS * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * *
    static async getInstance() {
        if (!this.instance) {
            this.instance = new IDBManager();
            await this.instance.dbPromise;
        }
        return this.instance;
    }
    static resetInstance() {
        this.instance = null;
    }
    /// * * * * * * * PUBLIC METHODS * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * *
    async addPaletteToHistory(palette) {
        await this.historyService.addPaletteToHistory(palette);
    }
    async createMutationLogger(obj, key) {
        return await this.mutationService.createMutationLogger(obj, key);
    }
    async deleteDatabase() {
        await this.dbService.deleteDatabase();
    }
    async deleteEntries(store, keys) {
        await this.dbService.deleteEntries(store, keys);
    }
    async getCurrentPaletteID() {
        return await this.paletteService.getCurrentPaletteID();
    }
    async getDB() {
        return this.dbPromise;
    }
    async getCachedSettings() {
        return await this.settingsService.getCachedSettings();
    }
    async getNextTableID() {
        return await this.paletteService.getNextTableID();
    }
    async getMutations() {
        return await this.mutationService.getMutations();
    }
    async getPaletteHistory() {
        return await this.historyService.getPaletteHistory();
    }
    async getSettings() {
        return await this.settingsService.getSettings();
    }
    async getStore(storeName, mode) {
        return this.dbUtils.withDB(async (db) => db.transaction(storeName, mode).objectStore(storeName));
    }
    async persistMutation(data) {
        await this.mutationService.persistMutation(data);
    }
    async resetDatabase() {
        await this.dbService.resetDatabase();
    }
    async resetPaletteID() {
        await this.paletteService.resetPaletteID();
    }
    async savePalette(id, newPalette) {
        await this.paletteService.savePalette(id, newPalette);
    }
    async savePaletteToDB(args) {
        return await this.paletteService.savePaletteToDB(args);
    }
    async savePaletteHistory(paletteHistory) {
        await this.historyService.savePaletteHistory(paletteHistory);
    }
    async saveSettings(newSettings) {
        await this.settingsService.saveSettings(newSettings);
    }
    async updateEntryInPalette(tableID, entryIndex, newEntry) {
        await this.paletteService.updateEntryInPalette(tableID, entryIndex, newEntry);
    }
    //// * * * * * * PRIVATE METHODS * * * * * *
    /// * * * *  * * * * * * * * * * * * * * * *
    async initializeServices() {
        setIDBManagerInstance(this);
        this.dbService = await DBService.getInstance();
        this.historyService = await HistoryService.getInstance();
        this.mutationService = await MutationService.getInstance();
        this.paletteService = await PaletteService.getInstance();
        this.settingsService = await SettingsService.getInstance();
    }
}
//# sourceMappingURL=data:application/json;base64,