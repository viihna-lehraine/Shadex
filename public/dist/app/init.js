// File: app/init.ts
import { EventManager, PaletteEventsService, UIEventsService } from '../dom/index.js';
import { PaletteManager } from '../palette/PaletteManager.js';
import { PaletteStateService, StateManager } from '../state/index.js';
async function exposeClasses(eventManager, paletteEvents, paletteManager, services, stateManager, uiEvents) {
    const { log, errors } = services;
    log.info(`Function called.`, `[EXPOSE_CLASSES]`);
    return await errors.handleAndReturn(async () => {
        log.info('Exposing functions to window.', `[EXPOSE_CLASSES]`);
        window.eventManager = eventManager;
        window.paletteEvents = paletteEvents;
        window.paletteManager = paletteManager;
        window.stateManager = stateManager;
        window.uiEvents = uiEvents;
        window.EventManager = EventManager;
        log.info('Functions exposed to window.', `[EXPOSE_CLASSES]`);
    }, 'Error exposing functions to window');
}
async function initializeEvents(helpers, paletteManager, paletteState, services, stateManager, utils) {
    const { errors } = services;
    return await errors.handleAndReturn(async () => {
        const paletteEvents = new PaletteEventsService(helpers, paletteManager, paletteState, services, stateManager, utils);
        const uiEvents = new UIEventsService(helpers, paletteManager, services, utils);
        paletteEvents.init();
        uiEvents.init();
        uiEvents.initButtons();
        return { palette: paletteEvents, ui: uiEvents };
    }, 'Error initializing events');
}
async function initializePaletteManager(common, generateHuesFnGroup, generatePaletteFnGroup, generatePalette, stateManager) {
    const { errors } = common.services;
    return await errors.handleAndReturn(async () => {
        const paletteManager = new PaletteManager(stateManager, common, generateHuesFnGroup, generatePaletteFnGroup, generatePalette);
        return paletteManager;
    }, 'Error initializing PaletteManager.');
}
async function initializePaletteStateService(services, stateManager, utils) {
    const { errors } = services;
    return await errors.handleAndReturn(async () => {
        const palettestate = new PaletteStateService(stateManager, services, utils);
        return palettestate;
    }, 'Error initializing PaletteState');
}
async function initializeStateManager(helpers, services, utils) {
    const { errors } = services;
    return await errors.handleAndReturn(async () => {
        const stateManager = StateManager.getInstance(helpers, services, utils);
        return stateManager;
    }, 'Error initializing StateManager');
}
async function initializeUtilities(helpers, services) {
    const { errors } = services;
    return await errors.handleAndReturn(async () => {
        const { utilitiesFactory } = await import('../core/factories/utils.js');
        const utils = await utilitiesFactory(helpers, services);
        return utils;
    }, 'Error initializing utils');
}
export { exposeClasses, initializeEvents, initializePaletteManager, initializePaletteStateService, initializeStateManager, initializeUtilities };
//# sourceMappingURL=data:application/json;base64,