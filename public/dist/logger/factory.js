// File: src/logger/factory.ts
import { AppLogger } from './AppLogger.js';
import { mode } from '../common/data/base.js';
export const createLogger = async () => {
    const debugLevel = mode.debugLevel;
    const appLogger = AppLogger.getInstance(mode);
    return {
        debug: (message, caller) => appLogger.log(message, 'debug', debugLevel, caller),
        info: (message, caller) => appLogger.log(message, 'info', debugLevel, caller),
        warn: (message, caller) => appLogger.log(message, 'warn', debugLevel, caller),
        error: (message, caller) => appLogger.log(message, 'error', debugLevel, caller),
        mutation: (data, logCallback, caller) => {
            appLogger.logMutation(data, logCallback);
            if (caller) {
                appLogger.log(`Mutation logged by ${caller}`, 'debug', debugLevel);
            }
        }
    };
};
export const createAsyncLogger = async () => {
    const debugLevel = mode.debugLevel;
    const appLogger = AppLogger.getInstance(mode);
    return {
        debug: (message, caller) => appLogger.logAsync(message, 'debug', debugLevel, caller),
        info: (message, caller) => appLogger.logAsync(message, 'info', debugLevel, caller),
        warn: (message, caller) => appLogger.logAsync(message, 'warn', debugLevel, caller),
        error: (message, caller) => appLogger.logAsync(message, 'error', debugLevel, caller),
        mutation: (data, logCallback, caller) => {
            appLogger.logMutation(data, logCallback);
            if (caller) {
                appLogger.logAsync(`Mutation logged by ${caller}`, 'debug', debugLevel);
            }
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2dnZXIvZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFHOUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU5QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDdEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNuQyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTlDLE9BQU87UUFDTixLQUFLLEVBQUUsQ0FBQyxPQUFlLEVBQUUsTUFBZSxFQUFFLEVBQUUsQ0FDM0MsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUM7UUFDcEQsSUFBSSxFQUFFLENBQUMsT0FBZSxFQUFFLE1BQWUsRUFBRSxFQUFFLENBQzFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDO1FBQ25ELElBQUksRUFBRSxDQUFDLE9BQWUsRUFBRSxNQUFlLEVBQUUsRUFBRSxDQUMxQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQztRQUNuRCxLQUFLLEVBQUUsQ0FBQyxPQUFlLEVBQUUsTUFBZSxFQUFFLEVBQUUsQ0FDM0MsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUM7UUFDcEQsUUFBUSxFQUFFLENBQ1QsSUFBaUIsRUFDakIsV0FBd0MsRUFDeEMsTUFBZSxFQUNkLEVBQUU7WUFDSCxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztZQUV6QyxJQUFJLE1BQU0sRUFBRSxDQUFDO2dCQUNaLFNBQVMsQ0FBQyxHQUFHLENBQ1osc0JBQXNCLE1BQU0sRUFBRSxFQUM5QixPQUFPLEVBQ1AsVUFBVSxDQUNWLENBQUM7WUFDSCxDQUFDO1FBQ0YsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUMzQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ25DLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUMsT0FBTztRQUNOLEtBQUssRUFBRSxDQUFDLE9BQWUsRUFBRSxNQUFlLEVBQUUsRUFBRSxDQUMzQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQztRQUN6RCxJQUFJLEVBQUUsQ0FBQyxPQUFlLEVBQUUsTUFBZSxFQUFFLEVBQUUsQ0FDMUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUM7UUFDeEQsSUFBSSxFQUFFLENBQUMsT0FBZSxFQUFFLE1BQWUsRUFBRSxFQUFFLENBQzFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDO1FBQ3hELEtBQUssRUFBRSxDQUFDLE9BQWUsRUFBRSxNQUFlLEVBQUUsRUFBRSxDQUMzQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQztRQUN6RCxRQUFRLEVBQUUsQ0FDVCxJQUFpQixFQUNqQixXQUF3QyxFQUN4QyxNQUFlLEVBQ2QsRUFBRTtZQUNILFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRXpDLElBQUksTUFBTSxFQUFFLENBQUM7Z0JBQ1osU0FBUyxDQUFDLFFBQVEsQ0FDakIsc0JBQXNCLE1BQU0sRUFBRSxFQUM5QixPQUFPLEVBQ1AsVUFBVSxDQUNWLENBQUM7WUFDSCxDQUFDO1FBQ0YsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvbG9nZ2VyL2ZhY3RvcnkudHNcblxuaW1wb3J0IHsgTXV0YXRpb25Mb2cgfSBmcm9tICcuLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBBcHBMb2dnZXIgfSBmcm9tICcuL0FwcExvZ2dlci5qcyc7XG5pbXBvcnQgeyBtb2RlIH0gZnJvbSAnLi4vY29tbW9uL2RhdGEvYmFzZS5qcyc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2dnZXIgPSBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IGRlYnVnTGV2ZWwgPSBtb2RlLmRlYnVnTGV2ZWw7XG5cdGNvbnN0IGFwcExvZ2dlciA9IEFwcExvZ2dlci5nZXRJbnN0YW5jZShtb2RlKTtcblxuXHRyZXR1cm4ge1xuXHRcdGRlYnVnOiAobWVzc2FnZTogc3RyaW5nLCBjYWxsZXI/OiBzdHJpbmcpID0+XG5cdFx0XHRhcHBMb2dnZXIubG9nKG1lc3NhZ2UsICdkZWJ1ZycsIGRlYnVnTGV2ZWwsIGNhbGxlciksXG5cdFx0aW5mbzogKG1lc3NhZ2U6IHN0cmluZywgY2FsbGVyPzogc3RyaW5nKSA9PlxuXHRcdFx0YXBwTG9nZ2VyLmxvZyhtZXNzYWdlLCAnaW5mbycsIGRlYnVnTGV2ZWwsIGNhbGxlciksXG5cdFx0d2FybjogKG1lc3NhZ2U6IHN0cmluZywgY2FsbGVyPzogc3RyaW5nKSA9PlxuXHRcdFx0YXBwTG9nZ2VyLmxvZyhtZXNzYWdlLCAnd2FybicsIGRlYnVnTGV2ZWwsIGNhbGxlciksXG5cdFx0ZXJyb3I6IChtZXNzYWdlOiBzdHJpbmcsIGNhbGxlcj86IHN0cmluZykgPT5cblx0XHRcdGFwcExvZ2dlci5sb2cobWVzc2FnZSwgJ2Vycm9yJywgZGVidWdMZXZlbCwgY2FsbGVyKSxcblx0XHRtdXRhdGlvbjogKFxuXHRcdFx0ZGF0YTogTXV0YXRpb25Mb2csXG5cdFx0XHRsb2dDYWxsYmFjazogKGRhdGE6IE11dGF0aW9uTG9nKSA9PiB2b2lkLFxuXHRcdFx0Y2FsbGVyPzogc3RyaW5nXG5cdFx0KSA9PiB7XG5cdFx0XHRhcHBMb2dnZXIubG9nTXV0YXRpb24oZGF0YSwgbG9nQ2FsbGJhY2spO1xuXG5cdFx0XHRpZiAoY2FsbGVyKSB7XG5cdFx0XHRcdGFwcExvZ2dlci5sb2coXG5cdFx0XHRcdFx0YE11dGF0aW9uIGxvZ2dlZCBieSAke2NhbGxlcn1gLFxuXHRcdFx0XHRcdCdkZWJ1ZycsXG5cdFx0XHRcdFx0ZGVidWdMZXZlbFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBc3luY0xvZ2dlciA9IGFzeW5jICgpID0+IHtcblx0Y29uc3QgZGVidWdMZXZlbCA9IG1vZGUuZGVidWdMZXZlbDtcblx0Y29uc3QgYXBwTG9nZ2VyID0gQXBwTG9nZ2VyLmdldEluc3RhbmNlKG1vZGUpO1xuXG5cdHJldHVybiB7XG5cdFx0ZGVidWc6IChtZXNzYWdlOiBzdHJpbmcsIGNhbGxlcj86IHN0cmluZykgPT5cblx0XHRcdGFwcExvZ2dlci5sb2dBc3luYyhtZXNzYWdlLCAnZGVidWcnLCBkZWJ1Z0xldmVsLCBjYWxsZXIpLFxuXHRcdGluZm86IChtZXNzYWdlOiBzdHJpbmcsIGNhbGxlcj86IHN0cmluZykgPT5cblx0XHRcdGFwcExvZ2dlci5sb2dBc3luYyhtZXNzYWdlLCAnaW5mbycsIGRlYnVnTGV2ZWwsIGNhbGxlciksXG5cdFx0d2FybjogKG1lc3NhZ2U6IHN0cmluZywgY2FsbGVyPzogc3RyaW5nKSA9PlxuXHRcdFx0YXBwTG9nZ2VyLmxvZ0FzeW5jKG1lc3NhZ2UsICd3YXJuJywgZGVidWdMZXZlbCwgY2FsbGVyKSxcblx0XHRlcnJvcjogKG1lc3NhZ2U6IHN0cmluZywgY2FsbGVyPzogc3RyaW5nKSA9PlxuXHRcdFx0YXBwTG9nZ2VyLmxvZ0FzeW5jKG1lc3NhZ2UsICdlcnJvcicsIGRlYnVnTGV2ZWwsIGNhbGxlciksXG5cdFx0bXV0YXRpb246IChcblx0XHRcdGRhdGE6IE11dGF0aW9uTG9nLFxuXHRcdFx0bG9nQ2FsbGJhY2s6IChkYXRhOiBNdXRhdGlvbkxvZykgPT4gdm9pZCxcblx0XHRcdGNhbGxlcj86IHN0cmluZ1xuXHRcdCkgPT4ge1xuXHRcdFx0YXBwTG9nZ2VyLmxvZ011dGF0aW9uKGRhdGEsIGxvZ0NhbGxiYWNrKTtcblxuXHRcdFx0aWYgKGNhbGxlcikge1xuXHRcdFx0XHRhcHBMb2dnZXIubG9nQXN5bmMoXG5cdFx0XHRcdFx0YE11dGF0aW9uIGxvZ2dlZCBieSAke2NhbGxlcn1gLFxuXHRcdFx0XHRcdCdkZWJ1ZycsXG5cdFx0XHRcdFx0ZGVidWdMZXZlbFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG4iXX0=