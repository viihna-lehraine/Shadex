// File: data/dom/dom.js
const dynamicIds = {
    btns: {},
    divs: {
        colorBox1: 'color-box-1'
    },
    inputs: {
        export: 'export-input'
    },
    selects: {},
    spans: {}
};
const staticIds = {
    btns: {
        applyCustomColor: 'apply-custom-color-btn',
        clearCustomColor: 'clear-custom-color-btn',
        customColorMenu: 'custom-color-menu-btn',
        desaturate: 'desaturate-btn',
        export: 'export-btn',
        generate: 'generate-btn',
        helpMenu: 'help-menu-btn',
        historyMenu: 'history-menu-btn',
        ioMenu: 'io-menu-btn',
        saturate: 'saturate-btn',
        showAsCMYK: 'show-as-cmyk-btn',
        showAsHex: 'show-as-hex-btn',
        showAsHSL: 'show-as-hsl-btn',
        showAsHSV: 'show-as-hsv-btn',
        showAsLAB: 'show-as-lab-btn',
        showAsRGB: 'show-as-rgb-btn'
    },
    divs: {
        customColorMenu: 'custom-color-menu',
        helpMenu: 'help-menu',
        helpMenuContent: 'help-menu-content',
        historyMenu: 'history-menu',
        historyMenuContent: 'history-menu-content',
        ioMenu: 'io-menu',
        paletteHistory: 'palette-history'
    },
    inputs: {
        customColor: 'custom-color-input',
        historyLimit: 'history-limit-input',
        import: 'import-input',
        limitDarkChkbx: 'limit-dark-chkbx',
        limitGrayChkbx: 'limit-gray-chkbx',
        limitLightChkbx: 'limit-light-chkbx'
    },
    selects: {
        exportFormatOption: 'export-format-option-selector',
        paletteType: 'palette-type-selector',
        swatch: 'swatch-selector',
        swatchGen: 'swatch-gen-selector'
    },
    spans: {
        customColorDisplay: 'custom-color-display'
    }
};
// ******** Helpers ********
function getElement(id) {
    return document.getElementById(id);
}
const dynamicDivIds = dynamicIds.divs;
const staticBtnIds = staticIds.btns;
const staticDivIds = staticIds.divs;
const staticInputIds = staticIds.inputs;
const staticSelectIds = staticIds.selects;
const staticSpanIds = staticIds.spans;
// ******** Dynamic DOM Data ********
const dynamicDomElements = {
    get btns() {
        return {};
    },
    get divs() {
        return {
            colorBox1: getElement(dynamicDivIds.colorBox1)
        };
    },
    get inputs() {
        return {};
    },
    get selects() {
        return {};
    },
    get spans() {
        return {};
    }
};
const dynamicDomIds = {
    btns: {},
    divs: {
        colorBox1: dynamicDivIds.colorBox1
    },
    inputs: {},
    selects: {},
    spans: {}
};
// ******** Static DOM Data ********
const staticDomElements = {
    get btns() {
        return {
            applyCustomColor: getElement(staticBtnIds.applyCustomColor),
            clearCustomColor: getElement(staticBtnIds.clearCustomColor),
            customColorMenu: getElement(staticBtnIds.customColorMenu),
            desaturate: getElement(staticBtnIds.desaturate),
            export: getElement(staticBtnIds.export),
            generate: getElement(staticBtnIds.generate),
            helpMenu: getElement(staticBtnIds.helpMenu),
            historyMenu: getElement(staticBtnIds.historyMenu),
            ioMenu: getElement(staticBtnIds.ioMenu),
            saturate: getElement(staticBtnIds.saturate),
            showAsCMYK: getElement(staticBtnIds.showAsCMYK),
            showAsHex: getElement(staticBtnIds.showAsHex),
            showAsHSL: getElement(staticBtnIds.showAsHSL),
            showAsHSV: getElement(staticBtnIds.showAsHSV),
            showAsLAB: getElement(staticBtnIds.showAsLAB),
            showAsRGB: getElement(staticBtnIds.showAsRGB)
        };
    },
    get divs() {
        return {
            customColorMenu: getElement(staticDivIds.customColorMenu),
            helpMenu: getElement(staticDivIds.helpMenu),
            helpMenuContent: getElement(staticDivIds.helpMenuContent),
            historyMenu: getElement(staticDivIds.historyMenu),
            historyMenuContent: getElement(staticDivIds.historyMenuContent),
            ioMenu: getElement(staticDivIds.ioMenu),
            paletteHistory: getElement(staticDivIds.paletteHistory)
        };
    },
    get inputs() {
        return {
            customColor: getElement(staticInputIds.customColor),
            historyLimit: getElement(staticInputIds.historyLimit),
            import: getElement(staticInputIds.import),
            limitDarkChkbx: getElement(staticInputIds.limitDarkChkbx),
            limitGrayChkbx: getElement(staticInputIds.limitGrayChkbx),
            limitLightChkbx: getElement(staticInputIds.limitLightChkbx)
        };
    },
    get selects() {
        return {
            exportFormatOption: getElement(staticSelectIds.exportFormatOption),
            paletteType: getElement(staticSelectIds.paletteType),
            swatch: getElement(staticSelectIds.swatch),
            swatchGen: getElement(staticSelectIds.swatchGen)
        };
    },
    get spans() {
        return {
            customColorDisplay: getElement(staticSpanIds.customColorDisplay)
        };
    }
};
const staticDomIds = {
    btns: {
        applyCustomColor: staticBtnIds.applyCustomColor,
        clearCustomColor: staticBtnIds.clearCustomColor,
        customColorMenu: staticBtnIds.customColorMenu,
        desaturate: staticBtnIds.desaturate,
        export: staticBtnIds.export,
        generate: staticBtnIds.generate,
        helpMenu: staticBtnIds.helpMenu,
        historyMenu: staticBtnIds.historyMenu,
        ioMenu: staticBtnIds.ioMenu,
        saturate: staticBtnIds.saturate,
        showAsCMYK: staticBtnIds.showAsCMYK,
        showAsHex: staticBtnIds.showAsHex,
        showAsHSL: staticBtnIds.showAsHSL,
        showAsHSV: staticBtnIds.showAsHSV,
        showAsLAB: staticBtnIds.showAsLAB,
        showAsRGB: staticBtnIds.showAsRGB
    },
    divs: {
        customColorMenu: staticDivIds.customColorMenu,
        helpMenu: staticDivIds.helpMenu,
        helpMenuContent: staticDivIds.helpMenuContent,
        historyMenu: staticDivIds.historyMenu,
        historyMenuContent: staticDivIds.historyMenuContent,
        ioMenu: staticDivIds.ioMenu,
        paletteHistory: staticDivIds.paletteHistory
    },
    inputs: {
        customColor: staticInputIds.customColor,
        historyLimit: staticInputIds.historyLimit,
        import: staticInputIds.import,
        limitDarkChkbx: staticInputIds.limitDarkChkbx,
        limitGrayChkbx: staticInputIds.limitGrayChkbx,
        limitLightChkbx: staticInputIds.limitLightChkbx
    },
    selects: {
        exportFormatOption: staticSelectIds.exportFormatOption,
        paletteType: staticSelectIds.paletteType,
        swatch: staticSelectIds.swatch,
        swatchGen: staticSelectIds.swatchGen
    },
    spans: {
        customColorDisplay: staticSpanIds.customColorDisplay
    }
};
// ******** Final DOM Data Object ********
export const domData = {
    ids: {
        dynamic: dynamicDomIds,
        static: staticDomIds
    },
    elements: {
        dynamic: dynamicDomElements,
        static: staticDomElements
    }
};
//# sourceMappingURL=data:application/json;base64,