// File: io/base.js
import { deserialize } from './deserialize.js';
import { fileUtils } from '../dom/fileUtils.js';
import { serialize } from './serialize.js';
// *DEV-NOTE* improve error handling and logging throughout
export const file = {
    async importFromFile(file) {
        return file.text().then(importPalette);
    },
    async exportToFile(palette, format) {
        const data = await exportPalette(palette, format);
        const mimeType = {
            css: 'text/css',
            json: 'application/json',
            xml: 'application/xml'
        }[format];
        fileUtils.download(data, `palette_${palette.id}.${format}`, mimeType);
    }
};
function detectFileType(data) {
    if (data.trim().startsWith('{'))
        return 'json';
    if (data.trim().startsWith('<'))
        return 'xml';
    return 'css';
}
export async function exportPalette(palette, format) {
    switch (format) {
        case 'css':
            const cssData = await serialize.toCSS(palette);
            return cssData;
        case 'json':
            const jsonData = await serialize.toJSON(palette);
            return jsonData;
        case 'xml':
            const xmlData = await serialize.toXML(palette);
            return xmlData;
        default:
            throw new Error('Unsupported export format');
    }
}
export async function importPalette(data) {
    const fileType = detectFileType(data);
    switch (fileType) {
        case 'css':
            const cssPalette = await deserialize.fromCSS(data);
            if (!cssPalette)
                throw new Error('Invalid CSS');
            return cssPalette;
        case 'json':
            const jsonPalette = await deserialize.fromJSON(data);
            if (!jsonPalette)
                throw new Error('Invalid JSON');
            return jsonPalette;
        case 'xml':
            const xmlPalette = await deserialize.fromXML(data);
            if (!xmlPalette)
                throw new Error('Invalid XML');
            return xmlPalette;
        default:
            throw new Error('Unsupported file format');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pby9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQjtBQUduQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQywyREFBMkQ7QUFFM0QsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHO0lBQ25CLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBVTtRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNELEtBQUssQ0FBQyxZQUFZLENBQ2pCLE9BQWdCLEVBQ2hCLE1BQThCO1FBRTlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsRCxNQUFNLFFBQVEsR0FBRztZQUNoQixHQUFHLEVBQUUsVUFBVTtZQUNmLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsR0FBRyxFQUFFLGlCQUFpQjtTQUN0QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRVYsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxPQUFPLENBQUMsRUFBRSxJQUFJLE1BQU0sRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Q0FDRCxDQUFDO0FBRUYsU0FBUyxjQUFjLENBQUMsSUFBWTtJQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTyxNQUFNLENBQUM7SUFDL0MsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRTlDLE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUNsQyxPQUFnQixFQUNoQixNQUE4QjtJQUU5QixRQUFRLE1BQU0sRUFBRSxDQUFDO1FBQ2hCLEtBQUssS0FBSztZQUNULE1BQU0sT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUvQyxPQUFPLE9BQU8sQ0FBQztRQUNoQixLQUFLLE1BQU07WUFDVixNQUFNLFFBQVEsR0FBRyxNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFakQsT0FBTyxRQUFRLENBQUM7UUFDakIsS0FBSyxLQUFLO1lBQ1QsTUFBTSxPQUFPLEdBQUcsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRS9DLE9BQU8sT0FBTyxDQUFDO1FBQ2hCO1lBQ0MsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxhQUFhLENBQUMsSUFBWTtJQUMvQyxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdEMsUUFBUSxRQUFRLEVBQUUsQ0FBQztRQUNsQixLQUFLLEtBQUs7WUFDVCxNQUFNLFVBQVUsR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbkQsSUFBSSxDQUFDLFVBQVU7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVoRCxPQUFPLFVBQVUsQ0FBQztRQUNuQixLQUFLLE1BQU07WUFDVixNQUFNLFdBQVcsR0FBRyxNQUFNLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFckQsSUFBSSxDQUFDLFdBQVc7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUVsRCxPQUFPLFdBQVcsQ0FBQztRQUNwQixLQUFLLEtBQUs7WUFDVCxNQUFNLFVBQVUsR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbkQsSUFBSSxDQUFDLFVBQVU7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVoRCxPQUFPLFVBQVUsQ0FBQztRQUNuQjtZQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGlvL2Jhc2UuanNcblxuaW1wb3J0IHsgUGFsZXR0ZSB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGRlc2VyaWFsaXplIH0gZnJvbSAnLi9kZXNlcmlhbGl6ZS5qcyc7XG5pbXBvcnQgeyBmaWxlVXRpbHMgfSBmcm9tICcuLi9kb20vZmlsZVV0aWxzLmpzJztcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gJy4vc2VyaWFsaXplLmpzJztcblxuLy8gKkRFVi1OT1RFKiBpbXByb3ZlIGVycm9yIGhhbmRsaW5nIGFuZCBsb2dnaW5nIHRocm91Z2hvdXRcblxuZXhwb3J0IGNvbnN0IGZpbGUgPSB7XG5cdGFzeW5jIGltcG9ydEZyb21GaWxlKGZpbGU6IEZpbGUpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0XHRyZXR1cm4gZmlsZS50ZXh0KCkudGhlbihpbXBvcnRQYWxldHRlKTtcblx0fSxcblx0YXN5bmMgZXhwb3J0VG9GaWxlKFxuXHRcdHBhbGV0dGU6IFBhbGV0dGUsXG5cdFx0Zm9ybWF0OiAnY3NzJyB8ICdqc29uJyB8ICd4bWwnXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCBleHBvcnRQYWxldHRlKHBhbGV0dGUsIGZvcm1hdCk7XG5cdFx0Y29uc3QgbWltZVR5cGUgPSB7XG5cdFx0XHRjc3M6ICd0ZXh0L2NzcycsXG5cdFx0XHRqc29uOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHR4bWw6ICdhcHBsaWNhdGlvbi94bWwnXG5cdFx0fVtmb3JtYXRdO1xuXG5cdFx0ZmlsZVV0aWxzLmRvd25sb2FkKGRhdGEsIGBwYWxldHRlXyR7cGFsZXR0ZS5pZH0uJHtmb3JtYXR9YCwgbWltZVR5cGUpO1xuXHR9XG59O1xuXG5mdW5jdGlvbiBkZXRlY3RGaWxlVHlwZShkYXRhOiBzdHJpbmcpOiAnY3NzJyB8ICdqc29uJyB8ICd4bWwnIHtcblx0aWYgKGRhdGEudHJpbSgpLnN0YXJ0c1dpdGgoJ3snKSkgcmV0dXJuICdqc29uJztcblx0aWYgKGRhdGEudHJpbSgpLnN0YXJ0c1dpdGgoJzwnKSkgcmV0dXJuICd4bWwnO1xuXG5cdHJldHVybiAnY3NzJztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4cG9ydFBhbGV0dGUoXG5cdHBhbGV0dGU6IFBhbGV0dGUsXG5cdGZvcm1hdDogJ2NzcycgfCAnanNvbicgfCAneG1sJ1xuKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0c3dpdGNoIChmb3JtYXQpIHtcblx0XHRjYXNlICdjc3MnOlxuXHRcdFx0Y29uc3QgY3NzRGF0YSA9IGF3YWl0IHNlcmlhbGl6ZS50b0NTUyhwYWxldHRlKTtcblxuXHRcdFx0cmV0dXJuIGNzc0RhdGE7XG5cdFx0Y2FzZSAnanNvbic6XG5cdFx0XHRjb25zdCBqc29uRGF0YSA9IGF3YWl0IHNlcmlhbGl6ZS50b0pTT04ocGFsZXR0ZSk7XG5cblx0XHRcdHJldHVybiBqc29uRGF0YTtcblx0XHRjYXNlICd4bWwnOlxuXHRcdFx0Y29uc3QgeG1sRGF0YSA9IGF3YWl0IHNlcmlhbGl6ZS50b1hNTChwYWxldHRlKTtcblxuXHRcdFx0cmV0dXJuIHhtbERhdGE7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZXhwb3J0IGZvcm1hdCcpO1xuXHR9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRQYWxldHRlKGRhdGE6IHN0cmluZyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBmaWxlVHlwZSA9IGRldGVjdEZpbGVUeXBlKGRhdGEpO1xuXG5cdHN3aXRjaCAoZmlsZVR5cGUpIHtcblx0XHRjYXNlICdjc3MnOlxuXHRcdFx0Y29uc3QgY3NzUGFsZXR0ZSA9IGF3YWl0IGRlc2VyaWFsaXplLmZyb21DU1MoZGF0YSk7XG5cblx0XHRcdGlmICghY3NzUGFsZXR0ZSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIENTUycpO1xuXG5cdFx0XHRyZXR1cm4gY3NzUGFsZXR0ZTtcblx0XHRjYXNlICdqc29uJzpcblx0XHRcdGNvbnN0IGpzb25QYWxldHRlID0gYXdhaXQgZGVzZXJpYWxpemUuZnJvbUpTT04oZGF0YSk7XG5cblx0XHRcdGlmICghanNvblBhbGV0dGUpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OJyk7XG5cblx0XHRcdHJldHVybiBqc29uUGFsZXR0ZTtcblx0XHRjYXNlICd4bWwnOlxuXHRcdFx0Y29uc3QgeG1sUGFsZXR0ZSA9IGF3YWl0IGRlc2VyaWFsaXplLmZyb21YTUwoZGF0YSk7XG5cblx0XHRcdGlmICgheG1sUGFsZXR0ZSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFhNTCcpO1xuXG5cdFx0XHRyZXR1cm4geG1sUGFsZXR0ZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBmaWxlIGZvcm1hdCcpO1xuXHR9XG59XG4iXX0=