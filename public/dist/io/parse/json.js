// File: io/parse/json.js
import { createLogger } from '../../logger/factory.js';
import { modeData } from '../../data/mode.js';
const logMode = modeData.logging;
const mode = modeData;
const thisModule = 'io/parse/json.ts';
const logger = await createLogger();
function file(jsonData) {
    const caller = 'file()';
    try {
        const parsed = JSON.parse(jsonData);
        // Validate that the parsed object matches the expected structure
        if (!parsed.items || !Array.isArray(parsed.items)) {
            throw new Error('Invalid JSON structure for Palette');
        }
        return Promise.resolve(parsed);
    }
    catch (error) {
        if (!mode.quiet && logMode.error && logMode.verbosity > 1) {
            logger.error(`Error parsing JSON file: ${error}`, `${thisModule} > ${caller}`);
            if (mode.showAlerts)
                alert(`Error parsing JSON file. See console for details.`);
        }
        return Promise.resolve(null);
    }
}
export const json = {
    file
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pby9wYXJzZS9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QjtBQUd6QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDakMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDO0FBQ3RCLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDO0FBRXRDLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsU0FBUyxJQUFJLENBQUMsUUFBZ0I7SUFDN0IsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBRXhCLElBQUksQ0FBQztRQUNKLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEMsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNuRCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFpQixDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzNELE1BQU0sQ0FBQyxLQUFLLENBQ1gsNEJBQTRCLEtBQUssRUFBRSxFQUNuQyxHQUFHLFVBQVUsTUFBTSxNQUFNLEVBQUUsQ0FDM0IsQ0FBQztZQUVGLElBQUksSUFBSSxDQUFDLFVBQVU7Z0JBQ2xCLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUc7SUFDbkIsSUFBSTtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBpby9wYXJzZS9qc29uLmpzXG5cbmltcG9ydCB7IFBhbGV0dGUgfSBmcm9tICcuLi8uLi90eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBtb2RlRGF0YSB9IGZyb20gJy4uLy4uL2RhdGEvbW9kZS5qcyc7XG5cbmNvbnN0IGxvZ01vZGUgPSBtb2RlRGF0YS5sb2dnaW5nO1xuY29uc3QgbW9kZSA9IG1vZGVEYXRhO1xuY29uc3QgdGhpc01vZHVsZSA9ICdpby9wYXJzZS9qc29uLnRzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5cbmZ1bmN0aW9uIGZpbGUoanNvbkRhdGE6IHN0cmluZyk6IFByb21pc2U8UGFsZXR0ZSB8IG51bGw+IHtcblx0Y29uc3QgY2FsbGVyID0gJ2ZpbGUoKSc7XG5cblx0dHJ5IHtcblx0XHRjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGpzb25EYXRhKTtcblxuXHRcdC8vIFZhbGlkYXRlIHRoYXQgdGhlIHBhcnNlZCBvYmplY3QgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQgc3RydWN0dXJlXG5cdFx0aWYgKCFwYXJzZWQuaXRlbXMgfHwgIUFycmF5LmlzQXJyYXkocGFyc2VkLml0ZW1zKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEpTT04gc3RydWN0dXJlIGZvciBQYWxldHRlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShwYXJzZWQgYXMgUGFsZXR0ZSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUuZXJyb3IgJiYgbG9nTW9kZS52ZXJib3NpdHkgPiAxKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBFcnJvciBwYXJzaW5nIEpTT04gZmlsZTogJHtlcnJvcn1gLFxuXHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7Y2FsbGVyfWBcblx0XHRcdCk7XG5cblx0XHRcdGlmIChtb2RlLnNob3dBbGVydHMpXG5cdFx0XHRcdGFsZXJ0KGBFcnJvciBwYXJzaW5nIEpTT04gZmlsZS4gU2VlIGNvbnNvbGUgZm9yIGRldGFpbHMuYCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QganNvbiA9IHtcblx0ZmlsZVxufTtcbiJdfQ==