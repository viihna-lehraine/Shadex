// File: src/io/parse/json.ts
import { createLogger } from '../../logger/factory.js';
import { mode } from '../../common/data/base.js';
const logger = await createLogger();
const logMode = mode.logging;
function file(jsonData) {
    try {
        const parsed = JSON.parse(jsonData);
        // Validate that the parsed object matches the expected structure
        if (!parsed.items || !Array.isArray(parsed.items)) {
            throw new Error('Invalid JSON structure for Palette');
        }
        return Promise.resolve(parsed);
    }
    catch (error) {
        if (!mode.quiet && logMode.error && logMode.verbosity > 1) {
            logger.error(`Error parsing JSON file: ${error}`, 'io > parse > json > file()');
            if (mode.showAlerts)
                alert(`Error parsing JSON file. See console for details.`);
        }
        return Promise.resolve(null);
    }
}
export const json = {
    file
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pby9wYXJzZS9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQUc3QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWpELE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUU3QixTQUFTLElBQUksQ0FBQyxRQUFnQjtJQUM3QixJQUFJLENBQUM7UUFDSixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBDLGlFQUFpRTtRQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBaUIsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUMzRCxNQUFNLENBQUMsS0FBSyxDQUNYLDRCQUE0QixLQUFLLEVBQUUsRUFDbkMsNEJBQTRCLENBQzVCLENBQUM7WUFFRixJQUFJLElBQUksQ0FBQyxVQUFVO2dCQUNsQixLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBRUQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHO0lBQ25CLElBQUk7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2lvL3BhcnNlL2pzb24udHNcblxuaW1wb3J0IHsgUGFsZXR0ZSB9IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uL2xvZ2dlci9mYWN0b3J5LmpzJztcbmltcG9ydCB7IG1vZGUgfSBmcm9tICcuLi8uLi9jb21tb24vZGF0YS9iYXNlLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgY3JlYXRlTG9nZ2VyKCk7XG5jb25zdCBsb2dNb2RlID0gbW9kZS5sb2dnaW5nO1xuXG5mdW5jdGlvbiBmaWxlKGpzb25EYXRhOiBzdHJpbmcpOiBQcm9taXNlPFBhbGV0dGUgfCBudWxsPiB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShqc29uRGF0YSk7XG5cblx0XHQvLyBWYWxpZGF0ZSB0aGF0IHRoZSBwYXJzZWQgb2JqZWN0IG1hdGNoZXMgdGhlIGV4cGVjdGVkIHN0cnVjdHVyZVxuXHRcdGlmICghcGFyc2VkLml0ZW1zIHx8ICFBcnJheS5pc0FycmF5KHBhcnNlZC5pdGVtcykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OIHN0cnVjdHVyZSBmb3IgUGFsZXR0ZScpO1xuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUocGFyc2VkIGFzIFBhbGV0dGUpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmICghbW9kZS5xdWlldCAmJiBsb2dNb2RlLmVycm9yICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMSkge1xuXHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRgRXJyb3IgcGFyc2luZyBKU09OIGZpbGU6ICR7ZXJyb3J9YCxcblx0XHRcdFx0J2lvID4gcGFyc2UgPiBqc29uID4gZmlsZSgpJ1xuXHRcdFx0KTtcblxuXHRcdFx0aWYgKG1vZGUuc2hvd0FsZXJ0cylcblx0XHRcdFx0YWxlcnQoYEVycm9yIHBhcnNpbmcgSlNPTiBmaWxlLiBTZWUgY29uc29sZSBmb3IgZGV0YWlscy5gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBqc29uID0ge1xuXHRmaWxlXG59O1xuIl19