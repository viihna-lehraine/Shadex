// File: io/parse/json.js
import { createLogger } from '../../logger/factory.js';
import { modeData } from '../../data/mode.js';
const logMode = modeData.logging;
const mode = modeData;
const thisModule = 'io/parse/json.ts';
const logger = await createLogger();
function file(jsonData) {
    const caller = 'file()';
    try {
        const parsed = JSON.parse(jsonData);
        // Validate that the parsed object matches the expected structure
        if (!parsed.items || !Array.isArray(parsed.items)) {
            throw new Error('Invalid JSON structure for Palette');
        }
        return Promise.resolve(parsed);
    }
    catch (error) {
        if (logMode.error && logMode.verbosity > 1) {
            logger.error(`Error parsing JSON file: ${error}`, `${thisModule} > ${caller}`);
            if (mode.showAlerts)
                alert(`Error parsing JSON file. See console for details.`);
        }
        return Promise.resolve(null);
    }
}
export const json = {
    file
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pby9wYXJzZS9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QjtBQUd6QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDakMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDO0FBQ3RCLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDO0FBRXRDLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7QUFFcEMsU0FBUyxJQUFJLENBQUMsUUFBZ0I7SUFDN0IsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBRXhCLElBQUksQ0FBQztRQUNKLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEMsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNuRCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFpQixDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FDWCw0QkFBNEIsS0FBSyxFQUFFLEVBQ25DLEdBQUcsVUFBVSxNQUFNLE1BQU0sRUFBRSxDQUMzQixDQUFDO1lBRUYsSUFBSSxJQUFJLENBQUMsVUFBVTtnQkFDbEIsS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRztJQUNuQixJQUFJO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGlvL3BhcnNlL2pzb24uanNcblxuaW1wb3J0IHsgUGFsZXR0ZSB9IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uL2xvZ2dlci9mYWN0b3J5LmpzJztcbmltcG9ydCB7IG1vZGVEYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9tb2RlLmpzJztcblxuY29uc3QgbG9nTW9kZSA9IG1vZGVEYXRhLmxvZ2dpbmc7XG5jb25zdCBtb2RlID0gbW9kZURhdGE7XG5jb25zdCB0aGlzTW9kdWxlID0gJ2lvL3BhcnNlL2pzb24udHMnO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuZnVuY3Rpb24gZmlsZShqc29uRGF0YTogc3RyaW5nKTogUHJvbWlzZTxQYWxldHRlIHwgbnVsbD4ge1xuXHRjb25zdCBjYWxsZXIgPSAnZmlsZSgpJztcblxuXHR0cnkge1xuXHRcdGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoanNvbkRhdGEpO1xuXG5cdFx0Ly8gVmFsaWRhdGUgdGhhdCB0aGUgcGFyc2VkIG9iamVjdCBtYXRjaGVzIHRoZSBleHBlY3RlZCBzdHJ1Y3R1cmVcblx0XHRpZiAoIXBhcnNlZC5pdGVtcyB8fCAhQXJyYXkuaXNBcnJheShwYXJzZWQuaXRlbXMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSlNPTiBzdHJ1Y3R1cmUgZm9yIFBhbGV0dGUnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBhcnNlZCBhcyBQYWxldHRlKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvciAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+IDEpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEVycm9yIHBhcnNpbmcgSlNPTiBmaWxlOiAke2Vycm9yfWAsXG5cdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHtjYWxsZXJ9YFxuXHRcdFx0KTtcblxuXHRcdFx0aWYgKG1vZGUuc2hvd0FsZXJ0cylcblx0XHRcdFx0YWxlcnQoYEVycm9yIHBhcnNpbmcgSlNPTiBmaWxlLiBTZWUgY29uc29sZSBmb3IgZGV0YWlscy5gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBqc29uID0ge1xuXHRmaWxlXG59O1xuIl19