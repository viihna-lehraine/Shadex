// File: io/parse/colorValue.js
import { asColorString } from './color.js';
function asCMYKValue(colorString) {
    const parsed = asColorString('cmyk', colorString);
    if (parsed && parsed.format === 'cmyk') {
        return parsed.value;
    }
    throw new Error(`Invalid CMYK color string: ${colorString}`);
}
function asHexValue(colorValue) {
    const parsed = asColorString('hex', colorValue);
    if (parsed && parsed.format === 'hex') {
        return parsed.value;
    }
    throw new Error(`Invalid Hex color value: ${colorValue}`);
}
function asHSLValue(colorValue) {
    const parsed = asColorString('hsl', colorValue);
    if (parsed && parsed.format === 'hsl') {
        return parsed.value;
    }
    throw new Error(`Invalid HSL color value: ${colorValue}`);
}
function asHSVValue(colorValue) {
    const parsed = asColorString('hsv', colorValue);
    if (parsed && parsed.format === 'hsv') {
        return parsed.value;
    }
    throw new Error(`Invalid HSV color value: ${colorValue}`);
}
function asLABValue(colorValue) {
    const parsed = asColorString('lab', colorValue);
    if (parsed && parsed.format === 'lab') {
        return parsed.value;
    }
    throw new Error(`Invalid LAB color value: ${colorValue}`);
}
function asRGBValue(colorValue) {
    const parsed = asColorString('rgb', colorValue);
    if (parsed && parsed.format === 'rgb') {
        return parsed.value;
    }
    throw new Error(`Invalid RGB color value: ${colorValue}`);
}
function asXYZValue(colorValue) {
    const parsed = asColorString('xyz', colorValue);
    if (parsed && parsed.format === 'xyz') {
        return parsed.value;
    }
    throw new Error(`Invalid XYZ color value: ${colorValue}`);
}
export const asColorValue = {
    cmyk: asCMYKValue,
    hex: asHexValue,
    hsl: asHSLValue,
    hsv: asHSVValue,
    lab: asLABValue,
    rgb: asRGBValue,
    xyz: asXYZValue
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pby9wYXJzZS9jb2xvclZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtCQUErQjtBQUcvQixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTNDLFNBQVMsV0FBVyxDQUFDLFdBQW1CO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUN4QyxPQUFPLE1BQU0sQ0FBQyxLQUFzQixDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxVQUFrQjtJQUNyQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUMsS0FBcUIsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsVUFBa0I7SUFDckMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEtBQXFCLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQyxLQUFxQixDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxVQUFrQjtJQUNyQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUMsS0FBcUIsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsVUFBa0I7SUFDckMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEtBQXFCLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQyxLQUFxQixDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFDM0IsSUFBSSxFQUFFLFdBQVc7SUFDakIsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0NBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IGlvL3BhcnNlL2NvbG9yVmFsdWUuanNcblxuaW1wb3J0IHsgQ01ZSywgSGV4LCBIU0wsIEhTViwgTEFCLCBSR0IsIFhZWiB9IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGFzQ29sb3JTdHJpbmcgfSBmcm9tICcuL2NvbG9yLmpzJztcblxuZnVuY3Rpb24gYXNDTVlLVmFsdWUoY29sb3JTdHJpbmc6IHN0cmluZyk6IENNWUtbJ3ZhbHVlJ10ge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCdjbXlrJywgY29sb3JTdHJpbmcpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ2NteWsnKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBDTVlLWyd2YWx1ZSddO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIENNWUsgY29sb3Igc3RyaW5nOiAke2NvbG9yU3RyaW5nfWApO1xufVxuXG5mdW5jdGlvbiBhc0hleFZhbHVlKGNvbG9yVmFsdWU6IHN0cmluZyk6IEhleFsndmFsdWUnXSB7XG5cdGNvbnN0IHBhcnNlZCA9IGFzQ29sb3JTdHJpbmcoJ2hleCcsIGNvbG9yVmFsdWUpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ2hleCcpIHtcblx0XHRyZXR1cm4gcGFyc2VkLnZhbHVlIGFzIEhleFsndmFsdWUnXTtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBIZXggY29sb3IgdmFsdWU6ICR7Y29sb3JWYWx1ZX1gKTtcbn1cblxuZnVuY3Rpb24gYXNIU0xWYWx1ZShjb2xvclZhbHVlOiBzdHJpbmcpOiBIU0xbJ3ZhbHVlJ10ge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCdoc2wnLCBjb2xvclZhbHVlKTtcblxuXHRpZiAocGFyc2VkICYmIHBhcnNlZC5mb3JtYXQgPT09ICdoc2wnKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBIU0xbJ3ZhbHVlJ107XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSFNMIGNvbG9yIHZhbHVlOiAke2NvbG9yVmFsdWV9YCk7XG59XG5cbmZ1bmN0aW9uIGFzSFNWVmFsdWUoY29sb3JWYWx1ZTogc3RyaW5nKTogSFNWWyd2YWx1ZSddIHtcblx0Y29uc3QgcGFyc2VkID0gYXNDb2xvclN0cmluZygnaHN2JywgY29sb3JWYWx1ZSk7XG5cblx0aWYgKHBhcnNlZCAmJiBwYXJzZWQuZm9ybWF0ID09PSAnaHN2Jykge1xuXHRcdHJldHVybiBwYXJzZWQudmFsdWUgYXMgSFNWWyd2YWx1ZSddO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEhTViBjb2xvciB2YWx1ZTogJHtjb2xvclZhbHVlfWApO1xufVxuXG5mdW5jdGlvbiBhc0xBQlZhbHVlKGNvbG9yVmFsdWU6IHN0cmluZyk6IExBQlsndmFsdWUnXSB7XG5cdGNvbnN0IHBhcnNlZCA9IGFzQ29sb3JTdHJpbmcoJ2xhYicsIGNvbG9yVmFsdWUpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ2xhYicpIHtcblx0XHRyZXR1cm4gcGFyc2VkLnZhbHVlIGFzIExBQlsndmFsdWUnXTtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBMQUIgY29sb3IgdmFsdWU6ICR7Y29sb3JWYWx1ZX1gKTtcbn1cblxuZnVuY3Rpb24gYXNSR0JWYWx1ZShjb2xvclZhbHVlOiBzdHJpbmcpOiBSR0JbJ3ZhbHVlJ10ge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCdyZ2InLCBjb2xvclZhbHVlKTtcblxuXHRpZiAocGFyc2VkICYmIHBhcnNlZC5mb3JtYXQgPT09ICdyZ2InKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBSR0JbJ3ZhbHVlJ107XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgUkdCIGNvbG9yIHZhbHVlOiAke2NvbG9yVmFsdWV9YCk7XG59XG5cbmZ1bmN0aW9uIGFzWFlaVmFsdWUoY29sb3JWYWx1ZTogc3RyaW5nKTogWFlaWyd2YWx1ZSddIHtcblx0Y29uc3QgcGFyc2VkID0gYXNDb2xvclN0cmluZygneHl6JywgY29sb3JWYWx1ZSk7XG5cblx0aWYgKHBhcnNlZCAmJiBwYXJzZWQuZm9ybWF0ID09PSAneHl6Jykge1xuXHRcdHJldHVybiBwYXJzZWQudmFsdWUgYXMgWFlaWyd2YWx1ZSddO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFhZWiBjb2xvciB2YWx1ZTogJHtjb2xvclZhbHVlfWApO1xufVxuXG5leHBvcnQgY29uc3QgYXNDb2xvclZhbHVlID0ge1xuXHRjbXlrOiBhc0NNWUtWYWx1ZSxcblx0aGV4OiBhc0hleFZhbHVlLFxuXHRoc2w6IGFzSFNMVmFsdWUsXG5cdGhzdjogYXNIU1ZWYWx1ZSxcblx0bGFiOiBhc0xBQlZhbHVlLFxuXHRyZ2I6IGFzUkdCVmFsdWUsXG5cdHh5ejogYXNYWVpWYWx1ZVxufTtcbiJdfQ==