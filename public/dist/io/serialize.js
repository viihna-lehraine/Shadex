// File: io/deserialize.js
import { createLogger } from '../logger/index.js';
import { modeData as mode } from '../data/mode.js';
const logMode = mode.logging;
const thisModule = 'io/serialize.js';
const logger = await createLogger();
async function toCSS(palette) {
    const thisMethod = 'toCSS()';
    return new Promise((resolve, reject) => {
        try {
            // 1. serialize metadata
            const metadata = `
				/* Palette Metadata */
				.palette {
					--id: "${palette.id}";
					--name: "${palette.metadata.name ?? 'Unnamed Palette'}";
					--swatches: ${palette.metadata.swatches};
					--type: "${palette.metadata.type}";
					--timestamp: "${palette.metadata.timestamp}";
					--limitDarkness: ${palette.metadata.flags.limitDarkness};
					--limitGrayness: ${palette.metadata.flags.limitGrayness};
					--limitLightness: ${palette.metadata.flags.limitLightness};
				}`.trim();
            // 2. serialize custom color if present
            const customColor = palette.metadata.customColor
                ? `
				/* Optional Custom Color */
				.palette-custom {
					--custom-cmyk-color: "${palette.metadata.customColor.colors.main.cmyk}";
					--custom-hex-color: "${palette.metadata.customColor.colors.main.hex}";
					--custom-hsl-color: "${palette.metadata.customColor.colors.main.hsl}";
					--custom-hsv-color: "${palette.metadata.customColor.colors.main.hsv}";
					--custom-lab-color: "${palette.metadata.customColor.colors.main.lab}";
					--custom-rgb-color: "${palette.metadata.customColor.colors.main.rgb}";
					--custom-xyz-color: "${palette.metadata.customColor.colors.main.xyz}";
				}`.trim()
                : '';
            // 3. serialize palette items
            const items = palette.items
                .map(item => {
                const backgroundColor = item.colors.css.hsl;
                return `
					/* Palette Item */
					.color {
						--cmyk-color: "${item.colors.css.cmyk}";
						--hex-color: "${item.colors.css.hex}";
						--hsl-color: "${item.colors.css.hsl}";
						--hsv-color: "${item.colors.css.hsv}";
						--lab-color: "${item.colors.css.lab}";
						--rgb-color: "${item.colors.css.rgb}";
						--xyz-color: "${item.colors.css.xyz}";
						background-color: ${backgroundColor};
					}`.trim();
            })
                .join('\n\n');
            // 4. combine CSS data
            const cssData = [metadata, customColor, items]
                .filter(Boolean)
                .join('\n\n');
            // 5. resolve serialized CSS data
            resolve(cssData.trim());
        }
        catch (error) {
            if (!mode.quiet && logMode.error) {
                if (logMode.verbosity > 1) {
                    logger.error(`Failed to convert palette to CSS: ${error}`, `${thisModule} > ${thisMethod}`);
                }
                else {
                    logger.error('Failed to convert palette to CSS', `${thisModule} > ${thisMethod}`);
                }
            }
            if (mode.stackTrace) {
                console.trace('Stack Trace:');
            }
            reject(new Error(`Failed to convert palette to CSS: ${error}`));
        }
    });
}
async function toJSON(palette) {
    const thisMethod = 'toJSON()';
    return new Promise((resolve, reject) => {
        try {
            const jsonData = JSON.stringify(palette, null, 2);
            resolve(jsonData);
        }
        catch (error) {
            if (!mode.quiet && logMode.error) {
                if (logMode.verbosity > 1) {
                    logger.error(`Failed to convert palette to JSON: ${error}`, `${thisModule} > ${thisMethod}`);
                }
                else {
                    logger.error('Failed to convert palette to JSON', `${thisModule} > ${thisMethod}`);
                }
            }
            if (mode.stackTrace) {
                console.trace('Stack Trace:');
            }
            reject(new Error(`Failed to convert palette to JSON: ${error}`));
        }
    });
}
async function toXML(palette) {
    const thisMethod = 'toXML()';
    return new Promise((resolve, reject) => {
        try {
            // 1. serialize palette metadata
            const customColorXML = palette.metadata.customColor
                ? `
				<CustomColor>
					<CMYK>${palette.metadata.customColor.colors.main.cmyk}</CMYK>
					<Hex>${palette.metadata.customColor.colors.main.hex}</Hex>
					<HSL>${palette.metadata.customColor.colors.main.hsl}</HSL>
					<HSV>${palette.metadata.customColor.colors.main.hsv}</HSV>
					<LAB>${palette.metadata.customColor.colors.main.lab}</LAB>
					<RGB>${palette.metadata.customColor.colors.main.rgb}</RGB>
					<XYZ>${palette.metadata.customColor.colors.main.xyz}</XYZ>
				</CustomColor>`.trim()
                : '<CustomColor>false</CustomColor>';
            const metadata = `
				<Metadata>
					<Name>${palette.metadata.name ?? 'Unnamed Palette'}</Name>
					<Timestamp>${palette.metadata.timestamp}</Timestamp>
					<Swatches>${palette.metadata.swatches}</Swatches>
					<Type>${palette.metadata.type}</Type>
					${customColorXML}
					<Flags>
						<LimitDarkness>${palette.metadata.flags.limitDarkness}</LimitDarkness>
						<LimitGrayness>${palette.metadata.flags.limitGrayness}</LimitGrayness>
						<LimitLightness>${palette.metadata.flags.limitLightness}</LimitLightness>
					</Flags>
				</Metadata>`.trim();
            // 2. serialize palette items
            const xmlItems = palette.items
                .map((item, index) => `
					<PaletteItem id="${index + 1}">
						<Colors>
							<Main>
								<CMYK>${item.colors.main.cmyk}</CMYK>
								<Hex>${item.colors.main.hex}</Hex>
								<HSL>${item.colors.main.hsl}</HSL>
								<HSV>${item.colors.main.hsv}</HSV>
								<LAB>${item.colors.main.lab}</LAB>
								<RGB>${item.colors.main.rgb}</RGB>
								<XYZ>${item.colors.main.xyz}</XYZ>
							</Main>
							<CSS>
								<CMYK>${item.colors.css.cmyk}</CMYK>
								<Hex>${item.colors.css.hex}</Hex>
								<HSL>${item.colors.css.hsl}</HSL>
								<HSV>${item.colors.css.hsv}</HSV>
								<LAB>${item.colors.css.lab}</LAB>
								<RGB>${item.colors.css.rgb}</RGB>
								<XYZ>${item.colors.css.xyz}</XYZ>
							</CSS>
						</Colors>
					</PaletteItem>`.trim())
                .join('\n');
            // 3. combine metadata and items into the palette XML
            const xmlData = `
				<Palette id=${palette.id}>
					${metadata}
					<Items>
						${xmlItems}
					</Items>
				</Palette>`.trim();
            resolve(xmlData.trim());
        }
        catch (error) {
            if (!mode.quiet && logMode.error) {
                if (logMode.verbosity > 1) {
                    logger.error(`Failed to convert palette to XML: ${error}`, `${thisModule} > ${thisMethod}`);
                }
                else {
                    logger.error('Failed to convert palette to XML', `${thisModule} > ${thisMethod}`);
                }
            }
            if (mode.stackTrace) {
                console.trace('Stack Trace:');
            }
            reject(new Error(`Failed to convert palette to XML: ${error}`));
        }
    });
}
export const serialize = {
    toCSS,
    toJSON,
    toXML
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lvL3NlcmlhbGl6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEI7QUFHMUIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLElBQUksSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUU3QixNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQUVyQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0FBRXBDLEtBQUssVUFBVSxLQUFLLENBQUMsT0FBZ0I7SUFDcEMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBRTdCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDdEMsSUFBSSxDQUFDO1lBQ0osd0JBQXdCO1lBQ3hCLE1BQU0sUUFBUSxHQUFHOzs7Y0FHTixPQUFPLENBQUMsRUFBRTtnQkFDUixPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxpQkFBaUI7bUJBQ3ZDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUTtnQkFDNUIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJO3FCQUNoQixPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVM7d0JBQ3ZCLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWE7d0JBQ3BDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWE7eUJBQ25DLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGNBQWM7TUFDeEQsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVYLHVDQUF1QztZQUN2QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVc7Z0JBQy9DLENBQUMsQ0FBQzs7OzZC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SyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUMzQixNQUFNLENBQUMsS0FBSyxDQUNYLHFDQUFxQyxLQUFLLEVBQUUsRUFDNUMsR0FBRyxVQUFVLE1BQU0sVUFBVSxFQUFFLENBQy9CLENBQUM7Z0JBQ0gsQ0FBQztxQkFBTSxDQUFDO29CQUNQLE1BQU0sQ0FBQyxLQUFLLENBQ1gsa0NBQWtDLEVBQ2xDLEdBQUcsVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUMvQixDQUFDO2dCQUNILENBQUM7WUFDRixDQUFDO1lBRUQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUVELE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQXNDO0lBQzNELEtBQUs7SUFDTCxNQUFNO0lBQ04sS0FBSztDQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBpby9kZXNlcmlhbGl6ZS5qc1xuXG5pbXBvcnQgeyBJT0ZuX01hc3RlckludGVyZmFjZSwgUGFsZXR0ZSB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlci9pbmRleC5qcyc7XG5pbXBvcnQgeyBtb2RlRGF0YSBhcyBtb2RlIH0gZnJvbSAnLi4vZGF0YS9tb2RlLmpzJztcblxuY29uc3QgbG9nTW9kZSA9IG1vZGUubG9nZ2luZztcblxuY29uc3QgdGhpc01vZHVsZSA9ICdpby9zZXJpYWxpemUuanMnO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBjcmVhdGVMb2dnZXIoKTtcblxuYXN5bmMgZnVuY3Rpb24gdG9DU1MocGFsZXR0ZTogUGFsZXR0ZSk6IFByb21pc2U8c3RyaW5nPiB7XG5cdGNvbnN0IHRoaXNNZXRob2QgPSAndG9DU1MoKSc7XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gMS4gc2VyaWFsaXplIG1ldGFkYXRhXG5cdFx0XHRjb25zdCBtZXRhZGF0YSA9IGBcblx0XHRcdFx0LyogUGFsZXR0ZSBNZXRhZGF0YSAqL1xuXHRcdFx0XHQucGFsZXR0ZSB7XG5cdFx0XHRcdFx0LS1pZDogXCIke3BhbGV0dGUuaWR9XCI7XG5cdFx0XHRcdFx0LS1uYW1lOiBcIiR7cGFsZXR0ZS5tZXRhZGF0YS5uYW1lID8/ICdVbm5hbWVkIFBhbGV0dGUnfVwiO1xuXHRcdFx0XHRcdC0tc3dhdGNoZXM6ICR7cGFsZXR0ZS5tZXRhZGF0YS5zd2F0Y2hlc307XG5cdFx0XHRcdFx0LS10eXBlOiBcIiR7cGFsZXR0ZS5tZXRhZGF0YS50eXBlfVwiO1xuXHRcdFx0XHRcdC0tdGltZXN0YW1wOiBcIiR7cGFsZXR0ZS5tZXRhZGF0YS50aW1lc3RhbXB9XCI7XG5cdFx0XHRcdFx0LS1saW1pdERhcmtuZXNzOiAke3BhbGV0dGUubWV0YWRhdGEuZmxhZ3MubGltaXREYXJrbmVzc307XG5cdFx0XHRcdFx0LS1saW1pdEdyYXluZXNzOiAke3BhbGV0dGUubWV0YWRhdGEuZmxhZ3MubGltaXRHcmF5bmVzc307XG5cdFx0XHRcdFx0LS1saW1pdExpZ2h0bmVzczogJHtwYWxldHRlLm1ldGFkYXRhLmZsYWdzLmxpbWl0TGlnaHRuZXNzfTtcblx0XHRcdFx0fWAudHJpbSgpO1xuXG5cdFx0XHQvLyAyLiBzZXJpYWxpemUgY3VzdG9tIGNvbG9yIGlmIHByZXNlbnRcblx0XHRcdGNvbnN0IGN1c3RvbUNvbG9yID0gcGFsZXR0ZS5tZXRhZGF0YS5jdXN0b21Db2xvclxuXHRcdFx0XHQ/IGBcblx0XHRcdFx0LyogT3B0aW9uYWwgQ3VzdG9tIENvbG9yICovXG5cdFx0XHRcdC5wYWxldHRlLWN1c3RvbSB7XG5cdFx0XHRcdFx0LS1jdXN0b20tY215ay1jb2xvcjogXCIke3BhbGV0dGUubWV0YWRhdGEuY3VzdG9tQ29sb3IuY29sb3JzLm1haW4uY215a31cIjtcblx0XHRcdFx0XHQtLWN1c3RvbS1oZXgtY29sb3I6IFwiJHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLmhleH1cIjtcblx0XHRcdFx0XHQtLWN1c3RvbS1oc2wtY29sb3I6IFwiJHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLmhzbH1cIjtcblx0XHRcdFx0XHQtLWN1c3RvbS1oc3YtY29sb3I6IFwiJHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLmhzdn1cIjtcblx0XHRcdFx0XHQtLWN1c3RvbS1sYWItY29sb3I6IFwiJHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLmxhYn1cIjtcblx0XHRcdFx0XHQtLWN1c3RvbS1yZ2ItY29sb3I6IFwiJHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLnJnYn1cIjtcblx0XHRcdFx0XHQtLWN1c3RvbS14eXotY29sb3I6IFwiJHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLnh5en1cIjtcblx0XHRcdFx0fWAudHJpbSgpXG5cdFx0XHRcdDogJyc7XG5cblx0XHRcdC8vIDMuIHNlcmlhbGl6ZSBwYWxldHRlIGl0ZW1zXG5cdFx0XHRjb25zdCBpdGVtcyA9IHBhbGV0dGUuaXRlbXNcblx0XHRcdFx0Lm1hcChpdGVtID0+IHtcblx0XHRcdFx0XHRjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBpdGVtLmNvbG9ycy5jc3MuaHNsO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGBcblx0XHRcdFx0XHQvKiBQYWxldHRlIEl0ZW0gKi9cblx0XHRcdFx0XHQuY29sb3Ige1xuXHRcdFx0XHRcdFx0LS1jbXlrLWNvbG9yOiBcIiR7aXRlbS5jb2xvcnMuY3NzLmNteWt9XCI7XG5cdFx0XHRcdFx0XHQtLWhleC1jb2xvcjogXCIke2l0ZW0uY29sb3JzLmNzcy5oZXh9XCI7XG5cdFx0XHRcdFx0XHQtLWhzbC1jb2xvcjogXCIke2l0ZW0uY29sb3JzLmNzcy5oc2x9XCI7XG5cdFx0XHRcdFx0XHQtLWhzdi1jb2xvcjogXCIke2l0ZW0uY29sb3JzLmNzcy5oc3Z9XCI7XG5cdFx0XHRcdFx0XHQtLWxhYi1jb2xvcjogXCIke2l0ZW0uY29sb3JzLmNzcy5sYWJ9XCI7XG5cdFx0XHRcdFx0XHQtLXJnYi1jb2xvcjogXCIke2l0ZW0uY29sb3JzLmNzcy5yZ2J9XCI7XG5cdFx0XHRcdFx0XHQtLXh5ei1jb2xvcjogXCIke2l0ZW0uY29sb3JzLmNzcy54eXp9XCI7XG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAke2JhY2tncm91bmRDb2xvcn07XG5cdFx0XHRcdFx0fWAudHJpbSgpO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuam9pbignXFxuXFxuJyk7XG5cblx0XHRcdC8vIDQuIGNvbWJpbmUgQ1NTIGRhdGFcblx0XHRcdGNvbnN0IGNzc0RhdGEgPSBbbWV0YWRhdGEsIGN1c3RvbUNvbG9yLCBpdGVtc11cblx0XHRcdFx0LmZpbHRlcihCb29sZWFuKVxuXHRcdFx0XHQuam9pbignXFxuXFxuJyk7XG5cblx0XHRcdC8vIDUuIHJlc29sdmUgc2VyaWFsaXplZCBDU1MgZGF0YVxuXHRcdFx0cmVzb2x2ZShjc3NEYXRhLnRyaW0oKSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGlmICghbW9kZS5xdWlldCAmJiBsb2dNb2RlLmVycm9yKSB7XG5cdFx0XHRcdGlmIChsb2dNb2RlLnZlcmJvc2l0eSA+IDEpIHtcblx0XHRcdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0XHRgRmFpbGVkIHRvIGNvbnZlcnQgcGFsZXR0ZSB0byBDU1M6ICR7ZXJyb3J9YCxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdCdGYWlsZWQgdG8gY29udmVydCBwYWxldHRlIHRvIENTUycsXG5cdFx0XHRcdFx0XHRgJHt0aGlzTW9kdWxlfSA+ICR7dGhpc01ldGhvZH1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobW9kZS5zdGFja1RyYWNlKSB7XG5cdFx0XHRcdGNvbnNvbGUudHJhY2UoJ1N0YWNrIFRyYWNlOicpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZWplY3QobmV3IEVycm9yKGBGYWlsZWQgdG8gY29udmVydCBwYWxldHRlIHRvIENTUzogJHtlcnJvcn1gKSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdG9KU09OKHBhbGV0dGU6IFBhbGV0dGUpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRjb25zdCB0aGlzTWV0aG9kID0gJ3RvSlNPTigpJztcblxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBqc29uRGF0YSA9IEpTT04uc3RyaW5naWZ5KHBhbGV0dGUsIG51bGwsIDIpO1xuXG5cdFx0XHRyZXNvbHZlKGpzb25EYXRhKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUuZXJyb3IpIHtcblx0XHRcdFx0aWYgKGxvZ01vZGUudmVyYm9zaXR5ID4gMSkge1xuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdGBGYWlsZWQgdG8gY29udmVydCBwYWxldHRlIHRvIEpTT046ICR7ZXJyb3J9YCxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdCdGYWlsZWQgdG8gY29udmVydCBwYWxldHRlIHRvIEpTT04nLFxuXHRcdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG1vZGUuc3RhY2tUcmFjZSkge1xuXHRcdFx0XHRjb25zb2xlLnRyYWNlKCdTdGFjayBUcmFjZTonKTtcblx0XHRcdH1cblxuXHRcdFx0cmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIGNvbnZlcnQgcGFsZXR0ZSB0byBKU09OOiAke2Vycm9yfWApKTtcblx0XHR9XG5cdH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiB0b1hNTChwYWxldHRlOiBQYWxldHRlKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0Y29uc3QgdGhpc01ldGhvZCA9ICd0b1hNTCgpJztcblxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyAxLiBzZXJpYWxpemUgcGFsZXR0ZSBtZXRhZGF0YVxuXHRcdFx0Y29uc3QgY3VzdG9tQ29sb3JYTUwgPSBwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yXG5cdFx0XHRcdD8gYFxuXHRcdFx0XHQ8Q3VzdG9tQ29sb3I+XG5cdFx0XHRcdFx0PENNWUs+JHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLmNteWt9PC9DTVlLPlxuXHRcdFx0XHRcdDxIZXg+JHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLmhleH08L0hleD5cblx0XHRcdFx0XHQ8SFNMPiR7cGFsZXR0ZS5tZXRhZGF0YS5jdXN0b21Db2xvci5jb2xvcnMubWFpbi5oc2x9PC9IU0w+XG5cdFx0XHRcdFx0PEhTVj4ke3BhbGV0dGUubWV0YWRhdGEuY3VzdG9tQ29sb3IuY29sb3JzLm1haW4uaHN2fTwvSFNWPlxuXHRcdFx0XHRcdDxMQUI+JHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yLmNvbG9ycy5tYWluLmxhYn08L0xBQj5cblx0XHRcdFx0XHQ8UkdCPiR7cGFsZXR0ZS5tZXRhZGF0YS5jdXN0b21Db2xvci5jb2xvcnMubWFpbi5yZ2J9PC9SR0I+XG5cdFx0XHRcdFx0PFhZWj4ke3BhbGV0dGUubWV0YWRhdGEuY3VzdG9tQ29sb3IuY29sb3JzLm1haW4ueHl6fTwvWFlaPlxuXHRcdFx0XHQ8L0N1c3RvbUNvbG9yPmAudHJpbSgpXG5cdFx0XHRcdDogJzxDdXN0b21Db2xvcj5mYWxzZTwvQ3VzdG9tQ29sb3I+JztcblxuXHRcdFx0Y29uc3QgbWV0YWRhdGEgPSBgXG5cdFx0XHRcdDxNZXRhZGF0YT5cblx0XHRcdFx0XHQ8TmFtZT4ke3BhbGV0dGUubWV0YWRhdGEubmFtZSA/PyAnVW5uYW1lZCBQYWxldHRlJ308L05hbWU+XG5cdFx0XHRcdFx0PFRpbWVzdGFtcD4ke3BhbGV0dGUubWV0YWRhdGEudGltZXN0YW1wfTwvVGltZXN0YW1wPlxuXHRcdFx0XHRcdDxTd2F0Y2hlcz4ke3BhbGV0dGUubWV0YWRhdGEuc3dhdGNoZXN9PC9Td2F0Y2hlcz5cblx0XHRcdFx0XHQ8VHlwZT4ke3BhbGV0dGUubWV0YWRhdGEudHlwZX08L1R5cGU+XG5cdFx0XHRcdFx0JHtjdXN0b21Db2xvclhNTH1cblx0XHRcdFx0XHQ8RmxhZ3M+XG5cdFx0XHRcdFx0XHQ8TGltaXREYXJrbmVzcz4ke3BhbGV0dGUubWV0YWRhdGEuZmxhZ3MubGltaXREYXJrbmVzc308L0xpbWl0RGFya25lc3M+XG5cdFx0XHRcdFx0XHQ8TGltaXRHcmF5bmVzcz4ke3BhbGV0dGUubWV0YWRhdGEuZmxhZ3MubGltaXRHcmF5bmVzc308L0xpbWl0R3JheW5lc3M+XG5cdFx0XHRcdFx0XHQ8TGltaXRMaWdodG5lc3M+JHtwYWxldHRlLm1ldGFkYXRhLmZsYWdzLmxpbWl0TGlnaHRuZXNzfTwvTGltaXRMaWdodG5lc3M+XG5cdFx0XHRcdFx0PC9GbGFncz5cblx0XHRcdFx0PC9NZXRhZGF0YT5gLnRyaW0oKTtcblxuXHRcdFx0Ly8gMi4gc2VyaWFsaXplIHBhbGV0dGUgaXRlbXNcblx0XHRcdGNvbnN0IHhtbEl0ZW1zID0gcGFsZXR0ZS5pdGVtc1xuXHRcdFx0XHQubWFwKChpdGVtLCBpbmRleCkgPT5cblx0XHRcdFx0XHRgXG5cdFx0XHRcdFx0PFBhbGV0dGVJdGVtIGlkPVwiJHtpbmRleCArIDF9XCI+XG5cdFx0XHRcdFx0XHQ8Q29sb3JzPlxuXHRcdFx0XHRcdFx0XHQ8TWFpbj5cblx0XHRcdFx0XHRcdFx0XHQ8Q01ZSz4ke2l0ZW0uY29sb3JzLm1haW4uY215a308L0NNWUs+XG5cdFx0XHRcdFx0XHRcdFx0PEhleD4ke2l0ZW0uY29sb3JzLm1haW4uaGV4fTwvSGV4PlxuXHRcdFx0XHRcdFx0XHRcdDxIU0w+JHtpdGVtLmNvbG9ycy5tYWluLmhzbH08L0hTTD5cblx0XHRcdFx0XHRcdFx0XHQ8SFNWPiR7aXRlbS5jb2xvcnMubWFpbi5oc3Z9PC9IU1Y+XG5cdFx0XHRcdFx0XHRcdFx0PExBQj4ke2l0ZW0uY29sb3JzLm1haW4ubGFifTwvTEFCPlxuXHRcdFx0XHRcdFx0XHRcdDxSR0I+JHtpdGVtLmNvbG9ycy5tYWluLnJnYn08L1JHQj5cblx0XHRcdFx0XHRcdFx0XHQ8WFlaPiR7aXRlbS5jb2xvcnMubWFpbi54eXp9PC9YWVo+XG5cdFx0XHRcdFx0XHRcdDwvTWFpbj5cblx0XHRcdFx0XHRcdFx0PENTUz5cblx0XHRcdFx0XHRcdFx0XHQ8Q01ZSz4ke2l0ZW0uY29sb3JzLmNzcy5jbXlrfTwvQ01ZSz5cblx0XHRcdFx0XHRcdFx0XHQ8SGV4PiR7aXRlbS5jb2xvcnMuY3NzLmhleH08L0hleD5cblx0XHRcdFx0XHRcdFx0XHQ8SFNMPiR7aXRlbS5jb2xvcnMuY3NzLmhzbH08L0hTTD5cblx0XHRcdFx0XHRcdFx0XHQ8SFNWPiR7aXRlbS5jb2xvcnMuY3NzLmhzdn08L0hTVj5cblx0XHRcdFx0XHRcdFx0XHQ8TEFCPiR7aXRlbS5jb2xvcnMuY3NzLmxhYn08L0xBQj5cblx0XHRcdFx0XHRcdFx0XHQ8UkdCPiR7aXRlbS5jb2xvcnMuY3NzLnJnYn08L1JHQj5cblx0XHRcdFx0XHRcdFx0XHQ8WFlaPiR7aXRlbS5jb2xvcnMuY3NzLnh5en08L1hZWj5cblx0XHRcdFx0XHRcdFx0PC9DU1M+XG5cdFx0XHRcdFx0XHQ8L0NvbG9ycz5cblx0XHRcdFx0XHQ8L1BhbGV0dGVJdGVtPmAudHJpbSgpXG5cdFx0XHRcdClcblx0XHRcdFx0LmpvaW4oJ1xcbicpO1xuXG5cdFx0XHQvLyAzLiBjb21iaW5lIG1ldGFkYXRhIGFuZCBpdGVtcyBpbnRvIHRoZSBwYWxldHRlIFhNTFxuXHRcdFx0Y29uc3QgeG1sRGF0YSA9IGBcblx0XHRcdFx0PFBhbGV0dGUgaWQ9JHtwYWxldHRlLmlkfT5cblx0XHRcdFx0XHQke21ldGFkYXRhfVxuXHRcdFx0XHRcdDxJdGVtcz5cblx0XHRcdFx0XHRcdCR7eG1sSXRlbXN9XG5cdFx0XHRcdFx0PC9JdGVtcz5cblx0XHRcdFx0PC9QYWxldHRlPmAudHJpbSgpO1xuXG5cdFx0XHRyZXNvbHZlKHhtbERhdGEudHJpbSgpKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUuZXJyb3IpIHtcblx0XHRcdFx0aWYgKGxvZ01vZGUudmVyYm9zaXR5ID4gMSkge1xuXHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdGBGYWlsZWQgdG8gY29udmVydCBwYWxldHRlIHRvIFhNTDogJHtlcnJvcn1gLFxuXHRcdFx0XHRcdFx0YCR7dGhpc01vZHVsZX0gPiAke3RoaXNNZXRob2R9YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRcdFx0J0ZhaWxlZCB0byBjb252ZXJ0IHBhbGV0dGUgdG8gWE1MJyxcblx0XHRcdFx0XHRcdGAke3RoaXNNb2R1bGV9ID4gJHt0aGlzTWV0aG9kfWBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtb2RlLnN0YWNrVHJhY2UpIHtcblx0XHRcdFx0Y29uc29sZS50cmFjZSgnU3RhY2sgVHJhY2U6Jyk7XG5cdFx0XHR9XG5cblx0XHRcdHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byBjb252ZXJ0IHBhbGV0dGUgdG8gWE1MOiAke2Vycm9yfWApKTtcblx0XHR9XG5cdH0pO1xufVxuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplOiBJT0ZuX01hc3RlckludGVyZmFjZVsnc2VyaWFsaXplJ10gPSB7XG5cdHRvQ1NTLFxuXHR0b0pTT04sXG5cdHRvWE1MXG59O1xuIl19