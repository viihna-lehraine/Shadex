// File: src/io/base.ts
import { deserialize } from './deserialize.js';
import { dom } from '../dom/index.js';
import { serialize } from './serialize.js';
// *DEV-NOTE* improve error handling and logging throughout
export const file = {
    async importFromFile(file) {
        return file.text().then(importPalette);
    },
    async exportToFile(palette, format) {
        const data = await exportPalette(palette, format);
        const mimeType = {
            css: 'text/css',
            json: 'application/json',
            xml: 'application/xml'
        }[format];
        dom.fileUtils.download(data, `palette_${palette.id}.${format}`, mimeType);
    }
};
function detectFileType(data) {
    if (data.trim().startsWith('{'))
        return 'json';
    if (data.trim().startsWith('<'))
        return 'xml';
    return 'css';
}
export async function exportPalette(palette, format) {
    switch (format) {
        case 'css':
            const cssData = await serialize.toCSS(palette);
            return cssData;
        case 'json':
            const jsonData = await serialize.toJSON(palette);
            return jsonData;
        case 'xml':
            const xmlData = await serialize.toXML(palette);
            return xmlData;
        default:
            throw new Error('Unsupported export format');
    }
}
export async function importPalette(data) {
    const fileType = detectFileType(data);
    switch (fileType) {
        case 'css':
            const cssPalette = await deserialize.fromCSS(data);
            if (!cssPalette)
                throw new Error('Invalid CSS');
            return cssPalette;
        case 'json':
            const jsonPalette = await deserialize.fromJSON(data);
            if (!jsonPalette)
                throw new Error('Invalid JSON');
            return jsonPalette;
        case 'xml':
            const xmlPalette = await deserialize.fromXML(data);
            if (!xmlPalette)
                throw new Error('Invalid XML');
            return xmlPalette;
        default:
            throw new Error('Unsupported file format');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pby9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QjtBQUd2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQywyREFBMkQ7QUFFM0QsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHO0lBQ25CLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBVTtRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNELEtBQUssQ0FBQyxZQUFZLENBQ2pCLE9BQWdCLEVBQ2hCLE1BQThCO1FBRTlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsRCxNQUFNLFFBQVEsR0FBRztZQUNoQixHQUFHLEVBQUUsVUFBVTtZQUNmLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsR0FBRyxFQUFFLGlCQUFpQjtTQUN0QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRVYsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQ3JCLElBQUksRUFDSixXQUFXLE9BQU8sQ0FBQyxFQUFFLElBQUksTUFBTSxFQUFFLEVBQ2pDLFFBQVEsQ0FDUixDQUFDO0lBQ0gsQ0FBQztDQUNELENBQUM7QUFFRixTQUFTLGNBQWMsQ0FBQyxJQUFZO0lBQ25DLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFBRSxPQUFPLE1BQU0sQ0FBQztJQUMvQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFOUMsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxhQUFhLENBQ2xDLE9BQWdCLEVBQ2hCLE1BQThCO0lBRTlCLFFBQVEsTUFBTSxFQUFFLENBQUM7UUFDaEIsS0FBSyxLQUFLO1lBQ1QsTUFBTSxPQUFPLEdBQUcsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRS9DLE9BQU8sT0FBTyxDQUFDO1FBQ2hCLEtBQUssTUFBTTtZQUNWLE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVqRCxPQUFPLFFBQVEsQ0FBQztRQUNqQixLQUFLLEtBQUs7WUFDVCxNQUFNLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFL0MsT0FBTyxPQUFPLENBQUM7UUFDaEI7WUFDQyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDL0MsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxJQUFZO0lBQy9DLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV0QyxRQUFRLFFBQVEsRUFBRSxDQUFDO1FBQ2xCLEtBQUssS0FBSztZQUNULE1BQU0sVUFBVSxHQUFHLE1BQU0sV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVuRCxJQUFJLENBQUMsVUFBVTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRWhELE9BQU8sVUFBVSxDQUFDO1FBQ25CLEtBQUssTUFBTTtZQUNWLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVyRCxJQUFJLENBQUMsV0FBVztnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRWxELE9BQU8sV0FBVyxDQUFDO1FBQ3BCLEtBQUssS0FBSztZQUNULE1BQU0sVUFBVSxHQUFHLE1BQU0sV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVuRCxJQUFJLENBQUMsVUFBVTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRWhELE9BQU8sVUFBVSxDQUFDO1FBQ25CO1lBQ0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2lvL2Jhc2UudHNcblxuaW1wb3J0IHsgUGFsZXR0ZSB9IGZyb20gJy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGRlc2VyaWFsaXplIH0gZnJvbSAnLi9kZXNlcmlhbGl6ZS5qcyc7XG5pbXBvcnQgeyBkb20gfSBmcm9tICcuLi9kb20vaW5kZXguanMnO1xuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSAnLi9zZXJpYWxpemUuanMnO1xuXG4vLyAqREVWLU5PVEUqIGltcHJvdmUgZXJyb3IgaGFuZGxpbmcgYW5kIGxvZ2dpbmcgdGhyb3VnaG91dFxuXG5leHBvcnQgY29uc3QgZmlsZSA9IHtcblx0YXN5bmMgaW1wb3J0RnJvbUZpbGUoZmlsZTogRmlsZSk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRcdHJldHVybiBmaWxlLnRleHQoKS50aGVuKGltcG9ydFBhbGV0dGUpO1xuXHR9LFxuXHRhc3luYyBleHBvcnRUb0ZpbGUoXG5cdFx0cGFsZXR0ZTogUGFsZXR0ZSxcblx0XHRmb3JtYXQ6ICdjc3MnIHwgJ2pzb24nIHwgJ3htbCdcblx0KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IGV4cG9ydFBhbGV0dGUocGFsZXR0ZSwgZm9ybWF0KTtcblx0XHRjb25zdCBtaW1lVHlwZSA9IHtcblx0XHRcdGNzczogJ3RleHQvY3NzJyxcblx0XHRcdGpzb246ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0XHRcdHhtbDogJ2FwcGxpY2F0aW9uL3htbCdcblx0XHR9W2Zvcm1hdF07XG5cblx0XHRkb20uZmlsZVV0aWxzLmRvd25sb2FkKFxuXHRcdFx0ZGF0YSxcblx0XHRcdGBwYWxldHRlXyR7cGFsZXR0ZS5pZH0uJHtmb3JtYXR9YCxcblx0XHRcdG1pbWVUeXBlXG5cdFx0KTtcblx0fVxufTtcblxuZnVuY3Rpb24gZGV0ZWN0RmlsZVR5cGUoZGF0YTogc3RyaW5nKTogJ2NzcycgfCAnanNvbicgfCAneG1sJyB7XG5cdGlmIChkYXRhLnRyaW0oKS5zdGFydHNXaXRoKCd7JykpIHJldHVybiAnanNvbic7XG5cdGlmIChkYXRhLnRyaW0oKS5zdGFydHNXaXRoKCc8JykpIHJldHVybiAneG1sJztcblxuXHRyZXR1cm4gJ2Nzcyc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleHBvcnRQYWxldHRlKFxuXHRwYWxldHRlOiBQYWxldHRlLFxuXHRmb3JtYXQ6ICdjc3MnIHwgJ2pzb24nIHwgJ3htbCdcbik6IFByb21pc2U8c3RyaW5nPiB7XG5cdHN3aXRjaCAoZm9ybWF0KSB7XG5cdFx0Y2FzZSAnY3NzJzpcblx0XHRcdGNvbnN0IGNzc0RhdGEgPSBhd2FpdCBzZXJpYWxpemUudG9DU1MocGFsZXR0ZSk7XG5cblx0XHRcdHJldHVybiBjc3NEYXRhO1xuXHRcdGNhc2UgJ2pzb24nOlxuXHRcdFx0Y29uc3QganNvbkRhdGEgPSBhd2FpdCBzZXJpYWxpemUudG9KU09OKHBhbGV0dGUpO1xuXG5cdFx0XHRyZXR1cm4ganNvbkRhdGE7XG5cdFx0Y2FzZSAneG1sJzpcblx0XHRcdGNvbnN0IHhtbERhdGEgPSBhd2FpdCBzZXJpYWxpemUudG9YTUwocGFsZXR0ZSk7XG5cblx0XHRcdHJldHVybiB4bWxEYXRhO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGV4cG9ydCBmb3JtYXQnKTtcblx0fVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1wb3J0UGFsZXR0ZShkYXRhOiBzdHJpbmcpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgZmlsZVR5cGUgPSBkZXRlY3RGaWxlVHlwZShkYXRhKTtcblxuXHRzd2l0Y2ggKGZpbGVUeXBlKSB7XG5cdFx0Y2FzZSAnY3NzJzpcblx0XHRcdGNvbnN0IGNzc1BhbGV0dGUgPSBhd2FpdCBkZXNlcmlhbGl6ZS5mcm9tQ1NTKGRhdGEpO1xuXG5cdFx0XHRpZiAoIWNzc1BhbGV0dGUpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBDU1MnKTtcblxuXHRcdFx0cmV0dXJuIGNzc1BhbGV0dGU7XG5cdFx0Y2FzZSAnanNvbic6XG5cdFx0XHRjb25zdCBqc29uUGFsZXR0ZSA9IGF3YWl0IGRlc2VyaWFsaXplLmZyb21KU09OKGRhdGEpO1xuXG5cdFx0XHRpZiAoIWpzb25QYWxldHRlKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSlNPTicpO1xuXG5cdFx0XHRyZXR1cm4ganNvblBhbGV0dGU7XG5cdFx0Y2FzZSAneG1sJzpcblx0XHRcdGNvbnN0IHhtbFBhbGV0dGUgPSBhd2FpdCBkZXNlcmlhbGl6ZS5mcm9tWE1MKGRhdGEpO1xuXG5cdFx0XHRpZiAoIXhtbFBhbGV0dGUpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBYTUwnKTtcblxuXHRcdFx0cmV0dXJuIHhtbFBhbGV0dGU7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZmlsZSBmb3JtYXQnKTtcblx0fVxufVxuIl19