// File: src/io/parse/json.ts
import { data } from '../../data/index.js';
import { log as logger } from '../../classes/logger/factory.js';
const logMode = data.mode.logging;
const mode = data.mode;
function file(jsonData) {
    try {
        const parsed = JSON.parse(jsonData);
        // Validate that the parsed object matches the expected structure
        if (!parsed.items || !Array.isArray(parsed.items)) {
            throw new Error('Invalid JSON structure for Palette');
        }
        return Promise.resolve(parsed);
    }
    catch (error) {
        if (!mode.quiet && logMode.errors && logMode.verbosity > 1) {
            logger.error(`Error parsing JSON file: ${error}`);
            if (mode.showAlerts)
                alert(`Error parsing JSON file. See console for details.`);
        }
        return Promise.resolve(null);
    }
}
export const json = {
    file
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pby9wYXJzZS9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQUc3QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFFLEdBQUcsSUFBSSxNQUFNLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVoRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBRXZCLFNBQVMsSUFBSSxDQUFDLFFBQWdCO0lBQzdCLElBQUksQ0FBQztRQUNKLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEMsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNuRCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFpQixDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzVELE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEtBQUssRUFBRSxDQUFDLENBQUM7WUFFbEQsSUFBSSxJQUFJLENBQUMsVUFBVTtnQkFDbEIsS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRztJQUNuQixJQUFJO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9pby9wYXJzZS9qc29uLnRzXG5cbmltcG9ydCB7IFBhbGV0dGUgfSBmcm9tICcuLi8uLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBsb2cgYXMgbG9nZ2VyIH0gZnJvbSAnLi4vLi4vY2xhc3Nlcy9sb2dnZXIvZmFjdG9yeS5qcyc7XG5cbmNvbnN0IGxvZ01vZGUgPSBkYXRhLm1vZGUubG9nZ2luZztcbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5cbmZ1bmN0aW9uIGZpbGUoanNvbkRhdGE6IHN0cmluZyk6IFByb21pc2U8UGFsZXR0ZSB8IG51bGw+IHtcblx0dHJ5IHtcblx0XHRjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGpzb25EYXRhKTtcblxuXHRcdC8vIFZhbGlkYXRlIHRoYXQgdGhlIHBhcnNlZCBvYmplY3QgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQgc3RydWN0dXJlXG5cdFx0aWYgKCFwYXJzZWQuaXRlbXMgfHwgIUFycmF5LmlzQXJyYXkocGFyc2VkLml0ZW1zKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEpTT04gc3RydWN0dXJlIGZvciBQYWxldHRlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShwYXJzZWQgYXMgUGFsZXR0ZSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUuZXJyb3JzICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMSkge1xuXHRcdFx0bG9nZ2VyLmVycm9yKGBFcnJvciBwYXJzaW5nIEpTT04gZmlsZTogJHtlcnJvcn1gKTtcblxuXHRcdFx0aWYgKG1vZGUuc2hvd0FsZXJ0cylcblx0XHRcdFx0YWxlcnQoYEVycm9yIHBhcnNpbmcgSlNPTiBmaWxlLiBTZWUgY29uc29sZSBmb3IgZGV0YWlscy5gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBqc29uID0ge1xuXHRmaWxlXG59O1xuIl19