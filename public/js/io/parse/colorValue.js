// File: src/io/parse/colorValue.ts
import { asColorString } from './color.js';
function asCMYKValue(colorString) {
    const parsed = asColorString('cmyk', colorString);
    if (parsed && parsed.format === 'cmyk') {
        return parsed.value;
    }
    throw new Error(`Invalid CMYK color string: ${colorString}`);
}
function asHexValue(colorValue) {
    const parsed = asColorString('hex', colorValue);
    if (parsed && parsed.format === 'hex') {
        return parsed.value;
    }
    throw new Error(`Invalid Hex color value: ${colorValue}`);
}
function asHSLValue(colorValue) {
    const parsed = asColorString('hsl', colorValue);
    if (parsed && parsed.format === 'hsl') {
        return parsed.value;
    }
    throw new Error(`Invalid HSL color value: ${colorValue}`);
}
function asHSVValue(colorValue) {
    const parsed = asColorString('hsv', colorValue);
    if (parsed && parsed.format === 'hsv') {
        return parsed.value;
    }
    throw new Error(`Invalid HSV color value: ${colorValue}`);
}
function asLABValue(colorValue) {
    const parsed = asColorString('lab', colorValue);
    if (parsed && parsed.format === 'lab') {
        return parsed.value;
    }
    throw new Error(`Invalid LAB color value: ${colorValue}`);
}
function asRGBValue(colorValue) {
    const parsed = asColorString('rgb', colorValue);
    if (parsed && parsed.format === 'rgb') {
        return parsed.value;
    }
    throw new Error(`Invalid RGB color value: ${colorValue}`);
}
function asXYZValue(colorValue) {
    const parsed = asColorString('xyz', colorValue);
    if (parsed && parsed.format === 'xyz') {
        return parsed.value;
    }
    throw new Error(`Invalid XYZ color value: ${colorValue}`);
}
export const asColorValue = {
    cmyk: asCMYKValue,
    hex: asHexValue,
    hsl: asHSLValue,
    hsv: asHSVValue,
    lab: asLABValue,
    rgb: asRGBValue,
    xyz: asXYZValue
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pby9wYXJzZS9jb2xvclZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQVduQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTNDLFNBQVMsV0FBVyxDQUFDLFdBQW1CO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUN4QyxPQUFPLE1BQU0sQ0FBQyxLQUFrQixDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxVQUFrQjtJQUNyQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUMsS0FBaUIsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsVUFBa0I7SUFDckMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEtBQWlCLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQyxLQUFpQixDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxVQUFrQjtJQUNyQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUMsS0FBaUIsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsVUFBa0I7SUFDckMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEtBQWlCLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQyxLQUFpQixDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFDM0IsSUFBSSxFQUFFLFdBQVc7SUFDakIsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0NBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9pby9wYXJzZS9jb2xvclZhbHVlLnRzXG5cbmltcG9ydCB7XG5cdENNWUtWYWx1ZSxcblx0SGV4VmFsdWUsXG5cdEhTTFZhbHVlLFxuXHRIU1ZWYWx1ZSxcblx0TEFCVmFsdWUsXG5cdFJHQlZhbHVlLFxuXHRYWVpWYWx1ZVxufSBmcm9tICcuLi8uLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBhc0NvbG9yU3RyaW5nIH0gZnJvbSAnLi9jb2xvci5qcyc7XG5cbmZ1bmN0aW9uIGFzQ01ZS1ZhbHVlKGNvbG9yU3RyaW5nOiBzdHJpbmcpOiBDTVlLVmFsdWUge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCdjbXlrJywgY29sb3JTdHJpbmcpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ2NteWsnKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBDTVlLVmFsdWU7XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQ01ZSyBjb2xvciBzdHJpbmc6ICR7Y29sb3JTdHJpbmd9YCk7XG59XG5cbmZ1bmN0aW9uIGFzSGV4VmFsdWUoY29sb3JWYWx1ZTogc3RyaW5nKTogSGV4VmFsdWUge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCdoZXgnLCBjb2xvclZhbHVlKTtcblxuXHRpZiAocGFyc2VkICYmIHBhcnNlZC5mb3JtYXQgPT09ICdoZXgnKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBIZXhWYWx1ZTtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBIZXggY29sb3IgdmFsdWU6ICR7Y29sb3JWYWx1ZX1gKTtcbn1cblxuZnVuY3Rpb24gYXNIU0xWYWx1ZShjb2xvclZhbHVlOiBzdHJpbmcpOiBIU0xWYWx1ZSB7XG5cdGNvbnN0IHBhcnNlZCA9IGFzQ29sb3JTdHJpbmcoJ2hzbCcsIGNvbG9yVmFsdWUpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ2hzbCcpIHtcblx0XHRyZXR1cm4gcGFyc2VkLnZhbHVlIGFzIEhTTFZhbHVlO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEhTTCBjb2xvciB2YWx1ZTogJHtjb2xvclZhbHVlfWApO1xufVxuXG5mdW5jdGlvbiBhc0hTVlZhbHVlKGNvbG9yVmFsdWU6IHN0cmluZyk6IEhTVlZhbHVlIHtcblx0Y29uc3QgcGFyc2VkID0gYXNDb2xvclN0cmluZygnaHN2JywgY29sb3JWYWx1ZSk7XG5cblx0aWYgKHBhcnNlZCAmJiBwYXJzZWQuZm9ybWF0ID09PSAnaHN2Jykge1xuXHRcdHJldHVybiBwYXJzZWQudmFsdWUgYXMgSFNWVmFsdWU7XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSFNWIGNvbG9yIHZhbHVlOiAke2NvbG9yVmFsdWV9YCk7XG59XG5cbmZ1bmN0aW9uIGFzTEFCVmFsdWUoY29sb3JWYWx1ZTogc3RyaW5nKTogTEFCVmFsdWUge1xuXHRjb25zdCBwYXJzZWQgPSBhc0NvbG9yU3RyaW5nKCdsYWInLCBjb2xvclZhbHVlKTtcblxuXHRpZiAocGFyc2VkICYmIHBhcnNlZC5mb3JtYXQgPT09ICdsYWInKSB7XG5cdFx0cmV0dXJuIHBhcnNlZC52YWx1ZSBhcyBMQUJWYWx1ZTtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBMQUIgY29sb3IgdmFsdWU6ICR7Y29sb3JWYWx1ZX1gKTtcbn1cblxuZnVuY3Rpb24gYXNSR0JWYWx1ZShjb2xvclZhbHVlOiBzdHJpbmcpOiBSR0JWYWx1ZSB7XG5cdGNvbnN0IHBhcnNlZCA9IGFzQ29sb3JTdHJpbmcoJ3JnYicsIGNvbG9yVmFsdWUpO1xuXG5cdGlmIChwYXJzZWQgJiYgcGFyc2VkLmZvcm1hdCA9PT0gJ3JnYicpIHtcblx0XHRyZXR1cm4gcGFyc2VkLnZhbHVlIGFzIFJHQlZhbHVlO1xuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFJHQiBjb2xvciB2YWx1ZTogJHtjb2xvclZhbHVlfWApO1xufVxuXG5mdW5jdGlvbiBhc1hZWlZhbHVlKGNvbG9yVmFsdWU6IHN0cmluZyk6IFhZWlZhbHVlIHtcblx0Y29uc3QgcGFyc2VkID0gYXNDb2xvclN0cmluZygneHl6JywgY29sb3JWYWx1ZSk7XG5cblx0aWYgKHBhcnNlZCAmJiBwYXJzZWQuZm9ybWF0ID09PSAneHl6Jykge1xuXHRcdHJldHVybiBwYXJzZWQudmFsdWUgYXMgWFlaVmFsdWU7XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgWFlaIGNvbG9yIHZhbHVlOiAke2NvbG9yVmFsdWV9YCk7XG59XG5cbmV4cG9ydCBjb25zdCBhc0NvbG9yVmFsdWUgPSB7XG5cdGNteWs6IGFzQ01ZS1ZhbHVlLFxuXHRoZXg6IGFzSGV4VmFsdWUsXG5cdGhzbDogYXNIU0xWYWx1ZSxcblx0aHN2OiBhc0hTVlZhbHVlLFxuXHRsYWI6IGFzTEFCVmFsdWUsXG5cdHJnYjogYXNSR0JWYWx1ZSxcblx0eHl6OiBhc1hZWlZhbHVlXG59O1xuIl19