// File: src/io/parse/base.ts
import { common } from '../../common/index.js';
import { data } from '../../data/index.js';
import { logger } from '../../logger/index.js';
const brand = common.core.brand;
const logMode = data.mode.logging;
const mode = data.mode;
const regex = {
    cmyk: data.config.regex.colors.cmyk,
    hex: data.config.regex.colors.hex,
    hsl: data.config.regex.colors.hsl,
    hsv: data.config.regex.colors.hsv,
    lab: data.config.regex.colors.lab,
    rgb: data.config.regex.colors.rgb,
    xyz: data.config.regex.colors.xyz
};
function parseCMYKColorValue(rawCMYK) {
    if (!rawCMYK) {
        if (!mode.quiet && logMode.warnings && logMode.verbosity >= 2) {
            logger.warning('A CMYK element could not be found while parsing palette file. Injecting default values.');
        }
        else {
            logger.debug('Missing CMYK element in palette file.');
        }
        if (mode.stackTrace)
            console.trace('Stack Trace:');
        return {
            cyan: brand.asPercentile(0),
            magenta: brand.asPercentile(0),
            yellow: brand.asPercentile(0),
            key: brand.asPercentile(0),
            alpha: brand.asAlphaRange(1)
        };
    }
    const match = rawCMYK.match(regex.cmyk);
    return match
        ? {
            cyan: brand.asPercentile(parseFloat(match[1])),
            magenta: brand.asPercentile(parseFloat(match[2])),
            yellow: brand.asPercentile(parseFloat(match[3])),
            key: brand.asPercentile(parseFloat(match[4])),
            alpha: brand.asAlphaRange(parseFloat(match[5] ?? '1'))
        }
        : {
            cyan: brand.asPercentile(0),
            magenta: brand.asPercentile(0),
            yellow: brand.asPercentile(0),
            key: brand.asPercentile(0),
            alpha: brand.asAlphaRange(1)
        };
}
function parseHexColorValue(rawHex) {
    if (!rawHex) {
        if (!mode.quiet && logMode.warnings && logMode.verbosity >= 2) {
            logger.warning('A Hex element could not be found while parsing palette file. Injecting default values.');
        }
        else {
            logger.debug('Missing Hex element in palette file.');
        }
        if (mode.stackTrace)
            console.trace('Stack Trace:');
        return {
            hex: brand.asHexSet('#000000'),
            alpha: brand.asHexComponent('FF'),
            numAlpha: brand.asAlphaRange(1)
        };
    }
    const match = rawHex.match(regex.hex);
    return match
        ? {
            hex: brand.asHexSet(`#${match[1]}`),
            alpha: brand.asHexComponent(match[2] || 'FF'),
            numAlpha: brand.asAlphaRange(parseInt(match[2] || 'FF', 16) / 255)
        }
        : {
            hex: brand.asHexSet('#000000'),
            alpha: brand.asHexComponent('FF'),
            numAlpha: brand.asAlphaRange(1)
        };
}
function parseHSLColorValue(rawHSL) {
    if (!rawHSL) {
        if (!mode.quiet && logMode.warnings && logMode.verbosity >= 2) {
            logger.warning('An HSL element could not be found while parsing palette file. Injecting default values.');
        }
        else {
            logger.debug('Missing HSL element in palette file.');
        }
        if (mode.stackTrace)
            console.trace('Stack Trace:');
        return {
            hue: brand.asRadial(0),
            saturation: brand.asPercentile(0),
            lightness: brand.asPercentile(0),
            alpha: brand.asAlphaRange(1)
        };
    }
    const match = rawHSL.match(regex.hsl);
    return match
        ? {
            hue: brand.asRadial(parseFloat(match[1])),
            saturation: brand.asPercentile(parseFloat(match[2])),
            lightness: brand.asPercentile(parseFloat(match[3])),
            alpha: brand.asAlphaRange(parseFloat(match[4] ?? '1'))
        }
        : {
            hue: brand.asRadial(0),
            saturation: brand.asPercentile(0),
            lightness: brand.asPercentile(0),
            alpha: brand.asAlphaRange(1)
        };
}
function parseHSVColorValue(rawHSV) {
    if (!rawHSV) {
        if (!mode.quiet && logMode.warnings && logMode.verbosity >= 2) {
            logger.warning('An HSV element could not be found while parsing palette file. Injecting default values.');
        }
        else {
            logger.debug('Missing HSV element in palette file.');
        }
        if (mode.stackTrace)
            console.trace('Stack Trace:');
        return {
            hue: brand.asRadial(0),
            saturation: brand.asPercentile(0),
            value: brand.asPercentile(0),
            alpha: brand.asAlphaRange(1)
        };
    }
    const match = rawHSV.match(regex.hsv);
    return match
        ? {
            hue: brand.asRadial(parseFloat(match[1])),
            saturation: brand.asPercentile(parseFloat(match[2])),
            value: brand.asPercentile(parseFloat(match[3])),
            alpha: brand.asAlphaRange(parseFloat(match[4] ?? '1'))
        }
        : {
            hue: brand.asRadial(0),
            saturation: brand.asPercentile(0),
            value: brand.asPercentile(0),
            alpha: brand.asAlphaRange(1)
        };
}
function parseLABColorValue(rawLAB) {
    if (!rawLAB) {
        if (!mode.quiet && logMode.warnings && logMode.verbosity >= 2) {
            logger.warning('A LAB element could not be found while parsing palette file. Injecting default values.');
        }
        else {
            logger.debug('Missing LAB element in palette file.');
        }
        if (mode.stackTrace)
            console.trace('Stack Trace:');
        return {
            l: brand.asLAB_L(0),
            a: brand.asLAB_A(0),
            b: brand.asLAB_B(0),
            alpha: brand.asAlphaRange(1)
        };
    }
    const match = rawLAB.match(regex.lab);
    return match
        ? {
            l: brand.asLAB_L(parseFloat(match[1])),
            a: brand.asLAB_A(parseFloat(match[2])),
            b: brand.asLAB_B(parseFloat(match[3])),
            alpha: brand.asAlphaRange(parseFloat(match[4] ?? '1'))
        }
        : {
            l: brand.asLAB_L(0),
            a: brand.asLAB_A(0),
            b: brand.asLAB_B(0),
            alpha: brand.asAlphaRange(1)
        };
}
function parseRGBColorValue(rawRGB) {
    if (!rawRGB) {
        if (!mode.quiet && logMode.warnings && logMode.verbosity >= 2) {
            logger.warning('An RGB element could not be found while parsing palette file. Injecting default values.');
        }
        else {
            logger.debug('Missing RGB element in palette file.');
        }
        if (mode.stackTrace)
            console.trace('Stack Trace:');
        return {
            red: brand.asByteRange(0),
            green: brand.asByteRange(0),
            blue: brand.asByteRange(0),
            alpha: brand.asAlphaRange(1)
        };
    }
    const match = rawRGB.match(regex.rgb);
    return match
        ? {
            red: brand.asByteRange(parseFloat(match[1])),
            green: brand.asByteRange(parseFloat(match[2])),
            blue: brand.asByteRange(parseFloat(match[3])),
            alpha: brand.asAlphaRange(parseFloat(match[4] ?? '1'))
        }
        : {
            red: brand.asByteRange(0),
            green: brand.asByteRange(0),
            blue: brand.asByteRange(0),
            alpha: brand.asAlphaRange(1)
        };
}
function parseXYZColorValue(rawXYZ) {
    if (!rawXYZ) {
        if (!mode.quiet && logMode.warnings && logMode.verbosity >= 2) {
            logger.warning('An XYZ element could not be found while parsing palette file. Injecting default values.');
        }
        else {
            logger.debug('Missing XYZ element in palette file.');
        }
        if (mode.stackTrace)
            console.trace('Stack Trace:');
        return {
            x: brand.asXYZ_X(0),
            y: brand.asXYZ_Y(0),
            z: brand.asXYZ_Z(0),
            alpha: brand.asAlphaRange(1)
        };
    }
    const match = rawXYZ.match(regex.xyz);
    return match
        ? {
            x: brand.asXYZ_X(parseFloat(match[1])),
            y: brand.asXYZ_Y(parseFloat(match[2])),
            z: brand.asXYZ_Z(parseFloat(match[3])),
            alpha: brand.asAlphaRange(parseFloat(match[4] ?? '1'))
        }
        : {
            x: brand.asXYZ_X(0),
            y: brand.asXYZ_Y(0),
            z: brand.asXYZ_Z(0),
            alpha: brand.asAlphaRange(1)
        };
}
export const color = {
    cmyk: parseCMYKColorValue,
    hex: parseHexColorValue,
    hsl: parseHSLColorValue,
    hsv: parseHSVColorValue,
    lab: parseLABColorValue,
    rgb: parseRGBColorValue,
    xyz: parseXYZColorValue
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pby9wYXJzZS9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQVk3QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3ZCLE1BQU0sS0FBSyxHQUFHO0lBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJO0lBQ25DLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRztJQUNqQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUc7SUFDakMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHO0lBQ2pDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRztJQUNqQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUc7SUFDakMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHO0NBQ2pDLENBQUM7QUFFRixTQUFTLG1CQUFtQixDQUFDLE9BQXNCO0lBQ2xELElBQUksQ0FB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LENBQUMsQ0FBQyxDQUFDO1lBQ25CLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNuQixLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDNUIsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQW1DO0lBQ3BELElBQUksRUFBRSxtQkFBbUI7SUFDekIsR0FBRyxFQUFFLGtCQUFrQjtJQUN2QixHQUFHLEVBQUUsa0JBQWtCO0lBQ3ZCLEdBQUcsRUFBRSxrQkFBa0I7SUFDdkIsR0FBRyxFQUFFLGtCQUFrQjtJQUN2QixHQUFHLEVBQUUsa0JBQWtCO0lBQ3ZCLEdBQUcsRUFBRSxrQkFBa0I7Q0FDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9pby9wYXJzZS9iYXNlLnRzXG5cbmltcG9ydCB7XG5cdENNWUtWYWx1ZSxcblx0SGV4VmFsdWUsXG5cdEhTTFZhbHVlLFxuXHRIU1ZWYWx1ZSxcblx0SU9fSW50ZXJmYWNlLFxuXHRMQUJWYWx1ZSxcblx0UkdCVmFsdWUsXG5cdFhZWlZhbHVlXG59IGZyb20gJy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvbW1vbiB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvaW5kZXguanMnO1xuXG5jb25zdCBicmFuZCA9IGNvbW1vbi5jb3JlLmJyYW5kO1xuY29uc3QgbG9nTW9kZSA9IGRhdGEubW9kZS5sb2dnaW5nO1xuY29uc3QgbW9kZSA9IGRhdGEubW9kZTtcbmNvbnN0IHJlZ2V4ID0ge1xuXHRjbXlrOiBkYXRhLmNvbmZpZy5yZWdleC5jb2xvcnMuY215ayxcblx0aGV4OiBkYXRhLmNvbmZpZy5yZWdleC5jb2xvcnMuaGV4LFxuXHRoc2w6IGRhdGEuY29uZmlnLnJlZ2V4LmNvbG9ycy5oc2wsXG5cdGhzdjogZGF0YS5jb25maWcucmVnZXguY29sb3JzLmhzdixcblx0bGFiOiBkYXRhLmNvbmZpZy5yZWdleC5jb2xvcnMubGFiLFxuXHRyZ2I6IGRhdGEuY29uZmlnLnJlZ2V4LmNvbG9ycy5yZ2IsXG5cdHh5ejogZGF0YS5jb25maWcucmVnZXguY29sb3JzLnh5elxufTtcblxuZnVuY3Rpb24gcGFyc2VDTVlLQ29sb3JWYWx1ZShyYXdDTVlLOiBzdHJpbmcgfCBudWxsKTogQ01ZS1ZhbHVlIHtcblx0aWYgKCFyYXdDTVlLKSB7XG5cdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUud2FybmluZ3MgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gMikge1xuXHRcdFx0bG9nZ2VyLndhcm5pbmcoXG5cdFx0XHRcdCdBIENNWUsgZWxlbWVudCBjb3VsZCBub3QgYmUgZm91bmQgd2hpbGUgcGFyc2luZyBwYWxldHRlIGZpbGUuIEluamVjdGluZyBkZWZhdWx0IHZhbHVlcy4nXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2dnZXIuZGVidWcoJ01pc3NpbmcgQ01ZSyBlbGVtZW50IGluIHBhbGV0dGUgZmlsZS4nKTtcblx0XHR9XG5cblx0XHRpZiAobW9kZS5zdGFja1RyYWNlKSBjb25zb2xlLnRyYWNlKCdTdGFjayBUcmFjZTonKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRjeWFuOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHRtYWdlbnRhOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHR5ZWxsb3c6IGJyYW5kLmFzUGVyY2VudGlsZSgwKSxcblx0XHRcdGtleTogYnJhbmQuYXNQZXJjZW50aWxlKDApLFxuXHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdH07XG5cdH1cblxuXHRjb25zdCBtYXRjaCA9IHJhd0NNWUsubWF0Y2gocmVnZXguY215ayk7XG5cblx0cmV0dXJuIG1hdGNoXG5cdFx0PyB7XG5cdFx0XHRcdGN5YW46IGJyYW5kLmFzUGVyY2VudGlsZShwYXJzZUZsb2F0KG1hdGNoWzFdKSksXG5cdFx0XHRcdG1hZ2VudGE6IGJyYW5kLmFzUGVyY2VudGlsZShwYXJzZUZsb2F0KG1hdGNoWzJdKSksXG5cdFx0XHRcdHllbGxvdzogYnJhbmQuYXNQZXJjZW50aWxlKHBhcnNlRmxvYXQobWF0Y2hbM10pKSxcblx0XHRcdFx0a2V5OiBicmFuZC5hc1BlcmNlbnRpbGUocGFyc2VGbG9hdChtYXRjaFs0XSkpLFxuXHRcdFx0XHRhbHBoYTogYnJhbmQuYXNBbHBoYVJhbmdlKHBhcnNlRmxvYXQobWF0Y2hbNV0gPz8gJzEnKSlcblx0XHRcdH1cblx0XHQ6IHtcblx0XHRcdFx0Y3lhbjogYnJhbmQuYXNQZXJjZW50aWxlKDApLFxuXHRcdFx0XHRtYWdlbnRhOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHRcdHllbGxvdzogYnJhbmQuYXNQZXJjZW50aWxlKDApLFxuXHRcdFx0XHRrZXk6IGJyYW5kLmFzUGVyY2VudGlsZSgwKSxcblx0XHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0fTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIZXhDb2xvclZhbHVlKHJhd0hleDogc3RyaW5nIHwgbnVsbCk6IEhleFZhbHVlIHtcblx0aWYgKCFyYXdIZXgpIHtcblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS53YXJuaW5ncyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSAyKSB7XG5cdFx0XHRsb2dnZXIud2FybmluZyhcblx0XHRcdFx0J0EgSGV4IGVsZW1lbnQgY291bGQgbm90IGJlIGZvdW5kIHdoaWxlIHBhcnNpbmcgcGFsZXR0ZSBmaWxlLiBJbmplY3RpbmcgZGVmYXVsdCB2YWx1ZXMuJ1xuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9nZ2VyLmRlYnVnKCdNaXNzaW5nIEhleCBlbGVtZW50IGluIHBhbGV0dGUgZmlsZS4nKTtcblx0XHR9XG5cblx0XHRpZiAobW9kZS5zdGFja1RyYWNlKSBjb25zb2xlLnRyYWNlKCdTdGFjayBUcmFjZTonKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRoZXg6IGJyYW5kLmFzSGV4U2V0KCcjMDAwMDAwJyksXG5cdFx0XHRhbHBoYTogYnJhbmQuYXNIZXhDb21wb25lbnQoJ0ZGJyksXG5cdFx0XHRudW1BbHBoYTogYnJhbmQuYXNBbHBoYVJhbmdlKDEpXG5cdFx0fTtcblx0fVxuXG5cdGNvbnN0IG1hdGNoID0gcmF3SGV4Lm1hdGNoKHJlZ2V4LmhleCk7XG5cblx0cmV0dXJuIG1hdGNoXG5cdFx0PyB7XG5cdFx0XHRcdGhleDogYnJhbmQuYXNIZXhTZXQoYCMke21hdGNoWzFdfWApLFxuXHRcdFx0XHRhbHBoYTogYnJhbmQuYXNIZXhDb21wb25lbnQobWF0Y2hbMl0gfHwgJ0ZGJyksXG5cdFx0XHRcdG51bUFscGhhOiBicmFuZC5hc0FscGhhUmFuZ2UoXG5cdFx0XHRcdFx0cGFyc2VJbnQobWF0Y2hbMl0gfHwgJ0ZGJywgMTYpIC8gMjU1XG5cdFx0XHRcdClcblx0XHRcdH1cblx0XHQ6IHtcblx0XHRcdFx0aGV4OiBicmFuZC5hc0hleFNldCgnIzAwMDAwMCcpLFxuXHRcdFx0XHRhbHBoYTogYnJhbmQuYXNIZXhDb21wb25lbnQoJ0ZGJyksXG5cdFx0XHRcdG51bUFscGhhOiBicmFuZC5hc0FscGhhUmFuZ2UoMSlcblx0XHRcdH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlSFNMQ29sb3JWYWx1ZShyYXdIU0w6IHN0cmluZyB8IG51bGwpOiBIU0xWYWx1ZSB7XG5cdGlmICghcmF3SFNMKSB7XG5cdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUud2FybmluZ3MgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gMikge1xuXHRcdFx0bG9nZ2VyLndhcm5pbmcoXG5cdFx0XHRcdCdBbiBIU0wgZWxlbWVudCBjb3VsZCBub3QgYmUgZm91bmQgd2hpbGUgcGFyc2luZyBwYWxldHRlIGZpbGUuIEluamVjdGluZyBkZWZhdWx0IHZhbHVlcy4nXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2dnZXIuZGVidWcoJ01pc3NpbmcgSFNMIGVsZW1lbnQgaW4gcGFsZXR0ZSBmaWxlLicpO1xuXHRcdH1cblxuXHRcdGlmIChtb2RlLnN0YWNrVHJhY2UpIGNvbnNvbGUudHJhY2UoJ1N0YWNrIFRyYWNlOicpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGh1ZTogYnJhbmQuYXNSYWRpYWwoMCksXG5cdFx0XHRzYXR1cmF0aW9uOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHRsaWdodG5lc3M6IGJyYW5kLmFzUGVyY2VudGlsZSgwKSxcblx0XHRcdGFscGhhOiBicmFuZC5hc0FscGhhUmFuZ2UoMSlcblx0XHR9O1xuXHR9XG5cblx0Y29uc3QgbWF0Y2ggPSByYXdIU0wubWF0Y2gocmVnZXguaHNsKTtcblxuXHRyZXR1cm4gbWF0Y2hcblx0XHQ/IHtcblx0XHRcdFx0aHVlOiBicmFuZC5hc1JhZGlhbChwYXJzZUZsb2F0KG1hdGNoWzFdKSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGJyYW5kLmFzUGVyY2VudGlsZShwYXJzZUZsb2F0KG1hdGNoWzJdKSksXG5cdFx0XHRcdGxpZ2h0bmVzczogYnJhbmQuYXNQZXJjZW50aWxlKHBhcnNlRmxvYXQobWF0Y2hbM10pKSxcblx0XHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZShwYXJzZUZsb2F0KG1hdGNoWzRdID8/ICcxJykpXG5cdFx0XHR9XG5cdFx0OiB7XG5cdFx0XHRcdGh1ZTogYnJhbmQuYXNSYWRpYWwoMCksXG5cdFx0XHRcdHNhdHVyYXRpb246IGJyYW5kLmFzUGVyY2VudGlsZSgwKSxcblx0XHRcdFx0bGlnaHRuZXNzOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHRcdGFscGhhOiBicmFuZC5hc0FscGhhUmFuZ2UoMSlcblx0XHRcdH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlSFNWQ29sb3JWYWx1ZShyYXdIU1Y6IHN0cmluZyB8IG51bGwpOiBIU1ZWYWx1ZSB7XG5cdGlmICghcmF3SFNWKSB7XG5cdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUud2FybmluZ3MgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gMikge1xuXHRcdFx0bG9nZ2VyLndhcm5pbmcoXG5cdFx0XHRcdCdBbiBIU1YgZWxlbWVudCBjb3VsZCBub3QgYmUgZm91bmQgd2hpbGUgcGFyc2luZyBwYWxldHRlIGZpbGUuIEluamVjdGluZyBkZWZhdWx0IHZhbHVlcy4nXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2dnZXIuZGVidWcoJ01pc3NpbmcgSFNWIGVsZW1lbnQgaW4gcGFsZXR0ZSBmaWxlLicpO1xuXHRcdH1cblxuXHRcdGlmIChtb2RlLnN0YWNrVHJhY2UpIGNvbnNvbGUudHJhY2UoJ1N0YWNrIFRyYWNlOicpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGh1ZTogYnJhbmQuYXNSYWRpYWwoMCksXG5cdFx0XHRzYXR1cmF0aW9uOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHR2YWx1ZTogYnJhbmQuYXNQZXJjZW50aWxlKDApLFxuXHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdH07XG5cdH1cblxuXHRjb25zdCBtYXRjaCA9IHJhd0hTVi5tYXRjaChyZWdleC5oc3YpO1xuXG5cdHJldHVybiBtYXRjaFxuXHRcdD8ge1xuXHRcdFx0XHRodWU6IGJyYW5kLmFzUmFkaWFsKHBhcnNlRmxvYXQobWF0Y2hbMV0pKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogYnJhbmQuYXNQZXJjZW50aWxlKHBhcnNlRmxvYXQobWF0Y2hbMl0pKSxcblx0XHRcdFx0dmFsdWU6IGJyYW5kLmFzUGVyY2VudGlsZShwYXJzZUZsb2F0KG1hdGNoWzNdKSksXG5cdFx0XHRcdGFscGhhOiBicmFuZC5hc0FscGhhUmFuZ2UocGFyc2VGbG9hdChtYXRjaFs0XSA/PyAnMScpKVxuXHRcdFx0fVxuXHRcdDoge1xuXHRcdFx0XHRodWU6IGJyYW5kLmFzUmFkaWFsKDApLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHRcdHZhbHVlOiBicmFuZC5hc1BlcmNlbnRpbGUoMCksXG5cdFx0XHRcdGFscGhhOiBicmFuZC5hc0FscGhhUmFuZ2UoMSlcblx0XHRcdH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlTEFCQ29sb3JWYWx1ZShyYXdMQUI6IHN0cmluZyB8IG51bGwpOiBMQUJWYWx1ZSB7XG5cdGlmICghcmF3TEFCKSB7XG5cdFx0aWYgKCFtb2RlLnF1aWV0ICYmIGxvZ01vZGUud2FybmluZ3MgJiYgbG9nTW9kZS52ZXJib3NpdHkgPj0gMikge1xuXHRcdFx0bG9nZ2VyLndhcm5pbmcoXG5cdFx0XHRcdCdBIExBQiBlbGVtZW50IGNvdWxkIG5vdCBiZSBmb3VuZCB3aGlsZSBwYXJzaW5nIHBhbGV0dGUgZmlsZS4gSW5qZWN0aW5nIGRlZmF1bHQgdmFsdWVzLidcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZ2dlci5kZWJ1ZygnTWlzc2luZyBMQUIgZWxlbWVudCBpbiBwYWxldHRlIGZpbGUuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKG1vZGUuc3RhY2tUcmFjZSkgY29uc29sZS50cmFjZSgnU3RhY2sgVHJhY2U6Jyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bDogYnJhbmQuYXNMQUJfTCgwKSxcblx0XHRcdGE6IGJyYW5kLmFzTEFCX0EoMCksXG5cdFx0XHRiOiBicmFuZC5hc0xBQl9CKDApLFxuXHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdH07XG5cdH1cblxuXHRjb25zdCBtYXRjaCA9IHJhd0xBQi5tYXRjaChyZWdleC5sYWIpO1xuXG5cdHJldHVybiBtYXRjaFxuXHRcdD8ge1xuXHRcdFx0XHRsOiBicmFuZC5hc0xBQl9MKHBhcnNlRmxvYXQobWF0Y2hbMV0pKSxcblx0XHRcdFx0YTogYnJhbmQuYXNMQUJfQShwYXJzZUZsb2F0KG1hdGNoWzJdKSksXG5cdFx0XHRcdGI6IGJyYW5kLmFzTEFCX0IocGFyc2VGbG9hdChtYXRjaFszXSkpLFxuXHRcdFx0XHRhbHBoYTogYnJhbmQuYXNBbHBoYVJhbmdlKHBhcnNlRmxvYXQobWF0Y2hbNF0gPz8gJzEnKSlcblx0XHRcdH1cblx0XHQ6IHtcblx0XHRcdFx0bDogYnJhbmQuYXNMQUJfTCgwKSxcblx0XHRcdFx0YTogYnJhbmQuYXNMQUJfQSgwKSxcblx0XHRcdFx0YjogYnJhbmQuYXNMQUJfQigwKSxcblx0XHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0fTtcbn1cblxuZnVuY3Rpb24gcGFyc2VSR0JDb2xvclZhbHVlKHJhd1JHQjogc3RyaW5nIHwgbnVsbCk6IFJHQlZhbHVlIHtcblx0aWYgKCFyYXdSR0IpIHtcblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS53YXJuaW5ncyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSAyKSB7XG5cdFx0XHRsb2dnZXIud2FybmluZyhcblx0XHRcdFx0J0FuIFJHQiBlbGVtZW50IGNvdWxkIG5vdCBiZSBmb3VuZCB3aGlsZSBwYXJzaW5nIHBhbGV0dGUgZmlsZS4gSW5qZWN0aW5nIGRlZmF1bHQgdmFsdWVzLidcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZ2dlci5kZWJ1ZygnTWlzc2luZyBSR0IgZWxlbWVudCBpbiBwYWxldHRlIGZpbGUuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKG1vZGUuc3RhY2tUcmFjZSkgY29uc29sZS50cmFjZSgnU3RhY2sgVHJhY2U6Jyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVkOiBicmFuZC5hc0J5dGVSYW5nZSgwKSxcblx0XHRcdGdyZWVuOiBicmFuZC5hc0J5dGVSYW5nZSgwKSxcblx0XHRcdGJsdWU6IGJyYW5kLmFzQnl0ZVJhbmdlKDApLFxuXHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdH07XG5cdH1cblxuXHRjb25zdCBtYXRjaCA9IHJhd1JHQi5tYXRjaChyZWdleC5yZ2IpO1xuXG5cdHJldHVybiBtYXRjaFxuXHRcdD8ge1xuXHRcdFx0XHRyZWQ6IGJyYW5kLmFzQnl0ZVJhbmdlKHBhcnNlRmxvYXQobWF0Y2hbMV0pKSxcblx0XHRcdFx0Z3JlZW46IGJyYW5kLmFzQnl0ZVJhbmdlKHBhcnNlRmxvYXQobWF0Y2hbMl0pKSxcblx0XHRcdFx0Ymx1ZTogYnJhbmQuYXNCeXRlUmFuZ2UocGFyc2VGbG9hdChtYXRjaFszXSkpLFxuXHRcdFx0XHRhbHBoYTogYnJhbmQuYXNBbHBoYVJhbmdlKHBhcnNlRmxvYXQobWF0Y2hbNF0gPz8gJzEnKSlcblx0XHRcdH1cblx0XHQ6IHtcblx0XHRcdFx0cmVkOiBicmFuZC5hc0J5dGVSYW5nZSgwKSxcblx0XHRcdFx0Z3JlZW46IGJyYW5kLmFzQnl0ZVJhbmdlKDApLFxuXHRcdFx0XHRibHVlOiBicmFuZC5hc0J5dGVSYW5nZSgwKSxcblx0XHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0fTtcbn1cblxuZnVuY3Rpb24gcGFyc2VYWVpDb2xvclZhbHVlKHJhd1hZWjogc3RyaW5nIHwgbnVsbCk6IFhZWlZhbHVlIHtcblx0aWYgKCFyYXdYWVopIHtcblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS53YXJuaW5ncyAmJiBsb2dNb2RlLnZlcmJvc2l0eSA+PSAyKSB7XG5cdFx0XHRsb2dnZXIud2FybmluZyhcblx0XHRcdFx0J0FuIFhZWiBlbGVtZW50IGNvdWxkIG5vdCBiZSBmb3VuZCB3aGlsZSBwYXJzaW5nIHBhbGV0dGUgZmlsZS4gSW5qZWN0aW5nIGRlZmF1bHQgdmFsdWVzLidcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZ2dlci5kZWJ1ZygnTWlzc2luZyBYWVogZWxlbWVudCBpbiBwYWxldHRlIGZpbGUuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKG1vZGUuc3RhY2tUcmFjZSkgY29uc29sZS50cmFjZSgnU3RhY2sgVHJhY2U6Jyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogYnJhbmQuYXNYWVpfWCgwKSxcblx0XHRcdHk6IGJyYW5kLmFzWFlaX1koMCksXG5cdFx0XHR6OiBicmFuZC5hc1hZWl9aKDApLFxuXHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdH07XG5cdH1cblxuXHRjb25zdCBtYXRjaCA9IHJhd1hZWi5tYXRjaChyZWdleC54eXopO1xuXG5cdHJldHVybiBtYXRjaFxuXHRcdD8ge1xuXHRcdFx0XHR4OiBicmFuZC5hc1hZWl9YKHBhcnNlRmxvYXQobWF0Y2hbMV0pKSxcblx0XHRcdFx0eTogYnJhbmQuYXNYWVpfWShwYXJzZUZsb2F0KG1hdGNoWzJdKSksXG5cdFx0XHRcdHo6IGJyYW5kLmFzWFlaX1oocGFyc2VGbG9hdChtYXRjaFszXSkpLFxuXHRcdFx0XHRhbHBoYTogYnJhbmQuYXNBbHBoYVJhbmdlKHBhcnNlRmxvYXQobWF0Y2hbNF0gPz8gJzEnKSlcblx0XHRcdH1cblx0XHQ6IHtcblx0XHRcdFx0eDogYnJhbmQuYXNYWVpfWCgwKSxcblx0XHRcdFx0eTogYnJhbmQuYXNYWVpfWSgwKSxcblx0XHRcdFx0ejogYnJhbmQuYXNYWVpfWigwKSxcblx0XHRcdFx0YWxwaGE6IGJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0fTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbG9yOiBJT19JbnRlcmZhY2VbJ3BhcnNlJ11bJ2NvbG9yJ10gPSB7XG5cdGNteWs6IHBhcnNlQ01ZS0NvbG9yVmFsdWUsXG5cdGhleDogcGFyc2VIZXhDb2xvclZhbHVlLFxuXHRoc2w6IHBhcnNlSFNMQ29sb3JWYWx1ZSxcblx0aHN2OiBwYXJzZUhTVkNvbG9yVmFsdWUsXG5cdGxhYjogcGFyc2VMQUJDb2xvclZhbHVlLFxuXHRyZ2I6IHBhcnNlUkdCQ29sb3JWYWx1ZSxcblx0eHl6OiBwYXJzZVhZWkNvbG9yVmFsdWVcbn07XG4iXX0=