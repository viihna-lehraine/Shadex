// ColorGen - version 0.6.0-dev
// Author: Viihna Leraine (viihna@ViihnaTech.com / viihna.78 (Signal) / Viihna-Lehraine (Github))
// Licensed under GNU GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html)
// You may use this code for any purpose EXCEPT for the creation of proprietary derivatives. I encourage you to improve on my code or to include it in other projects if you find it helpful. Please credit me as the original author.
// This application comes with ABSOLUTELY NO WARRANTY OR GUARANTEE OF ANY KIND.
import { dom } from './dom/dom-main.js';
import { storage } from './dom/storage.js';
import { domHelpers } from './helpers/dom.js';
import { generate } from './palette-gen/generate.js';
import { transforms } from './utils/transforms.js';
let customColor = null;
// applies all event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM content loaded - Initializing application');
    // define buttons within the main UI
    const generateButton = domHelpers.getElement('generate-button');
    const saturateButton = domHelpers.getElement('saturate-button');
    const desaturateButton = domHelpers.getElement('desaturate-button');
    const popupDivButton = domHelpers.getElement('custom-color-button');
    const applyCustomColorButton = domHelpers.getElement('apply-custom-color-button');
    const clearCustomColorButton = domHelpers.getElement('clear-custom-color-button');
    const advancedMenuToggleButton = domHelpers.getElement('advanced-menu-toggle-button');
    const applyInitialColorSpaceButton = domHelpers.getElement('apply-initial-color-space-button');
    const selectedColorOptions = domHelpers.getElement('selected-color-options');
    // confirm that all elements are accessible
    console.log(`generateButton: ${generateButton}\nsaturateButton: ${saturateButton}\ndesaturateButton: ${desaturateButton}\npopupDivButton: ${popupDivButton}\napplyCustomColorButton: ${applyCustomColorButton}\nclearCustomColorButton: ${clearCustomColorButton}\nadvancedMenuToggleButton: ${advancedMenuToggleButton}\napplyInitialColorSpaceButton: ${applyInitialColorSpaceButton}\nselectedColorOptions: ${selectedColorOptions}`);
    const selectedColor = selectedColorOptions
        ? parseInt(selectedColorOptions.value, 10)
        : 0;
    console.log(`Selected color: ${selectedColor}`);
    try {
        dom.addConversionButtonEventListeners();
        console.log('Conversion button event listeners attached');
    }
    catch (error) {
        console.error(`Unable to attach conversion button event listeners: ${error}`);
    }
    generateButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('generateButton clicked');
        const { paletteType, numBoxes, initialColorSpace } = dom.pullParamsFromUI();
        const color = customColor
            ? transforms.parseColor(customColor.format, customColor.value)
            : null;
        const space = initialColorSpace ?? 'hex';
        generate.startPaletteGen(paletteType, numBoxes, space, color);
    });
    saturateButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('saturateButton clicked');
        dom.saturateColor(selectedColor);
    });
    desaturateButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('desaturateButton clicked');
        dom.desaturateColor(selectedColor);
    });
    popupDivButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('popupDivButton clicked');
        dom.showCustomColorPopupDiv();
    });
    applyCustomColorButton?.addEventListener('click', e => {
        e.preventDefault();
        const hslColorFlat = dom.applyCustomColor();
        const customColor = hslColorFlat;
        storage.setAppStorage({ customColor });
        dom.showCustomColorPopupDiv();
    });
    applyInitialColorSpaceButton?.addEventListener('click', e => {
        e.preventDefault();
        const initialColorSpace = dom.applyInitialColorSpace();
        const currentStorage = storage.getAppStorage() || {};
        const newStorage = { ...currentStorage, initialColorSpace };
        storage.setAppStorage(newStorage);
    });
    clearCustomColorButton?.addEventListener('click', e => {
        e.preventDefault();
        storage.updateAppStorage({ customColor: null });
        customColor = null;
        dom.showCustomColorPopupDiv();
    });
    advancedMenuToggleButton?.addEventListener('click', e => {
        e.preventDefault();
        const advancedMenu = domHelpers.getElement('advanced-menu');
        if (advancedMenu) {
            advancedMenu.classList.toggle('hidden');
            advancedMenu.style.display = advancedMenu.classList.contains('hidden')
                ? 'none'
                : 'block';
        }
    });
});
//# sourceMappingURL=data:application/json;base64,