// ColorGen - version 0.6.0-dev
import { core, utils } from './common/index.js';
import { data } from './data/index.js';
import { dom } from './dom/index.js';
import { IDBManager } from './idb/index.js';
import { logger } from './logger/index.js';
import { start } from './palette/index.js';
const buttonIDs = data.consts.dom.ids;
const consts = data.consts;
const mode = data.mode;
document.addEventListener('DOMContentLoaded', async () => {
    console.log('DOM content loaded - Initializing application');
    await dom.loadPartials();
    if (!mode.quiet)
        console.log('HTML partials loaded. Initializing UI...');
    const buttonElements = dom.defineUIElements();
    if (!buttonElements) {
        if (mode.errorLogs)
            console.error('Failed to initialize UI buttons');
        return;
    }
    await dom.initializeUI();
    if (!mode.quiet)
        console.log('UI successfully initialized');
    const idb = IDBManager.getInstance();
    if (!buttonElements) {
        console.error('Failed to initialize UI buttons');
        return;
    }
    const selectedColorOption = consts.dom.elements.selectedColorOption;
    if (mode.debug) {
        logger.debug.validateDOMElements();
        if (mode.verbose) {
            logger.verbose.validateDOMElements();
        }
    }
    else {
        if (!mode.quiet) {
            console.log('Skipping DOM element validation');
        }
    }
    const selectedColor = selectedColorOption
        ? parseInt(selectedColorOption.value, 10)
        : 0;
    if (!mode.quiet)
        console.log(`Selected color: ${selectedColor}`);
    try {
        dom.addConversionButtonEventListeners();
        if (!mode.quiet)
            console.log('Conversion button event listeners attached');
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Unable to attach conversion button event listeners: ${error}`);
    }
    // show advanced menu
    dom.buttons.addEventListener(buttonIDs.advancedMenuButton, 'click', async (e) => {
        e.preventDefault();
        const advancedMenuContent = document.querySelector('.advanced-menu-content');
        if (advancedMenuContent) {
            const isHidden = getComputedStyle(advancedMenuContent).display === 'none';
            advancedMenuContent.style.display = isHidden ? 'flex' : 'none';
        }
        if (!mode.quiet)
            console.log('advancedMenuButton clicked');
    });
    // apply custom color
    dom.buttons.addEventListener(buttonIDs.applyCustomColorButton, 'click', async (e) => {
        e.preventDefault();
        const customHSLColor = dom.applyCustomColor();
        const customHSLColorClone = core.base.clone(customHSLColor);
        await idb.saveData('customColor', 'appSettings', customHSLColorClone);
        if (!mode.quiet)
            console.log('Custom color saved to IndexedDB');
        // *DEV-NOTE* unfinished
    });
    // clear custom color
    dom.buttons.addEventListener(buttonIDs.clearCustomColorButton, 'click', async (e) => {
        e.preventDefault();
        consts.dom.elements.customColorInput.value = '#ff0000';
        if (!mode.quiet)
            console.log('Custom color cleared');
    });
    // close custom color menu
    dom.buttons.addEventListener(buttonIDs.closeCustomColorMenuButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('closeCustomColorMenuButton clicked');
        consts.dom.elements.customColorMenu?.classList.add('hidden');
    });
    // close help menu
    dom.buttons.addEventListener(buttonIDs.closeHelpMenuButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('closeHelpMenuButton clicked');
        consts.dom.elements.advancedMenu?.classList.add('hidden');
    });
    // close history menu
    dom.buttons.addEventListener(buttonIDs.closeHistoryMenuButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('closeHistoryMenuButton clicked');
        consts.dom.elements.historyMenu?.classList.add('hidden');
    });
    if (!consts.dom.elements.customColorInput)
        throw new Error('Custom color input element not found');
    consts.dom.elements.customColorInput.addEventListener('input', () => {
        if (!consts.dom.elements.customColorDisplay)
            throw new Error('Custom color display element not found');
        consts.dom.elements.customColorDisplay.textContent =
            consts.dom.elements.customColorInput.value;
    });
    // display custom color menu
    dom.buttons.addEventListener(buttonIDs.customColorMenuButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('customColorMenuButton clicked');
        consts.dom.elements.customColorMenu?.classList.remove('hidden');
    });
    // desaturate Button
    dom.buttons.addEventListener(buttonIDs.desaturateButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('desaturateButton clicked');
        dom.desaturateColor(selectedColor);
    });
    // MAIN - generate palette
    dom.buttons.addEventListener(buttonIDs.generateButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('generateButton clicked');
        const { paletteType, numBoxes, enableAlpha, limitDarkness, limitGrayness, limitLightness } = dom.pullParamsFromUI();
        let customColor = (await idb.getCustomColor());
        if (!customColor) {
            if (!mode.quiet)
                console.info('No custom color found. Using a random color');
            customColor = utils.random.hsl(true);
        }
        const paletteOptions = {
            paletteType,
            numBoxes,
            customColor: core.base.clone(customColor),
            enableAlpha,
            limitDarkness,
            limitGrayness,
            limitLightness
        };
        await start.genPalette(paletteOptions);
    });
    // open Help Menu
    dom.buttons.addEventListener(buttonIDs.helpMenuButton, 'click', async (e) => {
        e.preventDefault();
        const helpMenuContent = document.querySelector('.help-menu-content');
        if (helpMenuContent) {
            const isHidden = getComputedStyle(helpMenuContent).display === 'none';
            helpMenuContent.style.display = isHidden ? 'flex' : 'none';
            if (!mode.quiet)
                console.log('helpMenuButton clicked');
        }
    });
    // open History Menu
    dom.buttons.addEventListener(buttonIDs.historyMenuButton, 'click', async (e) => {
        e.preventDefault();
        const historyMenuContent = document.querySelector('.history-menu-content');
        if (historyMenuContent) {
            const isHidden = getComputedStyle(historyMenuContent).display === 'none';
            historyMenuContent.style.display = isHidden ? 'flex' : 'none';
        }
        if (!mode.quiet)
            console.log('historyMenuToggleButton clicked');
    });
    // saturate selected color
    dom.buttons.addEventListener(buttonIDs.saturateButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('saturateButton clicked');
        dom.saturateColor(selectedColor);
    });
    dom.buttons.addEventListener(buttonIDs.showAsCMYKButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('showAsCMYKButton clicked');
        // *DEV-NOTE* unfinished
    });
    dom.buttons.addEventListener(buttonIDs.showAsHexButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('showAsHexButton clicked');
        // *DEV-NOTE* unfinished
    });
    dom.buttons.addEventListener(buttonIDs.showAsHSLButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('showAsHSLButton clicked');
        // *DEV-NOTE* unfinished
    });
    dom.buttons.addEventListener(buttonIDs.showAsHSVButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('showAsHSVButton clicked');
        // *DEV-NOTE* unfinished
    });
    dom.buttons.addEventListener(buttonIDs.showAsLABButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('showAsLABButton clicked');
        // *DEV-NOTE* unfinished
    });
    dom.buttons.addEventListener(buttonIDs.showAsRGBButton, 'click', async (e) => {
        e.preventDefault();
        if (!mode.quiet)
            console.log('showAsRGBButton clicked');
        // *DEV-NOTE* unfinished
    });
    // close Custom Color Menu when clicking outside the content
    window.addEventListener('click', async (e) => {
        if (consts.dom.elements.customColorMenu)
            if (e.target === consts.dom.elements.customColorMenu)
                consts.dom.elements.customColorMenu.classList.add('hidden');
    });
});
//# sourceMappingURL=data:application/json;base64,