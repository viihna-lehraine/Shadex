// ColorGen - version 0.6.0-dev
// Author: Viihna Leraine (viihna@ViihnaTech.com / viihna.78 (Signal) / Viihna-Lehraine (Github))
// Licensed under GNU GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html)
// You may use this code for any purpose EXCEPT for the creation of proprietary derivatives. I encourage you to improve on my code or to include it in other projects if you find it helpful. Please credit me as the original author.
// This application comes with ABSOLUTELY NO WARRANTY OR GUARANTEE OF ANY KIND.
import { domHelpers } from './helpers/dom.js';
import { applyCustomColor, applyInitialColorSpace, desaturateColor, saturateColor, showCustomColorPopupDiv } from './dom/dom-main.js';
import { startPaletteGen } from './palette-gen/generate.js';
import { parseColor } from './utils/transforms.js';
import { storage } from './dom/storage.js';
let customColor = null;
function getElement(id) {
    return document.getElementById(id);
}
// applies all event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM content loaded - Initializing application');
    // define buttons within the main UI
    const generateButton = getElement('generate-button');
    const saturateButton = getElement('saturate-button');
    const desaturateButton = getElement('desaturate-button');
    const popupDivButton = getElement('custom-color-button');
    const applyCustomColorButton = getElement('apply-custom-color-button');
    const clearCustomColorButton = getElement('clear-custom-color-button');
    const advancedMenuToggleButton = getElement('advanced-menu-toggle-button');
    const applyInitialColorSpaceButton = getElement('apply-initial-color-space-button');
    const selectedColorOptions = getElement('selected-color-options');
    // confirm that all elements are accessible
    console.log(`generateButton: ${generateButton}\nsaturateButton: ${saturateButton}\ndesaturateButton: ${desaturateButton}\npopupDivButton: ${popupDivButton}\napplyCustomColorButton: ${applyCustomColorButton}\nclearCustomColorButton: ${clearCustomColorButton}\nadvancedMenuToggleButton: ${advancedMenuToggleButton}\napplyInitialColorSpaceButton: ${applyInitialColorSpaceButton}\nselectedColorOptions: ${selectedColorOptions}`);
    const selectedColor = selectedColorOptions
        ? parseInt(selectedColorOptions.value, 10)
        : 0;
    console.log(`Selected color: ${selectedColor}`);
    try {
        domHelpers.addConversionButtonEventListeners();
        console.log('Conversion button event listeners attached');
    }
    catch (error) {
        console.error(`Unable to attach conversion button event listeners: ${error}`);
    }
    generateButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('generateButton clicked');
        const { paletteType, numBoxes, initialColorSpace } = domHelpers.pullParamsFromUI();
        const color = customColor
            ? parseColor(customColor.format, customColor.value)
            : null;
        startPaletteGen(paletteType, numBoxes, initialColorSpace, color);
    });
    saturateButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('saturateButton clicked');
        saturateColor(selectedColor);
    });
    desaturateButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('desaturateButton clicked');
        desaturateColor(selectedColor);
    });
    popupDivButton?.addEventListener('click', e => {
        e.preventDefault();
        console.log('popupDivButton clicked');
        showCustomColorPopupDiv();
    });
    applyCustomColorButton?.addEventListener('click', e => {
        e.preventDefault();
        const hslColorFlat = applyCustomColor();
        const customColor = hslColorFlat;
        storage.setAppStorage({ customColor });
        showCustomColorPopupDiv();
    });
    applyInitialColorSpaceButton?.addEventListener('click', e => {
        e.preventDefault();
        const initialColorSpace = applyInitialColorSpace();
        const currentStorage = storage.getAppStorage() || {};
        const newStorage = { ...currentStorage, initialColorSpace };
        storage.setAppStorage(newStorage);
    });
    clearCustomColorButton?.addEventListener('click', e => {
        e.preventDefault();
        storage.updateAppStorage({ customColor: null });
        customColor = null;
        showCustomColorPopupDiv();
    });
    advancedMenuToggleButton?.addEventListener('click', e => {
        e.preventDefault();
        const advancedMenu = getElement('advanced-menu');
        if (advancedMenu) {
            advancedMenu.classList.toggle('hidden');
            advancedMenu.style.display = advancedMenu.classList.contains('hidden')
                ? 'none'
                : 'block';
        }
    });
});
//# sourceMappingURL=data:application/json;base64,