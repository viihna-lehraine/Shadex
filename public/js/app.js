// ColorGen - version 0.6.0-dev
// Author: Viihna Leraine (viihna@ViihnaTech.com / viihna.78 (Signal) / Viihna-Lehraine (Github))
// Licensed under GNU GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html)
// You may use this code for any purpose EXCEPT for the creation of proprietary derivatives. I encourage you to improve on my code or to include it in other projects if you find it helpful. Please credit me as the original author.
// This application comes with ABSOLUTELY NO WARRANTY OR GUARANTEE OF ANY KIND.
import { domHelpers } from './helpers/dom.js';
import { applyCustomColor, desaturateColor, saturateColor, showCustomColorPopupDiv } from './dom/dom-main.js';
import { paletteHelpers } from './helpers/palette.js';
import { parseColorValue } from './utils/transforms.js';
import { storage } from './dom/storage.js';
let customColor = null;
function getElement(id) {
    return document.getElementById(id);
}
// applies all event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('app.js - DOM content loaded; initializing application');
    // defines the buttons within the main UI
    const generateButton = getElement('generate-button');
    const saturateButton = getElement('saturate-button');
    const desaturateButton = getElement('desaturate-button');
    const popupDivButton = getElement('custom-color-button');
    const applyCustomColorButton = getElement('apply-custom-color-button');
    const clearCustomColorButton = getElement('clear-custom-color-button');
    const advancedMenuToggleButton = getElement('advanced-menu-toggle-button');
    const applyInitialColorSpaceButton = getElement('apply-initial-color-space-button');
    const selectedColorOptions = getElement('selected-color-options');
    const selectedColor = selectedColorOptions
        ? parseInt(selectedColorOptions.value, 10)
        : 0;
    domHelpers.addConversionButtonEventListeners();
    generateButton?.addEventListener('click', e => {
        e.preventDefault();
        const { paletteType, numBoxes, initialColorSpace } = domHelpers.pullParamsFromUI();
        const colorValue = customColor
            ? parseColorValue(customColor.format, customColor.value)
            : null;
        paletteHelpers.genPalette(paletteType, numBoxes, initialColorSpace, colorValue);
    });
    saturateButton?.addEventListener('click', e => {
        e.preventDefault();
        saturateColor(selectedColor);
    });
    desaturateButton?.addEventListener('click', e => {
        e.preventDefault();
        desaturateColor(selectedColor);
    });
    popupDivButton?.addEventListener('click', e => {
        e.preventDefault();
        showCustomColorPopupDiv();
    });
    applyCustomColorButton?.addEventListener('click', e => {
        e.preventDefault();
        const hslColor = applyCustomColor();
        const customColor = {
            format: 'hsl',
            value: hslColor
        };
        storage.setAppStorage(customColor);
        showCustomColorPopupDiv();
    });
    clearCustomColorButton?.addEventListener('click', e => {
        e.preventDefault();
        storage.updateAppStorage({ customColor: null });
        customColor = null;
        showCustomColorPopupDiv();
    });
    advancedMenuToggleButton?.addEventListener('click', e => {
        e.preventDefault();
        const advancedMenu = getElement('advanced-menu');
        if (advancedMenu) {
            advancedMenu.classList.toggle('hidden');
            advancedMenu.style.display = advancedMenu.classList.contains('hidden')
                ? 'none'
                : 'block';
        }
    });
    applyInitialColorSpaceButton?.addEventListener('click', e => {
        e.preventDefault();
        const initialColorSpace = getElement('initial-color-space-options')
            ?.value || 'hex';
        console.log('Initial color space:', initialColorSpace);
        // applyInitialColorSpace(initialColorSpace); // *DEV-NOTE* uncomment when implemented
    });
});
//# sourceMappingURL=data:application/json;base64,