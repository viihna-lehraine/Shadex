// File: src/classes/mutations/MutationTracker
import { openDB } from 'idb';
import { AppLogger } from '../../logger/AppLogger.js';
export class MutationTracker {
    static instance;
    appLogger;
    storeNames;
    constructor(data) {
        this.appLogger = AppLogger.getInstance(data.mode);
        this.storeNames = data.idb.STORE_NAMES;
    }
    static getInstance(data) {
        if (!MutationTracker.instance) {
            MutationTracker.instance = new MutationTracker(data);
        }
        return MutationTracker.instance;
    }
    async persistMutation(data) {
        const db = await this.getDB();
        await db.put('mutations', data);
        this.appLogger.log(`Persisted mutation: ${JSON.stringify(data)}`, 'info');
    }
    async getDB() {
        return openDB('paletteDB', 1, {
            upgrade: db => {
                const storeNames = Object.values(this.storeNames);
                for (const storeName of storeNames) {
                    if (!db.objectStoreNames.contains(storeName)) {
                        db.createObjectStore(storeName, { keyPath: 'key' });
                    }
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXV0YXRpb25UcmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2RiL211dGF0aW9ucy9NdXRhdGlvblRyYWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOENBQThDO0FBRTlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFRN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXRELE1BQU0sT0FBTyxlQUFlO0lBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQWtCO0lBQ2pDLFNBQVMsQ0FBWTtJQUNyQixVQUFVLENBQXlCO0lBRTNDLFlBQVksSUFBbUI7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQW1CO1FBQzVDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDL0IsZUFBZSxDQUFDLFFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RCxDQUFDO1FBRUQsT0FBTyxlQUFlLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFTSxLQUFLLENBQUMsZUFBZSxDQUFDLElBQWlCO1FBQzdDLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQ2pCLHVCQUF1QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQzdDLE1BQU0sQ0FDTixDQUFDO0lBQ0gsQ0FBQztJQUVPLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLE9BQU8sTUFBTSxDQUFnQixXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQzVDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDYixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFbEQsS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQzt3QkFDOUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUNyRCxDQUFDO2dCQUNGLENBQUM7WUFDRixDQUFDO1NBQ0QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NsYXNzZXMvbXV0YXRpb25zL011dGF0aW9uVHJhY2tlclxuXG5pbXBvcnQgeyBvcGVuREIgfSBmcm9tICdpZGInO1xuaW1wb3J0IHtcblx0RGF0YUludGVyZmFjZSxcblx0TXV0YXRpb25Mb2csXG5cdE11dGF0aW9uVHJhY2tlckludGVyZmFjZSxcblx0UGFsZXR0ZURCLFxuXHRQYWxldHRlU2NoZW1hXG59IGZyb20gJy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IEFwcExvZ2dlciB9IGZyb20gJy4uLy4uL2xvZ2dlci9BcHBMb2dnZXIuanMnO1xuXG5leHBvcnQgY2xhc3MgTXV0YXRpb25UcmFja2VyIGltcGxlbWVudHMgTXV0YXRpb25UcmFja2VySW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IE11dGF0aW9uVHJhY2tlcjtcblx0cHJpdmF0ZSBhcHBMb2dnZXI6IEFwcExvZ2dlcjtcblx0cHJpdmF0ZSBzdG9yZU5hbWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG5cdGNvbnN0cnVjdG9yKGRhdGE6IERhdGFJbnRlcmZhY2UpIHtcblx0XHR0aGlzLmFwcExvZ2dlciA9IEFwcExvZ2dlci5nZXRJbnN0YW5jZShkYXRhLm1vZGUpO1xuXHRcdHRoaXMuc3RvcmVOYW1lcyA9IGRhdGEuaWRiLlNUT1JFX05BTUVTO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShkYXRhOiBEYXRhSW50ZXJmYWNlKTogTXV0YXRpb25UcmFja2VyIHtcblx0XHRpZiAoIU11dGF0aW9uVHJhY2tlci5pbnN0YW5jZSkge1xuXHRcdFx0TXV0YXRpb25UcmFja2VyLmluc3RhbmNlID0gbmV3IE11dGF0aW9uVHJhY2tlcihkYXRhKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gTXV0YXRpb25UcmFja2VyLmluc3RhbmNlO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIHBlcnNpc3RNdXRhdGlvbihkYXRhOiBNdXRhdGlvbkxvZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREQigpO1xuXG5cdFx0YXdhaXQgZGIucHV0KCdtdXRhdGlvbnMnLCBkYXRhKTtcblxuXHRcdHRoaXMuYXBwTG9nZ2VyLmxvZyhcblx0XHRcdGBQZXJzaXN0ZWQgbXV0YXRpb246ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCxcblx0XHRcdCdpbmZvJ1xuXHRcdCk7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGdldERCKCk6IFByb21pc2U8UGFsZXR0ZURCPiB7XG5cdFx0cmV0dXJuIG9wZW5EQjxQYWxldHRlU2NoZW1hPigncGFsZXR0ZURCJywgMSwge1xuXHRcdFx0dXBncmFkZTogZGIgPT4ge1xuXHRcdFx0XHRjb25zdCBzdG9yZU5hbWVzID0gT2JqZWN0LnZhbHVlcyh0aGlzLnN0b3JlTmFtZXMpO1xuXG5cdFx0XHRcdGZvciAoY29uc3Qgc3RvcmVOYW1lIG9mIHN0b3JlTmFtZXMpIHtcblx0XHRcdFx0XHRpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoc3RvcmVOYW1lKSkge1xuXHRcdFx0XHRcdFx0ZGIuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lLCB7IGtleVBhdGg6ICdrZXknIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG4iXX0=