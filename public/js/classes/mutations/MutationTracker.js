// File: src/classes/mutations/MutationTracker
import { openDB } from 'idb';
import { AppLogger } from '../logger/AppLogger.js';
export class MutationTracker {
    static instance;
    appLogger;
    storeNames;
    constructor(data) {
        this.appLogger = AppLogger.getInstance(data.mode);
        this.storeNames = data.idb.STORE_NAMES;
    }
    static getInstance(data) {
        if (!MutationTracker.instance) {
            MutationTracker.instance = new MutationTracker(data);
        }
        return MutationTracker.instance;
    }
    async persistMutation(data) {
        const db = await this.getDB();
        await db.put('mutations', data);
        this.appLogger.log(`Persisted mutation: ${JSON.stringify(data)}`, 'info');
    }
    async getDB() {
        return openDB('paletteDB', 1, {
            upgrade: db => {
                const storeNames = Object.values(this.storeNames);
                for (const storeName of storeNames) {
                    if (!db.objectStoreNames.contains(storeName)) {
                        db.createObjectStore(storeName, { keyPath: 'key' });
                    }
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXV0YXRpb25UcmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsYXNzZXMvbXV0YXRpb25zL011dGF0aW9uVHJhY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFFOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEtBQUssQ0FBQztBQVE3QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFbkQsTUFBTSxPQUFPLGVBQWU7SUFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBa0I7SUFDakMsU0FBUyxDQUFZO0lBQ3JCLFVBQVUsQ0FBeUI7SUFFM0MsWUFBWSxJQUFtQjtRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBbUI7UUFDNUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMvQixlQUFlLENBQUMsUUFBUSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFFRCxPQUFPLGVBQWUsQ0FBQyxRQUFRLENBQUM7SUFDakMsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBaUI7UUFDN0MsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVoQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FDakIsdUJBQXVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFDN0MsTUFBTSxDQUNOLENBQUM7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLEtBQUs7UUFDbEIsT0FBTyxNQUFNLENBQWdCLFdBQVcsRUFBRSxDQUFDLEVBQUU7WUFDNUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUNiLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUVsRCxLQUFLLE1BQU0sU0FBUyxJQUFJLFVBQVUsRUFBRSxDQUFDO29CQUNwQyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO3dCQUM5QyxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7b0JBQ3JELENBQUM7Z0JBQ0YsQ0FBQztZQUNGLENBQUM7U0FDRCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvY2xhc3Nlcy9tdXRhdGlvbnMvTXV0YXRpb25UcmFja2VyXG5cbmltcG9ydCB7IG9wZW5EQiB9IGZyb20gJ2lkYic7XG5pbXBvcnQge1xuXHREYXRhSW50ZXJmYWNlLFxuXHRNdXRhdGlvbkxvZyxcblx0TXV0YXRpb25UcmFja2VySW50ZXJmYWNlLFxuXHRQYWxldHRlREIsXG5cdFBhbGV0dGVTY2hlbWFcbn0gZnJvbSAnLi4vLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgQXBwTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyL0FwcExvZ2dlci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNdXRhdGlvblRyYWNrZXIgaW1wbGVtZW50cyBNdXRhdGlvblRyYWNrZXJJbnRlcmZhY2Uge1xuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTXV0YXRpb25UcmFja2VyO1xuXHRwcml2YXRlIGFwcExvZ2dlcjogQXBwTG9nZ2VyO1xuXHRwcml2YXRlIHN0b3JlTmFtZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cblx0Y29uc3RydWN0b3IoZGF0YTogRGF0YUludGVyZmFjZSkge1xuXHRcdHRoaXMuYXBwTG9nZ2VyID0gQXBwTG9nZ2VyLmdldEluc3RhbmNlKGRhdGEubW9kZSk7XG5cdFx0dGhpcy5zdG9yZU5hbWVzID0gZGF0YS5pZGIuU1RPUkVfTkFNRVM7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKGRhdGE6IERhdGFJbnRlcmZhY2UpOiBNdXRhdGlvblRyYWNrZXIge1xuXHRcdGlmICghTXV0YXRpb25UcmFja2VyLmluc3RhbmNlKSB7XG5cdFx0XHRNdXRhdGlvblRyYWNrZXIuaW5zdGFuY2UgPSBuZXcgTXV0YXRpb25UcmFja2VyKGRhdGEpO1xuXHRcdH1cblxuXHRcdHJldHVybiBNdXRhdGlvblRyYWNrZXIuaW5zdGFuY2U7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgcGVyc2lzdE11dGF0aW9uKGRhdGE6IE11dGF0aW9uTG9nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgZGIgPSBhd2FpdCB0aGlzLmdldERCKCk7XG5cblx0XHRhd2FpdCBkYi5wdXQoJ211dGF0aW9ucycsIGRhdGEpO1xuXG5cdFx0dGhpcy5hcHBMb2dnZXIubG9nKFxuXHRcdFx0YFBlcnNpc3RlZCBtdXRhdGlvbjogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gLFxuXHRcdFx0J2luZm8nXG5cdFx0KTtcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgZ2V0REIoKTogUHJvbWlzZTxQYWxldHRlREI+IHtcblx0XHRyZXR1cm4gb3BlbkRCPFBhbGV0dGVTY2hlbWE+KCdwYWxldHRlREInLCAxLCB7XG5cdFx0XHR1cGdyYWRlOiBkYiA9PiB7XG5cdFx0XHRcdGNvbnN0IHN0b3JlTmFtZXMgPSBPYmplY3QudmFsdWVzKHRoaXMuc3RvcmVOYW1lcyk7XG5cblx0XHRcdFx0Zm9yIChjb25zdCBzdG9yZU5hbWUgb2Ygc3RvcmVOYW1lcykge1xuXHRcdFx0XHRcdGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZU5hbWUpKSB7XG5cdFx0XHRcdFx0XHRkYi5jcmVhdGVPYmplY3RTdG9yZShzdG9yZU5hbWUsIHsga2V5UGF0aDogJ2tleScgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==