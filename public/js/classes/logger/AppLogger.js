// File: src/classes/logger/Logger.ts
export class AppLogger {
    static instance = null;
    mode;
    constructor(mode) {
        this.mode = mode;
    }
    static getInstance(mode) {
        if (!AppLogger.instance) {
            AppLogger.instance = new AppLogger(mode);
        }
        return AppLogger.instance;
    }
    log(message, level = 'info', debugLevel = 0) {
        if (level === 'info' && this.mode.quiet)
            return;
        const formattedMessage = this.formatLog(level.toUpperCase(), {
            message
        });
        try {
            console[level](formattedMessage);
        }
        catch (error) {
            console.error(`AppLogger encountered an unexpected error:, ${error}`);
            if (debugLevel > 1)
                console.trace('Trace:');
        }
        if (debugLevel > 1)
            console.trace('Trace:');
    }
    async logAsync(message, level = 'info', debugLevel = 0) {
        if (level === 'info' && this.mode.quiet)
            return;
        const formattedMessage = this.formatLog(level.toUpperCase(), {
            message
        });
        try {
            console[level](formattedMessage);
        }
        catch (error) {
            console.error(`AppLogger encountered an unexpected error:, ${error}`);
            if (debugLevel > 1)
                console.trace('Trace:');
        }
        if (debugLevel > 1)
            console.trace('Trace:');
    }
    logMutation(data, logCallback = () => { }) {
        this.log(this.formatMutationLog(data), 'info');
        logCallback(data);
    }
    formatLog(action, details) {
        return JSON.stringify({
            timestamp: new Date().toISOString(),
            action,
            details
        });
    }
    formatMutationLog(data) {
        return `Mutation logged: ${JSON.stringify(data)}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsYXNzZXMvbG9nZ2VyL0FwcExvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQ0FBcUM7QUFRckMsTUFBTSxPQUFPLFNBQVM7SUFDYixNQUFNLENBQUMsUUFBUSxHQUFxQixJQUFJLENBQUM7SUFDekMsSUFBSSxDQUFXO0lBRXZCLFlBQW9CLElBQWM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBYztRQUN2QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRU0sR0FBRyxDQUNULE9BQWUsRUFDZixRQUE2QyxNQUFNLEVBQ25ELGFBQXFCLENBQUM7UUFFdEIsSUFBSSxLQUFLLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU87UUFFaEQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUM1RCxPQUFPO1NBQ1AsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDO1lBQ0osT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDbEMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FDWiwrQ0FBK0MsS0FBSyxFQUFFLENBQ3RELENBQUM7WUFFRixJQUFJLFVBQVUsR0FBRyxDQUFDO2dCQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUVELElBQUksVUFBVSxHQUFHLENBQUM7WUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUSxDQUNwQixPQUFlLEVBQ2YsUUFBNkMsTUFBTSxFQUNuRCxhQUFxQixDQUFDO1FBRXRCLElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBRWhELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDNUQsT0FBTztTQUNQLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQztZQUNKLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQ1osK0NBQStDLEtBQUssRUFBRSxDQUN0RCxDQUFDO1lBRUYsSUFBSSxVQUFVLEdBQUcsQ0FBQztnQkFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFRCxJQUFJLFVBQVUsR0FBRyxDQUFDO1lBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sV0FBVyxDQUNqQixJQUFpQixFQUNqQixjQUEyQyxHQUFHLEVBQUUsR0FBRSxDQUFDO1FBRW5ELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRS9DLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU8sU0FBUyxDQUFDLE1BQWMsRUFBRSxPQUFnQztRQUNqRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1lBQ25DLE1BQU07WUFDTixPQUFPO1NBQ1AsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVPLGlCQUFpQixDQUFDLElBQWlCO1FBQzFDLE9BQU8sb0JBQW9CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NsYXNzZXMvbG9nZ2VyL0xvZ2dlci50c1xuXG5pbXBvcnQge1xuXHRBcHBMb2dnZXJJbnRlcmZhY2UsXG5cdE1vZGVEYXRhLFxuXHRNdXRhdGlvbkxvZ1xufSBmcm9tICcuLi8uLi9pbmRleC9pbmRleC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBBcHBMb2dnZXIgaW1wbGVtZW50cyBBcHBMb2dnZXJJbnRlcmZhY2Uge1xuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogQXBwTG9nZ2VyIHwgbnVsbCA9IG51bGw7XG5cdHByaXZhdGUgbW9kZTogTW9kZURhdGE7XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3Rvcihtb2RlOiBNb2RlRGF0YSkge1xuXHRcdHRoaXMubW9kZSA9IG1vZGU7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKG1vZGU6IE1vZGVEYXRhKTogQXBwTG9nZ2VyIHtcblx0XHRpZiAoIUFwcExvZ2dlci5pbnN0YW5jZSkge1xuXHRcdFx0QXBwTG9nZ2VyLmluc3RhbmNlID0gbmV3IEFwcExvZ2dlcihtb2RlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gQXBwTG9nZ2VyLmluc3RhbmNlO1xuXHR9XG5cblx0cHVibGljIGxvZyhcblx0XHRtZXNzYWdlOiBzdHJpbmcsXG5cdFx0bGV2ZWw6ICdkZWJ1ZycgfCAnaW5mbycgfCAnd2FybicgfCAnZXJyb3InID0gJ2luZm8nLFxuXHRcdGRlYnVnTGV2ZWw6IG51bWJlciA9IDBcblx0KTogdm9pZCB7XG5cdFx0aWYgKGxldmVsID09PSAnaW5mbycgJiYgdGhpcy5tb2RlLnF1aWV0KSByZXR1cm47XG5cblx0XHRjb25zdCBmb3JtYXR0ZWRNZXNzYWdlID0gdGhpcy5mb3JtYXRMb2cobGV2ZWwudG9VcHBlckNhc2UoKSwge1xuXHRcdFx0bWVzc2FnZVxuXHRcdH0pO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnNvbGVbbGV2ZWxdKGZvcm1hdHRlZE1lc3NhZ2UpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRgQXBwTG9nZ2VyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgZXJyb3I6LCAke2Vycm9yfWBcblx0XHRcdCk7XG5cblx0XHRcdGlmIChkZWJ1Z0xldmVsID4gMSkgY29uc29sZS50cmFjZSgnVHJhY2U6Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKGRlYnVnTGV2ZWwgPiAxKSBjb25zb2xlLnRyYWNlKCdUcmFjZTonKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBsb2dBc3luYyhcblx0XHRtZXNzYWdlOiBzdHJpbmcsXG5cdFx0bGV2ZWw6ICdkZWJ1ZycgfCAnaW5mbycgfCAnd2FybicgfCAnZXJyb3InID0gJ2luZm8nLFxuXHRcdGRlYnVnTGV2ZWw6IG51bWJlciA9IDBcblx0KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKGxldmVsID09PSAnaW5mbycgJiYgdGhpcy5tb2RlLnF1aWV0KSByZXR1cm47XG5cblx0XHRjb25zdCBmb3JtYXR0ZWRNZXNzYWdlID0gdGhpcy5mb3JtYXRMb2cobGV2ZWwudG9VcHBlckNhc2UoKSwge1xuXHRcdFx0bWVzc2FnZVxuXHRcdH0pO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnNvbGVbbGV2ZWxdKGZvcm1hdHRlZE1lc3NhZ2UpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRgQXBwTG9nZ2VyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgZXJyb3I6LCAke2Vycm9yfWBcblx0XHRcdCk7XG5cblx0XHRcdGlmIChkZWJ1Z0xldmVsID4gMSkgY29uc29sZS50cmFjZSgnVHJhY2U6Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKGRlYnVnTGV2ZWwgPiAxKSBjb25zb2xlLnRyYWNlKCdUcmFjZTonKTtcblx0fVxuXG5cdHB1YmxpYyBsb2dNdXRhdGlvbihcblx0XHRkYXRhOiBNdXRhdGlvbkxvZyxcblx0XHRsb2dDYWxsYmFjazogKGRhdGE6IE11dGF0aW9uTG9nKSA9PiB2b2lkID0gKCkgPT4ge31cblx0KTogdm9pZCB7XG5cdFx0dGhpcy5sb2codGhpcy5mb3JtYXRNdXRhdGlvbkxvZyhkYXRhKSwgJ2luZm8nKTtcblxuXHRcdGxvZ0NhbGxiYWNrKGRhdGEpO1xuXHR9XG5cblx0cHJpdmF0ZSBmb3JtYXRMb2coYWN0aW9uOiBzdHJpbmcsIGRldGFpbHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuXHRcdFx0YWN0aW9uLFxuXHRcdFx0ZGV0YWlsc1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBmb3JtYXRNdXRhdGlvbkxvZyhkYXRhOiBNdXRhdGlvbkxvZyk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGBNdXRhdGlvbiBsb2dnZWQ6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YDtcblx0fVxufVxuIl19