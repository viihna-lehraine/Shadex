// File: src/idb/main.ts
import { openDB } from 'idb';
import { utils } from '../common.js';
import { config } from '../config.js';
const defaultSettings = config.defaults.idb.settings;
function createMutationLogger(obj, key) {
    return new Proxy(obj, {
        set(target, property, value) {
            const oldValue = target[property];
            const success = Reflect.set(target, property, value);
            if (success) {
                logMutation({
                    timestamp: new Date().toISOString(),
                    key,
                    action: 'update',
                    newValue: { [property]: value },
                    oldValue: { [property]: oldValue },
                    origin: 'Proxy'
                });
            }
            return success;
        }
    });
}
const dbPromise = openDB('paletteDatabase', 1, {
    upgrade(db) {
        try {
            const stores = [
                'customColor',
                'mutations',
                'settings',
                'tables'
            ];
            stores.forEach(store => {
                if (!db.objectStoreNames.contains(store)) {
                    db.createObjectStore(store, {
                        keyPath: store === 'mutations' ? 'timestamp' : 'key'
                    });
                }
            });
        }
        catch (error) {
            console.error('Error during IndexedDB upgrade:', error);
            throw error;
        }
    }
});
async function getDB() {
    return dbPromise;
}
async function getCurrentPaletteID() {
    const db = await getDB();
    const settings = await db.get('settings', 'appSettings');
    return settings?.lastPaletteID ?? 0;
}
async function getCustomColor() {
    const db = await getDB();
    const entry = await db.get('customColor', 'customColor');
    return entry?.color
        ? createMutationLogger(entry.color, 'customColor')
        : null;
}
function getLoggedObject(obj, key) {
    if (obj) {
        return createMutationLogger(obj, key);
    }
    return null;
}
async function getNextPaletteID() {
    const currentID = await getCurrentPaletteID();
    const newID = currentID + 1;
    await updateCurrentPaletteID(newID);
    return newID;
}
async function getNextTableID() {
    const settings = await getSettings();
    const nextID = settings.lastTableID + 1;
    await saveData('settings', 'appSettings', {
        ...settings,
        lastTableID: nextID
    });
    return `palette_${nextID}`;
}
async function getSettings() {
    try {
        const db = await getDB();
        const settings = await db.get('settings', 'appSettings');
        return settings ?? defaultSettings;
    }
    catch (error) {
        console.error('Error fetching settings:', error);
        return { colorSpace: 'hex', lastTableID: 0 };
    }
}
async function getTable(id) {
    const db = await getDB();
    const result = await db.get('tables', id);
    if (!result)
        console.warn(`Table with ID ${id} not found.`);
    return result;
}
async function getStore(storeName, mode) {
    const db = await getDB();
    return db.transaction(storeName, mode).objectStore(storeName);
}
async function logMutation(log) {
    const db = await getDB();
    await db.put('mutations', log);
    console.log(`Logged mutation: ${JSON.stringify(log)}`);
}
async function renderPalette(tableId) {
    try {
        const storedPalette = await getTable(tableId);
        const paletteRow = document.getElementById('palette-row');
        if (!storedPalette)
            throw new Error(`Palette ${tableId} not found.`);
        if (!paletteRow)
            throw new Error('Palette row element not found.');
        paletteRow.innerHTML = '';
        const fragment = document.createDocumentFragment();
        const table = document.createElement('table');
        table.classList.add('palette-table');
        storedPalette.palette.items.forEach((item, index) => {
            const row = document.createElement('tr');
            const cell = document.createElement('td');
            const colorBox = document.createElement('div');
            cell.textContent = `Color ${index + 1}`;
            colorBox.classList.add('color-box');
            colorBox.style.backgroundColor = item.cssStrings.hexCSSString;
            row.appendChild(colorBox);
            row.appendChild(cell);
            table.appendChild(row);
        });
        fragment.appendChild(table);
        paletteRow.appendChild(fragment);
        console.log(`Rendered palette ${tableId}.`);
    }
    catch (error) {
        console.error(`Failed to render palette: ${error}`);
    }
}
async function saveData(storeName, key, data, oldValue) {
    try {
        const db = await getDB();
        const tx = db.transaction(storeName, 'readwrite');
        const store = tx.objectStore(storeName);
        await store.put({ key, ...data });
        await tx.done;
        console.log(`${key} saved to ${storeName}.`);
        await logMutation({
            timestamp: new Date().toISOString(),
            key,
            action: 'update',
            newValue: data,
            oldValue: oldValue ? oldValue : null,
            origin: 'saveData'
        });
    }
    catch (error) {
        console.error(`Failed to save data to ${storeName}:`, error);
        throw error;
    }
}
async function savePalette(id, newPalette) {
    try {
        const store = await getStore('tables', 'readwrite');
        const paletteToSave = {
            tableID: newPalette.tableID,
            palette: newPalette.palette
        };
        await store.put({ key: id, ...paletteToSave });
        console.log(`Palette ${id} saved successfully.`);
    }
    catch (error) {
        console.error(`Failed to save palette ${id}: ${error}`);
        throw error;
    }
}
async function savePaletteToDB(type, items, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray) {
    const paletteID = await getNextPaletteID();
    const newPalette = utils.palette.createObject(type, items, baseColor, paletteID, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
    await savePalette(newPalette.id, {
        tableID: parseInt(newPalette.id.split('_')[1]),
        palette: newPalette
    });
    console.log(`Saved ${type} palette: ${JSON.stringify(newPalette)}`);
    return newPalette;
}
async function saveSettings(newSettings) {
    try {
        await saveData('settings', 'appSettings', newSettings);
        console.log('Settings updated');
    }
    catch (error) {
        console.error(`Failed to save settings: ${error}`);
        throw error;
    }
}
async function trackedTransaction(storeName, mode, callback) {
    const db = await getDB();
    const tx = db.transaction(storeName, mode);
    const store = tx.objectStore(storeName);
    try {
        await callback(store);
        await tx.done;
        console.log(`Transaction on ${storeName} completed.`);
    }
    catch (error) {
        console.error(`Transaction on ${storeName} failed: ${error}`);
        throw error;
    }
}
async function updateCurrentPaletteID(newID) {
    const db = await getDB();
    const tx = db.transaction('settings', 'readwrite');
    const store = tx.objectStore('settings');
    await store.put({ key: 'appSettings', lastPaletteID: newID });
    await tx.done;
    console.log(`Current palette ID updated to ${newID}`);
}
async function updateEntryInPalette(tableID, entryIndex, newEntry) {
    try {
        const storedPalette = await getTable(tableID);
        if (!storedPalette)
            throw new Error(`Palette ${tableID} not found.`);
        const { items } = storedPalette.palette;
        if (entryIndex >= items.length)
            throw new Error(`Entry ${entryIndex} not found in palette ${tableID}.`);
        const oldEntry = items[entryIndex];
        items[entryIndex] = newEntry;
        await saveData('tables', tableID, storedPalette);
        await logMutation({
            timestamp: new Date().toISOString(),
            key: `${tableID}-${entryIndex}]`,
            action: 'update',
            newValue: newEntry,
            oldValue: oldEntry,
            origin: 'updateEntryInPalette'
        });
        console.log(`Entry ${entryIndex} in palette ${tableID} updated.`);
    }
    catch (error) {
        console.error(`Failed to update entry in palette: ${error}`);
        throw error;
    }
}
export const idb = {
    createMutationLogger,
    deleteTable: async (id) => {
        const db = await getDB();
        await db.delete('tables', id);
        console.log(`Table ${id} deleted.`);
    },
    getCurrentPaletteID,
    getCustomColor,
    getDB,
    getLoggedObject,
    getNextPaletteID,
    getNextTableID,
    getSettings,
    getStore,
    getTable,
    listTables: async () => {
        const db = await getDB();
        const keys = await db.getAllKeys('tables');
        return keys.map(String);
    },
    logMutation,
    renderPalette,
    saveData,
    savePalette,
    savePaletteToDB,
    saveSettings,
    trackedTransaction,
    updateCurrentPaletteID,
    updateEntryInPalette
};
//# sourceMappingURL=data:application/json;base64,