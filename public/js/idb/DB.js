// File: src/idb/DB.ts
import { openDB } from 'idb';
import { config } from '../config';
import { utils } from '../common';
export class DB {
    static instance;
    dbPromise;
    defaultSettings;
    mode;
    constructor() {
        this.defaultSettings = config.defaults.idb.settings;
        this.mode = config.mode;
        this.dbPromise = openDB('paletteDB', 1, {
            upgrade(db) {
                const stores = [
                    'customColor',
                    'mutations',
                    'settings',
                    'tables'
                ];
                stores.forEach(store => {
                    if (!db.objectStoreNames.contains(store)) {
                        db.createObjectStore(store, {
                            keyPath: store === 'mutations' ? 'timestamp' : 'key'
                        });
                    }
                });
            }
        });
    }
    static getInstance() {
        if (!DB.instance) {
            DB.instance = new DB();
        }
        return DB.instance;
    }
    createMutationLogger(obj, key) {
        const logMutation = this.logMutation.bind(this); // Bind the class context
        return new Proxy(obj, {
            set(target, property, value) {
                const oldValue = target[property];
                const success = Reflect.set(target, property, value);
                if (success) {
                    logMutation({
                        timestamp: new Date().toISOString(),
                        key,
                        action: 'update',
                        newValue: { [property]: value },
                        oldValue: { [property]: oldValue },
                        origin: 'Proxy'
                    });
                }
                return success;
            }
        });
    }
    async getCustomColor() {
        const db = await this.getDB();
        const entry = await db.get('customColor', 'customColor');
        return entry?.color
            ? this.createMutationLogger(entry.color, 'customColor')
            : null;
    }
    getLoggedObject(obj, key) {
        if (obj) {
            return this.createMutationLogger(obj, key);
        }
        return null;
    }
    async getNextTableID() {
        const settings = await this.getSettings();
        const nextID = settings.lastTableID + 1;
        await this.saveData('settings', 'appSettings', {
            ...settings,
            lastTableID: nextID
        });
        return `palette_${nextID}`;
    }
    async getSettings() {
        try {
            const db = await this.getDB();
            const settings = await db.get('settings', 'appSettings');
            return settings ?? this.defaultSettings;
        }
        catch (error) {
            if (this.mode.logErrors)
                console.error('Error fetching settings:', error);
            return { colorSpace: 'hex', lastTableID: 0 };
        }
    }
    async getStore(storeName, mode) {
        const db = await this.getDB();
        return db.transaction(storeName, mode).objectStore(storeName);
    }
    async logMutation(log) {
        const db = await this.getDB();
        await db.put('mutations', log);
        if (!this.mode.quiet)
            console.log(`Logged mutation: ${JSON.stringify(log)}`);
    }
    async updateEntryInPalette(tableID, entryIndex, newEntry) {
        try {
            const storedPalette = await this.getTable(tableID);
            if (!storedPalette)
                throw new Error(`Palette ${tableID} not found.`);
            const { items } = storedPalette.palette;
            if (entryIndex >= items.length) {
                if (!this.mode.gracefulErrors)
                    throw new Error(`Entry ${entryIndex} not found in palette ${tableID}.`);
                if (this.mode.logErrors)
                    console.error(`Entry ${entryIndex} not found in palette ${tableID}.`);
                if (!this.mode.quiet)
                    console.log('updateEntryInPalette: Entry not found.');
            }
            const oldEntry = items[entryIndex];
            items[entryIndex] = newEntry;
            await this.saveData('tables', tableID, storedPalette);
            await this.logMutation({
                timestamp: new Date().toISOString(),
                key: `${tableID}-${entryIndex}]`,
                action: 'update',
                newValue: newEntry,
                oldValue: oldEntry,
                origin: 'updateEntryInPalette'
            });
            if (!this.mode.quiet)
                console.log(`Entry ${entryIndex} in palette ${tableID} updated.`);
        }
        catch (error) {
            if (this.mode.logErrors)
                console.error(`Failed to update entry in palette: ${error}`);
            throw error;
        }
    }
    async renderPalette(tableId) {
        try {
            const storedPalette = await this.getTable(tableId);
            const paletteRow = document.getElementById('palette-row');
            if (!storedPalette)
                throw new Error(`Palette ${tableId} not found.`);
            if (!paletteRow)
                throw new Error('Palette row element not found.');
            paletteRow.innerHTML = '';
            const fragment = document.createDocumentFragment();
            const table = document.createElement('table');
            table.classList.add('palette-table');
            storedPalette.palette.items.forEach((item, index) => {
                const row = document.createElement('tr');
                const cell = document.createElement('td');
                const colorBox = document.createElement('div');
                cell.textContent = `Color ${index + 1}`;
                colorBox.classList.add('color-box');
                colorBox.style.backgroundColor = item.cssStrings.hexCSSString;
                row.appendChild(colorBox);
                row.appendChild(cell);
                table.appendChild(row);
            });
            fragment.appendChild(table);
            paletteRow.appendChild(fragment);
            if (!this.mode.quiet)
                console.log(`Rendered palette ${tableId}.`);
        }
        catch (error) {
            if (this.mode.logErrors)
                console.error(`Failed to render palette: ${error}`);
        }
    }
    async saveData(storeName, key, data, oldValue) {
        try {
            const db = await this.getDB();
            const tx = db.transaction(storeName, 'readwrite');
            const store = tx.objectStore(storeName);
            await store.put({ key, ...data });
            await tx.done;
            console.log(`${key} saved to ${storeName}.`);
            await this.logMutation({
                timestamp: new Date().toISOString(),
                key,
                action: 'update',
                newValue: data,
                oldValue: oldValue ? oldValue : null,
                origin: 'saveData'
            });
        }
        catch (error) {
            if (this.mode.logErrors)
                console.error(`Failed to save data to ${storeName}:`, error);
            throw error;
        }
    }
    async savePalette(id, newPalette) {
        try {
            const store = await this.getStore('tables', 'readwrite');
            const paletteToSave = {
                tableID: newPalette.tableID,
                palette: newPalette.palette
            };
            await store.put({ key: id, ...paletteToSave });
            if (!this.mode.quiet)
                console.log(`Palette ${id} saved successfully.`);
        }
        catch (error) {
            if (this.mode.logErrors)
                console.error(`Failed to save palette ${id}: ${error}`);
            throw error;
        }
    }
    async savePaletteToDB(type, items, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight) {
        const paletteID = await this.getNextPaletteID();
        const newPalette = utils.palette.createObject(type, items, baseColor, paletteID, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
        await this.savePalette(newPalette.id, {
            tableID: parseInt(newPalette.id.split('_')[1]),
            palette: newPalette
        });
        if (!this.mode.quiet)
            console.log(`Saved ${type} palette: ${JSON.stringify(newPalette)}`);
        return newPalette;
    }
    async saveSettings(newSettings) {
        try {
            await this.saveData('settings', 'appSettings', newSettings);
            if (!this.mode.quiet)
                console.log('Settings updated');
        }
        catch (error) {
            if (this.mode.logErrors)
                console.error(`Failed to save settings: ${error}`);
            throw error;
        }
    }
    async trackedTransaction(storeName, mode, callback) {
        const db = await this.getDB();
        const tx = db.transaction(storeName, mode);
        const store = tx.objectStore(storeName);
        try {
            await callback(store);
            await tx.done;
            if (!this.mode.quiet)
                console.log(`Transaction on ${storeName} completed.`);
        }
        catch (error) {
            if (this.mode.logErrors)
                console.error(`Transaction on ${storeName} failed: ${error}`);
            throw error;
        }
    }
    async getCurrentPaletteID() {
        const db = await this.getDB();
        const settings = await db.get('settings', 'appSettings');
        return settings?.lastPaletteID ?? 0;
    }
    async getDB() {
        return this.dbPromise;
    }
    async getNextPaletteID() {
        const currentID = await this.getCurrentPaletteID();
        const newID = currentID + 1;
        await this.updateCurrentPaletteID(newID);
        return newID;
    }
    async getTable(id) {
        const db = await this.getDB();
        const result = await db.get('tables', id);
        if (!result) {
            if (this.mode.logErrors)
                console.warn(`Table with ID ${id} not found.`);
        }
        return result;
    }
    async updateCurrentPaletteID(newID) {
        const db = await this.getDB();
        const tx = db.transaction('settings', 'readwrite');
        const store = tx.objectStore('settings');
        await store.put({ key: 'appSettings', lastPaletteID: newID });
        await tx.done;
        if (!this.mode.quiet)
            console.log(`Current palette ID updated to ${newID}`);
    }
}
//# sourceMappingURL=data:application/json;base64,