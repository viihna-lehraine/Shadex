// File: src/logger/factory.ts
import { AppLogger } from './AppLogger.js';
import { data } from '../data/index.js';
const debugLevel = data.mode.debugLevel;
const appLogger = AppLogger.getInstance(data.mode);
// Synchronous Log Functions
function logDebug(message) {
    appLogger.log(message, 'debug', debugLevel);
}
function logInfo(message) {
    appLogger.log(message, 'info', debugLevel);
}
function logWarning(message) {
    appLogger.log(message, 'warn', debugLevel);
}
function logError(message) {
    appLogger.log(message, 'error', debugLevel);
}
function logMutation(data, logCallback = () => { }) {
    appLogger.logMutation(data, logCallback);
}
// Async Log Functions
async function logAsyncDebug(message) {
    appLogger.logAsync(message, 'debug', debugLevel);
}
async function logAsyncInfo(message) {
    appLogger.logAsync(message, 'info', debugLevel);
}
async function logAsyncWarning(message) {
    appLogger.logAsync(message, 'warn', debugLevel);
}
async function logAsyncError(message) {
    appLogger.logAsync(message, 'error', debugLevel);
}
async function logAsyncMutation(data, logCallback = () => { }) {
    appLogger.logMutation(data, logCallback);
}
export const logger = {
    debug: logDebug,
    info: logInfo,
    warning: logWarning,
    error: logError,
    mutation: logMutation
};
export const asyncLogger = {
    debug: logAsyncDebug,
    info: logAsyncInfo,
    warning: logAsyncWarning,
    error: logAsyncError,
    mutation: logAsyncMutation
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2dnZXIvZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFPOUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV4QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUV4QyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUVuRCw0QkFBNEI7QUFFNUIsU0FBUyxRQUFRLENBQUMsT0FBZTtJQUNoQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLE9BQWU7SUFDL0IsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxPQUFlO0lBQ2xDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsT0FBZTtJQUNoQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUNuQixJQUFpQixFQUNqQixjQUEyQyxHQUFHLEVBQUUsR0FBRSxDQUFDO0lBRW5ELFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxzQkFBc0I7QUFFdEIsS0FBSyxVQUFVLGFBQWEsQ0FBQyxPQUFlO0lBQzNDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxPQUFlO0lBQzFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsS0FBSyxVQUFVLGVBQWUsQ0FBQyxPQUFlO0lBQzdDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxPQUFlO0lBQzNDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsS0FBSyxVQUFVLGdCQUFnQixDQUM5QixJQUFpQixFQUNqQixjQUEyQyxHQUFHLEVBQUUsR0FBRSxDQUFDO0lBRW5ELFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQXNCO0lBQ3hDLEtBQUssRUFBRSxRQUFRO0lBQ2YsSUFBSSxFQUFFLE9BQU87SUFDYixPQUFPLEVBQUUsVUFBVTtJQUNuQixLQUFLLEVBQUUsUUFBUTtJQUNmLFFBQVEsRUFBRSxXQUFXO0NBQ3JCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQXVCO0lBQzlDLEtBQUssRUFBRSxhQUFhO0lBQ3BCLElBQUksRUFBRSxZQUFZO0lBQ2xCLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLEtBQUssRUFBRSxhQUFhO0lBQ3BCLFFBQVEsRUFBRSxnQkFBZ0I7Q0FDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9sb2dnZXIvZmFjdG9yeS50c1xuXG5pbXBvcnQge1xuXHRBc3luY0xvZ2dlckZhY3RvcnksXG5cdE11dGF0aW9uTG9nLFxuXHRTeW5jTG9nZ2VyRmFjdG9yeVxufSBmcm9tICcuLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBBcHBMb2dnZXIgfSBmcm9tICcuL0FwcExvZ2dlci5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vZGF0YS9pbmRleC5qcyc7XG5cbmNvbnN0IGRlYnVnTGV2ZWwgPSBkYXRhLm1vZGUuZGVidWdMZXZlbDtcblxuY29uc3QgYXBwTG9nZ2VyID0gQXBwTG9nZ2VyLmdldEluc3RhbmNlKGRhdGEubW9kZSk7XG5cbi8vIFN5bmNocm9ub3VzIExvZyBGdW5jdGlvbnNcblxuZnVuY3Rpb24gbG9nRGVidWcobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdGFwcExvZ2dlci5sb2cobWVzc2FnZSwgJ2RlYnVnJywgZGVidWdMZXZlbCk7XG59XG5cbmZ1bmN0aW9uIGxvZ0luZm8obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdGFwcExvZ2dlci5sb2cobWVzc2FnZSwgJ2luZm8nLCBkZWJ1Z0xldmVsKTtcbn1cblxuZnVuY3Rpb24gbG9nV2FybmluZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0YXBwTG9nZ2VyLmxvZyhtZXNzYWdlLCAnd2FybicsIGRlYnVnTGV2ZWwpO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0YXBwTG9nZ2VyLmxvZyhtZXNzYWdlLCAnZXJyb3InLCBkZWJ1Z0xldmVsKTtcbn1cblxuZnVuY3Rpb24gbG9nTXV0YXRpb24oXG5cdGRhdGE6IE11dGF0aW9uTG9nLFxuXHRsb2dDYWxsYmFjazogKGRhdGE6IE11dGF0aW9uTG9nKSA9PiB2b2lkID0gKCkgPT4ge31cbik6IHZvaWQge1xuXHRhcHBMb2dnZXIubG9nTXV0YXRpb24oZGF0YSwgbG9nQ2FsbGJhY2spO1xufVxuXG4vLyBBc3luYyBMb2cgRnVuY3Rpb25zXG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ0FzeW5jRGVidWcobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdGFwcExvZ2dlci5sb2dBc3luYyhtZXNzYWdlLCAnZGVidWcnLCBkZWJ1Z0xldmVsKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9nQXN5bmNJbmZvKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRhcHBMb2dnZXIubG9nQXN5bmMobWVzc2FnZSwgJ2luZm8nLCBkZWJ1Z0xldmVsKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9nQXN5bmNXYXJuaW5nKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRhcHBMb2dnZXIubG9nQXN5bmMobWVzc2FnZSwgJ3dhcm4nLCBkZWJ1Z0xldmVsKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9nQXN5bmNFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0YXBwTG9nZ2VyLmxvZ0FzeW5jKG1lc3NhZ2UsICdlcnJvcicsIGRlYnVnTGV2ZWwpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2dBc3luY011dGF0aW9uKFxuXHRkYXRhOiBNdXRhdGlvbkxvZyxcblx0bG9nQ2FsbGJhY2s6IChkYXRhOiBNdXRhdGlvbkxvZykgPT4gdm9pZCA9ICgpID0+IHt9XG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0YXBwTG9nZ2VyLmxvZ011dGF0aW9uKGRhdGEsIGxvZ0NhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGNvbnN0IGxvZ2dlcjogU3luY0xvZ2dlckZhY3RvcnkgPSB7XG5cdGRlYnVnOiBsb2dEZWJ1Zyxcblx0aW5mbzogbG9nSW5mbyxcblx0d2FybmluZzogbG9nV2FybmluZyxcblx0ZXJyb3I6IGxvZ0Vycm9yLFxuXHRtdXRhdGlvbjogbG9nTXV0YXRpb25cbn07XG5cbmV4cG9ydCBjb25zdCBhc3luY0xvZ2dlcjogQXN5bmNMb2dnZXJGYWN0b3J5ID0ge1xuXHRkZWJ1ZzogbG9nQXN5bmNEZWJ1Zyxcblx0aW5mbzogbG9nQXN5bmNJbmZvLFxuXHR3YXJuaW5nOiBsb2dBc3luY1dhcm5pbmcsXG5cdGVycm9yOiBsb2dBc3luY0Vycm9yLFxuXHRtdXRhdGlvbjogbG9nQXN5bmNNdXRhdGlvblxufTtcbiJdfQ==