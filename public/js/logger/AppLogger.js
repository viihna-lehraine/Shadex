// File: src/logger/Logger.ts
import { data } from '../data/index.js';
const mode = data.mode;
export class AppLogger {
    static instance = null;
    mode;
    constructor() {
        this.mode = mode;
    }
    static getInstance() {
        if (!AppLogger.instance) {
            AppLogger.instance = new AppLogger();
        }
        return AppLogger.instance;
    }
    async log(message, level = 'info', debugLevel = 0) {
        if ((level === 'info' && this.mode.quiet) || !this.mode[`${level}Logs`])
            return;
        const formattedMessage = this.formatLogMessage(level.toUpperCase(), {
            message
        });
        try {
            console[level](formattedMessage);
        }
        catch (error) {
            console.error(`AppLogger encountered an unexpected error:, ${error}`);
            if (debugLevel === 1)
                console.trace('Trace:');
        }
        if (debugLevel === 1)
            console.trace('Trace:');
    }
    formatLogMessage(action, details) {
        return JSON.stringify({
            timestamp: new Date().toISOString(),
            action,
            details
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvZ2dlci9BcHBMb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBRzdCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV4QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBRXZCLE1BQU0sT0FBTyxTQUFTO0lBQ2IsTUFBTSxDQUFDLFFBQVEsR0FBcUIsSUFBSSxDQUFDO0lBQ3pDLElBQUksQ0FBQztJQUViO1FBQ0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXO1FBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDekIsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQ3RDLENBQUM7UUFFRCxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQ2YsT0FBZSxFQUNmLFFBQTZDLE1BQU0sRUFDbkQsYUFBcUIsQ0FBQztRQUV0QixJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssTUFBTSxDQUFDO1lBQ3RFLE9BQU87UUFFUixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDbkUsT0FBTztTQUNQLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQztZQUNKLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQ1osK0NBQStDLEtBQUssRUFBRSxDQUN0RCxDQUFDO1lBRUYsSUFBSSxVQUFVLEtBQUssQ0FBQztnQkFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLENBQUM7UUFFRCxJQUFJLFVBQVUsS0FBSyxDQUFDO1lBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsTUFBYyxFQUFFLE9BQWdDO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNyQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7WUFDbkMsTUFBTTtZQUNOLE9BQU87U0FDUCxDQUFDLENBQUM7SUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2xvZ2dlci9Mb2dnZXIudHNcblxuaW1wb3J0IHsgQXBwTG9nZ2VySW50ZXJmYWNlIH0gZnJvbSAnLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uL2RhdGEvaW5kZXguanMnO1xuXG5jb25zdCBtb2RlID0gZGF0YS5tb2RlO1xuXG5leHBvcnQgY2xhc3MgQXBwTG9nZ2VyIGltcGxlbWVudHMgQXBwTG9nZ2VySW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEFwcExvZ2dlciB8IG51bGwgPSBudWxsO1xuXHRwcml2YXRlIG1vZGU7XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLm1vZGUgPSBtb2RlO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBBcHBMb2dnZXIge1xuXHRcdGlmICghQXBwTG9nZ2VyLmluc3RhbmNlKSB7XG5cdFx0XHRBcHBMb2dnZXIuaW5zdGFuY2UgPSBuZXcgQXBwTG9nZ2VyKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFwcExvZ2dlci5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBsb2coXG5cdFx0bWVzc2FnZTogc3RyaW5nLFxuXHRcdGxldmVsOiAnZGVidWcnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyA9ICdpbmZvJyxcblx0XHRkZWJ1Z0xldmVsOiBudW1iZXIgPSAwXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGlmICgobGV2ZWwgPT09ICdpbmZvJyAmJiB0aGlzLm1vZGUucXVpZXQpIHx8ICF0aGlzLm1vZGVbYCR7bGV2ZWx9TG9nc2BdKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0Y29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHRoaXMuZm9ybWF0TG9nTWVzc2FnZShsZXZlbC50b1VwcGVyQ2FzZSgpLCB7XG5cdFx0XHRtZXNzYWdlXG5cdFx0fSk7XG5cblx0XHR0cnkge1xuXHRcdFx0Y29uc29sZVtsZXZlbF0oZm9ybWF0dGVkTWVzc2FnZSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdGBBcHBMb2dnZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBlcnJvcjosICR7ZXJyb3J9YFxuXHRcdFx0KTtcblxuXHRcdFx0aWYgKGRlYnVnTGV2ZWwgPT09IDEpIGNvbnNvbGUudHJhY2UoJ1RyYWNlOicpO1xuXHRcdH1cblxuXHRcdGlmIChkZWJ1Z0xldmVsID09PSAxKSBjb25zb2xlLnRyYWNlKCdUcmFjZTonKTtcblx0fVxuXG5cdHByaXZhdGUgZm9ybWF0TG9nTWVzc2FnZShhY3Rpb246IHN0cmluZywgZGV0YWlsczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pIHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRhY3Rpb24sXG5cdFx0XHRkZXRhaWxzXG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==