// File: src/logger/AppLogger.ts
export class AppLogger {
    static instance = null;
    mode;
    constructor(mode) {
        this.mode = mode;
    }
    static getInstance(mode) {
        if (!AppLogger.instance) {
            AppLogger.instance = new AppLogger(mode);
        }
        return AppLogger.instance;
    }
    log(message, level = 'info', debugLevel = 0) {
        if (level === 'info' && this.mode.quiet)
            return;
        const formattedMessage = this.formatLog(level.toUpperCase(), {
            message
        });
        try {
            console[level](formattedMessage);
        }
        catch (error) {
            console.error(`AppLogger encountered an unexpected error:, ${error}`);
            if (debugLevel > 1)
                console.trace('Trace:');
        }
        if (debugLevel > 1)
            console.trace('Trace:');
    }
    async logAsync(message, level = 'info', debugLevel = 0) {
        if (level === 'info' && this.mode.quiet)
            return;
        const formattedMessage = this.formatLog(level.toUpperCase(), {
            message
        });
        try {
            console[level](formattedMessage);
        }
        catch (error) {
            console.error(`AppLogger encountered an unexpected error:, ${error}`);
            if (debugLevel > 1)
                console.trace('Trace:');
        }
        if (debugLevel > 1)
            console.trace('Trace:');
    }
    logMutation(data, logCallback = () => { }) {
        this.log(this.formatMutationLog(data), 'info');
        logCallback(data);
    }
    formatLog(action, details) {
        return JSON.stringify({
            timestamp: new Date().toISOString(),
            action,
            details
        });
    }
    formatMutationLog(data) {
        return `Mutation logged: ${JSON.stringify(data)}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvZ2dlci9BcHBMb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0NBQWdDO0FBSWhDLE1BQU0sT0FBTyxTQUFTO0lBQ2IsTUFBTSxDQUFDLFFBQVEsR0FBcUIsSUFBSSxDQUFDO0lBQ3pDLElBQUksQ0FBVztJQUV2QixZQUFvQixJQUFjO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQWM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN6QixTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFFRCxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVNLEdBQUcsQ0FDVCxPQUFlLEVBQ2YsUUFBNkMsTUFBTSxFQUNuRCxhQUFxQixDQUFDO1FBRXRCLElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBRWhELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDNUQsT0FBTztTQUNQLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQztZQUNKLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQ1osK0NBQStDLEtBQUssRUFBRSxDQUN0RCxDQUFDO1lBRUYsSUFBSSxVQUFVLEdBQUcsQ0FBQztnQkFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFRCxJQUFJLFVBQVUsR0FBRyxDQUFDO1lBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FDcEIsT0FBZSxFQUNmLFFBQTZDLE1BQU0sRUFDbkQsYUFBcUIsQ0FBQztRQUV0QixJQUFJLEtBQUssS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTztRQUVoRCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQzVELE9BQU87U0FDUCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUM7WUFDSixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUNaLCtDQUErQyxLQUFLLEVBQUUsQ0FDdEQsQ0FBQztZQUVGLElBQUksVUFBVSxHQUFHLENBQUM7Z0JBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBRUQsSUFBSSxVQUFVLEdBQUcsQ0FBQztZQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLFdBQVcsQ0FDakIsSUFBaUIsRUFDakIsY0FBMkMsR0FBRyxFQUFFLEdBQUUsQ0FBQztRQUVuRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUvQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVPLFNBQVMsQ0FBQyxNQUFjLEVBQUUsT0FBZ0M7UUFDakUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3JCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtZQUNuQyxNQUFNO1lBQ04sT0FBTztTQUNQLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxJQUFpQjtRQUMxQyxPQUFPLG9CQUFvQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDbkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9sb2dnZXIvQXBwTG9nZ2VyLnRzXG5cbmltcG9ydCB7IEFwcExvZ2dlckludGVyZmFjZSwgTW9kZURhdGEsIE11dGF0aW9uTG9nIH0gZnJvbSAnLi4vaW5kZXgvaW5kZXguanMnO1xuXG5leHBvcnQgY2xhc3MgQXBwTG9nZ2VyIGltcGxlbWVudHMgQXBwTG9nZ2VySW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEFwcExvZ2dlciB8IG51bGwgPSBudWxsO1xuXHRwcml2YXRlIG1vZGU6IE1vZGVEYXRhO1xuXG5cdHByaXZhdGUgY29uc3RydWN0b3IobW9kZTogTW9kZURhdGEpIHtcblx0XHR0aGlzLm1vZGUgPSBtb2RlO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShtb2RlOiBNb2RlRGF0YSk6IEFwcExvZ2dlciB7XG5cdFx0aWYgKCFBcHBMb2dnZXIuaW5zdGFuY2UpIHtcblx0XHRcdEFwcExvZ2dlci5pbnN0YW5jZSA9IG5ldyBBcHBMb2dnZXIobW9kZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFwcExvZ2dlci5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBsb2coXG5cdFx0bWVzc2FnZTogc3RyaW5nLFxuXHRcdGxldmVsOiAnZGVidWcnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyA9ICdpbmZvJyxcblx0XHRkZWJ1Z0xldmVsOiBudW1iZXIgPSAwXG5cdCk6IHZvaWQge1xuXHRcdGlmIChsZXZlbCA9PT0gJ2luZm8nICYmIHRoaXMubW9kZS5xdWlldCkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHRoaXMuZm9ybWF0TG9nKGxldmVsLnRvVXBwZXJDYXNlKCksIHtcblx0XHRcdG1lc3NhZ2Vcblx0XHR9KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zb2xlW2xldmVsXShmb3JtYXR0ZWRNZXNzYWdlKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0YEFwcExvZ2dlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGVycm9yOiwgJHtlcnJvcn1gXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAoZGVidWdMZXZlbCA+IDEpIGNvbnNvbGUudHJhY2UoJ1RyYWNlOicpO1xuXHRcdH1cblxuXHRcdGlmIChkZWJ1Z0xldmVsID4gMSkgY29uc29sZS50cmFjZSgnVHJhY2U6Jyk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgbG9nQXN5bmMoXG5cdFx0bWVzc2FnZTogc3RyaW5nLFxuXHRcdGxldmVsOiAnZGVidWcnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyA9ICdpbmZvJyxcblx0XHRkZWJ1Z0xldmVsOiBudW1iZXIgPSAwXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGlmIChsZXZlbCA9PT0gJ2luZm8nICYmIHRoaXMubW9kZS5xdWlldCkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHRoaXMuZm9ybWF0TG9nKGxldmVsLnRvVXBwZXJDYXNlKCksIHtcblx0XHRcdG1lc3NhZ2Vcblx0XHR9KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zb2xlW2xldmVsXShmb3JtYXR0ZWRNZXNzYWdlKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0YEFwcExvZ2dlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGVycm9yOiwgJHtlcnJvcn1gXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAoZGVidWdMZXZlbCA+IDEpIGNvbnNvbGUudHJhY2UoJ1RyYWNlOicpO1xuXHRcdH1cblxuXHRcdGlmIChkZWJ1Z0xldmVsID4gMSkgY29uc29sZS50cmFjZSgnVHJhY2U6Jyk7XG5cdH1cblxuXHRwdWJsaWMgbG9nTXV0YXRpb24oXG5cdFx0ZGF0YTogTXV0YXRpb25Mb2csXG5cdFx0bG9nQ2FsbGJhY2s6IChkYXRhOiBNdXRhdGlvbkxvZykgPT4gdm9pZCA9ICgpID0+IHt9XG5cdCk6IHZvaWQge1xuXHRcdHRoaXMubG9nKHRoaXMuZm9ybWF0TXV0YXRpb25Mb2coZGF0YSksICdpbmZvJyk7XG5cblx0XHRsb2dDYWxsYmFjayhkYXRhKTtcblx0fVxuXG5cdHByaXZhdGUgZm9ybWF0TG9nKGFjdGlvbjogc3RyaW5nLCBkZXRhaWxzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdGFjdGlvbixcblx0XHRcdGRldGFpbHNcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgZm9ybWF0TXV0YXRpb25Mb2coZGF0YTogTXV0YXRpb25Mb2cpOiBzdHJpbmcge1xuXHRcdHJldHVybiBgTXV0YXRpb24gbG9nZ2VkOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWA7XG5cdH1cbn1cbiJdfQ==