// File: src/common/utils/conversion.ts
import { core } from '../core/index.js';
import { data } from '../../data/index.js';
import { paletteUtils } from '../../palette/common/index.js';
const convert = paletteUtils.convert;
const mode = data.mode;
function getConversionFn(from, to) {
    try {
        const fnName = `${from}To${to[0].toUpperCase() + to.slice(1)}`;
        if (!(fnName in convert))
            return undefined;
        const conversionFn = convert[fnName];
        return (value) => structuredClone(conversionFn(value));
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error getting conversion function: ${error}`);
        return undefined;
    }
}
function genAllColorValues(color) {
    const result = {};
    try {
        const clonedColor = core.base.clone(color);
        if (!core.validate.colorValues(clonedColor)) {
            if (mode.errorLogs)
                console.error(`Invalid color: ${JSON.stringify(clonedColor)}`);
            return {};
        }
        result.cmyk = convert.hslTo(clonedColor, 'cmyk');
        result.hex = convert.hslTo(clonedColor, 'hex');
        result.hsl = clonedColor;
        result.hsv = convert.hslTo(clonedColor, 'hsv');
        result.lab = convert.hslTo(clonedColor, 'lab');
        result.rgb = convert.hslTo(clonedColor, 'rgb');
        result.sl = convert.hslTo(clonedColor, 'sl');
        result.sv = convert.hslTo(clonedColor, 'sv');
        result.xyz = convert.hslTo(clonedColor, 'xyz');
        return result;
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating all color values: ${error}`);
        return {};
    }
}
export const conversion = {
    genAllColorValues,
    getConversionFn
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7QUFnQnZDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTdELE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7QUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUV2QixTQUFTLGVBQWUsQ0FJdkIsSUFBVSxFQUNWLEVBQU07SUFFTixJQUFJLENBQUM7UUFDSixNQUFNLE1BQU0sR0FDWCxHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBMEIsQ0FBQztRQUV6RSxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFFM0MsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FFUixDQUFDO1FBRTVCLE9BQU8sQ0FBQyxLQUErQixFQUEwQixFQUFFLENBQ2xFLGVBQWUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQyxTQUFTO1lBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFOUQsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLEtBQVU7SUFDcEMsTUFBTSxNQUFNLEdBQStCLEVBQUUsQ0FBQztJQUU5QyxJQUFJLENBQUM7UUFDSixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUM3QyxJQUFJLElBQUksQ0FBQyxTQUFTO2dCQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLGtCQUFrQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVoRSxPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBUyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDdEQsTUFBTSxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUM7UUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQVEsQ0FBQztRQUN0RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDdEQsTUFBTSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQU8sQ0FBQztRQUNuRCxNQUFNLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBTyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFFdEQsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQyxTQUFTO1lBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFOUQsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBNEI7SUFDbEQsaUJBQWlCO0lBQ2pCLGVBQWU7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NvbW1vbi91dGlscy9jb252ZXJzaW9uLnRzXG5cbmltcG9ydCB7XG5cdENNWUssXG5cdENvbG9yRGF0YUFzc2VydGlvbixcblx0Q29sb3JEYXRhRXh0ZW5kZWQsXG5cdENvbW1vblV0aWxzRm5Db252ZXJzaW9uLFxuXHRIZXgsXG5cdEhTTCxcblx0SFNWLFxuXHRMQUIsXG5cdFJHQixcblx0U0wsXG5cdFNWLFxuXHRYWVpcbn0gZnJvbSAnLi4vLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgY29yZSB9IGZyb20gJy4uL2NvcmUvaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uLy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgcGFsZXR0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vcGFsZXR0ZS9jb21tb24vaW5kZXguanMnO1xuXG5jb25zdCBjb252ZXJ0ID0gcGFsZXR0ZVV0aWxzLmNvbnZlcnQ7XG5jb25zdCBtb2RlID0gZGF0YS5tb2RlO1xuXG5mdW5jdGlvbiBnZXRDb252ZXJzaW9uRm48XG5cdEZyb20gZXh0ZW5kcyBrZXlvZiBDb2xvckRhdGFBc3NlcnRpb24sXG5cdFRvIGV4dGVuZHMga2V5b2YgQ29sb3JEYXRhQXNzZXJ0aW9uXG4+KFxuXHRmcm9tOiBGcm9tLFxuXHR0bzogVG9cbik6ICgodmFsdWU6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXSkgPT4gQ29sb3JEYXRhQXNzZXJ0aW9uW1RvXSkgfCB1bmRlZmluZWQge1xuXHR0cnkge1xuXHRcdGNvbnN0IGZuTmFtZSA9XG5cdFx0XHRgJHtmcm9tfVRvJHt0b1swXS50b1VwcGVyQ2FzZSgpICsgdG8uc2xpY2UoMSl9YCBhcyBrZXlvZiB0eXBlb2YgY29udmVydDtcblxuXHRcdGlmICghKGZuTmFtZSBpbiBjb252ZXJ0KSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdGNvbnN0IGNvbnZlcnNpb25GbiA9IGNvbnZlcnRbZm5OYW1lXSBhcyB1bmtub3duIGFzIChcblx0XHRcdGlucHV0OiBDb2xvckRhdGFBc3NlcnRpb25bRnJvbV1cblx0XHQpID0+IENvbG9yRGF0YUFzc2VydGlvbltUb107XG5cblx0XHRyZXR1cm4gKHZhbHVlOiBDb2xvckRhdGFBc3NlcnRpb25bRnJvbV0pOiBDb2xvckRhdGFBc3NlcnRpb25bVG9dID0+XG5cdFx0XHRzdHJ1Y3R1cmVkQ2xvbmUoY29udmVyc2lvbkZuKHZhbHVlKSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2V0dGluZyBjb252ZXJzaW9uIGZ1bmN0aW9uOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxufVxuXG5mdW5jdGlvbiBnZW5BbGxDb2xvclZhbHVlcyhjb2xvcjogSFNMKTogUGFydGlhbDxDb2xvckRhdGFFeHRlbmRlZD4ge1xuXHRjb25zdCByZXN1bHQ6IFBhcnRpYWw8Q29sb3JEYXRhRXh0ZW5kZWQ+ID0ge307XG5cblx0dHJ5IHtcblx0XHRjb25zdCBjbG9uZWRDb2xvciA9IGNvcmUuYmFzZS5jbG9uZShjb2xvcik7XG5cblx0XHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoY2xvbmVkQ29sb3IpKSB7XG5cdFx0XHRpZiAobW9kZS5lcnJvckxvZ3MpXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEludmFsaWQgY29sb3I6ICR7SlNPTi5zdHJpbmdpZnkoY2xvbmVkQ29sb3IpfWApO1xuXG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0cmVzdWx0LmNteWsgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnY215aycpIGFzIENNWUs7XG5cdFx0cmVzdWx0LmhleCA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdoZXgnKSBhcyBIZXg7XG5cdFx0cmVzdWx0LmhzbCA9IGNsb25lZENvbG9yO1xuXHRcdHJlc3VsdC5oc3YgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnaHN2JykgYXMgSFNWO1xuXHRcdHJlc3VsdC5sYWIgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnbGFiJykgYXMgTEFCO1xuXHRcdHJlc3VsdC5yZ2IgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAncmdiJykgYXMgUkdCO1xuXHRcdHJlc3VsdC5zbCA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdzbCcpIGFzIFNMO1xuXHRcdHJlc3VsdC5zdiA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdzdicpIGFzIFNWO1xuXHRcdHJlc3VsdC54eXogPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAneHl6JykgYXMgWFlaO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobW9kZS5lcnJvckxvZ3MpXG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIGFsbCBjb2xvciB2YWx1ZXM6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4ge307XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGNvbnZlcnNpb246IENvbW1vblV0aWxzRm5Db252ZXJzaW9uID0ge1xuXHRnZW5BbGxDb2xvclZhbHVlcyxcblx0Z2V0Q29udmVyc2lvbkZuXG59IGFzIGNvbnN0O1xuIl19