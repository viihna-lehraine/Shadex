// File: src/common/utils/conversion.ts
import { config } from '../../config';
import { core } from '../core';
import { paletteUtils } from '../../palette/common';
const convert = paletteUtils.convert;
const mode = config.mode;
function getConversionFn(from, to) {
    try {
        const fnName = `${from}To${to[0].toUpperCase() + to.slice(1)}`;
        if (!(fnName in convert))
            return undefined;
        const conversionFn = convert[fnName];
        return (value) => structuredClone(conversionFn(value));
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error getting conversion function: ${error}`);
        return undefined;
    }
}
function genAllColorValues(color) {
    const result = {};
    try {
        const clonedColor = core.clone(color);
        if (!core.validateColorValues(clonedColor)) {
            if (mode.logErrors)
                console.error(`Invalid color: ${JSON.stringify(clonedColor)}`);
            return {};
        }
        result.cmyk = convert.hslTo(clonedColor, 'cmyk');
        result.hex = convert.hslTo(clonedColor, 'hex');
        result.hsl = clonedColor;
        result.hsv = convert.hslTo(clonedColor, 'hsv');
        result.lab = convert.hslTo(clonedColor, 'lab');
        result.rgb = convert.hslTo(clonedColor, 'rgb');
        result.sl = convert.hslTo(clonedColor, 'sl');
        result.sv = convert.hslTo(clonedColor, 'sv');
        result.xyz = convert.hslTo(clonedColor, 'xyz');
        return result;
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error generating all color values: ${error}`);
        return {};
    }
}
export const conversion = {
    genAllColorValues,
    getConversionFn
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7QUFldkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN0QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVwRCxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3JDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFFekIsU0FBUyxlQUFlLENBSXZCLElBQVUsRUFDVixFQUFNO0lBRU4sSUFBSSxDQUFDO1FBQ0osTUFBTSxNQUFNLEdBQ1gsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQTBCLENBQUM7UUFFekUsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRTNDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBRVIsQ0FBQztRQUU1QixPQUFPLENBQUMsS0FBK0IsRUFBMEIsRUFBRSxDQUNsRSxlQUFlLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTlELE9BQU8sU0FBUyxDQUFDO0lBQ2xCLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxLQUFVO0lBQ3BDLE1BQU0sTUFBTSxHQUErQixFQUFFLENBQUM7SUFFOUMsSUFBSSxDQUFDO1FBQ0osTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV0QyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDNUMsSUFBSSxJQUFJLENBQUMsU0FBUztnQkFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFaEUsT0FBTyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQVMsQ0FBQztRQUN6RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDdEQsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQVEsQ0FBQztRQUN0RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFPLENBQUM7UUFDbkQsTUFBTSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQU8sQ0FBQztRQUNuRCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBRXRELE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTlELE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDekIsaUJBQWlCO0lBQ2pCLGVBQWU7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NvbW1vbi91dGlscy9jb252ZXJzaW9uLnRzXG5cbmltcG9ydCB7XG5cdENNWUssXG5cdENvbG9yRGF0YUFzc2VydGlvbixcblx0Q29sb3JEYXRhRXh0ZW5kZWQsXG5cdEhleCxcblx0SFNMLFxuXHRIU1YsXG5cdExBQixcblx0UkdCLFxuXHRTTCxcblx0U1YsXG5cdFhZWlxufSBmcm9tICcuLi8uLi9pbmRleCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgY29yZSB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgcGFsZXR0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vcGFsZXR0ZS9jb21tb24nO1xuXG5jb25zdCBjb252ZXJ0ID0gcGFsZXR0ZVV0aWxzLmNvbnZlcnQ7XG5jb25zdCBtb2RlID0gY29uZmlnLm1vZGU7XG5cbmZ1bmN0aW9uIGdldENvbnZlcnNpb25Gbjxcblx0RnJvbSBleHRlbmRzIGtleW9mIENvbG9yRGF0YUFzc2VydGlvbixcblx0VG8gZXh0ZW5kcyBrZXlvZiBDb2xvckRhdGFBc3NlcnRpb25cbj4oXG5cdGZyb206IEZyb20sXG5cdHRvOiBUb1xuKTogKCh2YWx1ZTogQ29sb3JEYXRhQXNzZXJ0aW9uW0Zyb21dKSA9PiBDb2xvckRhdGFBc3NlcnRpb25bVG9dKSB8IHVuZGVmaW5lZCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgZm5OYW1lID1cblx0XHRcdGAke2Zyb219VG8ke3RvWzBdLnRvVXBwZXJDYXNlKCkgKyB0by5zbGljZSgxKX1gIGFzIGtleW9mIHR5cGVvZiBjb252ZXJ0O1xuXG5cdFx0aWYgKCEoZm5OYW1lIGluIGNvbnZlcnQpKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0Y29uc3QgY29udmVyc2lvbkZuID0gY29udmVydFtmbk5hbWVdIGFzIHVua25vd24gYXMgKFxuXHRcdFx0aW5wdXQ6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXVxuXHRcdCkgPT4gQ29sb3JEYXRhQXNzZXJ0aW9uW1RvXTtcblxuXHRcdHJldHVybiAodmFsdWU6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXSk6IENvbG9yRGF0YUFzc2VydGlvbltUb10gPT5cblx0XHRcdHN0cnVjdHVyZWRDbG9uZShjb252ZXJzaW9uRm4odmFsdWUpKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobW9kZS5sb2dFcnJvcnMpXG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZXR0aW5nIGNvbnZlcnNpb24gZnVuY3Rpb246ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdlbkFsbENvbG9yVmFsdWVzKGNvbG9yOiBIU0wpOiBQYXJ0aWFsPENvbG9yRGF0YUV4dGVuZGVkPiB7XG5cdGNvbnN0IHJlc3VsdDogUGFydGlhbDxDb2xvckRhdGFFeHRlbmRlZD4gPSB7fTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IGNsb25lZENvbG9yID0gY29yZS5jbG9uZShjb2xvcik7XG5cblx0XHRpZiAoIWNvcmUudmFsaWRhdGVDb2xvclZhbHVlcyhjbG9uZWRDb2xvcikpIHtcblx0XHRcdGlmIChtb2RlLmxvZ0Vycm9ycylcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgSW52YWxpZCBjb2xvcjogJHtKU09OLnN0cmluZ2lmeShjbG9uZWRDb2xvcil9YCk7XG5cblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHRyZXN1bHQuY215ayA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdjbXlrJykgYXMgQ01ZSztcblx0XHRyZXN1bHQuaGV4ID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ2hleCcpIGFzIEhleDtcblx0XHRyZXN1bHQuaHNsID0gY2xvbmVkQ29sb3I7XG5cdFx0cmVzdWx0LmhzdiA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdoc3YnKSBhcyBIU1Y7XG5cdFx0cmVzdWx0LmxhYiA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdsYWInKSBhcyBMQUI7XG5cdFx0cmVzdWx0LnJnYiA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdyZ2InKSBhcyBSR0I7XG5cdFx0cmVzdWx0LnNsID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ3NsJykgYXMgU0w7XG5cdFx0cmVzdWx0LnN2ID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ3N2JykgYXMgU1Y7XG5cdFx0cmVzdWx0Lnh5eiA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICd4eXonKSBhcyBYWVo7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmxvZ0Vycm9ycylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgYWxsIGNvbG9yIHZhbHVlczogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiB7fTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgY29udmVyc2lvbiA9IHtcblx0Z2VuQWxsQ29sb3JWYWx1ZXMsXG5cdGdldENvbnZlcnNpb25GblxufSBhcyBjb25zdDtcbiJdfQ==