// File: src/common/utils/conversion.js
import { convert } from '../convert/index.js';
import { core } from '../core/index.js';
import { data } from '../../data/index.js';
import { log } from '../../classes/logger/index.js';
const mode = data.mode;
const logMode = mode.logging;
function getConversionFn(from, to) {
    try {
        const fnName = `${from}To${to[0].toUpperCase() + to.slice(1)}`;
        if (!(fnName in convert))
            return undefined;
        const conversionFn = convert[fnName];
        return (value) => structuredClone(conversionFn(value));
    }
    catch (error) {
        if (logMode.errors)
            log.error(`Error getting conversion function: ${error}`);
        return undefined;
    }
}
function genAllColorValues(color) {
    const result = {};
    try {
        const clonedColor = core.base.clone(color);
        if (!core.validate.colorValues(clonedColor)) {
            if (logMode.errors)
                log.error(`Invalid color: ${JSON.stringify(clonedColor)}`);
            return {};
        }
        result.cmyk = convert.hslTo(clonedColor, 'cmyk');
        result.hex = convert.hslTo(clonedColor, 'hex');
        result.hsl = clonedColor;
        result.hsv = convert.hslTo(clonedColor, 'hsv');
        result.lab = convert.hslTo(clonedColor, 'lab');
        result.rgb = convert.hslTo(clonedColor, 'rgb');
        result.sl = convert.hslTo(clonedColor, 'sl');
        result.sv = convert.hslTo(clonedColor, 'sv');
        result.xyz = convert.hslTo(clonedColor, 'xyz');
        return result;
    }
    catch (error) {
        if (logMode.errors)
            log.error(`Error generating all color values: ${error}`);
        return {};
    }
}
export const conversion = {
    genAllColorValues,
    getConversionFn
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7QUFnQnZDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVwRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3ZCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFN0IsU0FBUyxlQUFlLENBSXZCLElBQVUsRUFDVixFQUFNO0lBRU4sSUFBSSxDQUFDO1FBQ0osTUFBTSxNQUFNLEdBQ1gsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQTBCLENBQUM7UUFFekUsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRTNDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBRVIsQ0FBQztRQUU1QixPQUFPLENBQUMsS0FBK0IsRUFBMEIsRUFBRSxDQUNsRSxlQUFlLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsTUFBTTtZQUNqQixHQUFHLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTFELE9BQU8sU0FBUyxDQUFDO0lBQ2xCLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxLQUFVO0lBQ3BDLE1BQU0sTUFBTSxHQUErQixFQUFFLENBQUM7SUFFOUMsSUFBSSxDQUFDO1FBQ0osTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDN0MsSUFBSSxPQUFPLENBQUMsTUFBTTtnQkFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFNUQsT0FBTyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQVMsQ0FBQztRQUN6RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDdEQsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQVEsQ0FBQztRQUN0RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFPLENBQUM7UUFDbkQsTUFBTSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQU8sQ0FBQztRQUNuRCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBRXRELE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsTUFBTTtZQUNqQixHQUFHLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTFELE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQTRCO0lBQ2xELGlCQUFpQjtJQUNqQixlQUFlO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi5qc1xuXG5pbXBvcnQge1xuXHRDTVlLLFxuXHRDb2xvckRhdGFBc3NlcnRpb24sXG5cdENvbG9yRGF0YUV4dGVuZGVkLFxuXHRDb21tb25VdGlsc0ZuQ29udmVyc2lvbixcblx0SGV4LFxuXHRIU0wsXG5cdEhTVixcblx0TEFCLFxuXHRSR0IsXG5cdFNMLFxuXHRTVixcblx0WFlaXG59IGZyb20gJy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuLi9jb252ZXJ0L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi9jb3JlL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi8uLi9kYXRhL2luZGV4LmpzJztcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uLy4uL2NsYXNzZXMvbG9nZ2VyL2luZGV4LmpzJztcblxuY29uc3QgbW9kZSA9IGRhdGEubW9kZTtcbmNvbnN0IGxvZ01vZGUgPSBtb2RlLmxvZ2dpbmc7XG5cbmZ1bmN0aW9uIGdldENvbnZlcnNpb25Gbjxcblx0RnJvbSBleHRlbmRzIGtleW9mIENvbG9yRGF0YUFzc2VydGlvbixcblx0VG8gZXh0ZW5kcyBrZXlvZiBDb2xvckRhdGFBc3NlcnRpb25cbj4oXG5cdGZyb206IEZyb20sXG5cdHRvOiBUb1xuKTogKCh2YWx1ZTogQ29sb3JEYXRhQXNzZXJ0aW9uW0Zyb21dKSA9PiBDb2xvckRhdGFBc3NlcnRpb25bVG9dKSB8IHVuZGVmaW5lZCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgZm5OYW1lID1cblx0XHRcdGAke2Zyb219VG8ke3RvWzBdLnRvVXBwZXJDYXNlKCkgKyB0by5zbGljZSgxKX1gIGFzIGtleW9mIHR5cGVvZiBjb252ZXJ0O1xuXG5cdFx0aWYgKCEoZm5OYW1lIGluIGNvbnZlcnQpKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0Y29uc3QgY29udmVyc2lvbkZuID0gY29udmVydFtmbk5hbWVdIGFzIHVua25vd24gYXMgKFxuXHRcdFx0aW5wdXQ6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXVxuXHRcdCkgPT4gQ29sb3JEYXRhQXNzZXJ0aW9uW1RvXTtcblxuXHRcdHJldHVybiAodmFsdWU6IENvbG9yRGF0YUFzc2VydGlvbltGcm9tXSk6IENvbG9yRGF0YUFzc2VydGlvbltUb10gPT5cblx0XHRcdHN0cnVjdHVyZWRDbG9uZShjb252ZXJzaW9uRm4odmFsdWUpKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMpXG5cdFx0XHRsb2cuZXJyb3IoYEVycm9yIGdldHRpbmcgY29udmVyc2lvbiBmdW5jdGlvbjogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2VuQWxsQ29sb3JWYWx1ZXMoY29sb3I6IEhTTCk6IFBhcnRpYWw8Q29sb3JEYXRhRXh0ZW5kZWQ+IHtcblx0Y29uc3QgcmVzdWx0OiBQYXJ0aWFsPENvbG9yRGF0YUV4dGVuZGVkPiA9IHt9O1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQ29sb3IgPSBjb3JlLmJhc2UuY2xvbmUoY29sb3IpO1xuXG5cdFx0aWYgKCFjb3JlLnZhbGlkYXRlLmNvbG9yVmFsdWVzKGNsb25lZENvbG9yKSkge1xuXHRcdFx0aWYgKGxvZ01vZGUuZXJyb3JzKVxuXHRcdFx0XHRsb2cuZXJyb3IoYEludmFsaWQgY29sb3I6ICR7SlNPTi5zdHJpbmdpZnkoY2xvbmVkQ29sb3IpfWApO1xuXG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0cmVzdWx0LmNteWsgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnY215aycpIGFzIENNWUs7XG5cdFx0cmVzdWx0LmhleCA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdoZXgnKSBhcyBIZXg7XG5cdFx0cmVzdWx0LmhzbCA9IGNsb25lZENvbG9yO1xuXHRcdHJlc3VsdC5oc3YgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnaHN2JykgYXMgSFNWO1xuXHRcdHJlc3VsdC5sYWIgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnbGFiJykgYXMgTEFCO1xuXHRcdHJlc3VsdC5yZ2IgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAncmdiJykgYXMgUkdCO1xuXHRcdHJlc3VsdC5zbCA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdzbCcpIGFzIFNMO1xuXHRcdHJlc3VsdC5zdiA9IGNvbnZlcnQuaHNsVG8oY2xvbmVkQ29sb3IsICdzdicpIGFzIFNWO1xuXHRcdHJlc3VsdC54eXogPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAneHl6JykgYXMgWFlaO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMpXG5cdFx0XHRsb2cuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgYWxsIGNvbG9yIHZhbHVlczogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiB7fTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgY29udmVyc2lvbjogQ29tbW9uVXRpbHNGbkNvbnZlcnNpb24gPSB7XG5cdGdlbkFsbENvbG9yVmFsdWVzLFxuXHRnZXRDb252ZXJzaW9uRm5cbn0gYXMgY29uc3Q7XG4iXX0=