// File: src/common/utils/conversion.js
import { convert } from '../convert/index.js';
import { core } from '../core/index.js';
import { data } from '../../data/index.js';
const mode = data.mode;
function getConversionFn(from, to) {
    try {
        const fnName = `${from}To${to[0].toUpperCase() + to.slice(1)}`;
        if (!(fnName in convert))
            return undefined;
        const conversionFn = convert[fnName];
        return (value) => structuredClone(conversionFn(value));
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error getting conversion function: ${error}`);
        return undefined;
    }
}
function genAllColorValues(color) {
    const result = {};
    try {
        const clonedColor = core.base.clone(color);
        if (!core.validate.colorValues(clonedColor)) {
            if (mode.errorLogs)
                console.error(`Invalid color: ${JSON.stringify(clonedColor)}`);
            return {};
        }
        result.cmyk = convert.hslTo(clonedColor, 'cmyk');
        result.hex = convert.hslTo(clonedColor, 'hex');
        result.hsl = clonedColor;
        result.hsv = convert.hslTo(clonedColor, 'hsv');
        result.lab = convert.hslTo(clonedColor, 'lab');
        result.rgb = convert.hslTo(clonedColor, 'rgb');
        result.sl = convert.hslTo(clonedColor, 'sl');
        result.sv = convert.hslTo(clonedColor, 'sv');
        result.xyz = convert.hslTo(clonedColor, 'xyz');
        return result;
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating all color values: ${error}`);
        return {};
    }
}
export const conversion = {
    genAllColorValues,
    getConversionFn
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7QUFnQnZDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTNDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFFdkIsU0FBUyxlQUFlLENBSXZCLElBQVUsRUFDVixFQUFNO0lBRU4sSUFBSSxDQUFDO1FBQ0osTUFBTSxNQUFNLEdBQ1gsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQTBCLENBQUM7UUFFekUsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRTNDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBRVIsQ0FBQztRQUU1QixPQUFPLENBQUMsS0FBK0IsRUFBMEIsRUFBRSxDQUNsRSxlQUFlLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTlELE9BQU8sU0FBUyxDQUFDO0lBQ2xCLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxLQUFVO0lBQ3BDLE1BQU0sTUFBTSxHQUErQixFQUFFLENBQUM7SUFFOUMsSUFBSSxDQUFDO1FBQ0osTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDN0MsSUFBSSxJQUFJLENBQUMsU0FBUztnQkFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFaEUsT0FBTyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQVMsQ0FBQztRQUN6RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFRLENBQUM7UUFDdEQsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQVEsQ0FBQztRQUN0RCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFPLENBQUM7UUFDbkQsTUFBTSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQU8sQ0FBQztRQUNuRCxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBUSxDQUFDO1FBRXRELE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTlELE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQTRCO0lBQ2xELGlCQUFpQjtJQUNqQixlQUFlO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9jb21tb24vdXRpbHMvY29udmVyc2lvbi5qc1xuXG5pbXBvcnQge1xuXHRDTVlLLFxuXHRDb2xvckRhdGFBc3NlcnRpb24sXG5cdENvbG9yRGF0YUV4dGVuZGVkLFxuXHRDb21tb25VdGlsc0ZuQ29udmVyc2lvbixcblx0SGV4LFxuXHRIU0wsXG5cdEhTVixcblx0TEFCLFxuXHRSR0IsXG5cdFNMLFxuXHRTVixcblx0WFlaXG59IGZyb20gJy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuLi9jb252ZXJ0L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi9jb3JlL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi8uLi9kYXRhL2luZGV4LmpzJztcblxuY29uc3QgbW9kZSA9IGRhdGEubW9kZTtcblxuZnVuY3Rpb24gZ2V0Q29udmVyc2lvbkZuPFxuXHRGcm9tIGV4dGVuZHMga2V5b2YgQ29sb3JEYXRhQXNzZXJ0aW9uLFxuXHRUbyBleHRlbmRzIGtleW9mIENvbG9yRGF0YUFzc2VydGlvblxuPihcblx0ZnJvbTogRnJvbSxcblx0dG86IFRvXG4pOiAoKHZhbHVlOiBDb2xvckRhdGFBc3NlcnRpb25bRnJvbV0pID0+IENvbG9yRGF0YUFzc2VydGlvbltUb10pIHwgdW5kZWZpbmVkIHtcblx0dHJ5IHtcblx0XHRjb25zdCBmbk5hbWUgPVxuXHRcdFx0YCR7ZnJvbX1UbyR7dG9bMF0udG9VcHBlckNhc2UoKSArIHRvLnNsaWNlKDEpfWAgYXMga2V5b2YgdHlwZW9mIGNvbnZlcnQ7XG5cblx0XHRpZiAoIShmbk5hbWUgaW4gY29udmVydCkpIHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRjb25zdCBjb252ZXJzaW9uRm4gPSBjb252ZXJ0W2ZuTmFtZV0gYXMgdW5rbm93biBhcyAoXG5cdFx0XHRpbnB1dDogQ29sb3JEYXRhQXNzZXJ0aW9uW0Zyb21dXG5cdFx0KSA9PiBDb2xvckRhdGFBc3NlcnRpb25bVG9dO1xuXG5cdFx0cmV0dXJuICh2YWx1ZTogQ29sb3JEYXRhQXNzZXJ0aW9uW0Zyb21dKTogQ29sb3JEYXRhQXNzZXJ0aW9uW1RvXSA9PlxuXHRcdFx0c3RydWN0dXJlZENsb25lKGNvbnZlcnNpb25Gbih2YWx1ZSkpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdldHRpbmcgY29udmVyc2lvbiBmdW5jdGlvbjogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2VuQWxsQ29sb3JWYWx1ZXMoY29sb3I6IEhTTCk6IFBhcnRpYWw8Q29sb3JEYXRhRXh0ZW5kZWQ+IHtcblx0Y29uc3QgcmVzdWx0OiBQYXJ0aWFsPENvbG9yRGF0YUV4dGVuZGVkPiA9IHt9O1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQ29sb3IgPSBjb3JlLmJhc2UuY2xvbmUoY29sb3IpO1xuXG5cdFx0aWYgKCFjb3JlLnZhbGlkYXRlLmNvbG9yVmFsdWVzKGNsb25lZENvbG9yKSkge1xuXHRcdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBJbnZhbGlkIGNvbG9yOiAke0pTT04uc3RyaW5naWZ5KGNsb25lZENvbG9yKX1gKTtcblxuXHRcdFx0cmV0dXJuIHt9O1xuXHRcdH1cblxuXHRcdHJlc3VsdC5jbXlrID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ2NteWsnKSBhcyBDTVlLO1xuXHRcdHJlc3VsdC5oZXggPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnaGV4JykgYXMgSGV4O1xuXHRcdHJlc3VsdC5oc2wgPSBjbG9uZWRDb2xvcjtcblx0XHRyZXN1bHQuaHN2ID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ2hzdicpIGFzIEhTVjtcblx0XHRyZXN1bHQubGFiID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ2xhYicpIGFzIExBQjtcblx0XHRyZXN1bHQucmdiID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ3JnYicpIGFzIFJHQjtcblx0XHRyZXN1bHQuc2wgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnc2wnKSBhcyBTTDtcblx0XHRyZXN1bHQuc3YgPSBjb252ZXJ0LmhzbFRvKGNsb25lZENvbG9yLCAnc3YnKSBhcyBTVjtcblx0XHRyZXN1bHQueHl6ID0gY29udmVydC5oc2xUbyhjbG9uZWRDb2xvciwgJ3h5eicpIGFzIFhZWjtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyBhbGwgY29sb3IgdmFsdWVzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIHt9O1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBjb252ZXJzaW9uOiBDb21tb25VdGlsc0ZuQ29udmVyc2lvbiA9IHtcblx0Z2VuQWxsQ29sb3JWYWx1ZXMsXG5cdGdldENvbnZlcnNpb25GblxufSBhcyBjb25zdDtcbiJdfQ==