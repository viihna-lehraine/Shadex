// File: src/common/utils/random.js
import { core } from '../core/index.js';
import { data } from '../../data/index.js';
const defaults = data.defaults;
const mode = data.mode;
function hsl(enableAlpha) {
    try {
        const alpha = enableAlpha ? Math.round(Math.random() * 100) / 100 : 1;
        const hsl = {
            value: {
                hue: core.sanitize.radial(Math.floor(Math.random() * 360)),
                saturation: core.sanitize.percentile(Math.floor(Math.random() * 101)),
                lightness: core.sanitize.percentile(Math.floor(Math.random() * 101)),
                alpha: core.brand.asAlphaRange(alpha)
            },
            format: 'hsl'
        };
        if (!core.validate.colorValues(hsl)) {
            if (mode.errorLogs)
                console.error(`Invalid random HSL color value ${JSON.stringify(hsl)}`);
            const unbrandedHSL = core.base.clone(defaults.colors.hsl);
            return core.brandColor.asHSL(unbrandedHSL);
        }
        if (!mode.quiet)
            console.log(`Generated randomHSL: ${JSON.stringify(hsl)}`);
        return hsl;
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating random HSL color: ${error}`);
        const unbrandedHSL = core.base.clone(defaults.colors.hsl);
        return core.brandColor.asHSL(unbrandedHSL);
    }
}
function sl(enableAlpha) {
    try {
        const alpha = enableAlpha ? Math.round(Math.random() * 100) / 100 : 1;
        const sl = {
            value: {
                saturation: core.sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100))),
                lightness: core.sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100))),
                alpha: core.brand.asAlphaRange(alpha)
            },
            format: 'sl'
        };
        if (!core.validate.colorValues(sl)) {
            if (mode.errorLogs)
                console.error(`Invalid random SV color value ${JSON.stringify(sl)}`);
            const unbrandedSL = core.base.clone(defaults.colors.sl);
            return core.brandColor.asSL(unbrandedSL);
        }
        if (!mode.quiet)
            console.log(`Generated randomSL: ${JSON.stringify(sl)}`);
        return sl;
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating random SL color: ${error}`);
        const unbrandedSL = core.base.clone(defaults.colors.sl);
        return core.brandColor.asSL(unbrandedSL);
    }
}
export const random = {
    hsl,
    sl
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlscy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBR25DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMvQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBRXZCLFNBQVMsR0FBRyxDQUFDLFdBQW9CO0lBQ2hDLElBQUksQ0FBQztRQUNKLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsTUFBTSxHQUFHLEdBQVE7WUFDaEIsS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDMUQsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FDL0I7Z0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FDL0I7Z0JBQ0QsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQzthQUNyQztZ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QUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU3RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXhELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQXdCO0lBQzFDLEdBQUc7SUFDSCxFQUFFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9jb21tb24vdXRpbHMvcmFuZG9tLmpzXG5cbmltcG9ydCB7IENvbW1vblV0aWxzRm5SYW5kb20sIEhTTCwgU0wgfSBmcm9tICcuLi8uLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vY29yZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9pbmRleC5qcyc7XG5cbmNvbnN0IGRlZmF1bHRzID0gZGF0YS5kZWZhdWx0cztcbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5cbmZ1bmN0aW9uIGhzbChlbmFibGVBbHBoYTogYm9vbGVhbik6IEhTTCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgYWxwaGEgPSBlbmFibGVBbHBoYSA/IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMCkgLyAxMDAgOiAxO1xuXHRcdGNvbnN0IGhzbDogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlLnNhbml0aXplLnJhZGlhbChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzNjApKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5zYW5pdGl6ZS5wZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSlcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLnNhbml0aXplLnBlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRhbHBoYTogY29yZS5icmFuZC5hc0FscGhhUmFuZ2UoYWxwaGEpXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRcdGBJbnZhbGlkIHJhbmRvbSBIU0wgY29sb3IgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWBcblx0XHRcdFx0KTtcblxuXHRcdFx0Y29uc3QgdW5icmFuZGVkSFNMID0gY29yZS5iYXNlLmNsb25lKGRlZmF1bHRzLmNvbG9ycy5oc2wpO1xuXG5cdFx0XHRyZXR1cm4gY29yZS5icmFuZENvbG9yLmFzSFNMKHVuYnJhbmRlZEhTTCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFtb2RlLnF1aWV0KVxuXHRcdFx0Y29uc29sZS5sb2coYEdlbmVyYXRlZCByYW5kb21IU0w6ICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gKTtcblxuXHRcdHJldHVybiBoc2w7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyByYW5kb20gSFNMIGNvbG9yOiAke2Vycm9yfWApO1xuXG5cdFx0Y29uc3QgdW5icmFuZGVkSFNMID0gY29yZS5iYXNlLmNsb25lKGRlZmF1bHRzLmNvbG9ycy5oc2wpO1xuXG5cdFx0cmV0dXJuIGNvcmUuYnJhbmRDb2xvci5hc0hTTCh1bmJyYW5kZWRIU0wpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNsKGVuYWJsZUFscGhhOiBib29sZWFuKTogU0wge1xuXHR0cnkge1xuXHRcdGNvbnN0IGFscGhhID0gZW5hYmxlQWxwaGEgPyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDApIC8gMTAwIDogMTtcblx0XHRjb25zdCBzbDogU0wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRzYXR1cmF0aW9uOiBjb3JlLnNhbml0aXplLnBlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBNYXRoLnJhbmRvbSgpICogMTAwKSlcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLnNhbml0aXplLnBlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBNYXRoLnJhbmRvbSgpICogMTAwKSlcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGNvcmUuYnJhbmQuYXNBbHBoYVJhbmdlKGFscGhhKVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ3NsJ1xuXHRcdH07XG5cblx0XHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoc2wgYXMgU0wpKSB7XG5cdFx0XHRpZiAobW9kZS5lcnJvckxvZ3MpXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdFx0YEludmFsaWQgcmFuZG9tIFNWIGNvbG9yIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoc2wpfWBcblx0XHRcdFx0KTtcblxuXHRcdFx0Y29uc3QgdW5icmFuZGVkU0wgPSBjb3JlLmJhc2UuY2xvbmUoZGVmYXVsdHMuY29sb3JzLnNsKTtcblxuXHRcdFx0cmV0dXJuIGNvcmUuYnJhbmRDb2xvci5hc1NMKHVuYnJhbmRlZFNMKTtcblx0XHR9XG5cblx0XHRpZiAoIW1vZGUucXVpZXQpXG5cdFx0XHRjb25zb2xlLmxvZyhgR2VuZXJhdGVkIHJhbmRvbVNMOiAke0pTT04uc3RyaW5naWZ5KHNsKX1gKTtcblxuXHRcdHJldHVybiBzbDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobW9kZS5lcnJvckxvZ3MpXG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIHJhbmRvbSBTTCBjb2xvcjogJHtlcnJvcn1gKTtcblxuXHRcdGNvbnN0IHVuYnJhbmRlZFNMID0gY29yZS5iYXNlLmNsb25lKGRlZmF1bHRzLmNvbG9ycy5zbCk7XG5cblx0XHRyZXR1cm4gY29yZS5icmFuZENvbG9yLmFzU0wodW5icmFuZGVkU0wpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCByYW5kb206IENvbW1vblV0aWxzRm5SYW5kb20gPSB7XG5cdGhzbCxcblx0c2xcbn0gYXMgY29uc3Q7XG4iXX0=