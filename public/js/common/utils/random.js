// File: src/common/utils/random.ts
import { config } from '../../config';
import { core } from '../core';
const defaults = config.defaults;
const mode = config.mode;
function hsl(enableAlpha) {
    try {
        const alpha = enableAlpha ? Math.random() : 1;
        const hsl = {
            value: {
                hue: core.sanitizeRadial(Math.floor(Math.random() * 360)),
                saturation: core.sanitizePercentage(Math.floor(Math.random() * 101)),
                lightness: core.sanitizePercentage(Math.floor(Math.random() * 101)),
                alpha
            },
            format: 'hsl'
        };
        if (!core.validateColorValues(hsl)) {
            if (mode.logErrors)
                console.error(`Invalid random HSL color value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.colors.hsl);
        }
        if (!mode.quiet)
            console.log(`Generated randomHSL: ${JSON.stringify(hsl)}`);
        return hsl;
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error generating random HSL color: ${error}`);
        return core.clone(defaults.colors.hsl);
    }
}
function sl(enableAlpha) {
    try {
        const alpha = enableAlpha ? Math.random() : 1;
        const sl = {
            value: {
                saturation: core.sanitizePercentage(Math.max(0, Math.min(100, Math.random() * 100))),
                lightness: core.sanitizePercentage(Math.max(0, Math.min(100, Math.random() * 100))),
                alpha
            },
            format: 'sl'
        };
        if (!core.validateColorValues(sl)) {
            if (mode.logErrors)
                console.error(`Invalid random SV color value ${JSON.stringify(sl)}`);
            return core.clone(defaults.colors.sl);
        }
        if (!mode.quiet)
            console.log(`Generated randomSL: ${JSON.stringify(sl)}`);
        return sl;
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error generating random SL color: ${error}`);
        return core.clone(defaults.colors.sl);
    }
}
export const random = { hsl, sl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlscy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBR25DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUvQixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ2pDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFFekIsU0FBUyxHQUFHLENBQUMsV0FBb0I7SUFDaEMsSUFBSSxDQUFDO1FBQ0osTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLEdBQUcsR0FBUTtZQUNoQixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ3pELFVBQVUsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUMvQjtnQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FDL0I7Z0JBQ0QsS0FBSzthQUNMO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3BDLElBQUksSUFBSSxDQUFDLFNBQVM7Z0JBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQ1osa0NBQWtDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDdkQsQ0FBQztZQUVILE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU1RCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QyxDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsRUFBRSxDQUFDLFdBQW9CO0lBQy9CLElBQUksQ0FBQztRQUNKLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsTUFBTSxFQUFFLEdBQU87WUFDZCxLQUFLLEVBQUU7Z0JBQ04sVUFBVSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQy9DO2dCQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUMvQztnQkFDRCxLQUFLO2FBQ0w7WUFDRCxNQUFNLEVBQUUsSUFBSTtTQUNaLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQVEsQ0FBQyxFQUFFLENBQUM7WUFDekMsSUFBSSxJQUFJLENBQUMsU0FBUztnQkFDakIsT0FBTyxDQUFDLEtBQUssQ0FDWixpQ0FBaUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUNyRCxDQUFDO1lBRUgsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTFELE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTdELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NvbW1vbi91dGlscy9yYW5kb20udHNcblxuaW1wb3J0IHsgSFNMLCBTTCB9IGZyb20gJy4uLy4uL2luZGV4JztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vY29yZSc7XG5cbmNvbnN0IGRlZmF1bHRzID0gY29uZmlnLmRlZmF1bHRzO1xuY29uc3QgbW9kZSA9IGNvbmZpZy5tb2RlO1xuXG5mdW5jdGlvbiBoc2woZW5hYmxlQWxwaGE6IGJvb2xlYW4pOiBIU0wge1xuXHR0cnkge1xuXHRcdGNvbnN0IGFscGhhID0gZW5hYmxlQWxwaGEgPyBNYXRoLnJhbmRvbSgpIDogMTtcblx0XHRjb25zdCBoc2w6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZS5zYW5pdGl6ZVJhZGlhbChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzNjApKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5zYW5pdGl6ZVBlcmNlbnRhZ2UoXG5cdFx0XHRcdFx0TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuc2FuaXRpemVQZXJjZW50YWdlKFxuXHRcdFx0XHRcdE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSlcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGFcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdGlmICghY29yZS52YWxpZGF0ZUNvbG9yVmFsdWVzKGhzbCkpIHtcblx0XHRcdGlmIChtb2RlLmxvZ0Vycm9ycylcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0XHRgSW52YWxpZCByYW5kb20gSFNMIGNvbG9yIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gXG5cdFx0XHRcdCk7XG5cblx0XHRcdHJldHVybiBjb3JlLmNsb25lKGRlZmF1bHRzLmNvbG9ycy5oc2wpO1xuXHRcdH1cblxuXHRcdGlmICghbW9kZS5xdWlldClcblx0XHRcdGNvbnNvbGUubG9nKGBHZW5lcmF0ZWQgcmFuZG9tSFNMOiAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCk7XG5cblx0XHRyZXR1cm4gaHNsO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmxvZ0Vycm9ycylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgcmFuZG9tIEhTTCBjb2xvcjogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiBjb3JlLmNsb25lKGRlZmF1bHRzLmNvbG9ycy5oc2wpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNsKGVuYWJsZUFscGhhOiBib29sZWFuKTogU0wge1xuXHR0cnkge1xuXHRcdGNvbnN0IGFscGhhID0gZW5hYmxlQWxwaGEgPyBNYXRoLnJhbmRvbSgpIDogMTtcblx0XHRjb25zdCBzbDogU0wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRzYXR1cmF0aW9uOiBjb3JlLnNhbml0aXplUGVyY2VudGFnZShcblx0XHRcdFx0XHRNYXRoLm1heCgwLCBNYXRoLm1pbigxMDAsIE1hdGgucmFuZG9tKCkgKiAxMDApKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuc2FuaXRpemVQZXJjZW50YWdlKFxuXHRcdFx0XHRcdE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgTWF0aC5yYW5kb20oKSAqIDEwMCkpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGFscGhhXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnc2wnXG5cdFx0fTtcblxuXHRcdGlmICghY29yZS52YWxpZGF0ZUNvbG9yVmFsdWVzKHNsIGFzIFNMKSkge1xuXHRcdFx0aWYgKG1vZGUubG9nRXJyb3JzKVxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRcdGBJbnZhbGlkIHJhbmRvbSBTViBjb2xvciB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KHNsKX1gXG5cdFx0XHRcdCk7XG5cblx0XHRcdHJldHVybiBjb3JlLmNsb25lKGRlZmF1bHRzLmNvbG9ycy5zbCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFtb2RlLnF1aWV0KVxuXHRcdFx0Y29uc29sZS5sb2coYEdlbmVyYXRlZCByYW5kb21TTDogJHtKU09OLnN0cmluZ2lmeShzbCl9YCk7XG5cblx0XHRyZXR1cm4gc2w7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUubG9nRXJyb3JzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyByYW5kb20gU0wgY29sb3I6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gY29yZS5jbG9uZShkZWZhdWx0cy5jb2xvcnMuc2wpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCByYW5kb20gPSB7IGhzbCwgc2wgfSBhcyBjb25zdDtcbiJdfQ==