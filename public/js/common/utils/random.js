// File: src/common/utils/random.js
import { core } from '../core/index.js';
import { data } from '../../data/index.js';
import { log } from '../../classes/logger/index.js';
const defaults = data.defaults;
const logMode = data.mode.logging;
const mode = data.mode;
function hsl(enableAlpha) {
    try {
        const alpha = enableAlpha ? Math.round(Math.random() * 100) / 100 : 1;
        const hsl = {
            value: {
                hue: core.sanitize.radial(Math.floor(Math.random() * 360)),
                saturation: core.sanitize.percentile(Math.floor(Math.random() * 101)),
                lightness: core.sanitize.percentile(Math.floor(Math.random() * 101)),
                alpha: core.brand.asAlphaRange(alpha)
            },
            format: 'hsl'
        };
        if (!core.validate.colorValues(hsl)) {
            if (logMode.errors)
                log.error(`Invalid random HSL color value ${JSON.stringify(hsl)}`);
            const unbrandedHSL = core.base.clone(defaults.colors.hsl);
            return core.brandColor.asHSL(unbrandedHSL);
        }
        if (!mode.quiet && !logMode.info)
            log.info(`Generated randomHSL: ${JSON.stringify(hsl)}`);
        return hsl;
    }
    catch (error) {
        if (logMode.errors)
            log.error(`Error generating random HSL color: ${error}`);
        const unbrandedHSL = core.base.clone(defaults.colors.hsl);
        return core.brandColor.asHSL(unbrandedHSL);
    }
}
function sl(enableAlpha) {
    try {
        const alpha = enableAlpha ? Math.round(Math.random() * 100) / 100 : 1;
        const sl = {
            value: {
                saturation: core.sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100))),
                lightness: core.sanitize.percentile(Math.max(0, Math.min(100, Math.random() * 100))),
                alpha: core.brand.asAlphaRange(alpha)
            },
            format: 'sl'
        };
        if (!core.validate.colorValues(sl)) {
            if (logMode.errors)
                log.error(`Invalid random SV color value ${JSON.stringify(sl)}`);
            const unbrandedSL = core.base.clone(defaults.colors.sl);
            return core.brandColor.asSL(unbrandedSL);
        }
        if (!mode.quiet && logMode.info)
            log.info(`Generated randomSL: ${JSON.stringify(sl)}`);
        return sl;
    }
    catch (error) {
        if (logMode.errors)
            log.error(`Error generating random SL color: ${error}`);
        const unbrandedSL = core.base.clone(defaults.colors.sl);
        return core.brandColor.asSL(unbrandedSL);
    }
}
export const random = {
    hsl,
    sl
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlscy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBR25DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXBELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUV2QixTQUFTLEdBQUcsQ0FBQyxXQUFvQjtJQUNoQyxJQUFJLENBQUM7UUFDSixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sR0FBRyxHQUFRO1lBQ2hCLEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQzFELFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQy9CO2dCQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMs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LENBQUM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsSUFBSTtZQUM5QixHQUFHLENBQUMsSUFBSSxDQUFDLHVCQUF1QixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV2RCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLE1BQU07WUFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUV6RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXhELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQXdCO0lBQzFDLEdBQUc7SUFDSCxFQUFFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9jb21tb24vdXRpbHMvcmFuZG9tLmpzXG5cbmltcG9ydCB7IENvbW1vblV0aWxzRm5SYW5kb20sIEhTTCwgU0wgfSBmcm9tICcuLi8uLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vY29yZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi8uLi9jbGFzc2VzL2xvZ2dlci9pbmRleC5qcyc7XG5cbmNvbnN0IGRlZmF1bHRzID0gZGF0YS5kZWZhdWx0cztcbmNvbnN0IGxvZ01vZGUgPSBkYXRhLm1vZGUubG9nZ2luZztcbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5cbmZ1bmN0aW9uIGhzbChlbmFibGVBbHBoYTogYm9vbGVhbik6IEhTTCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgYWxwaGEgPSBlbmFibGVBbHBoYSA/IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMCkgLyAxMDAgOiAxO1xuXHRcdGNvbnN0IGhzbDogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlLnNhbml0aXplLnJhZGlhbChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzNjApKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5zYW5pdGl6ZS5wZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSlcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLnNhbml0aXplLnBlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRhbHBoYTogY29yZS5icmFuZC5hc0FscGhhUmFuZ2UoYWxwaGEpXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdFx0aWYgKGxvZ01vZGUuZXJyb3JzKVxuXHRcdFx0XHRsb2cuZXJyb3IoXG5cdFx0XHRcdFx0YEludmFsaWQgcmFuZG9tIEhTTCBjb2xvciB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRjb25zdCB1bmJyYW5kZWRIU0wgPSBjb3JlLmJhc2UuY2xvbmUoZGVmYXVsdHMuY29sb3JzLmhzbCk7XG5cblx0XHRcdHJldHVybiBjb3JlLmJyYW5kQ29sb3IuYXNIU0wodW5icmFuZGVkSFNMKTtcblx0XHR9XG5cblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgIWxvZ01vZGUuaW5mbylcblx0XHRcdGxvZy5pbmZvKGBHZW5lcmF0ZWQgcmFuZG9tSFNMOiAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCk7XG5cblx0XHRyZXR1cm4gaHNsO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChsb2dNb2RlLmVycm9ycylcblx0XHRcdGxvZy5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyByYW5kb20gSFNMIGNvbG9yOiAke2Vycm9yfWApO1xuXG5cdFx0Y29uc3QgdW5icmFuZGVkSFNMID0gY29yZS5iYXNlLmNsb25lKGRlZmF1bHRzLmNvbG9ycy5oc2wpO1xuXG5cdFx0cmV0dXJuIGNvcmUuYnJhbmRDb2xvci5hc0hTTCh1bmJyYW5kZWRIU0wpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNsKGVuYWJsZUFscGhhOiBib29sZWFuKTogU0wge1xuXHR0cnkge1xuXHRcdGNvbnN0IGFscGhhID0gZW5hYmxlQWxwaGEgPyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDApIC8gMTAwIDogMTtcblx0XHRjb25zdCBzbDogU0wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRzYXR1cmF0aW9uOiBjb3JlLnNhbml0aXplLnBlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBNYXRoLnJhbmRvbSgpICogMTAwKSlcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLnNhbml0aXplLnBlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBNYXRoLnJhbmRvbSgpICogMTAwKSlcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGNvcmUuYnJhbmQuYXNBbHBoYVJhbmdlKGFscGhhKVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ3NsJ1xuXHRcdH07XG5cblx0XHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoc2wgYXMgU0wpKSB7XG5cdFx0XHRpZiAobG9nTW9kZS5lcnJvcnMpXG5cdFx0XHRcdGxvZy5lcnJvcihcblx0XHRcdFx0XHRgSW52YWxpZCByYW5kb20gU1YgY29sb3IgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShzbCl9YFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRjb25zdCB1bmJyYW5kZWRTTCA9IGNvcmUuYmFzZS5jbG9uZShkZWZhdWx0cy5jb2xvcnMuc2wpO1xuXG5cdFx0XHRyZXR1cm4gY29yZS5icmFuZENvbG9yLmFzU0wodW5icmFuZGVkU0wpO1xuXHRcdH1cblxuXHRcdGlmICghbW9kZS5xdWlldCAmJiBsb2dNb2RlLmluZm8pXG5cdFx0XHRsb2cuaW5mbyhgR2VuZXJhdGVkIHJhbmRvbVNMOiAke0pTT04uc3RyaW5naWZ5KHNsKX1gKTtcblxuXHRcdHJldHVybiBzbDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMpXG5cdFx0XHRsb2cuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgcmFuZG9tIFNMIGNvbG9yOiAke2Vycm9yfWApO1xuXG5cdFx0Y29uc3QgdW5icmFuZGVkU0wgPSBjb3JlLmJhc2UuY2xvbmUoZGVmYXVsdHMuY29sb3JzLnNsKTtcblxuXHRcdHJldHVybiBjb3JlLmJyYW5kQ29sb3IuYXNTTCh1bmJyYW5kZWRTTCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHJhbmRvbTogQ29tbW9uVXRpbHNGblJhbmRvbSA9IHtcblx0aHNsLFxuXHRzbFxufSBhcyBjb25zdDtcbiJdfQ==