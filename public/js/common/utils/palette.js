// File: src/common/utils/palette.js
import { core } from '../core/index.js';
import { data } from '../../data/index.js';
import { helpers } from '../helpers/index.js';
import { logger } from '../../logger/index.js';
const mode = data.mode;
const logMode = mode.logging;
function createObject(type, items, baseColor, numBoxes, paletteID, enableAlpha, limitDark, limitGray, limitLight) {
    return {
        id: `${type}_${paletteID}`,
        items,
        metadata: {
            name: '',
            timestamp: core.getFormattedTimestamp(),
            swatches: numBoxes,
            type,
            flags: {
                enableAlpha: enableAlpha,
                limitDarkness: limitDark,
                limitGrayness: limitGray,
                limitLightness: limitLight
            },
            customColor: {
                hslColor: baseColor,
                convertedColors: items[0]?.colors || {}
            }
        }
    };
}
export function populateOutputBox(color, boxNumber) {
    try {
        const clonedColor = core.guards.isColor(color)
            ? core.base.clone(color)
            : core.convert.colorStringToColor(color);
        if (!core.validate.colorValues(clonedColor)) {
            if (logMode.errors)
                logger.error('Invalid color values.');
            helpers.dom.showToast('Invalid color.');
            return;
        }
        const colorTextOutputBox = document.getElementById(`color-text-output-box-${boxNumber}`);
        if (!colorTextOutputBox)
            return;
        const stringifiedColor = core.convert.colorToCSSColorString(clonedColor);
        if (!mode.quiet && logMode.info && logMode.verbosity > 0)
            logger.info(`Adding CSS-formatted color to DOM ${stringifiedColor}`);
        colorTextOutputBox.value = stringifiedColor;
        colorTextOutputBox.setAttribute('data-format', color.format);
    }
    catch (error) {
        if (logMode.errors)
            logger.error(`Failed to populate color text output box: ${error}`);
        return;
    }
}
export const palette = {
    createObject,
    populateOutputBox
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvcGFsZXR0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQ0FBb0M7QUFVcEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRS9DLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDdkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUU3QixTQUFTLFlBQVksQ0FDcEIsSUFBWSxFQUNaLEtBQW9CLEVBQ3BCLFNBQWMsRUFDZCxRQUFnQixFQUNoQixTQUFpQixFQUNqQixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQixFQUNsQixVQUFtQjtJQUVuQixPQUFPO1FBQ04sRUFBRSxFQUFFLEdBQUcsSUFBSSxJQUFJLFNBQVMsRUFBRTtRQUMxQixLQUFLO1FBQ0wsUUFBUSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEVBQUU7WUFDUixTQUFTLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQ3ZDLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLElBQUk7WUFDSixLQUFLLEVBQUU7Z0JBQ04sV0FBVyxFQUFFLFdBQVc7Z0JBQ3hCLGFBQWEsRUFBRSxTQUFTO2dCQUN4QixhQUFhLEVBQUUsU0FBUztnQkFDeEIsY0FBYyxFQUFFLFVBQVU7YUFDMUI7WUFDRCxXQUFXLEVBQUU7Z0JBQ1osUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxJQUFJLEVBQUU7YUFDdkM7U0FDRDtLQUNELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUNoQyxLQUEwQixFQUMxQixTQUFpQjtJQUVqQixJQUFJLENBQUM7UUFDSixNQUFNLFdBQVcsR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDcEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUM3QyxJQUFJLE9BQU8sQ0FBQyxNQUFNO2dCQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUUxRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRXhDLE9BQU87UUFDUixDQUFDO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUNqRCx5QkFBeUIsU0FBUyxFQUFFLENBQ1QsQ0FBQztRQUU3QixJQUFJLENBQUMsa0JBQWtCO1lBQUUsT0FBTztRQUVoQyxNQUFNLGdCQUFnQixHQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQ1YscUNBQXFDLGdCQUFnQixFQUFFLENBQ3ZELENBQUM7UUFFSCxrQkFBa0IsQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUM7UUFDNUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxPQUFPLENBQUMsTUFBTTtZQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXBFLE9BQU87SUFDUixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBeUI7SUFDNUMsWUFBWTtJQUNaLGlCQUFpQjtDQUNSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvY29tbW9uL3V0aWxzL3BhbGV0dGUuanNcblxuaW1wb3J0IHtcblx0Q29sb3IsXG5cdENvbG9yU3RyaW5nLFxuXHRDb21tb25VdGlsc0ZuUGFsZXR0ZSxcblx0SFNMLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlSXRlbVxufSBmcm9tICcuLi8uLi9pbmRleCc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vY29yZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBoZWxwZXJzIH0gZnJvbSAnLi4vaGVscGVycy9pbmRleC5qcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXIvaW5kZXguanMnO1xuXG5jb25zdCBtb2RlID0gZGF0YS5tb2RlO1xuY29uc3QgbG9nTW9kZSA9IG1vZGUubG9nZ2luZztcblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KFxuXHR0eXBlOiBzdHJpbmcsXG5cdGl0ZW1zOiBQYWxldHRlSXRlbVtdLFxuXHRiYXNlQ29sb3I6IEhTTCxcblx0bnVtQm94ZXM6IG51bWJlcixcblx0cGFsZXR0ZUlEOiBudW1iZXIsXG5cdGVuYWJsZUFscGhhOiBib29sZWFuLFxuXHRsaW1pdERhcms6IGJvb2xlYW4sXG5cdGxpbWl0R3JheTogYm9vbGVhbixcblx0bGltaXRMaWdodDogYm9vbGVhblxuKTogUGFsZXR0ZSB7XG5cdHJldHVybiB7XG5cdFx0aWQ6IGAke3R5cGV9XyR7cGFsZXR0ZUlEfWAsXG5cdFx0aXRlbXMsXG5cdFx0bWV0YWRhdGE6IHtcblx0XHRcdG5hbWU6ICcnLFxuXHRcdFx0dGltZXN0YW1wOiBjb3JlLmdldEZvcm1hdHRlZFRpbWVzdGFtcCgpLFxuXHRcdFx0c3dhdGNoZXM6IG51bUJveGVzLFxuXHRcdFx0dHlwZSxcblx0XHRcdGZsYWdzOiB7XG5cdFx0XHRcdGVuYWJsZUFscGhhOiBlbmFibGVBbHBoYSxcblx0XHRcdFx0bGltaXREYXJrbmVzczogbGltaXREYXJrLFxuXHRcdFx0XHRsaW1pdEdyYXluZXNzOiBsaW1pdEdyYXksXG5cdFx0XHRcdGxpbWl0TGlnaHRuZXNzOiBsaW1pdExpZ2h0XG5cdFx0XHR9LFxuXHRcdFx0Y3VzdG9tQ29sb3I6IHtcblx0XHRcdFx0aHNsQ29sb3I6IGJhc2VDb2xvcixcblx0XHRcdFx0Y29udmVydGVkQ29sb3JzOiBpdGVtc1swXT8uY29sb3JzIHx8IHt9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wdWxhdGVPdXRwdXRCb3goXG5cdGNvbG9yOiBDb2xvciB8IENvbG9yU3RyaW5nLFxuXHRib3hOdW1iZXI6IG51bWJlclxuKTogdm9pZCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQ29sb3I6IENvbG9yID0gY29yZS5ndWFyZHMuaXNDb2xvcihjb2xvcilcblx0XHRcdD8gY29yZS5iYXNlLmNsb25lKGNvbG9yKVxuXHRcdFx0OiBjb3JlLmNvbnZlcnQuY29sb3JTdHJpbmdUb0NvbG9yKGNvbG9yKTtcblxuXHRcdGlmICghY29yZS52YWxpZGF0ZS5jb2xvclZhbHVlcyhjbG9uZWRDb2xvcikpIHtcblx0XHRcdGlmIChsb2dNb2RlLmVycm9ycykgbG9nZ2VyLmVycm9yKCdJbnZhbGlkIGNvbG9yIHZhbHVlcy4nKTtcblxuXHRcdFx0aGVscGVycy5kb20uc2hvd1RvYXN0KCdJbnZhbGlkIGNvbG9yLicpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgY29sb3JUZXh0T3V0cHV0Qm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0XHRgY29sb3ItdGV4dC1vdXRwdXQtYm94LSR7Ym94TnVtYmVyfWBcblx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsO1xuXG5cdFx0aWYgKCFjb2xvclRleHRPdXRwdXRCb3gpIHJldHVybjtcblxuXHRcdGNvbnN0IHN0cmluZ2lmaWVkQ29sb3IgPVxuXHRcdFx0Y29yZS5jb252ZXJ0LmNvbG9yVG9DU1NDb2xvclN0cmluZyhjbG9uZWRDb2xvcik7XG5cblx0XHRpZiAoIW1vZGUucXVpZXQgJiYgbG9nTW9kZS5pbmZvICYmIGxvZ01vZGUudmVyYm9zaXR5ID4gMClcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRgQWRkaW5nIENTUy1mb3JtYXR0ZWQgY29sb3IgdG8gRE9NICR7c3RyaW5naWZpZWRDb2xvcn1gXG5cdFx0XHQpO1xuXG5cdFx0Y29sb3JUZXh0T3V0cHV0Qm94LnZhbHVlID0gc3RyaW5naWZpZWRDb2xvcjtcblx0XHRjb2xvclRleHRPdXRwdXRCb3guc2V0QXR0cmlidXRlKCdkYXRhLWZvcm1hdCcsIGNvbG9yLmZvcm1hdCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3JzKVxuXHRcdFx0bG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gcG9wdWxhdGUgY29sb3IgdGV4dCBvdXRwdXQgYm94OiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwYWxldHRlOiBDb21tb25VdGlsc0ZuUGFsZXR0ZSA9IHtcblx0Y3JlYXRlT2JqZWN0LFxuXHRwb3B1bGF0ZU91dHB1dEJveFxufSBhcyBjb25zdDtcbiJdfQ==