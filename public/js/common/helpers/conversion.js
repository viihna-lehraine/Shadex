// File: src/common/helpers/conversion.ts
import { config } from '../../config';
import { core } from '../index';
const mode = config.mode;
function applyGammaCorrection(value) {
    try {
        return value > 0.0031308
            ? 1.055 * Math.pow(value, 1 / 2.4) - 0.055
            : 12.92 * value;
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error applying gamma correction: ${error}`);
        return value;
    }
}
function clampRGB(rgb) {
    if (!core.validateColorValues(rgb)) {
        if (mode.logErrors)
            console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
        return core.clone(config.defaults.colors.rgb);
    }
    try {
        return {
            value: {
                red: Math.round(Math.min(Math.max(0, rgb.value.red), 1) * 255),
                green: Math.round(Math.min(Math.max(0, rgb.value.green), 1) * 255),
                blue: Math.round(Math.min(Math.max(0, rgb.value.blue), 1) * 255),
                alpha: parseFloat(Math.min(Math.max(0, rgb.value.alpha), 1).toFixed(2))
            },
            format: 'rgb'
        };
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error clamping RGB values: ${error}`);
        return rgb;
    }
}
function hueToRGB(p, q, t) {
    try {
        const clonedP = core.clone(p);
        const clonedQ = core.clone(q);
        let clonedT = core.clone(t);
        if (clonedT < 0)
            clonedT += 1;
        if (clonedT > 1)
            clonedT -= 1;
        if (clonedT < 1 / 6)
            return clonedP + (clonedQ - clonedP) * 6 * clonedT;
        if (clonedT < 1 / 2)
            return clonedQ;
        if (clonedT < 2 / 3)
            return clonedP + (clonedQ - clonedP) * (2 / 3 - clonedT) * 6;
        return clonedP;
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error converting hue to RGB: ${error}`);
        return 0;
    }
}
function hslAddFormat(value) {
    try {
        if (!core.validateColorValues({ value: value, format: 'hsl' })) {
            if (mode.logErrors)
                console.error(`Invalid HSL value ${JSON.stringify(value)}`);
            return core.clone(config.defaults.colors.hsl);
        }
        return { value: value, format: 'hsl' };
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error adding HSL format: ${error}`);
        return core.clone(config.defaults.colors.hsl);
    }
}
export const conversion = {
    applyGammaCorrection,
    clampRGB,
    hueToRGB,
    hslAddFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vaGVscGVycy9jb252ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUd6QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFaEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUV6QixTQUFTLG9CQUFvQixDQUFDLEtBQWE7SUFDMUMsSUFBSSxDQUFDO1FBQ0osT0FBTyxLQUFLLEdBQUcsU0FBUztZQUN2QixDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLO1lBQzFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ2xCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU1RCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBUTtJQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDcEMsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUzRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQUks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QyxLQUFLLENBQUMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTdELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBRUQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBUyxDQUFDO0lBQy9DLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXZFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRztJQUN6QixvQkFBb0I7SUFDcEIsUUFBUTtJQUNSLFFBQVE7SUFDUixZQUFZO0NBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9jb21tb24vaGVscGVycy9jb252ZXJzaW9uLnRzXG5cbmltcG9ydCB7IEhTTCwgSFNMVmFsdWUsIFJHQiB9IGZyb20gJy4uLy4uL2luZGV4JztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vaW5kZXgnO1xuXG5jb25zdCBtb2RlID0gY29uZmlnLm1vZGU7XG5cbmZ1bmN0aW9uIGFwcGx5R2FtbWFDb3JyZWN0aW9uKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuXHR0cnkge1xuXHRcdHJldHVybiB2YWx1ZSA+IDAuMDAzMTMwOFxuXHRcdFx0PyAxLjA1NSAqIE1hdGgucG93KHZhbHVlLCAxIC8gMi40KSAtIDAuMDU1XG5cdFx0XHQ6IDEyLjkyICogdmFsdWU7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUubG9nRXJyb3JzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgYXBwbHlpbmcgZ2FtbWEgY29ycmVjdGlvbjogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBjbGFtcFJHQihyZ2I6IFJHQik6IFJHQiB7XG5cdGlmICghY29yZS52YWxpZGF0ZUNvbG9yVmFsdWVzKHJnYikpIHtcblx0XHRpZiAobW9kZS5sb2dFcnJvcnMpXG5cdFx0XHRjb25zb2xlLmVycm9yKGBJbnZhbGlkIFJHQiB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KHJnYil9YCk7XG5cblx0XHRyZXR1cm4gY29yZS5jbG9uZShjb25maWcuZGVmYXVsdHMuY29sb3JzLnJnYik7XG5cdH1cblxuXHR0cnkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRyZWQ6IE1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgoMCwgcmdiLnZhbHVlLnJlZCksIDEpICogMjU1KSxcblx0XHRcdFx0Z3JlZW46IE1hdGgucm91bmQoXG5cdFx0XHRcdFx0TWF0aC5taW4oTWF0aC5tYXgoMCwgcmdiLnZhbHVlLmdyZWVuKSwgMSkgKiAyNTVcblx0XHRcdFx0KSxcblx0XHRcdFx0Ymx1ZTogTWF0aC5yb3VuZChcblx0XHRcdFx0XHRNYXRoLm1pbihNYXRoLm1heCgwLCByZ2IudmFsdWUuYmx1ZSksIDEpICogMjU1XG5cdFx0XHRcdCksXG5cdFx0XHRcdGFscGhhOiBwYXJzZUZsb2F0KFxuXHRcdFx0XHRcdE1hdGgubWluKE1hdGgubWF4KDAsIHJnYi52YWx1ZS5hbHBoYSksIDEpLnRvRml4ZWQoMilcblx0XHRcdFx0KVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ3JnYidcblx0XHR9O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmxvZ0Vycm9ycylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGNsYW1waW5nIFJHQiB2YWx1ZXM6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gcmdiO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGh1ZVRvUkdCKHA6IG51bWJlciwgcTogbnVtYmVyLCB0OiBudW1iZXIpOiBudW1iZXIge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNsb25lZFAgPSBjb3JlLmNsb25lKHApO1xuXHRcdGNvbnN0IGNsb25lZFEgPSBjb3JlLmNsb25lKHEpO1xuXG5cdFx0bGV0IGNsb25lZFQgPSBjb3JlLmNsb25lKHQpO1xuXG5cdFx0aWYgKGNsb25lZFQgPCAwKSBjbG9uZWRUICs9IDE7XG5cdFx0aWYgKGNsb25lZFQgPiAxKSBjbG9uZWRUIC09IDE7XG5cdFx0aWYgKGNsb25lZFQgPCAxIC8gNikgcmV0dXJuIGNsb25lZFAgKyAoY2xvbmVkUSAtIGNsb25lZFApICogNiAqIGNsb25lZFQ7XG5cdFx0aWYgKGNsb25lZFQgPCAxIC8gMikgcmV0dXJuIGNsb25lZFE7XG5cdFx0aWYgKGNsb25lZFQgPCAyIC8gMylcblx0XHRcdHJldHVybiBjbG9uZWRQICsgKGNsb25lZFEgLSBjbG9uZWRQKSAqICgyIC8gMyAtIGNsb25lZFQpICogNjtcblxuXHRcdHJldHVybiBjbG9uZWRQO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmxvZ0Vycm9ycylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGNvbnZlcnRpbmcgaHVlIHRvIFJHQjogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiAwO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGhzbEFkZEZvcm1hdCh2YWx1ZTogSFNMVmFsdWUpOiBIU0wge1xuXHR0cnkge1xuXHRcdGlmICghY29yZS52YWxpZGF0ZUNvbG9yVmFsdWVzKHsgdmFsdWU6IHZhbHVlLCBmb3JtYXQ6ICdoc2wnIH0pKSB7XG5cdFx0XHRpZiAobW9kZS5sb2dFcnJvcnMpXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuXG5cdFx0XHRyZXR1cm4gY29yZS5jbG9uZShjb25maWcuZGVmYXVsdHMuY29sb3JzLmhzbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBmb3JtYXQ6ICdoc2wnIH0gYXMgSFNMO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmxvZ0Vycm9ycykgY29uc29sZS5lcnJvcihgRXJyb3IgYWRkaW5nIEhTTCBmb3JtYXQ6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gY29yZS5jbG9uZShjb25maWcuZGVmYXVsdHMuY29sb3JzLmhzbCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGNvbnZlcnNpb24gPSB7XG5cdGFwcGx5R2FtbWFDb3JyZWN0aW9uLFxuXHRjbGFtcFJHQixcblx0aHVlVG9SR0IsXG5cdGhzbEFkZEZvcm1hdFxufSBhcyBjb25zdDtcbiJdfQ==