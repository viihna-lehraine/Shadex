// File: src/common/helpers/conversion.ts
import { config } from '../../config.js';
import { core } from '../core.js';
function applyGammaCorrection(value) {
    try {
        return value > 0.0031308
            ? 1.055 * Math.pow(value, 1 / 2.4) - 0.055
            : 12.92 * value;
    }
    catch (error) {
        console.error(`Error applying gamma correction: ${error}`);
        return value;
    }
}
function clampRGB(rgb) {
    if (!core.validateColorValues(rgb)) {
        console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
        return core.clone(config.defaults.colors.rgb);
    }
    try {
        return {
            value: {
                red: Math.round(Math.min(Math.max(0, rgb.value.red), 1) * 255),
                green: Math.round(Math.min(Math.max(0, rgb.value.green), 1) * 255),
                blue: Math.round(Math.min(Math.max(0, rgb.value.blue), 1) * 255),
                alpha: parseFloat(Math.min(Math.max(0, rgb.value.alpha), 1).toFixed(2))
            },
            format: 'rgb'
        };
    }
    catch (error) {
        console.error(`Error clamping RGB values: ${error}`);
        return rgb;
    }
}
function hueToRGB(p, q, t) {
    try {
        const clonedP = core.clone(p);
        const clonedQ = core.clone(q);
        let clonedT = core.clone(t);
        if (clonedT < 0)
            clonedT += 1;
        if (clonedT > 1)
            clonedT -= 1;
        if (clonedT < 1 / 6)
            return clonedP + (clonedQ - clonedP) * 6 * clonedT;
        if (clonedT < 1 / 2)
            return clonedQ;
        if (clonedT < 2 / 3)
            return clonedP + (clonedQ - clonedP) * (2 / 3 - clonedT) * 6;
        return clonedP;
    }
    catch (error) {
        console.error(`Error converting hue to RGB: ${error}`);
        return 0;
    }
}
function hslAddFormat(value) {
    try {
        if (!core.validateColorValues({ value: value, format: 'hsl' })) {
            console.error(`Invalid HSL value ${JSON.stringify(value)}`);
            return core.clone(config.defaults.colors.hsl);
        }
        return { value: value, format: 'hsl' };
    }
    catch (error) {
        console.error(`Error adding HSL format: ${error}`);
        return core.clone(config.defaults.colors.hsl);
    }
}
export const conversion = {
    applyGammaCorrection,
    clampRGB,
    hueToRGB,
    hslAddFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vaGVscGVycy9jb252ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUd6QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFL0IsU0FBUyxvQkFBb0IsQ0FBQyxLQUFhO0lBQzFDLElBQUksQ0FBQztRQUNKLE9BQU8sS0FBSyxHQUFHLFNBQVM7WUFDdkIsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSztZQUMxQyxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNsQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTNELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFRO0lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQUksQ0FBQztRQUNKLE9BQU87WUFDTixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDOUQsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQy9DO2dCQUNELElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQzlDO2dCQUNELEtBQUssRUFBRSxVQUFVLENBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ3BEO2FBQ0Q7WUFDRCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXJELE9BQU8sR0FBRyxDQUFDO0lBQ1osQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVM7SUFDaEQsSUFBSSxDQUFDO1FBQ0osTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTlCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUIsSUFBSSxPQUFPLEdBQUcsQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxPQUFPLEdBQUcsQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFPLE9BQU8sR0FBRyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3hFLElBQUksT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxPQUFPLENBQUM7UUFDcEMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDbEIsT0FBTyxPQUFPLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5RCxPQUFPLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE9BQU8sQ0FBQyxDQUFDO0lBQ1YsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxLQUFlO0lBQ3BDLElBQUksQ0FBQztRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDaEUsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFNUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLENBQUM7UUFFRCxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFTLENBQUM7SUFDL0MsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUVuRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDekIsb0JBQW9CO0lBQ3BCLFFBQVE7SUFDUixRQUFRO0lBQ1IsWUFBWTtDQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvY29tbW9uL2hlbHBlcnMvY29udmVyc2lvbi50c1xuXG5pbXBvcnQgeyBIU0wsIEhTTFZhbHVlLCBSR0IgfSBmcm9tICcuLi8uLi9pbmRleC9pbmRleCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgY29yZSB9IGZyb20gJy4uL2NvcmUnO1xuXG5mdW5jdGlvbiBhcHBseUdhbW1hQ29ycmVjdGlvbih2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gdmFsdWUgPiAwLjAwMzEzMDhcblx0XHRcdD8gMS4wNTUgKiBNYXRoLnBvdyh2YWx1ZSwgMSAvIDIuNCkgLSAwLjA1NVxuXHRcdFx0OiAxMi45MiAqIHZhbHVlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGFwcGx5aW5nIGdhbW1hIGNvcnJlY3Rpb246ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gY2xhbXBSR0IocmdiOiBSR0IpOiBSR0Ige1xuXHRpZiAoIWNvcmUudmFsaWRhdGVDb2xvclZhbHVlcyhyZ2IpKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgSW52YWxpZCBSR0IgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShyZ2IpfWApO1xuXG5cdFx0cmV0dXJuIGNvcmUuY2xvbmUoY29uZmlnLmRlZmF1bHRzLmNvbG9ycy5yZ2IpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0cmVkOiBNYXRoLnJvdW5kKE1hdGgubWluKE1hdGgubWF4KDAsIHJnYi52YWx1ZS5yZWQpLCAxKSAqIDI1NSksXG5cdFx0XHRcdGdyZWVuOiBNYXRoLnJvdW5kKFxuXHRcdFx0XHRcdE1hdGgubWluKE1hdGgubWF4KDAsIHJnYi52YWx1ZS5ncmVlbiksIDEpICogMjU1XG5cdFx0XHRcdCksXG5cdFx0XHRcdGJsdWU6IE1hdGgucm91bmQoXG5cdFx0XHRcdFx0TWF0aC5taW4oTWF0aC5tYXgoMCwgcmdiLnZhbHVlLmJsdWUpLCAxKSAqIDI1NVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRhbHBoYTogcGFyc2VGbG9hdChcblx0XHRcdFx0XHRNYXRoLm1pbihNYXRoLm1heCgwLCByZ2IudmFsdWUuYWxwaGEpLCAxKS50b0ZpeGVkKDIpXG5cdFx0XHRcdClcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdyZ2InXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjbGFtcGluZyBSR0IgdmFsdWVzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIHJnYjtcblx0fVxufVxuXG5mdW5jdGlvbiBodWVUb1JHQihwOiBudW1iZXIsIHE6IG51bWJlciwgdDogbnVtYmVyKTogbnVtYmVyIHtcblx0dHJ5IHtcblx0XHRjb25zdCBjbG9uZWRQID0gY29yZS5jbG9uZShwKTtcblx0XHRjb25zdCBjbG9uZWRRID0gY29yZS5jbG9uZShxKTtcblxuXHRcdGxldCBjbG9uZWRUID0gY29yZS5jbG9uZSh0KTtcblxuXHRcdGlmIChjbG9uZWRUIDwgMCkgY2xvbmVkVCArPSAxO1xuXHRcdGlmIChjbG9uZWRUID4gMSkgY2xvbmVkVCAtPSAxO1xuXHRcdGlmIChjbG9uZWRUIDwgMSAvIDYpIHJldHVybiBjbG9uZWRQICsgKGNsb25lZFEgLSBjbG9uZWRQKSAqIDYgKiBjbG9uZWRUO1xuXHRcdGlmIChjbG9uZWRUIDwgMSAvIDIpIHJldHVybiBjbG9uZWRRO1xuXHRcdGlmIChjbG9uZWRUIDwgMiAvIDMpXG5cdFx0XHRyZXR1cm4gY2xvbmVkUCArIChjbG9uZWRRIC0gY2xvbmVkUCkgKiAoMiAvIDMgLSBjbG9uZWRUKSAqIDY7XG5cblx0XHRyZXR1cm4gY2xvbmVkUDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIGh1ZSB0byBSR0I6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gMDtcblx0fVxufVxuXG5mdW5jdGlvbiBoc2xBZGRGb3JtYXQodmFsdWU6IEhTTFZhbHVlKTogSFNMIHtcblx0dHJ5IHtcblx0XHRpZiAoIWNvcmUudmFsaWRhdGVDb2xvclZhbHVlcyh7IHZhbHVlOiB2YWx1ZSwgZm9ybWF0OiAnaHNsJyB9KSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG5cblx0XHRcdHJldHVybiBjb3JlLmNsb25lKGNvbmZpZy5kZWZhdWx0cy5jb2xvcnMuaHNsKTtcblx0XHR9XG5cblx0XHRyZXR1cm4geyB2YWx1ZTogdmFsdWUsIGZvcm1hdDogJ2hzbCcgfSBhcyBIU0w7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgYWRkaW5nIEhTTCBmb3JtYXQ6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gY29yZS5jbG9uZShjb25maWcuZGVmYXVsdHMuY29sb3JzLmhzbCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGNvbnZlcnNpb24gPSB7XG5cdGFwcGx5R2FtbWFDb3JyZWN0aW9uLFxuXHRjbGFtcFJHQixcblx0aHVlVG9SR0IsXG5cdGhzbEFkZEZvcm1hdFxufTtcbiJdfQ==