import { convert } from '../color-conversion/conversion-index.js';
import { defaults } from '../utils/defaults.js';
function hexToCMYKWrapper(input) {
    try {
        const hex = typeof input === 'string'
            ? { value: { hex: input }, format: 'hex' }
            : input;
        return convert.hexToCMYK(hex);
    }
    catch (error) {
        console.error(`Error converting hex to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function hexToHSLWrapper(input) {
    try {
        const hex = typeof input === 'string'
            ? { value: { hex: input }, format: 'hex' }
            : input;
        return convert.hexToHSL(hex);
    }
    catch (error) {
        console.error(`Error converting hex to HSL: ${error}`);
        return defaults.defaultHSL();
    }
}
function hexToHSVWrapper(input) {
    try {
        const hex = typeof input === 'string'
            ? { value: { hex: input }, format: 'hex' }
            : input;
        return convert.hexToHSV(hex);
    }
    catch (error) {
        console.error(`Error converting hex to HSV: ${error}`);
        return defaults.defaultHSV();
    }
}
function hexToLABWrapper(input) {
    try {
        const hex = typeof input === 'string'
            ? { value: { hex: input }, format: 'hex' }
            : input;
        return convert.hexToLAB(hex);
    }
    catch (error) {
        console.error(`Error converting hex to LAB: ${error}`);
        return defaults.defaultLAB();
    }
}
function hexToRGBWrapper(input) {
    try {
        const hex = typeof input === 'string'
            ? { value: { hex: input }, format: 'hex' }
            : input;
        return convert.hexToRGB(hex);
    }
    catch (error) {
        console.error(`Error converting hex to RGB: ${error}`);
        return defaults.defaultRGB();
    }
}
function hexToXYZWrapper(input) {
    try {
        const hex = typeof input === 'string'
            ? { value: { hex: input }, format: 'hex' }
            : input;
        return convert.hexToXYZ(hex);
    }
    catch (error) {
        console.error(`Error converting hex to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
export const wrappers = {
    hexToCMYKWrapper,
    hexToHSLWrapper,
    hexToHSVWrapper,
    hexToLABWrapper,
    hexToRGBWrapper,
    hexToXYZWrapper
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy93cmFwcGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTdDLFNBQVMsZ0JBQWdCLENBQUMsS0FBeUI7SUFDbEQsSUFBSSxDQUFDO1FBQ0osTUFBTSxHQUFHLEdBQ1IsT0FBTyxLQUFLLEtBQUssUUFBUTtZQUN4QixDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQWMsRUFBRTtZQUNuRCxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRVYsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUF5QjtJQUNqRCxJQUFJLENBQUM7UUFDSixNQUFNLEdBQUcsR0FDUixPQUFPLEtBQUssS0FBSyxRQUFRO1lBQ3hCLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBYyxFQUFFO1lBQ25ELENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFVixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM5QixDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQXlCO0lBQ2pELElBQUksQ0FBQztRQUNKLE1BQU0sR0FBRyxHQUNSLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFjLEVBQUU7WUFDbkQsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVWLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzlCLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsS0FBeUI7SUFDakQsSUFBSSxDQUFDO1FBQ0osTUFBTSxHQUFHLEdBQ1IsT0FBTyxLQUFLLEtBQUssUUFBUTtZQUN4QixDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQWMsRUFBRTtZQUNuRCxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRVYsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDOUIsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUF5QjtJQUNqRCxJQUFJLENBQUM7UUFDSixNQUFNLEdBQUcsR0FDUixPQUFPLEtBQUssS0FBSyxRQUFRO1lBQ3hCLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBYyxFQUFFO1lBQ25ELENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFVixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM5QixDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQXlCO0lBQ2pELElBQUksQ0FBQztRQUNKLE1BQU0sR0FBRyxHQUNSLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFjLEVBQUU7WUFDbkQsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVWLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzlCLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUF1QjtJQUMzQyxnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLGVBQWU7SUFDZixlQUFlO0lBQ2YsZUFBZTtJQUNmLGVBQWU7Q0FDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydCB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbi1pbmRleCc7XG5pbXBvcnQgKiBhcyBmbk9iamVjdHMgZnJvbSAnLi4vaW5kZXgvZm4tb2JqZWN0cyc7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleC90eXBlcyc7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gJy4uL3V0aWxzL2RlZmF1bHRzJztcblxuZnVuY3Rpb24gaGV4VG9DTVlLV3JhcHBlcihpbnB1dDogc3RyaW5nIHwgdHlwZXMuSGV4KTogdHlwZXMuQ01ZSyB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgaGV4ID1cblx0XHRcdHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZydcblx0XHRcdFx0PyB7IHZhbHVlOiB7IGhleDogaW5wdXQgfSwgZm9ybWF0OiAnaGV4JyBhcyBjb25zdCB9XG5cdFx0XHRcdDogaW5wdXQ7XG5cblx0XHRyZXR1cm4gY29udmVydC5oZXhUb0NNWUsoaGV4KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIGhleCB0byBDTVlLOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0cy5kZWZhdWx0Q01ZSygpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGhleFRvSFNMV3JhcHBlcihpbnB1dDogc3RyaW5nIHwgdHlwZXMuSGV4KTogdHlwZXMuSFNMIHtcblx0dHJ5IHtcblx0XHRjb25zdCBoZXggPVxuXHRcdFx0dHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJ1xuXHRcdFx0XHQ/IHsgdmFsdWU6IHsgaGV4OiBpbnB1dCB9LCBmb3JtYXQ6ICdoZXgnIGFzIGNvbnN0IH1cblx0XHRcdFx0OiBpbnB1dDtcblxuXHRcdHJldHVybiBjb252ZXJ0LmhleFRvSFNMKGhleCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBoZXggdG8gSFNMOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0cy5kZWZhdWx0SFNMKCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGV4VG9IU1ZXcmFwcGVyKGlucHV0OiBzdHJpbmcgfCB0eXBlcy5IZXgpOiB0eXBlcy5IU1Yge1xuXHR0cnkge1xuXHRcdGNvbnN0IGhleCA9XG5cdFx0XHR0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnXG5cdFx0XHRcdD8geyB2YWx1ZTogeyBoZXg6IGlucHV0IH0sIGZvcm1hdDogJ2hleCcgYXMgY29uc3QgfVxuXHRcdFx0XHQ6IGlucHV0O1xuXG5cdFx0cmV0dXJuIGNvbnZlcnQuaGV4VG9IU1YoaGV4KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIGhleCB0byBIU1Y6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bHRzLmRlZmF1bHRIU1YoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBoZXhUb0xBQldyYXBwZXIoaW5wdXQ6IHN0cmluZyB8IHR5cGVzLkhleCk6IHR5cGVzLkxBQiB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgaGV4ID1cblx0XHRcdHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZydcblx0XHRcdFx0PyB7IHZhbHVlOiB7IGhleDogaW5wdXQgfSwgZm9ybWF0OiAnaGV4JyBhcyBjb25zdCB9XG5cdFx0XHRcdDogaW5wdXQ7XG5cblx0XHRyZXR1cm4gY29udmVydC5oZXhUb0xBQihoZXgpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGNvbnZlcnRpbmcgaGV4IHRvIExBQjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdExBQigpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGhleFRvUkdCV3JhcHBlcihpbnB1dDogc3RyaW5nIHwgdHlwZXMuSGV4KTogdHlwZXMuUkdCIHtcblx0dHJ5IHtcblx0XHRjb25zdCBoZXggPVxuXHRcdFx0dHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJ1xuXHRcdFx0XHQ/IHsgdmFsdWU6IHsgaGV4OiBpbnB1dCB9LCBmb3JtYXQ6ICdoZXgnIGFzIGNvbnN0IH1cblx0XHRcdFx0OiBpbnB1dDtcblxuXHRcdHJldHVybiBjb252ZXJ0LmhleFRvUkdCKGhleCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBoZXggdG8gUkdCOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0cy5kZWZhdWx0UkdCKCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGV4VG9YWVpXcmFwcGVyKGlucHV0OiBzdHJpbmcgfCB0eXBlcy5IZXgpOiB0eXBlcy5YWVoge1xuXHR0cnkge1xuXHRcdGNvbnN0IGhleCA9XG5cdFx0XHR0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnXG5cdFx0XHRcdD8geyB2YWx1ZTogeyBoZXg6IGlucHV0IH0sIGZvcm1hdDogJ2hleCcgYXMgY29uc3QgfVxuXHRcdFx0XHQ6IGlucHV0O1xuXG5cdFx0cmV0dXJuIGNvbnZlcnQuaGV4VG9YWVooaGV4KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIGhleCB0byBYWVo6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bHRzLmRlZmF1bHRYWVooKTtcblx0fVxufVxuXG5leHBvcnQgY29uc3Qgd3JhcHBlcnM6IGZuT2JqZWN0cy5XcmFwcGVycyA9IHtcblx0aGV4VG9DTVlLV3JhcHBlcixcblx0aGV4VG9IU0xXcmFwcGVyLFxuXHRoZXhUb0hTVldyYXBwZXIsXG5cdGhleFRvTEFCV3JhcHBlcixcblx0aGV4VG9SR0JXcmFwcGVyLFxuXHRoZXhUb1hZWldyYXBwZXJcbn07XG4iXX0=