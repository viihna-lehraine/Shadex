import { convert } from '../color-conversion/conversion-index.js';
import { core } from '../utils/core.js';
import { defaults } from '../utils/defaults.js';
function hexToCMYKWrapper(input) {
    try {
        const clonedInput = core.clone(input);
        const hex = typeof clonedInput === 'string'
            ? { value: { hex: clonedInput }, format: 'hex' }
            : clonedInput;
        return convert.hexToCMYK(hex);
    }
    catch (error) {
        console.error(`Error converting hex to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function hexToHSLWrapper(input) {
    try {
        const clonedInput = core.clone(input);
        const hex = typeof clonedInput === 'string'
            ? { value: { hex: clonedInput }, format: 'hex' }
            : clonedInput;
        return convert.hexToHSL(hex);
    }
    catch (error) {
        console.error(`Error converting hex to HSL: ${error}`);
        return defaults.defaultHSL();
    }
}
function hexToHSVWrapper(input) {
    try {
        const clonedInput = core.clone(input);
        const hex = typeof clonedInput === 'string'
            ? { value: { hex: clonedInput }, format: 'hex' }
            : clonedInput;
        return convert.hexToHSV(hex);
    }
    catch (error) {
        console.error(`Error converting hex to HSV: ${error}`);
        return defaults.defaultHSV();
    }
}
function hexToLABWrapper(input) {
    try {
        const clonedInput = core.clone(input);
        const hex = typeof clonedInput === 'string'
            ? { value: { hex: clonedInput }, format: 'hex' }
            : clonedInput;
        return convert.hexToLAB(hex);
    }
    catch (error) {
        console.error(`Error converting hex to LAB: ${error}`);
        return defaults.defaultLAB();
    }
}
function hexToRGBWrapper(input) {
    try {
        const clonedInput = core.clone(input);
        const hex = typeof clonedInput === 'string'
            ? { value: { hex: clonedInput }, format: 'hex' }
            : clonedInput;
        return convert.hexToRGB(hex);
    }
    catch (error) {
        console.error(`Error converting hex to RGB: ${error}`);
        return defaults.defaultRGB();
    }
}
function hexToXYZWrapper(input) {
    try {
        const clonedInput = core.clone(input);
        const hex = typeof clonedInput === 'string'
            ? { value: { hex: clonedInput }, format: 'hex' }
            : clonedInput;
        return convert.hexToXYZ(hex);
    }
    catch (error) {
        console.error(`Error converting hex to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
export const wrappers = {
    hexToCMYKWrapper,
    hexToHSLWrapper,
    hexToHSVWrapper,
    hexToLABWrapper,
    hexToRGBWrapper,
    hexToXYZWrapper
};
//# sourceMappingURL=data:application/json;base64,