import { core } from '../utils/core-utils.js';
import { defaults } from '../config/defaults.js';
import { commonUtils } from '../utils/common-utils.js';
function applyGammaCorrection(value) {
    try {
        return value > 0.0031308
            ? 1.055 * Math.pow(value, 1 / 2.4) - 0.055
            : 12.92 * value;
    }
    catch (error) {
        console.error(`Error applying gamma correction: ${error}`);
        return value;
    }
}
function clampRGB(rgb) {
    if (!commonUtils.validateColorValues(rgb)) {
        console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
        return core.clone(defaults.rgb);
    }
    try {
        return {
            value: {
                red: Math.round(Math.min(Math.max(0, rgb.value.red), 1) * 255),
                green: Math.round(Math.min(Math.max(0, rgb.value.green), 1) * 255),
                blue: Math.round(Math.min(Math.max(0, rgb.value.blue), 1) * 255),
                alpha: parseFloat(Math.min(Math.max(0, rgb.value.alpha), 1).toFixed(2))
            },
            format: 'rgb'
        };
    }
    catch (error) {
        console.error(`Error clamping RGB values: ${error}`);
        return rgb;
    }
}
export function hueToRGB(p, q, t) {
    try {
        const clonedP = core.clone(p);
        const clonedQ = core.clone(q);
        let clonedT = core.clone(t);
        if (clonedT < 0)
            clonedT += 1;
        if (clonedT > 1)
            clonedT -= 1;
        if (clonedT < 1 / 6)
            return clonedP + (clonedQ - clonedP) * 6 * clonedT;
        if (clonedT < 1 / 2)
            return clonedQ;
        if (clonedT < 2 / 3)
            return clonedP + (clonedQ - clonedP) * (2 / 3 - clonedT) * 6;
        return clonedP;
    }
    catch (error) {
        console.error(`Error converting hue to RGB: ${error}`);
        return 0;
    }
}
function hslAddFormat(value) {
    try {
        if (!commonUtils.validateColorValues({ value: value, format: 'hsl' })) {
            console.error(`Invalid HSL value ${JSON.stringify(value)}`);
            return core.clone(defaults.hsl);
        }
        return { value: value, format: 'hsl' };
    }
    catch (error) {
        console.error(`Error adding HSL format: ${error}`);
        return core.clone(defaults.hsl);
    }
}
export const conversionHelpers = {
    applyGammaCorrection,
    clampRGB,
    hslAddFormat,
    hueToRGB
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL2NvbnZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFcEQsU0FBUyxvQkFBb0IsQ0FBQyxLQUFhO0lBQzFDLElBQUksQ0FBQztRQUNKLE9BQU8sS0FBSyxHQUFHLFNBQVM7WUFDdkIsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSztZQUMxQyxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNsQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTNELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFlO0lBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMzQyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLENBQUM7UUFDSixPQUFPO1lBQ04sS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFB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QUFFLE1BQU0sRUFBRSxLQUFLLEVBQWdCLENBQUM7SUFDdEQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUVuRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQWdDO0lBQzdELG9CQUFvQjtJQUNwQixRQUFRO0lBQ1IsWUFBWTtJQUNaLFFBQVE7Q0FDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZm5PYmplY3RzIGZyb20gJy4uL2luZGV4L2ZuLW9iamVjdHMnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJy4uL2luZGV4L2NvbG9ycyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vdXRpbHMvY29yZS11dGlscyc7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gJy4uL2NvbmZpZy9kZWZhdWx0cyc7XG5pbXBvcnQgeyBjb21tb25VdGlscyB9IGZyb20gJy4uL3V0aWxzL2NvbW1vbi11dGlscyc7XG5cbmZ1bmN0aW9uIGFwcGx5R2FtbWFDb3JyZWN0aW9uKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuXHR0cnkge1xuXHRcdHJldHVybiB2YWx1ZSA+IDAuMDAzMTMwOFxuXHRcdFx0PyAxLjA1NSAqIE1hdGgucG93KHZhbHVlLCAxIC8gMi40KSAtIDAuMDU1XG5cdFx0XHQ6IDEyLjkyICogdmFsdWU7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgYXBwbHlpbmcgZ2FtbWEgY29ycmVjdGlvbjogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBjbGFtcFJHQihyZ2I6IGNvbG9ycy5SR0IpOiBjb2xvcnMuUkdCIHtcblx0aWYgKCFjb21tb25VdGlscy52YWxpZGF0ZUNvbG9yVmFsdWVzKHJnYikpIHtcblx0XHRjb25zb2xlLmVycm9yKGBJbnZhbGlkIFJHQiB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KHJnYil9YCk7XG5cblx0XHRyZXR1cm4gY29yZS5jbG9uZShkZWZhdWx0cy5yZ2IpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0cmVkOiBNYXRoLnJvdW5kKE1hdGgubWluKE1hdGgubWF4KDAsIHJnYi52YWx1ZS5yZWQpLCAxKSAqIDI1NSksXG5cdFx0XHRcdGdyZWVuOiBNYXRoLnJvdW5kKFxuXHRcdFx0XHRcdE1hdGgubWluKE1hdGgubWF4KDAsIHJnYi52YWx1ZS5ncmVlbiksIDEpICogMjU1XG5cdFx0XHRcdCksXG5cdFx0XHRcdGJsdWU6IE1hdGgucm91bmQoXG5cdFx0XHRcdFx0TWF0aC5taW4oTWF0aC5tYXgoMCwgcmdiLnZhbHVlLmJsdWUpLCAxKSAqIDI1NVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRhbHBoYTogcGFyc2VGbG9hdChcblx0XHRcdFx0XHRNYXRoLm1pbihNYXRoLm1heCgwLCByZ2IudmFsdWUuYWxwaGEpLCAxKS50b0ZpeGVkKDIpXG5cdFx0XHRcdClcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdyZ2InXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjbGFtcGluZyBSR0IgdmFsdWVzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIHJnYjtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlVG9SR0IocDogbnVtYmVyLCBxOiBudW1iZXIsIHQ6IG51bWJlcik6IG51bWJlciB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkUCA9IGNvcmUuY2xvbmUocCk7XG5cdFx0Y29uc3QgY2xvbmVkUSA9IGNvcmUuY2xvbmUocSk7XG5cblx0XHRsZXQgY2xvbmVkVCA9IGNvcmUuY2xvbmUodCk7XG5cblx0XHRpZiAoY2xvbmVkVCA8IDApIGNsb25lZFQgKz0gMTtcblx0XHRpZiAoY2xvbmVkVCA+IDEpIGNsb25lZFQgLT0gMTtcblx0XHRpZiAoY2xvbmVkVCA8IDEgLyA2KSByZXR1cm4gY2xvbmVkUCArIChjbG9uZWRRIC0gY2xvbmVkUCkgKiA2ICogY2xvbmVkVDtcblx0XHRpZiAoY2xvbmVkVCA8IDEgLyAyKSByZXR1cm4gY2xvbmVkUTtcblx0XHRpZiAoY2xvbmVkVCA8IDIgLyAzKVxuXHRcdFx0cmV0dXJuIGNsb25lZFAgKyAoY2xvbmVkUSAtIGNsb25lZFApICogKDIgLyAzIC0gY2xvbmVkVCkgKiA2O1xuXG5cdFx0cmV0dXJuIGNsb25lZFA7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBodWUgdG8gUkdCOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIDA7XG5cdH1cbn1cblxuZnVuY3Rpb24gaHNsQWRkRm9ybWF0KHZhbHVlOiBjb2xvcnMuSFNMVmFsdWUpOiBjb2xvcnMuSFNMIHtcblx0dHJ5IHtcblx0XHRpZiAoIWNvbW1vblV0aWxzLnZhbGlkYXRlQ29sb3JWYWx1ZXMoeyB2YWx1ZTogdmFsdWUsIGZvcm1hdDogJ2hzbCcgfSkpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuXG5cdFx0XHRyZXR1cm4gY29yZS5jbG9uZShkZWZhdWx0cy5oc2wpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZm9ybWF0OiAnaHNsJyB9IGFzIGNvbG9ycy5IU0w7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgYWRkaW5nIEhTTCBmb3JtYXQ6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gY29yZS5jbG9uZShkZWZhdWx0cy5oc2wpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBjb252ZXJzaW9uSGVscGVyczogZm5PYmplY3RzLkNvbnZlcnNpb25IZWxwZXJzID0ge1xuXHRhcHBseUdhbW1hQ29ycmVjdGlvbixcblx0Y2xhbXBSR0IsXG5cdGhzbEFkZEZvcm1hdCxcblx0aHVlVG9SR0Jcbn07XG4iXX0=