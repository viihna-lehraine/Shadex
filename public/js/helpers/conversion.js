import { convert } from '../color-conversion/conversion-index.js';
import { paletteHelpers } from '../helpers/palette.js';
import { core } from '../utils/core.js';
import { defaults } from '../utils/defaults.js';
function applyGammaCorrection(value) {
    try {
        return value > 0.0031308
            ? 1.055 * Math.pow(value, 1 / 2.4) - 0.055
            : 12.92 * value;
    }
    catch (error) {
        console.error(`Error applying gamma correction: ${error}`);
        return value;
    }
}
function clampRGB(rgb) {
    if (!paletteHelpers.validateColorValues(rgb)) {
        console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
        return core.clone(defaults.defaultRGB());
    }
    try {
        return {
            value: {
                red: Math.round(Math.min(Math.max(0, rgb.value.red), 1) * 255),
                green: Math.round(Math.min(Math.max(0, rgb.value.green), 1) * 255),
                blue: Math.round(Math.min(Math.max(0, rgb.value.blue), 1) * 255)
            },
            format: 'rgb'
        };
    }
    catch (error) {
        console.error(`Error clamping RGB values: ${error}`);
        return rgb;
    }
}
function cmykToXYZHelper(cmyk) {
    try {
        if (!paletteHelpers.validateColorValues(cmyk)) {
            console.error(`Invalid CMYK value ${JSON.stringify(cmyk)}`);
            return core.clone(defaults.defaultXYZ());
        }
        const rgb = convert.cmykToRGB(core.clone(cmyk));
        return convert.rgbToXYZ(rgb);
    }
    catch (error) {
        console.error(`Error converting CMYK to XYZ: ${error}`);
        return core.clone(defaults.defaultXYZ());
    }
}
function convertColorToCMYK(color) {
    try {
        if (!paletteHelpers.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return core.clone(defaults.defaultCMYK());
        }
        switch (color.format) {
            case 'cmyk':
                return color;
            case 'hex':
                return hexToCMYKHelper(core.clone(color));
            case 'hsl':
                return hslToCMYKHelper(core.clone(color));
            case 'hsv':
                return hsvToCMYKHelper(core.clone(color));
            case 'lab':
                return labToCMYKHelper(core.clone(color));
            case 'rgb':
                return convert.rgbToCMYK(core.clone(color));
            case 'xyz':
                return convert.xyzToCMYK(core.clone(color));
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to CMYK: ${error}`);
        return null;
    }
}
function convertColorToHex(color) {
    try {
        if (!paletteHelpers.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return core.clone(defaults.defaultHex());
        }
        switch (color.format) {
            case 'cmyk':
                return convert.cmykToHex(core.clone(color));
            case 'hex':
                return color;
            case 'hsl':
                return convert.hslToHex(core.clone(color));
            case 'hsv':
                return convert.hsvToHex(core.clone(color));
            case 'lab':
                return convert.labToHex(core.clone(color));
            case 'rgb':
                return convert.rgbToHex(core.clone(color));
            case 'xyz':
                return convert.xyzToHex(core.clone(color));
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to hex: ${error}`);
        return null;
    }
}
function convertColorToHSL(color) {
    try {
        if (!paletteHelpers.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return core.clone(defaults.defaultHSL());
        }
        switch (color.format) {
            case 'cmyk':
                return convert.cmykToHSL(core.clone(color));
            case 'hex':
                return convert.hexToHSL(core.clone(color));
            case 'hsl':
                return color;
            case 'hsv':
                return convert.hsvToHSL(core.clone(color));
            case 'lab':
                return convert.labToHSL(core.clone(color));
            case 'rgb':
                return convert.rgbToHSL(core.clone(color));
            case 'xyz':
                return convert.xyzToHSL(core.clone(color));
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to HSL: ${error}`);
        return null;
    }
}
function convertColorToHSV(color) {
    try {
        if (!paletteHelpers.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return core.clone(defaults.defaultHSV());
        }
        switch (color.format) {
            case 'cmyk':
                return convert.cmykToHSV(core.clone(color));
            case 'hex':
                return convert.hexToHSV(core.clone(color));
            case 'hsl':
                return convert.hslToHSV(core.clone(color));
            case 'hsv':
                return color;
            case 'lab':
                return convert.labToHSV(core.clone(color));
            case 'rgb':
                return convert.rgbToHSV(core.clone(color));
            case 'xyz':
                return convert.xyzToHSV(core.clone(color));
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to HSV: ${error}`);
        return null;
    }
}
function convertColorToLAB(color) {
    try {
        if (!paletteHelpers.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return core.clone(defaults.defaultLAB());
        }
        switch (color.format) {
            case 'cmyk':
                return convert.cmykToLAB(core.clone(color));
            case 'hex':
                return convert.hexToLAB(core.clone(color));
            case 'hsl':
                return convert.hslToLAB(core.clone(color));
            case 'hsv':
                return convert.hsvToLAB(core.clone(color));
            case 'lab':
                return color;
            case 'rgb':
                return convert.rgbToLAB(core.clone(color));
            case 'xyz':
                return convert.xyzToLAB(core.clone(color));
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to LAB: ${error}`);
        return null;
    }
}
function convertColorToRGB(color) {
    try {
        if (!paletteHelpers.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return core.clone(defaults.defaultRGB());
        }
        switch (color.format) {
            case 'cmyk':
                return convert.cmykToRGB(core.clone(color));
            case 'hex':
                return convert.hexToRGB(core.clone(color));
            case 'hsl':
                return convert.hslToRGB(core.clone(color));
            case 'hsv':
                return convert.hsvToRGB(core.clone(color));
            case 'lab':
                return convert.labToRGB(core.clone(color));
            case 'rgb':
                return color;
            case 'xyz':
                return convert.xyzToRGB(core.clone(color));
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to RGB: ${error}`);
        return null;
    }
}
function hexToCMYKHelper(hex) {
    try {
        if (!paletteHelpers.validateColorValues(hex)) {
            console.error(`Invalid hex value ${JSON.stringify(hex)}`);
            return core.clone(defaults.defaultCMYK());
        }
        const rgb = convert.hexToRGB(core.clone(hex));
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting hex to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function hexToXYZHelper(hex) {
    try {
        if (!paletteHelpers.validateColorValues(hex)) {
            console.error(`Invalid hex value ${JSON.stringify(hex)}`);
            return core.clone(defaults.defaultXYZ());
        }
        const lab = convert.hexToLAB(core.clone(hex));
        const xyz = convert.labToXYZ(lab);
        return xyz;
    }
    catch (error) {
        console.error(`Error converting hex to XYZ: ${error}`);
        return core.clone(defaults.defaultXYZ());
    }
}
export function hueToRGB(p, q, t) {
    try {
        const clonedP = core.clone(p);
        const clonedQ = core.clone(q);
        let clonedT = core.clone(t);
        if (clonedT < 0)
            clonedT += 1;
        if (clonedT > 1)
            clonedT -= 1;
        if (clonedT < 1 / 6)
            return clonedP + (clonedQ - clonedP) * 6 * clonedT;
        if (clonedT < 1 / 2)
            return clonedQ;
        if (clonedT < 2 / 3)
            return clonedP + (clonedQ - clonedP) * (2 / 3 - clonedT) * 6;
        return clonedP;
    }
    catch (error) {
        console.error(`Error converting hue to RGB: ${error}`);
        return 0;
    }
}
function hslAddFormat(value) {
    try {
        if (!paletteHelpers.validateColorValues({ value: value, format: 'hsl' })) {
            console.error(`Invalid HSL value ${JSON.stringify(value)}`);
            return core.clone(defaults.defaultHSL());
        }
        return { value: value, format: 'hsl' };
    }
    catch (error) {
        console.error(`Error adding HSL format: ${error}`);
        return core.clone(defaults.defaultHSL());
    }
}
function hslToCMYKHelper(hsl) {
    try {
        if (!paletteHelpers.validateColorValues(hsl)) {
            console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.defaultCMYK());
        }
        const rgb = convert.hslToRGB(core.clone(hsl));
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting HSL to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function hslToHexHelper(hsl) {
    try {
        if (!paletteHelpers.validateColorValues(hsl)) {
            console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.defaultHex());
        }
        const rgb = convert.hslToRGB(core.clone(hsl));
        return convert.rgbToHex(rgb);
    }
    catch (error) {
        console.error(`Error converting HSL to hex: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
function hslToXYZHelper(hsl) {
    try {
        if (!paletteHelpers.validateColorValues(hsl)) {
            console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.defaultXYZ());
        }
        const lab = convert.hslToLAB(core.clone(hsl));
        return convert.labToXYZ(lab);
    }
    catch (error) {
        console.error(`Error converting HSL to XYZ: ${error}`);
        return core.clone(defaults.defaultXYZ());
    }
}
function hsvToCMYKHelper(hsv) {
    try {
        if (!paletteHelpers.validateColorValues(hsv)) {
            console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
            return core.clone(defaults.defaultCMYK());
        }
        const rgb = convert.hsvToRGB(core.clone(hsv));
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting HSV to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function hsvToXYZHelper(hsv) {
    try {
        if (!paletteHelpers.validateColorValues(hsv)) {
            console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
            return core.clone(defaults.defaultXYZ());
        }
        const rgb = convert.hsvToRGB(core.clone(hsv));
        return convert.rgbToXYZ(rgb);
    }
    catch (error) {
        console.error(`Error converting HSV to XYZ: ${error}`);
        return core.clone(defaults.defaultXYZ());
    }
}
function labToCMYKHelper(lab) {
    try {
        if (!paletteHelpers.validateColorValues(lab)) {
            console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
            return core.clone(defaults.defaultCMYK());
        }
        const rgb = convert.labToRGB(core.clone(lab));
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting LAB to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function labToXYZHelper(lab) {
    try {
        if (!paletteHelpers.validateColorValues(lab)) {
            console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
            return core.clone(defaults.defaultXYZ());
        }
        return convert.labToXYZ(core.clone(lab));
    }
    catch (error) {
        console.error(`Error converting LAB to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
function xyzToCMYKHelper(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultCMYK());
        }
        const lab = convert.xyzToLAB(core.clone(xyz));
        return convert.labToCMYK(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function xyzToHexHelper(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultHex());
        }
        const lab = convert.xyzToLAB(core.clone(xyz));
        return convert.labToHex(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to hex: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
function xyzToHSLHelper(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultHSL());
        }
        const lab = convert.xyzToLAB(core.clone(xyz));
        return convert.labToHSL(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to HSL: ${error}`);
        return core.clone(defaults.defaultHSL());
    }
}
function xyzToHSVHelper(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultHSV());
        }
        const lab = convert.xyzToLAB(core.clone(xyz));
        return convert.labToHSV(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to HSV: ${error}`);
        return core.clone(defaults.defaultHSV());
    }
}
export const conversionHelpers = {
    applyGammaCorrection,
    clampRGB,
    cmykToXYZHelper,
    convertColorToCMYK,
    convertColorToHex,
    convertColorToHSL,
    convertColorToHSV,
    convertColorToLAB,
    convertColorToRGB,
    hexToCMYKHelper,
    hexToXYZHelper,
    hslAddFormat,
    hslToCMYKHelper,
    hslToHexHelper,
    hslToXYZHelper,
    hsvToCMYKHelper,
    hsvToXYZHelper,
    hueToRGB,
    labToCMYKHelper,
    labToXYZHelper,
    xyzToCMYKHelper,
    xyzToHexHelper,
    xyzToHSLHelper,
    xyzToHSVHelper
};
//# sourceMappingURL=data:application/json;base64,