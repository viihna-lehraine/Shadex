import { convert } from '../color-conversion/conversion-index.js';
import { defaults } from '../utils/defaults.js';
function applyGammaCorrection(value) {
    try {
        return value > 0.0031308
            ? 1.055 * Math.pow(value, 1 / 2.4) - 0.055
            : 12.92 * value;
    }
    catch (error) {
        console.error(`Error applying gamma correction: ${error}`);
        return value;
    }
}
function clampRGB(rgb) {
    try {
        return {
            value: {
                red: Math.round(Math.min(Math.max(0, rgb.value.red), 1) * 255),
                green: Math.round(Math.min(Math.max(0, rgb.value.green), 1) * 255),
                blue: Math.round(Math.min(Math.max(0, rgb.value.blue), 1) * 255)
            },
            format: 'rgb'
        };
    }
    catch (error) {
        console.error(`Error clamping RGB values: ${error}`);
        return rgb;
    }
}
function cmykToXYZHelper(cmyk) {
    try {
        const rgb = convert.cmykToRGB(cmyk);
        return convert.rgbToXYZ(rgb);
    }
    catch (error) {
        console.error(`Error converting CMYK to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
function convertColorToHex(color) {
    try {
        switch (color.format) {
            case 'cmyk':
                return convert.cmykToHex(color);
            case 'hex':
                return color;
            case 'hsl':
                return convert.hslToHex(color);
            case 'hsv':
                return convert.hsvToHex(color);
            case 'lab':
                return convert.labToHex(color);
            case 'rgb':
                return convert.rgbToHex(color);
            case 'xyz':
                return convert.xyzToHex(color);
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to hex: ${error}`);
        return null;
    }
}
function convertColorToHSL(color) {
    try {
        switch (color.format) {
            case 'cmyk':
                return convert.cmykToHSL(color);
            case 'hex':
                return convert.hexToHSL(color);
            case 'hsl':
                return color;
            case 'hsv':
                return convert.hsvToHSL(color);
            case 'lab':
                return convert.labToHSL(color);
            case 'rgb':
                return convert.rgbToHSL(color);
            case 'xyz':
                return convert.xyzToHSL(color);
            default:
                console.error('Unsupported color format');
                return null;
        }
    }
    catch (error) {
        console.error(`Error converting color to HSL: ${error}`);
        return null;
    }
}
function hexToCMYKHelper(hex) {
    try {
        const rgb = convert.hexToRGB(hex);
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting hex to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function hexToXYZHelper(hex) {
    try {
        const lab = convert.hexToLAB(hex);
        const xyz = convert.labToXYZ(lab);
        return xyz;
    }
    catch (error) {
        console.error(`Error converting hex to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
export function hueToRGB(p, q, t) {
    try {
        if (t < 0)
            t += 1;
        if (t > 1)
            t -= 1;
        if (t < 1 / 6)
            return p + (q - p) * 6 * t;
        if (t < 1 / 2)
            return q;
        if (t < 2 / 3)
            return p + (q - p) * (2 / 3 - t) * 6;
        return p;
    }
    catch (error) {
        console.error(`Error converting hue to RGB: ${error}`);
        return 0;
    }
}
function hslAddFormat(value) {
    try {
        return { value: value, format: 'hsl' };
    }
    catch (error) {
        console.error(`Error adding HSL format: ${error}`);
        return defaults.defaultHSL();
    }
}
function hslToCMYKHelper(hsl) {
    try {
        const rgb = convert.hslToRGB(hsl);
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting HSL to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function hslToHexHelper(hsl) {
    try {
        const rgb = convert.hslToRGB(hsl);
        return convert.rgbToHex(rgb);
    }
    catch (error) {
        console.error(`Error converting HSL to hex: ${error}`);
        return defaults.defaultHex();
    }
}
function hslToXYZHelper(hsl) {
    try {
        const lab = convert.hslToLAB(hsl);
        return convert.labToXYZ(lab);
    }
    catch (error) {
        console.error(`Error converting HSL to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
function hsvToCMYKHelper(hsv) {
    try {
        const rgb = convert.hsvToRGB(hsv);
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting HSV to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function hsvToXYZHelper(hsv) {
    try {
        const rgb = convert.hsvToRGB(hsv);
        return convert.rgbToXYZ(rgb);
    }
    catch (error) {
        console.error(`Error converting HSV to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
function labToCMYKHelper(lab) {
    try {
        const rgb = convert.labToRGB(lab);
        return convert.rgbToCMYK(rgb);
    }
    catch (error) {
        console.error(`Error converting LAB to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function labToXYZHelper(lab) {
    try {
        return convert.labToXYZ(lab);
    }
    catch (error) {
        console.error(`Error converting LAB to XYZ: ${error}`);
        return defaults.defaultXYZ();
    }
}
function xyzToCMYKHelper(xyz) {
    try {
        const lab = convert.xyzToLAB(xyz);
        return convert.labToCMYK(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function xyzToHexHelper(xyz) {
    try {
        const lab = convert.xyzToLAB(xyz);
        return convert.labToHex(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to hex: ${error}`);
        return defaults.defaultHex();
    }
}
function xyzToHSLHelper(xyz) {
    try {
        const lab = convert.xyzToLAB(xyz);
        return convert.labToHSL(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to HSL: ${error}`);
        return defaults.defaultHSL();
    }
}
function xyzToHSVHelper(xyz) {
    try {
        const lab = convert.xyzToLAB(xyz);
        return convert.labToHSV(lab);
    }
    catch (error) {
        console.error(`Error converting XYZ to HSV: ${error}`);
        return defaults.defaultHSV();
    }
}
export const conversionHelpers = {
    applyGammaCorrection,
    clampRGB,
    cmykToXYZHelper,
    convertColorToHex,
    convertColorToHSL,
    hexToCMYKHelper,
    hexToXYZHelper,
    hslAddFormat,
    hslToCMYKHelper,
    hslToHexHelper,
    hslToXYZHelper,
    hsvToCMYKHelper,
    hsvToXYZHelper,
    hueToRGB,
    labToCMYKHelper,
    labToXYZHelper,
    xyzToCMYKHelper,
    xyzToHexHelper,
    xyzToHSLHelper,
    xyzToHSVHelper
};
//# sourceMappingURL=data:application/json;base64,