import { palette } from '../palette-gen/palette-index.js';
import { convert } from '../color-conversion/conversion-index.js';
import { genPaletteBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
function adjustSL(color, amount = 10) {
    const adjustedSaturation = Math.min(Math.max(color.saturation + amount, 0), 100);
    const adjustedLightness = Math.min(Math.max(color.lightness + amount, 0), 100);
    return {
        hue: color.hue,
        saturation: adjustedSaturation,
        lightness: adjustedLightness,
        format: 'hsl'
    };
}
function genSelectedPaletteType(paletteType, numBoxes, baseColor, customColor = null, initialColorSpace = 'hex') {
    switch (paletteType) {
        case 1:
            return palette.genRandomPalette(numBoxes, customColor, initialColorSpace);
        case 2:
            return palette.genComplementaryPalette(numBoxes, baseColor, initialColorSpace);
        case 3:
            return palette.genTriadicPalette(numBoxes, baseColor, initialColorSpace);
        case 4:
            return palette.genTetradicPalette(numBoxes, baseColor, initialColorSpace);
        case 5:
            return palette.genSplitComplementaryPalette(numBoxes, baseColor, initialColorSpace);
        case 6:
            return palette.genAnalogousPalette(numBoxes, baseColor, initialColorSpace);
        case 7:
            return palette.genHexadicPalette(numBoxes, baseColor, initialColorSpace);
        case 8:
            return palette.genDiadicPalette(numBoxes, baseColor, initialColorSpace);
        case 9:
            return palette.genMonochromaticPalette(numBoxes, baseColor, initialColorSpace);
        default:
            console.error('DEFAULT CASE > unable to determine color scheme');
            return [];
    }
}
function startInHSL(color) {
    if (color.format === 'cmyk') {
        const cmyk = color;
        return convert.cmykToHSL(cmyk);
    }
    else if (color.format === 'hex') {
        const hex = color;
        return convert.hexToHSL(hex);
    }
    else if (color.format === 'hsl') {
        const hsl = color;
        return hsl;
    }
    else if (color.format === 'hsv') {
        const hsv = color;
        return convert.hsvToHSL(hsv);
    }
    else if (color.format === 'lab') {
        const lab = color;
        return convert.labToHSL(lab);
    }
    else if (color.format === 'rgb') {
        const rgb = color;
        return convert.rgbToHSL(rgb);
    }
    else {
        console.error('Unrecognized color format');
        return null;
    }
}
function genPalette(paletteType, numBoxes, initialColorSpace = 'hex', customColor) {
    let colors = [];
    const baseColor = customColor ??
        random.randomColor(initialColorSpace, 'flat');
    genSelectedPaletteType(paletteType, numBoxes, baseColor, customColor, initialColorSpace);
    if (colors.length === 0) {
        console.error('Colors array is empty or undefined.');
        return;
    }
    genPaletteBox(numBoxes, colors);
}
function initialHSLColorGen(color) {
    switch (color.format) {
        case 'cmyk':
            return convert.cmykToHSL(color.value);
        case 'hex':
            return convert.hexToHSL(color.value);
        case 'hsl':
            return color.value;
        case 'hsv':
            return convert.hsvToHSL(color.value);
        case 'lab':
            return convert.labToHSL(color.value);
        case 'rgb':
            return convert.rgbToHSL(color.value);
        default:
            return undefined;
    }
}
export const paletteHelpers = {
    adjustSL,
    genPalette,
    genSelectedPaletteType,
    initialHSLColorGen,
    startInHSL
};
//# sourceMappingURL=data:application/json;base64,