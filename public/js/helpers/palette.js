const adjustSLAmount = 10;
function adjustSL(color) {
    try {
        const adjustedSaturation = Math.min(Math.max(color.value.saturation + adjustSLAmount, 0), 100);
        const adjustedLightness = Math.min(100);
        return {
            value: {
                hue: color.value.hue,
                saturation: adjustedSaturation,
                lightness: adjustedLightness
            },
            format: 'hsl'
        };
    }
    catch (error) {
        console.error(`Error adjusting saturation and lightness: ${error}`);
        return color;
    }
}
function getWeightedRandomInterval() {
    try {
        const weights = [40, 45, 50, 55, 60, 65, 70];
        const probabilities = [0.1, 0.15, 0.2, 0.3, 0.15, 0.05, 0.05];
        const cumulativeProbabilities = probabilities.reduce((acc, prob, i) => {
            acc[i] = (acc[i - 1] || 0) + prob;
            return acc;
        }, []);
        const random = Math.random();
        for (let i = 0; i < cumulativeProbabilities.length; i++) {
            if (random < cumulativeProbabilities[i]) {
                return weights[i];
            }
        }
        return weights[weights.length - 1];
    }
    catch (error) {
        console.error(`Error generating weighted random interval: ${error}`);
        return 50;
    }
}
export const paletteHelpers = {
    adjustSL,
    getWeightedRandomInterval
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL3BhbGV0dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBRTFCLFNBQVMsUUFBUSxDQUFDLEtBQWdCO0lBQ2pDLElBQUksQ0FBQztRQUNKLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQ3BELEdBQUcsQ0FDSCxDQUFDO1FBQ0YsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhDLE9BQU87WUFDTixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFDcEIsVUFBVSxFQUFFLGtCQUFrQjtnQkFDOUIsU0FBUyxFQUFFLGlCQUFpQjthQUM1QjtZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkNBQTZDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDcEUsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMseUJBQXlCO0lBQ2pDLElBQUksQ0FBQztRQUNKLE1BQU0sT0FBTyxHQUFhLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkQsTUFBTSxhQUFhLEdBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RSxNQUFNLHVCQUF1QixHQUFhLGFBQWEsQ0FBQyxNQUFNLENBQzdELENBQUMsR0FBYSxFQUFFLElBQVksRUFBRSxDQUFTLEVBQUUsRUFBRTtZQUMxQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNsQyxPQUFPLEdBQUcsQ0FBQztRQUNaLENBQUMsRUFDRCxFQUFFLENBQ0YsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUU3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsdUJBQXVCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDekQsSUFBSSxNQUFNLEdBQUcsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDekMsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsQ0FBQztRQUNGLENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsOENBQThDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDckUsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBNkI7SUFDdkQsUUFBUTtJQUNSLHlCQUF5QjtDQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZm5PYmplY3RzIGZyb20gJy4uL2luZGV4L2ZuLW9iamVjdHMnO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vaW5kZXgvdHlwZXMnO1xuXG5jb25zdCBhZGp1c3RTTEFtb3VudCA9IDEwO1xuXG5mdW5jdGlvbiBhZGp1c3RTTChjb2xvcjogdHlwZXMuSFNMKTogdHlwZXMuSFNMIHtcblx0dHJ5IHtcblx0XHRjb25zdCBhZGp1c3RlZFNhdHVyYXRpb24gPSBNYXRoLm1pbihcblx0XHRcdE1hdGgubWF4KGNvbG9yLnZhbHVlLnNhdHVyYXRpb24gKyBhZGp1c3RTTEFtb3VudCwgMCksXG5cdFx0XHQxMDBcblx0XHQpO1xuXHRcdGNvbnN0IGFkanVzdGVkTGlnaHRuZXNzID0gTWF0aC5taW4oMTAwKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IGNvbG9yLnZhbHVlLmh1ZSxcblx0XHRcdFx0c2F0dXJhdGlvbjogYWRqdXN0ZWRTYXR1cmF0aW9uLFxuXHRcdFx0XHRsaWdodG5lc3M6IGFkanVzdGVkTGlnaHRuZXNzXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgYWRqdXN0aW5nIHNhdHVyYXRpb24gYW5kIGxpZ2h0bmVzczogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gY29sb3I7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCgpOiBudW1iZXIge1xuXHR0cnkge1xuXHRcdGNvbnN0IHdlaWdodHM6IG51bWJlcltdID0gWzQwLCA0NSwgNTAsIDU1LCA2MCwgNjUsIDcwXTtcblx0XHRjb25zdCBwcm9iYWJpbGl0aWVzOiBudW1iZXJbXSA9IFswLjEsIDAuMTUsIDAuMiwgMC4zLCAwLjE1LCAwLjA1LCAwLjA1XTtcblxuXHRcdGNvbnN0IGN1bXVsYXRpdmVQcm9iYWJpbGl0aWVzOiBudW1iZXJbXSA9IHByb2JhYmlsaXRpZXMucmVkdWNlKFxuXHRcdFx0KGFjYzogbnVtYmVyW10sIHByb2I6IG51bWJlciwgaTogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGFjY1tpXSA9IChhY2NbaSAtIDFdIHx8IDApICsgcHJvYjtcblx0XHRcdFx0cmV0dXJuIGFjYztcblx0XHRcdH0sXG5cdFx0XHRbXVxuXHRcdCk7XG5cblx0XHRjb25zdCByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjdW11bGF0aXZlUHJvYmFiaWxpdGllcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHJhbmRvbSA8IGN1bXVsYXRpdmVQcm9iYWJpbGl0aWVzW2ldKSB7XG5cdFx0XHRcdHJldHVybiB3ZWlnaHRzW2ldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB3ZWlnaHRzW3dlaWdodHMubGVuZ3RoIC0gMV07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyB3ZWlnaHRlZCByYW5kb20gaW50ZXJ2YWw6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIDUwO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwYWxldHRlSGVscGVyczogZm5PYmplY3RzLlBhbGV0dGVIZWxwZXJzID0ge1xuXHRhZGp1c3RTTCxcblx0Z2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbFxufTtcbiJdfQ==