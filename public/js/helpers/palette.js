import { config } from '../config/constants.js';
import { defaults } from '../config/defaults.js';
import { notification } from './notification.js';
import { convert } from '../palette-gen/conversion-index.js';
import { colorUtils } from '../utils/color-utils.js';
import { commonUtils } from '../utils/common-utils.js';
import { core } from '../utils/core-utils.js';
function adjustSL(color) {
    try {
        if (!commonUtils.validateColorValues(color)) {
            console.error('Invalid color valus for adjustment.');
            notification.showToast('Invalid color values');
            return color;
        }
        const adjustedSaturation = Math.min(Math.max(color.value.saturation + config.adjustSLAmount, 0), 100);
        const adjustedLightness = Math.min(100);
        return {
            value: {
                hue: color.value.hue,
                saturation: adjustedSaturation,
                lightness: adjustedLightness,
                alpha: color.value.alpha
            },
            format: 'hsl'
        };
    }
    catch (error) {
        console.error(`Error adjusting saturation and lightness: ${error}`);
        return color;
    }
}
function getWeightedRandomInterval() {
    try {
        const weights = config.weights;
        const probabilities = config.probabilities;
        const cumulativeProbabilities = probabilities.reduce((acc, prob, i) => {
            acc[i] = (acc[i - 1] || 0) + prob;
            return acc;
        }, []);
        const random = Math.random();
        for (let i = 0; i < cumulativeProbabilities.length; i++) {
            if (random < cumulativeProbabilities[i]) {
                return weights[i];
            }
        }
        return weights[weights.length - 1];
    }
    catch (error) {
        console.error(`Error generating weighted random interval: ${error}`);
        return 50;
    }
}
function hexToHSLWrapper(input) {
    try {
        const clonedInput = core.clone(input);
        const hex = typeof clonedInput === 'string'
            ? {
                value: {
                    hex: clonedInput,
                    alpha: clonedInput.slice(-2),
                    numericAlpha: colorUtils.hexAlphaToNumericAlpha(clonedInput.slice(-2))
                },
                format: 'hex'
            }
            : {
                ...clonedInput,
                value: {
                    ...clonedInput.value,
                    numericAlpha: colorUtils.hexAlphaToNumericAlpha(clonedInput.value.alpha)
                }
            };
        return convert.hexToHSL(hex);
    }
    catch (error) {
        console.error(`Error converting hex to HSL: ${error}`);
        return defaults.hsl;
    }
}
export const paletteHelpers = {
    adjustSL,
    getWeightedRandomInterval,
    hexToHSLWrapper
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL3BhbGV0dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUc5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTNDLFNBQVMsUUFBUSxDQUFDLEtBQWlCO0lBQ2xDLElBQUksQ0FBQztRQUNKLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUM3QyxPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7WUFFckQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBRS9DLE9BQU8sS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUVELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUMzRCxHQUFHLENBQ0gsQ0FBQztRQUNGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4QyxPQUFPO1lBQ04sS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdB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QUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcvY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZmF1bHRzIH0gZnJvbSAnLi4vY29uZmlnL2RlZmF1bHRzJztcbmltcG9ydCAqIGFzIGZuT2JqZWN0cyBmcm9tICcuLi9pbmRleC9mbi1vYmplY3RzJztcbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICcuLi9pbmRleC9jb2xvcnMnO1xuaW1wb3J0IHsgbm90aWZpY2F0aW9uIH0gZnJvbSAnLi9ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgY29udmVydCB9IGZyb20gJy4uL3BhbGV0dGUtZ2VuL2NvbnZlcnNpb24taW5kZXgnO1xuaW1wb3J0IHsgY29sb3JVdGlscyB9IGZyb20gJy4uL3V0aWxzL2NvbG9yLXV0aWxzJztcbmltcG9ydCB7IGNvbW1vblV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvY29tbW9uLXV0aWxzJztcbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi91dGlscy9jb3JlLXV0aWxzJztcblxuZnVuY3Rpb24gYWRqdXN0U0woY29sb3I6IGNvbG9ycy5IU0wpOiBjb2xvcnMuSFNMIHtcblx0dHJ5IHtcblx0XHRpZiAoIWNvbW1vblV0aWxzLnZhbGlkYXRlQ29sb3JWYWx1ZXMoY29sb3IpKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdJbnZhbGlkIGNvbG9yIHZhbHVzIGZvciBhZGp1c3RtZW50LicpO1xuXG5cdFx0XHRub3RpZmljYXRpb24uc2hvd1RvYXN0KCdJbnZhbGlkIGNvbG9yIHZhbHVlcycpO1xuXG5cdFx0XHRyZXR1cm4gY29sb3I7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWRqdXN0ZWRTYXR1cmF0aW9uID0gTWF0aC5taW4oXG5cdFx0XHRNYXRoLm1heChjb2xvci52YWx1ZS5zYXR1cmF0aW9uICsgY29uZmlnLmFkanVzdFNMQW1vdW50LCAwKSxcblx0XHRcdDEwMFxuXHRcdCk7XG5cdFx0Y29uc3QgYWRqdXN0ZWRMaWdodG5lc3MgPSBNYXRoLm1pbigxMDApO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29sb3IudmFsdWUuaHVlLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBhZGp1c3RlZFNhdHVyYXRpb24sXG5cdFx0XHRcdGxpZ2h0bmVzczogYWRqdXN0ZWRMaWdodG5lc3MsXG5cdFx0XHRcdGFscGhhOiBjb2xvci52YWx1ZS5hbHBoYVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGFkanVzdGluZyBzYXR1cmF0aW9uIGFuZCBsaWdodG5lc3M6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gY29sb3I7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCgpOiBudW1iZXIge1xuXHR0cnkge1xuXHRcdGNvbnN0IHdlaWdodHM6IG51bWJlcltdID0gY29uZmlnLndlaWdodHM7XG5cdFx0Y29uc3QgcHJvYmFiaWxpdGllczogbnVtYmVyW10gPSBjb25maWcucHJvYmFiaWxpdGllcztcblx0XHRjb25zdCBjdW11bGF0aXZlUHJvYmFiaWxpdGllczogbnVtYmVyW10gPSBwcm9iYWJpbGl0aWVzLnJlZHVjZShcblx0XHRcdChhY2M6IG51bWJlcltdLCBwcm9iOiBudW1iZXIsIGk6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRhY2NbaV0gPSAoYWNjW2kgLSAxXSB8fCAwKSArIHByb2I7XG5cdFx0XHRcdHJldHVybiBhY2M7XG5cdFx0XHR9LFxuXHRcdFx0W11cblx0XHQpO1xuXHRcdGNvbnN0IHJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGN1bXVsYXRpdmVQcm9iYWJpbGl0aWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAocmFuZG9tIDwgY3VtdWxhdGl2ZVByb2JhYmlsaXRpZXNbaV0pIHtcblx0XHRcdFx0cmV0dXJuIHdlaWdodHNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdlaWdodHNbd2VpZ2h0cy5sZW5ndGggLSAxXTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIHdlaWdodGVkIHJhbmRvbSBpbnRlcnZhbDogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiA1MDtcblx0fVxufVxuXG5mdW5jdGlvbiBoZXhUb0hTTFdyYXBwZXIoaW5wdXQ6IHN0cmluZyB8IGNvbG9ycy5IZXgpOiBjb2xvcnMuSFNMIHtcblx0dHJ5IHtcblx0XHRjb25zdCBjbG9uZWRJbnB1dCA9IGNvcmUuY2xvbmUoaW5wdXQpO1xuXHRcdGNvbnN0IGhleDogY29sb3JzLkhleCA9XG5cdFx0XHR0eXBlb2YgY2xvbmVkSW5wdXQgPT09ICdzdHJpbmcnXG5cdFx0XHRcdD8ge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRcdFx0aGV4OiBjbG9uZWRJbnB1dCxcblx0XHRcdFx0XHRcdFx0YWxwaGE6IGNsb25lZElucHV0LnNsaWNlKC0yKSxcblx0XHRcdFx0XHRcdFx0bnVtZXJpY0FscGhhOiBjb2xvclV0aWxzLmhleEFscGhhVG9OdW1lcmljQWxwaGEoXG5cdFx0XHRcdFx0XHRcdFx0Y2xvbmVkSW5wdXQuc2xpY2UoLTIpXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRmb3JtYXQ6ICdoZXgnXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQ6IHtcblx0XHRcdFx0XHRcdC4uLmNsb25lZElucHV0LFxuXHRcdFx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRcdFx0Li4uY2xvbmVkSW5wdXQudmFsdWUsXG5cdFx0XHRcdFx0XHRcdG51bWVyaWNBbHBoYTogY29sb3JVdGlscy5oZXhBbHBoYVRvTnVtZXJpY0FscGhhKFxuXHRcdFx0XHRcdFx0XHRcdGNsb25lZElucHV0LnZhbHVlLmFscGhhXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXG5cdFx0cmV0dXJuIGNvbnZlcnQuaGV4VG9IU0woaGV4KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIGhleCB0byBIU0w6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gZGVmYXVsdHMuaHNsO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwYWxldHRlSGVscGVyczogZm5PYmplY3RzLlBhbGV0dGVIZWxwZXJzID0ge1xuXHRhZGp1c3RTTCxcblx0Z2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCxcblx0aGV4VG9IU0xXcmFwcGVyXG59O1xuIl19