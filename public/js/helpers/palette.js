import { config } from '../config/constants.js';
import { domHelpers } from './dom.js';
function adjustSL(color) {
    try {
        if (!validateColorValues(color)) {
            console.error('Invalid color valus for adjustment.');
            domHelpers.showToast('Invalid color values');
            return color;
        }
        const adjustedSaturation = Math.min(Math.max(color.value.saturation + config.adjustSLAmount, 0), 100);
        const adjustedLightness = Math.min(100);
        return {
            value: {
                hue: color.value.hue,
                saturation: adjustedSaturation,
                lightness: adjustedLightness
            },
            format: 'hsl'
        };
    }
    catch (error) {
        console.error(`Error adjusting saturation and lightness: ${error}`);
        return color;
    }
}
function getWeightedRandomInterval() {
    try {
        const weights = config.weights;
        const probabilities = config.probabilities;
        const cumulativeProbabilities = probabilities.reduce((acc, prob, i) => {
            acc[i] = (acc[i - 1] || 0) + prob;
            return acc;
        }, []);
        const random = Math.random();
        for (let i = 0; i < cumulativeProbabilities.length; i++) {
            if (random < cumulativeProbabilities[i]) {
                return weights[i];
            }
        }
        return weights[weights.length - 1];
    }
    catch (error) {
        console.error(`Error generating weighted random interval: ${error}`);
        return 50;
    }
}
function sanitizeLAB(value) {
    return Math.round(Math.min(Math.max(value, -125), 125));
}
function sanitizePercentage(value) {
    return Math.round(Math.min(Math.max(value, 0), 100));
}
function sanitizeRadial(value) {
    return Math.round(Math.min(Math.max(value, 0), 360)) & 360;
}
function sanitizeRGB(value) {
    return Math.round(Math.min(Math.max(value, 0), 255));
}
function validateColorValues(color) {
    return Object.values(color.value).every(v => typeof v === 'number' && !isNaN(v));
}
export const paletteHelpers = {
    adjustSL,
    getWeightedRandomInterval,
    sanitizeLAB,
    sanitizePercentage,
    sanitizeRadial,
    sanitizeRGB,
    validateColorValues
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL3BhbGV0dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFJbkMsU0FBUyxRQUFRLENBQUMsS0FBZ0I7SUFDakMsSUFBSSxDQUFDO1FBQ0osSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDakMsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1lBQ3JELFVBQVUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUM3QyxPQUFPLEtBQUssQ0FBQztRQUNkLENBQUM7UUFFRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFDM0QsR0FBRyxDQUNILENBQUM7UUFDRixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEMsT0FBTztZQUNOLEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUNwQixVQUFVLEVBQUUsa0JBQWtCO2dCQUM5QixTQUFTLEVBQUUsaUJBQWlCO2FBQzVCO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNwRSxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyx5QkFBeUI7SUFDakMsSUFBSSxDQUFDO1FBQ0osTUFBTSxPQUFPLEdBQWEsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxNQUFNLGFBQWEsR0FBYSxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQ3JELE1BQU0sdUJBQXVCLEdBQWEsYUFBYSxDQUFDLE1BQU0sQ0FDN0QsQ0FBQyxHQUFhLEVBQUUsSUFBWSxFQUFFLENBQVMsRUFBRSxFQUFFO1lBQzFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLE9BQU8sR0FBRyxDQUFDO1FBQ1osQ0FBQyxFQUNELEVBQUUsQ0FDRixDQUFDO1FBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN6RCxJQUFJLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN6QyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixDQUFDO1FBQ0YsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNyRSxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsS0FBYTtJQUNqQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQUMsS0FBYTtJQUN4QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxLQUFhO0lBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQzVELENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFhO0lBQ2pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQzNCLEtBQXdDO0lBRXhDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUN0QyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDdkMsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQTZCO0lBQ3ZELFFBQVE7SUFDUix5QkFBeUI7SUFDekIsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsV0FBVztJQUNYLG1CQUFtQjtDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkb21IZWxwZXJzIH0gZnJvbSAnLi9kb20nO1xuaW1wb3J0ICogYXMgZm5PYmplY3RzIGZyb20gJy4uL2luZGV4L2ZuLW9iamVjdHMnO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vaW5kZXgvdHlwZXMnO1xuXG5mdW5jdGlvbiBhZGp1c3RTTChjb2xvcjogdHlwZXMuSFNMKTogdHlwZXMuSFNMIHtcblx0dHJ5IHtcblx0XHRpZiAoIXZhbGlkYXRlQ29sb3JWYWx1ZXMoY29sb3IpKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdJbnZhbGlkIGNvbG9yIHZhbHVzIGZvciBhZGp1c3RtZW50LicpO1xuXHRcdFx0ZG9tSGVscGVycy5zaG93VG9hc3QoJ0ludmFsaWQgY29sb3IgdmFsdWVzJyk7XG5cdFx0XHRyZXR1cm4gY29sb3I7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWRqdXN0ZWRTYXR1cmF0aW9uID0gTWF0aC5taW4oXG5cdFx0XHRNYXRoLm1heChjb2xvci52YWx1ZS5zYXR1cmF0aW9uICsgY29uZmlnLmFkanVzdFNMQW1vdW50LCAwKSxcblx0XHRcdDEwMFxuXHRcdCk7XG5cdFx0Y29uc3QgYWRqdXN0ZWRMaWdodG5lc3MgPSBNYXRoLm1pbigxMDApO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29sb3IudmFsdWUuaHVlLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBhZGp1c3RlZFNhdHVyYXRpb24sXG5cdFx0XHRcdGxpZ2h0bmVzczogYWRqdXN0ZWRMaWdodG5lc3Ncblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBhZGp1c3Rpbmcgc2F0dXJhdGlvbiBhbmQgbGlnaHRuZXNzOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBjb2xvcjtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRXZWlnaHRlZFJhbmRvbUludGVydmFsKCk6IG51bWJlciB7XG5cdHRyeSB7XG5cdFx0Y29uc3Qgd2VpZ2h0czogbnVtYmVyW10gPSBjb25maWcud2VpZ2h0cztcblx0XHRjb25zdCBwcm9iYWJpbGl0aWVzOiBudW1iZXJbXSA9IGNvbmZpZy5wcm9iYWJpbGl0aWVzO1xuXHRcdGNvbnN0IGN1bXVsYXRpdmVQcm9iYWJpbGl0aWVzOiBudW1iZXJbXSA9IHByb2JhYmlsaXRpZXMucmVkdWNlKFxuXHRcdFx0KGFjYzogbnVtYmVyW10sIHByb2I6IG51bWJlciwgaTogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGFjY1tpXSA9IChhY2NbaSAtIDFdIHx8IDApICsgcHJvYjtcblx0XHRcdFx0cmV0dXJuIGFjYztcblx0XHRcdH0sXG5cdFx0XHRbXVxuXHRcdCk7XG5cdFx0Y29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY3VtdWxhdGl2ZVByb2JhYmlsaXRpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChyYW5kb20gPCBjdW11bGF0aXZlUHJvYmFiaWxpdGllc1tpXSkge1xuXHRcdFx0XHRyZXR1cm4gd2VpZ2h0c1tpXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gd2VpZ2h0c1t3ZWlnaHRzLmxlbmd0aCAtIDFdO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgd2VpZ2h0ZWQgcmFuZG9tIGludGVydmFsOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiA1MDtcblx0fVxufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZUxBQih2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcblx0cmV0dXJuIE1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIC0xMjUpLCAxMjUpKTtcbn1cblxuZnVuY3Rpb24gc2FuaXRpemVQZXJjZW50YWdlKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuXHRyZXR1cm4gTWF0aC5yb3VuZChNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgMCksIDEwMCkpO1xufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZVJhZGlhbCh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcblx0cmV0dXJuIE1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIDApLCAzNjApKSAmIDM2MDtcbn1cblxuZnVuY3Rpb24gc2FuaXRpemVSR0IodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG5cdHJldHVybiBNYXRoLnJvdW5kKE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCAwKSwgMjU1KSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29sb3JWYWx1ZXMoXG5cdGNvbG9yOiB0eXBlcy5Db2xvciB8IHR5cGVzLlNMIHwgdHlwZXMuU1Zcbik6IGJvb2xlYW4ge1xuXHRyZXR1cm4gT2JqZWN0LnZhbHVlcyhjb2xvci52YWx1ZSkuZXZlcnkoXG5cdFx0diA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHYpXG5cdCk7XG59XG5cbmV4cG9ydCBjb25zdCBwYWxldHRlSGVscGVyczogZm5PYmplY3RzLlBhbGV0dGVIZWxwZXJzID0ge1xuXHRhZGp1c3RTTCxcblx0Z2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCxcblx0c2FuaXRpemVMQUIsXG5cdHNhbml0aXplUGVyY2VudGFnZSxcblx0c2FuaXRpemVSYWRpYWwsXG5cdHNhbml0aXplUkdCLFxuXHR2YWxpZGF0ZUNvbG9yVmFsdWVzXG59O1xuIl19