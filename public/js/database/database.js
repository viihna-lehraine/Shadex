import { openDB } from 'idb';
import { defaults } from '../config/defaults.js';
import { paletteUtils } from '../utils/palette-utils.js';
function createMutationLogger(obj, key) {
    return new Proxy(obj, {
        set(target, property, value) {
            const oldValue = target[property];
            const success = Reflect.set(target, property, value);
            if (success) {
                logMutation({
                    timestamp: new Date().toISOString(),
                    key,
                    action: 'update',
                    newValue: { [property]: value },
                    oldValue: { [property]: oldValue },
                    origin: 'Proxy'
                });
            }
            return success;
        }
    });
}
const dbPromise = openDB('paletteDatabase', 1, {
    upgrade(db) {
        try {
            const stores = [
                'customColor',
                'mutations',
                'settings',
                'tables'
            ];
            stores.forEach(store => {
                if (!db.objectStoreNames.contains(store)) {
                    db.createObjectStore(store, {
                        keyPath: store === 'mutations' ? 'timestamp' : 'key'
                    });
                }
            });
        }
        catch (error) {
            console.error('Error during IndexedDB upgrade:', error);
            throw error;
        }
    }
});
async function getDB() {
    return dbPromise;
}
async function getCurrentPaletteID() {
    const db = await getDB();
    const settings = await db.get('settings', 'appSettings');
    return settings?.lastPaletteID ?? 0;
}
async function getCustomColor() {
    const db = await getDB();
    const entry = await db.get('customColor', 'customColor');
    return entry?.color
        ? createMutationLogger(entry.color, 'customColor')
        : null;
}
function getLoggedObject(obj, key) {
    if (obj) {
        return createMutationLogger(obj, key);
    }
    return null;
}
async function getNextPaletteID() {
    const currentID = await getCurrentPaletteID();
    const newID = currentID + 1;
    await updateCurrentPaletteID(newID);
    return newID;
}
async function getNextTableID() {
    const settings = await getSettings();
    const nextID = settings.lastTableID + 1;
    await saveData('settings', 'appSettings', {
        ...settings,
        lastTableID: nextID
    });
    return `palette_${nextID}`;
}
async function getSettings() {
    try {
        const db = await getDB();
        const settings = await db.get('settings', 'appSettings');
        return settings ?? defaults.settings;
    }
    catch (error) {
        console.error('Error fetching settings:', error);
        return { colorSpace: 'hex', lastTableID: 0 };
    }
}
async function getTable(id) {
    const db = await getDB();
    const result = await db.get('tables', id);
    if (!result)
        console.warn(`Table with ID ${id} not found.`);
    return result;
}
async function getStore(storeName, mode) {
    const db = await getDB();
    return db.transaction(storeName, mode).objectStore(storeName);
}
async function logMutation(log) {
    const db = await getDB();
    await db.put('mutations', log);
    console.log(`Logged mutation: ${JSON.stringify(log)}`);
}
async function renderPalette(tableId) {
    try {
        const storedPalette = await getTable(tableId);
        const paletteRow = document.getElementById('palette-row');
        if (!storedPalette)
            throw new Error(`Palette ${tableId} not found.`);
        if (!paletteRow)
            throw new Error('Palette row element not found.');
        paletteRow.innerHTML = '';
        const fragment = document.createDocumentFragment();
        const table = document.createElement('table');
        table.classList.add('palette-table');
        storedPalette.palette.items.forEach((item, index) => {
            const row = document.createElement('tr');
            const cell = document.createElement('td');
            const colorBox = document.createElement('div');
            cell.textContent = `Color ${index + 1}`;
            colorBox.classList.add('color-box');
            colorBox.style.backgroundColor = item.cssStrings.hexCSSString;
            row.appendChild(colorBox);
            row.appendChild(cell);
            table.appendChild(row);
        });
        fragment.appendChild(table);
        paletteRow.appendChild(fragment);
        console.log(`Rendered palette ${tableId}.`);
    }
    catch (error) {
        console.error(`Failed to render palette: ${error}`);
    }
}
async function saveData(storeName, key, data, oldValue) {
    try {
        const db = await getDB();
        const tx = db.transaction(storeName, 'readwrite');
        const store = tx.objectStore(storeName);
        await store.put({ key, ...data });
        await tx.done;
        console.log(`${key} saved to ${storeName}.`);
        await logMutation({
            timestamp: new Date().toISOString(),
            key,
            action: 'update',
            newValue: data,
            oldValue: oldValue ? oldValue : null,
            origin: 'saveData'
        });
    }
    catch (error) {
        console.error(`Failed to save data to ${storeName}:`, error);
        throw error;
    }
}
async function savePalette(id, newPalette) {
    try {
        const store = await getStore('tables', 'readwrite');
        const paletteToSave = {
            tableID: newPalette.tableID,
            palette: newPalette.palette
        };
        await store.put({ key: id, ...paletteToSave });
        console.log(`Palette ${id} saved successfully.`);
    }
    catch (error) {
        console.error(`Failed to save palette ${id}: ${error}`);
        throw error;
    }
}
async function savePaletteToDB(type, items, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray) {
    const paletteID = await getNextPaletteID();
    const newPalette = paletteUtils.createPaletteObject(type, items, baseColor, paletteID, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
    await savePalette(newPalette.id, {
        tableID: parseInt(newPalette.id.split('_')[1]),
        palette: newPalette
    });
    console.log(`Saved ${type} palette: ${JSON.stringify(newPalette)}`);
    return newPalette;
}
async function saveSettings(newSettings) {
    try {
        await saveData('settings', 'appSettings', newSettings);
        console.log('Settings updated');
    }
    catch (error) {
        console.error(`Failed to save settings: ${error}`);
        throw error;
    }
}
async function trackedTransaction(storeName, mode, callback) {
    const db = await getDB();
    const tx = db.transaction(storeName, mode);
    const store = tx.objectStore(storeName);
    try {
        await callback(store);
        await tx.done;
        console.log(`Transaction on ${storeName} completed.`);
    }
    catch (error) {
        console.error(`Transaction on ${storeName} failed: ${error}`);
        throw error;
    }
}
async function updateCurrentPaletteID(newID) {
    const db = await getDB();
    const tx = db.transaction('settings', 'readwrite');
    const store = tx.objectStore('settings');
    await store.put({ key: 'appSettings', lastPaletteID: newID });
    await tx.done;
    console.log(`Current palette ID updated to ${newID}`);
}
async function updateEntryInPalette(tableID, entryIndex, newEntry) {
    try {
        const storedPalette = await getTable(tableID);
        if (!storedPalette)
            throw new Error(`Palette ${tableID} not found.`);
        const { items } = storedPalette.palette;
        if (entryIndex >= items.length)
            throw new Error(`Entry ${entryIndex} not found in palette ${tableID}.`);
        const oldEntry = items[entryIndex];
        items[entryIndex] = newEntry;
        await saveData('tables', tableID, storedPalette);
        await logMutation({
            timestamp: new Date().toISOString(),
            key: `${tableID}-${entryIndex}]`,
            action: 'update',
            newValue: newEntry,
            oldValue: oldEntry,
            origin: 'updateEntryInPalette'
        });
        console.log(`Entry ${entryIndex} in palette ${tableID} updated.`);
    }
    catch (error) {
        console.error(`Failed to update entry in palette: ${error}`);
        throw error;
    }
}
export const database = {
    createMutationLogger,
    deleteTable: async (id) => {
        const db = await getDB();
        await db.delete('tables', id);
        console.log(`Table ${id} deleted.`);
    },
    getCurrentPaletteID,
    getCustomColor,
    getDB,
    getLoggedObject,
    getNextPaletteID,
    getNextTableID,
    getSettings,
    getStore,
    getTable,
    listTables: async () => {
        const db = await getDB();
        const keys = await db.getAllKeys('tables');
        return keys.map(String);
    },
    logMutation,
    renderPalette,
    saveData,
    savePalette,
    savePaletteToDB,
    saveSettings,
    trackedTransaction,
    updateCurrentPaletteID,
    updateEntryInPalette
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0YWJhc2UvZGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFtQixNQUFNLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV0RCxTQUFTLG9CQUFvQixDQUFtQixHQUFNLEVBQUUsR0FBVztJQUNsRSxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNyQixHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLO1lBQzFCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFtQixDQUFDLENBQUM7WUFDN0MsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRXJELElBQUksT0FBTyxFQUFFLENBQUM7Z0JBQ2IsV0FBVyxDQUFDO29CQUNYLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtvQkFDbkMsR0FBRztvQkFDSCxNQUFNLEVBQUUsUUFBUTtvQkFDaEIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUU7b0JBQy9CLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFO29CQUNsQyxNQUFNLEVBQUUsT0FBTztpQkFDZixDQUFDLENBQUM7WUFDSixDQUFDO1lBRUQsT0FBTyxPQUFPLENBQUM7UUFDaEIsQ0FBQztLQUNELENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFNBQVMsR0FBMkIsTUFBTSxDQUMvQyxpQkFBaUIsRUFDakIsQ0FBQyxFQUNEO0lBQ0MsT0FBTyxDQUFDLEVBQUU7UUFDVCxJQUFJ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LE1BQU0sSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUNELFdBQVc7SUFDWCxhQUFhO0lBQ2IsUUFBUTtJQUNSLFdBQVc7SUFDWCxlQUFlO0lBQ2YsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsb0JBQW9CO0NBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJREJQT2JqZWN0U3RvcmUsIG9wZW5EQiB9IGZyb20gJ2lkYic7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gJy4uL2NvbmZpZy9kZWZhdWx0cyc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnLi4vaW5kZXgvY29sb3JzJztcbmltcG9ydCAqIGFzIGZuT2JqZWN0cyBmcm9tICcuLi9pbmRleC9mbi1vYmplY3RzJztcbmltcG9ydCAqIGFzIGlkYiBmcm9tICcuLi9pbmRleC9kYXRhYmFzZSc7XG5pbXBvcnQgKiBhcyBwYWxldHRlIGZyb20gJy4uL2luZGV4L3BhbGV0dGUnO1xuaW1wb3J0IHsgcGFsZXR0ZVV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvcGFsZXR0ZS11dGlscyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZU11dGF0aW9uTG9nZ2VyPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCwga2V5OiBzdHJpbmcpOiBUIHtcblx0cmV0dXJuIG5ldyBQcm94eShvYmosIHtcblx0XHRzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcblx0XHRcdGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W3Byb3BlcnR5IGFzIGtleW9mIFRdO1xuXHRcdFx0Y29uc3Qgc3VjY2VzcyA9IFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKTtcblxuXHRcdFx0aWYgKHN1Y2Nlc3MpIHtcblx0XHRcdFx0bG9nTXV0YXRpb24oe1xuXHRcdFx0XHRcdHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuXHRcdFx0XHRcdGtleSxcblx0XHRcdFx0XHRhY3Rpb246ICd1cGRhdGUnLFxuXHRcdFx0XHRcdG5ld1ZhbHVlOiB7IFtwcm9wZXJ0eV06IHZhbHVlIH0sXG5cdFx0XHRcdFx0b2xkVmFsdWU6IHsgW3Byb3BlcnR5XTogb2xkVmFsdWUgfSxcblx0XHRcdFx0XHRvcmlnaW46ICdQcm94eSdcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzdWNjZXNzO1xuXHRcdH1cblx0fSk7XG59XG5cbmNvbnN0IGRiUHJvbWlzZTogUHJvbWlzZTxpZGIuUGFsZXR0ZURCPiA9IG9wZW5EQjxpZGIuUGFsZXR0ZVNjaGVtYT4oXG5cdCdwYWxldHRlRGF0YWJhc2UnLFxuXHQxLFxuXHR7XG5cdFx0dXBncmFkZShkYikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3Qgc3RvcmVzID0gW1xuXHRcdFx0XHRcdCdjdXN0b21Db2xvcicsXG5cdFx0XHRcdFx0J211dGF0aW9ucycsXG5cdFx0XHRcdFx0J3NldHRpbmdzJyxcblx0XHRcdFx0XHQndGFibGVzJ1xuXHRcdFx0XHRdO1xuXG5cdFx0XHRcdHN0b3Jlcy5mb3JFYWNoKHN0b3JlID0+IHtcblx0XHRcdFx0XHRpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoc3RvcmUpKSB7XG5cdFx0XHRcdFx0XHRkYi5jcmVhdGVPYmplY3RTdG9yZShzdG9yZSwge1xuXHRcdFx0XHRcdFx0XHRrZXlQYXRoOiBzdG9yZSA9PT0gJ211dGF0aW9ucycgPyAndGltZXN0YW1wJyA6ICdrZXknXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIEluZGV4ZWREQiB1cGdyYWRlOicsIGVycm9yKTtcblxuXHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH1cbik7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERCKCk6IFByb21pc2U8aWRiLlBhbGV0dGVEQj4ge1xuXHRyZXR1cm4gZGJQcm9taXNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50UGFsZXR0ZUlEKCk6IFByb21pc2U8bnVtYmVyPiB7XG5cdGNvbnN0IGRiID0gYXdhaXQgZ2V0REIoKTtcblx0Y29uc3Qgc2V0dGluZ3MgPSBhd2FpdCBkYi5nZXQoJ3NldHRpbmdzJywgJ2FwcFNldHRpbmdzJyk7XG5cblx0cmV0dXJuIHNldHRpbmdzPy5sYXN0UGFsZXR0ZUlEID8/IDA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEN1c3RvbUNvbG9yKCk6IFByb21pc2U8Y29sb3JzLkhTTCB8IG51bGw+IHtcblx0Y29uc3QgZGIgPSBhd2FpdCBnZXREQigpO1xuXHRjb25zdCBlbnRyeSA9IGF3YWl0IGRiLmdldCgnY3VzdG9tQ29sb3InLCAnY3VzdG9tQ29sb3InKTtcblxuXHRyZXR1cm4gZW50cnk/LmNvbG9yXG5cdFx0PyBjcmVhdGVNdXRhdGlvbkxvZ2dlcihlbnRyeS5jb2xvciwgJ2N1c3RvbUNvbG9yJylcblx0XHQ6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldExvZ2dlZE9iamVjdDxUIGV4dGVuZHMgb2JqZWN0Pihcblx0b2JqOiBUIHwgbnVsbCxcblx0a2V5OiBzdHJpbmdcbik6IFQgfCBudWxsIHtcblx0aWYgKG9iaikge1xuXHRcdHJldHVybiBjcmVhdGVNdXRhdGlvbkxvZ2dlcihvYmosIGtleSk7XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TmV4dFBhbGV0dGVJRCgpOiBQcm9taXNlPG51bWJlcj4ge1xuXHRjb25zdCBjdXJyZW50SUQgPSBhd2FpdCBnZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cdGNvbnN0IG5ld0lEID0gY3VycmVudElEICsgMTtcblxuXHRhd2FpdCB1cGRhdGVDdXJyZW50UGFsZXR0ZUlEKG5ld0lEKTtcblxuXHRyZXR1cm4gbmV3SUQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE5leHRUYWJsZUlEKCk6IFByb21pc2U8c3RyaW5nPiB7XG5cdGNvbnN0IHNldHRpbmdzID0gYXdhaXQgZ2V0U2V0dGluZ3MoKTtcblx0Y29uc3QgbmV4dElEID0gc2V0dGluZ3MubGFzdFRhYmxlSUQgKyAxO1xuXG5cdGF3YWl0IHNhdmVEYXRhKCdzZXR0aW5ncycsICdhcHBTZXR0aW5ncycsIHtcblx0XHQuLi5zZXR0aW5ncyxcblx0XHRsYXN0VGFibGVJRDogbmV4dElEXG5cdH0pO1xuXG5cdHJldHVybiBgcGFsZXR0ZV8ke25leHRJRH1gO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTZXR0aW5ncygpOiBQcm9taXNlPGlkYi5TZXR0aW5ncz4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IGRiID0gYXdhaXQgZ2V0REIoKTtcblx0XHRjb25zdCBzZXR0aW5ncyA9IGF3YWl0IGRiLmdldCgnc2V0dGluZ3MnLCAnYXBwU2V0dGluZ3MnKTtcblxuXHRcdHJldHVybiBzZXR0aW5ncyA/PyBkZWZhdWx0cy5zZXR0aW5ncztcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBzZXR0aW5nczonLCBlcnJvcik7XG5cblx0XHRyZXR1cm4geyBjb2xvclNwYWNlOiAnaGV4JywgbGFzdFRhYmxlSUQ6IDAgfTtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRUYWJsZShpZDogc3RyaW5nKTogUHJvbWlzZTxpZGIuU3RvcmVkUGFsZXR0ZSB8IG51bGw+IHtcblx0Y29uc3QgZGIgPSBhd2FpdCBnZXREQigpO1xuXHRjb25zdCByZXN1bHQgPSBhd2FpdCBkYi5nZXQoJ3RhYmxlcycsIGlkKTtcblxuXHRpZiAoIXJlc3VsdCkgY29uc29sZS53YXJuKGBUYWJsZSB3aXRoIElEICR7aWR9IG5vdCBmb3VuZC5gKTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U3RvcmU8U3RvcmVOYW1lIGV4dGVuZHMga2V5b2YgaWRiLlBhbGV0dGVTY2hlbWE+KFxuXHRzdG9yZU5hbWU6IFN0b3JlTmFtZSxcblx0bW9kZTogJ3JlYWRvbmx5J1xuKTogUHJvbWlzZTxcblx0SURCUE9iamVjdFN0b3JlPGlkYi5QYWxldHRlU2NoZW1hLCBbU3RvcmVOYW1lXSwgU3RvcmVOYW1lLCAncmVhZG9ubHknPlxuPjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0U3RvcmU8U3RvcmVOYW1lIGV4dGVuZHMga2V5b2YgaWRiLlBhbGV0dGVTY2hlbWE+KFxuXHRzdG9yZU5hbWU6IFN0b3JlTmFtZSxcblx0bW9kZTogJ3JlYWR3cml0ZSdcbik6IFByb21pc2U8XG5cdElEQlBPYmplY3RTdG9yZTxpZGIuUGFsZXR0ZVNjaGVtYSwgW1N0b3JlTmFtZV0sIFN0b3JlTmFtZSwgJ3JlYWR3cml0ZSc+XG4+O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRTdG9yZTxTdG9yZU5hbWUgZXh0ZW5kcyBrZXlvZiBpZGIuUGFsZXR0ZVNjaGVtYT4oXG5cdHN0b3JlTmFtZTogU3RvcmVOYW1lLFxuXHRtb2RlOiAncmVhZG9ubHknIHwgJ3JlYWR3cml0ZSdcbikge1xuXHRjb25zdCBkYiA9IGF3YWl0IGdldERCKCk7XG5cdHJldHVybiBkYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsIG1vZGUpLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ011dGF0aW9uKGxvZzogaWRiLk11dGF0aW9uTG9nKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IGRiID0gYXdhaXQgZ2V0REIoKTtcblxuXHRhd2FpdCBkYi5wdXQoJ211dGF0aW9ucycsIGxvZyk7XG5cblx0Y29uc29sZS5sb2coYExvZ2dlZCBtdXRhdGlvbjogJHtKU09OLnN0cmluZ2lmeShsb2cpfWApO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZW5kZXJQYWxldHRlKHRhYmxlSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IHN0b3JlZFBhbGV0dGUgPSBhd2FpdCBnZXRUYWJsZSh0YWJsZUlkKTtcblx0XHRjb25zdCBwYWxldHRlUm93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbGV0dGUtcm93Jyk7XG5cblx0XHRpZiAoIXN0b3JlZFBhbGV0dGUpIHRocm93IG5ldyBFcnJvcihgUGFsZXR0ZSAke3RhYmxlSWR9IG5vdCBmb3VuZC5gKTtcblx0XHRpZiAoIXBhbGV0dGVSb3cpIHRocm93IG5ldyBFcnJvcignUGFsZXR0ZSByb3cgZWxlbWVudCBub3QgZm91bmQuJyk7XG5cblx0XHRwYWxldHRlUm93LmlubmVySFRNTCA9ICcnO1xuXG5cdFx0Y29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0Y29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuXHRcdHRhYmxlLmNsYXNzTGlzdC5hZGQoJ3BhbGV0dGUtdGFibGUnKTtcblxuXHRcdHN0b3JlZFBhbGV0dGUucGFsZXR0ZS5pdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblx0XHRcdGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0Y29uc3QgY29sb3JCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuXHRcdFx0Y2VsbC50ZXh0Q29udGVudCA9IGBDb2xvciAke2luZGV4ICsgMX1gO1xuXHRcdFx0Y29sb3JCb3guY2xhc3NMaXN0LmFkZCgnY29sb3ItYm94Jyk7XG5cdFx0XHRjb2xvckJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBpdGVtLmNzc1N0cmluZ3MuaGV4Q1NTU3RyaW5nO1xuXG5cdFx0XHRyb3cuYXBwZW5kQ2hpbGQoY29sb3JCb3gpO1xuXHRcdFx0cm93LmFwcGVuZENoaWxkKGNlbGwpO1xuXHRcdFx0dGFibGUuYXBwZW5kQ2hpbGQocm93KTtcblx0XHR9KTtcblxuXHRcdGZyYWdtZW50LmFwcGVuZENoaWxkKHRhYmxlKTtcblx0XHRwYWxldHRlUm93LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcblxuXHRcdGNvbnNvbGUubG9nKGBSZW5kZXJlZCBwYWxldHRlICR7dGFibGVJZH0uYCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJlbmRlciBwYWxldHRlOiAke2Vycm9yfWApO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmVEYXRhPFQ+KFxuXHRzdG9yZU5hbWU6IGtleW9mIGlkYi5QYWxldHRlU2NoZW1hLFxuXHRrZXk6IHN0cmluZyxcblx0ZGF0YTogVCxcblx0b2xkVmFsdWU/OiBUXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0dHJ5IHtcblx0XHRjb25zdCBkYiA9IGF3YWl0IGdldERCKCk7XG5cdFx0Y29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkd3JpdGUnKTtcblx0XHRjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG5cblx0XHRhd2FpdCBzdG9yZS5wdXQoeyBrZXksIC4uLmRhdGEgfSk7XG5cdFx0YXdhaXQgdHguZG9uZTtcblxuXHRcdGNvbnNvbGUubG9nKGAke2tleX0gc2F2ZWQgdG8gJHtzdG9yZU5hbWV9LmApO1xuXG5cdFx0YXdhaXQgbG9nTXV0YXRpb24oe1xuXHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRrZXksXG5cdFx0XHRhY3Rpb246ICd1cGRhdGUnLFxuXHRcdFx0bmV3VmFsdWU6IGRhdGEsXG5cdFx0XHRvbGRWYWx1ZTogb2xkVmFsdWUgPyBvbGRWYWx1ZSA6IG51bGwsXG5cdFx0XHRvcmlnaW46ICdzYXZlRGF0YSdcblx0XHR9KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gc2F2ZSBkYXRhIHRvICR7c3RvcmVOYW1lfTpgLCBlcnJvcik7XG5cblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBzYXZlUGFsZXR0ZShcblx0aWQ6IHN0cmluZyxcblx0bmV3UGFsZXR0ZTogaWRiLlN0b3JlZFBhbGV0dGVcbik6IFByb21pc2U8dm9pZD4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IHN0b3JlID0gYXdhaXQgZ2V0U3RvcmUoJ3RhYmxlcycsICdyZWFkd3JpdGUnKTtcblx0XHRjb25zdCBwYWxldHRlVG9TYXZlOiBpZGIuU3RvcmVkUGFsZXR0ZSA9IHtcblx0XHRcdHRhYmxlSUQ6IG5ld1BhbGV0dGUudGFibGVJRCxcblx0XHRcdHBhbGV0dGU6IG5ld1BhbGV0dGUucGFsZXR0ZVxuXHRcdH07XG5cblx0XHRhd2FpdCBzdG9yZS5wdXQoeyBrZXk6IGlkLCAuLi5wYWxldHRlVG9TYXZlIH0pO1xuXG5cdFx0Y29uc29sZS5sb2coYFBhbGV0dGUgJHtpZH0gc2F2ZWQgc3VjY2Vzc2Z1bGx5LmApO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBzYXZlIHBhbGV0dGUgJHtpZH06ICR7ZXJyb3J9YCk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVBhbGV0dGVUb0RCKFxuXHR0eXBlOiBzdHJpbmcsXG5cdGl0ZW1zOiBwYWxldHRlLlBhbGV0dGVJdGVtW10sXG5cdGJhc2VDb2xvcjogY29sb3JzLkhTTCxcblx0bnVtQm94ZXM6IG51bWJlcixcblx0ZW5hYmxlQWxwaGE6IGJvb2xlYW4sXG5cdGxpbWl0QnJpZ2h0OiBib29sZWFuLFxuXHRsaW1pdERhcms6IGJvb2xlYW4sXG5cdGxpbWl0R3JheTogYm9vbGVhblxuKTogUHJvbWlzZTxwYWxldHRlLlBhbGV0dGU+IHtcblx0Y29uc3QgcGFsZXR0ZUlEID0gYXdhaXQgZ2V0TmV4dFBhbGV0dGVJRCgpO1xuXG5cdGNvbnN0IG5ld1BhbGV0dGUgPSBwYWxldHRlVXRpbHMuY3JlYXRlUGFsZXR0ZU9iamVjdChcblx0XHR0eXBlLFxuXHRcdGl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRwYWxldHRlSUQsXG5cdFx0bnVtQm94ZXMsXG5cdFx0ZW5hYmxlQWxwaGEsXG5cdFx0bGltaXRCcmlnaHQsXG5cdFx0bGltaXREYXJrLFxuXHRcdGxpbWl0R3JheVxuXHQpO1xuXG5cdGF3YWl0IHNhdmVQYWxldHRlKG5ld1BhbGV0dGUuaWQsIHtcblx0XHR0YWJsZUlEOiBwYXJzZUludChuZXdQYWxldHRlLmlkLnNwbGl0KCdfJylbMV0pLFxuXHRcdHBhbGV0dGU6IG5ld1BhbGV0dGVcblx0fSk7XG5cblx0Y29uc29sZS5sb2coYFNhdmVkICR7dHlwZX0gcGFsZXR0ZTogJHtKU09OLnN0cmluZ2lmeShuZXdQYWxldHRlKX1gKTtcblxuXHRyZXR1cm4gbmV3UGFsZXR0ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVNldHRpbmdzKG5ld1NldHRpbmdzOiBpZGIuU2V0dGluZ3MpOiBQcm9taXNlPHZvaWQ+IHtcblx0dHJ5IHtcblx0XHRhd2FpdCBzYXZlRGF0YSgnc2V0dGluZ3MnLCAnYXBwU2V0dGluZ3MnLCBuZXdTZXR0aW5ncyk7XG5cblx0XHRjb25zb2xlLmxvZygnU2V0dGluZ3MgdXBkYXRlZCcpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBzYXZlIHNldHRpbmdzOiAke2Vycm9yfWApO1xuXG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gdHJhY2tlZFRyYW5zYWN0aW9uPFN0b3JlTmFtZSBleHRlbmRzIGtleW9mIGlkYi5QYWxldHRlU2NoZW1hPihcblx0c3RvcmVOYW1lOiBTdG9yZU5hbWUsXG5cdG1vZGU6ICdyZWFkb25seScgfCAncmVhZHdyaXRlJyxcblx0Y2FsbGJhY2s6IChcblx0XHRzdG9yZTogSURCUE9iamVjdFN0b3JlPFxuXHRcdFx0aWRiLlBhbGV0dGVTY2hlbWEsXG5cdFx0XHRbU3RvcmVOYW1lXSxcblx0XHRcdFN0b3JlTmFtZSxcblx0XHRcdCdyZWFkb25seScgfCAncmVhZHdyaXRlJ1xuXHRcdD5cblx0KSA9PiBQcm9taXNlPHZvaWQ+XG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgZGIgPSBhd2FpdCBnZXREQigpO1xuXHRjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgbW9kZSk7XG5cdGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcblxuXHR0cnkge1xuXHRcdGF3YWl0IGNhbGxiYWNrKHN0b3JlKTtcblx0XHRhd2FpdCB0eC5kb25lO1xuXG5cdFx0Y29uc29sZS5sb2coYFRyYW5zYWN0aW9uIG9uICR7c3RvcmVOYW1lfSBjb21wbGV0ZWQuYCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgVHJhbnNhY3Rpb24gb24gJHtzdG9yZU5hbWV9IGZhaWxlZDogJHtlcnJvcn1gKTtcblxuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbnRQYWxldHRlSUQobmV3SUQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuXHRjb25zdCBkYiA9IGF3YWl0IGdldERCKCk7XG5cdGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3NldHRpbmdzJywgJ3JlYWR3cml0ZScpO1xuXHRjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdzZXR0aW5ncycpO1xuXG5cdGF3YWl0IHN0b3JlLnB1dCh7IGtleTogJ2FwcFNldHRpbmdzJywgbGFzdFBhbGV0dGVJRDogbmV3SUQgfSk7XG5cdGF3YWl0IHR4LmRvbmU7XG5cblx0Y29uc29sZS5sb2coYEN1cnJlbnQgcGFsZXR0ZSBJRCB1cGRhdGVkIHRvICR7bmV3SUR9YCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUVudHJ5SW5QYWxldHRlKFxuXHR0YWJsZUlEOiBzdHJpbmcsXG5cdGVudHJ5SW5kZXg6IG51bWJlcixcblx0bmV3RW50cnk6IHBhbGV0dGUuUGFsZXR0ZUl0ZW1cbik6IFByb21pc2U8dm9pZD4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IHN0b3JlZFBhbGV0dGUgPSBhd2FpdCBnZXRUYWJsZSh0YWJsZUlEKTtcblxuXHRcdGlmICghc3RvcmVkUGFsZXR0ZSkgdGhyb3cgbmV3IEVycm9yKGBQYWxldHRlICR7dGFibGVJRH0gbm90IGZvdW5kLmApO1xuXG5cdFx0Y29uc3QgeyBpdGVtcyB9ID0gc3RvcmVkUGFsZXR0ZS5wYWxldHRlO1xuXG5cdFx0aWYgKGVudHJ5SW5kZXggPj0gaXRlbXMubGVuZ3RoKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgRW50cnkgJHtlbnRyeUluZGV4fSBub3QgZm91bmQgaW4gcGFsZXR0ZSAke3RhYmxlSUR9LmBcblx0XHRcdCk7XG5cblx0XHRjb25zdCBvbGRFbnRyeSA9IGl0ZW1zW2VudHJ5SW5kZXhdO1xuXHRcdGl0ZW1zW2VudHJ5SW5kZXhdID0gbmV3RW50cnk7XG5cblx0XHRhd2FpdCBzYXZlRGF0YSgndGFibGVzJywgdGFibGVJRCwgc3RvcmVkUGFsZXR0ZSk7XG5cdFx0YXdhaXQgbG9nTXV0YXRpb24oe1xuXHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRrZXk6IGAke3RhYmxlSUR9LSR7ZW50cnlJbmRleH1dYCxcblx0XHRcdGFjdGlvbjogJ3VwZGF0ZScsXG5cdFx0XHRuZXdWYWx1ZTogbmV3RW50cnksXG5cdFx0XHRvbGRWYWx1ZTogb2xkRW50cnksXG5cdFx0XHRvcmlnaW46ICd1cGRhdGVFbnRyeUluUGFsZXR0ZSdcblx0XHR9KTtcblxuXHRcdGNvbnNvbGUubG9nKGBFbnRyeSAke2VudHJ5SW5kZXh9IGluIHBhbGV0dGUgJHt0YWJsZUlEfSB1cGRhdGVkLmApO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byB1cGRhdGUgZW50cnkgaW4gcGFsZXR0ZTogJHtlcnJvcn1gKTtcblxuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBkYXRhYmFzZTogZm5PYmplY3RzLkRhdGFiYXNlID0ge1xuXHRjcmVhdGVNdXRhdGlvbkxvZ2dlcixcblx0ZGVsZXRlVGFibGU6IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG5cdFx0Y29uc3QgZGIgPSBhd2FpdCBnZXREQigpO1xuXHRcdGF3YWl0IGRiLmRlbGV0ZSgndGFibGVzJywgaWQpO1xuXHRcdGNvbnNvbGUubG9nKGBUYWJsZSAke2lkfSBkZWxldGVkLmApO1xuXHR9LFxuXHRnZXRDdXJyZW50UGFsZXR0ZUlELFxuXHRnZXRDdXN0b21Db2xvcixcblx0Z2V0REIsXG5cdGdldExvZ2dlZE9iamVjdCxcblx0Z2V0TmV4dFBhbGV0dGVJRCxcblx0Z2V0TmV4dFRhYmxlSUQsXG5cdGdldFNldHRpbmdzLFxuXHRnZXRTdG9yZSxcblx0Z2V0VGFibGUsXG5cdGxpc3RUYWJsZXM6IGFzeW5jICgpID0+IHtcblx0XHRjb25zdCBkYiA9IGF3YWl0IGdldERCKCk7XG5cdFx0Y29uc3Qga2V5cyA9IGF3YWl0IGRiLmdldEFsbEtleXMoJ3RhYmxlcycpO1xuXHRcdHJldHVybiBrZXlzLm1hcChTdHJpbmcpO1xuXHR9LFxuXHRsb2dNdXRhdGlvbixcblx0cmVuZGVyUGFsZXR0ZSxcblx0c2F2ZURhdGEsXG5cdHNhdmVQYWxldHRlLFxuXHRzYXZlUGFsZXR0ZVRvREIsXG5cdHNhdmVTZXR0aW5ncyxcblx0dHJhY2tlZFRyYW5zYWN0aW9uLFxuXHR1cGRhdGVDdXJyZW50UGFsZXR0ZUlELFxuXHR1cGRhdGVFbnRyeUluUGFsZXR0ZVxufTtcbiJdfQ==