// File: src/palette/io/deserialize.ts
function toCSS(palette, colorSpace = 'hsl') {
    return palette.items
        .map(item => {
        const colorValue = item.cssStrings[(colorSpace + 'CSSString')] || item.cssStrings.hslCSSString;
        return `
    		/* Palette Item: ${item.id} */
    		.color-${item.id} {
    			cmyk-color: ${item.cssStrings.cmykCSSString};
    			hex-color: ${item.cssStrings.hexCSSString};
    			hsl-color: ${item.cssStrings.hslCSSString};
    			hsv-color: ${item.cssStrings.hsvCSSString};
    			lab-color: ${item.cssStrings.labCSSString};
    			rgb-color: ${item.cssStrings.rgbCSSString};
    			xyz-color: ${item.cssStrings.xyzCSSString};
    			background-color: ${colorValue};
    		}`;
    })
        .join('\n');
}
function toJSON(palette) {
    return JSON.stringify(palette, null, 2);
}
function toXML(palette) {
    const xmlItems = palette.items
        .map(item => `
			<PaletteItem id="${item.id}">
				<Colors>
					<CMYK>${item.colors.cmyk}</CMYK>
					<Hex>${item.colors.hex}</Hex>
					<HSL>${item.colors.hsl}</HSL>
					<HSV>${item.colors.hsv}</HSV>
					<LAB>${item.colors.lab}</LAB>
					<RGB>${item.colors.rgb}</RGB>
				</Colors>
			</PaletteItem>`)
        .join('');
    return `
		<Palette id="${palette.id}">
			<Flags>
				<EnableAlpha>${palette.flags.enableAlpha}</EnableAlpha>
				<LimitDarkness>${palette.flags.limitDarkness}</LimitDarkness>
				<LimitGrayness>${palette.flags.limitGrayness}</LimitGrayness>
				<LimitLightness>${palette.flags.limitLightness}</LimitLightness>
			</Flags>
			<Metadata>
				<CustomColor>
					<HSLColor>${palette.metadata.customColor?.hslColor || null}</HSLColor>
					<ConvertedColors>${palette.metadata.customColor?.convertedColors || null}</ConvertedColors>
				</CustomColor>
				<NumBoxes>${palette.metadata.numBoxes}</NumBoxes>
				<PaletteType>${palette.metadata.paletteType}</PaletteType>
			</Metadata>
			${xmlItems}
		</Palette>`;
}
export const serialize = {
    toCSS,
    toJSON,
    toXML
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvaW8vc2VyaWFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQVF0QyxTQUFTLEtBQUssQ0FBQyxPQUFnQixFQUFFLGFBQXlCLEtBQUs7SUFDOUQsT0FBTyxPQUFPLENBQUMsS0FBSztTQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDWCxNQUFNLFVBQVUsR0FDZixJQUFJLENBQUMsVUFBVSxDQUNkLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBaUMsQ0FDMUQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQztRQUVuQyxPQUFPO3lCQUNlLElBQUksQ0FBQyxFQUFFO2VBQ2pCLElBQUksQ0FBQyxFQUFFO3FCQUNELElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYTtvQkFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZO29CQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVk7b0JBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWTtvQkFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZO29CQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVk7b0JBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWTsyQkFDckIsVUFBVTtRQUM3QixDQUFDO0lBQ1AsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2QsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLE9BQWdCO0lBQy9CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxTQUFTLEtBQUssQ0FBQyxPQUFnQjtJQUM5QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSztTQUM1QixHQUFHLENBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQztzQkFDVyxJQUFJLENBQUMsRUFBRTs7YUFFaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRzs7a0JBRVQsQ0FDZjtTQUNBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNYLE9BQU87aUJBQ1MsT0FBTyxDQUFDLEVBQUU7O21CQUVSLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVztxQkFDdkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhO3FCQUMzQixPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWE7c0JBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYzs7OztpQkFJakMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxJQUFJLElBQUk7d0JBQ3ZDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLGVBQWUsSUFBSSxJQUFJOztnQkFFN0QsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRO21CQUN0QixPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVc7O0tBRTFDLFFBQVE7YUFDQSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBZ0M7SUFDckQsS0FBSztJQUNMLE1BQU07SUFDTixLQUFLO0NBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL2lvL2Rlc2VyaWFsaXplLnRzXG5cbmltcG9ydCB7XG5cdENvbG9yU3BhY2UsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVTZXJpYWxpemVGbkludGVyZmFjZVxufSBmcm9tICcuLi8uLi9pbmRleC9pbmRleC5qcyc7XG5cbmZ1bmN0aW9uIHRvQ1NTKHBhbGV0dGU6IFBhbGV0dGUsIGNvbG9yU3BhY2U6IENvbG9yU3BhY2UgPSAnaHNsJyk6IHN0cmluZyB7XG5cdHJldHVybiBwYWxldHRlLml0ZW1zXG5cdFx0Lm1hcChpdGVtID0+IHtcblx0XHRcdGNvbnN0IGNvbG9yVmFsdWUgPVxuXHRcdFx0XHRpdGVtLmNzc1N0cmluZ3NbXG5cdFx0XHRcdFx0KGNvbG9yU3BhY2UgKyAnQ1NTU3RyaW5nJykgYXMga2V5b2YgdHlwZW9mIGl0ZW0uY3NzU3RyaW5nc1xuXHRcdFx0XHRdIHx8IGl0ZW0uY3NzU3RyaW5ncy5oc2xDU1NTdHJpbmc7XG5cblx0XHRcdHJldHVybiBgXG4gICAgXHRcdC8qIFBhbGV0dGUgSXRlbTogJHtpdGVtLmlkfSAqL1xuICAgIFx0XHQuY29sb3ItJHtpdGVtLmlkfSB7XG4gICAgXHRcdFx0Y215ay1jb2xvcjogJHtpdGVtLmNzc1N0cmluZ3MuY215a0NTU1N0cmluZ307XG4gICAgXHRcdFx0aGV4LWNvbG9yOiAke2l0ZW0uY3NzU3RyaW5ncy5oZXhDU1NTdHJpbmd9O1xuICAgIFx0XHRcdGhzbC1jb2xvcjogJHtpdGVtLmNzc1N0cmluZ3MuaHNsQ1NTU3RyaW5nfTtcbiAgICBcdFx0XHRoc3YtY29sb3I6ICR7aXRlbS5jc3NTdHJpbmdzLmhzdkNTU1N0cmluZ307XG4gICAgXHRcdFx0bGFiLWNvbG9yOiAke2l0ZW0uY3NzU3RyaW5ncy5sYWJDU1NTdHJpbmd9O1xuICAgIFx0XHRcdHJnYi1jb2xvcjogJHtpdGVtLmNzc1N0cmluZ3MucmdiQ1NTU3RyaW5nfTtcbiAgICBcdFx0XHR4eXotY29sb3I6ICR7aXRlbS5jc3NTdHJpbmdzLnh5ekNTU1N0cmluZ307XG4gICAgXHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHtjb2xvclZhbHVlfTtcbiAgICBcdFx0fWA7XG5cdFx0fSlcblx0XHQuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIHRvSlNPTihwYWxldHRlOiBQYWxldHRlKTogc3RyaW5nIHtcblx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhbGV0dGUsIG51bGwsIDIpO1xufVxuXG5mdW5jdGlvbiB0b1hNTChwYWxldHRlOiBQYWxldHRlKTogc3RyaW5nIHtcblx0Y29uc3QgeG1sSXRlbXMgPSBwYWxldHRlLml0ZW1zXG5cdFx0Lm1hcChcblx0XHRcdGl0ZW0gPT4gYFxuXHRcdFx0PFBhbGV0dGVJdGVtIGlkPVwiJHtpdGVtLmlkfVwiPlxuXHRcdFx0XHQ8Q29sb3JzPlxuXHRcdFx0XHRcdDxDTVlLPiR7aXRlbS5jb2xvcnMuY215a308L0NNWUs+XG5cdFx0XHRcdFx0PEhleD4ke2l0ZW0uY29sb3JzLmhleH08L0hleD5cblx0XHRcdFx0XHQ8SFNMPiR7aXRlbS5jb2xvcnMuaHNsfTwvSFNMPlxuXHRcdFx0XHRcdDxIU1Y+JHtpdGVtLmNvbG9ycy5oc3Z9PC9IU1Y+XG5cdFx0XHRcdFx0PExBQj4ke2l0ZW0uY29sb3JzLmxhYn08L0xBQj5cblx0XHRcdFx0XHQ8UkdCPiR7aXRlbS5jb2xvcnMucmdifTwvUkdCPlxuXHRcdFx0XHQ8L0NvbG9ycz5cblx0XHRcdDwvUGFsZXR0ZUl0ZW0+YFxuXHRcdClcblx0XHQuam9pbignJyk7XG5cdHJldHVybiBgXG5cdFx0PFBhbGV0dGUgaWQ9XCIke3BhbGV0dGUuaWR9XCI+XG5cdFx0XHQ8RmxhZ3M+XG5cdFx0XHRcdDxFbmFibGVBbHBoYT4ke3BhbGV0dGUuZmxhZ3MuZW5hYmxlQWxwaGF9PC9FbmFibGVBbHBoYT5cblx0XHRcdFx0PExpbWl0RGFya25lc3M+JHtwYWxldHRlLmZsYWdzLmxpbWl0RGFya25lc3N9PC9MaW1pdERhcmtuZXNzPlxuXHRcdFx0XHQ8TGltaXRHcmF5bmVzcz4ke3BhbGV0dGUuZmxhZ3MubGltaXRHcmF5bmVzc308L0xpbWl0R3JheW5lc3M+XG5cdFx0XHRcdDxMaW1pdExpZ2h0bmVzcz4ke3BhbGV0dGUuZmxhZ3MubGltaXRMaWdodG5lc3N9PC9MaW1pdExpZ2h0bmVzcz5cblx0XHRcdDwvRmxhZ3M+XG5cdFx0XHQ8TWV0YWRhdGE+XG5cdFx0XHRcdDxDdXN0b21Db2xvcj5cblx0XHRcdFx0XHQ8SFNMQ29sb3I+JHtwYWxldHRlLm1ldGFkYXRhLmN1c3RvbUNvbG9yPy5oc2xDb2xvciB8fCBudWxsfTwvSFNMQ29sb3I+XG5cdFx0XHRcdFx0PENvbnZlcnRlZENvbG9ycz4ke3BhbGV0dGUubWV0YWRhdGEuY3VzdG9tQ29sb3I/LmNvbnZlcnRlZENvbG9ycyB8fCBudWxsfTwvQ29udmVydGVkQ29sb3JzPlxuXHRcdFx0XHQ8L0N1c3RvbUNvbG9yPlxuXHRcdFx0XHQ8TnVtQm94ZXM+JHtwYWxldHRlLm1ldGFkYXRhLm51bUJveGVzfTwvTnVtQm94ZXM+XG5cdFx0XHRcdDxQYWxldHRlVHlwZT4ke3BhbGV0dGUubWV0YWRhdGEucGFsZXR0ZVR5cGV9PC9QYWxldHRlVHlwZT5cblx0XHRcdDwvTWV0YWRhdGE+XG5cdFx0XHQke3htbEl0ZW1zfVxuXHRcdDwvUGFsZXR0ZT5gO1xufVxuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplOiBQYWxldHRlU2VyaWFsaXplRm5JbnRlcmZhY2UgPSB7XG5cdHRvQ1NTLFxuXHR0b0pTT04sXG5cdHRvWE1MXG59O1xuIl19