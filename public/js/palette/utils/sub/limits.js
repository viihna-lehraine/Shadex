// File: src/palette/utils/sub/limits.ts
import { core } from '../../../common.js';
import { config } from '../../../config.js';
export function isColorInBounds(hsl) {
    if (!core.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return isTooGray(hsl) || isTooDark(hsl) || isTooBright(hsl);
}
export function isTooBright(hsl) {
    if (!core.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.lightness > config.consts.thresholds.light;
}
export function isTooDark(hsl) {
    if (!core.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.lightness < config.consts.thresholds.dark;
}
export function isTooGray(hsl) {
    if (!core.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.saturation < config.consts.thresholds.gray;
}
export const limits = {
    isColorInBounds,
    isTooBright,
    isTooDark,
    isTooGray
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvdXRpbHMvc3ViL2xpbWl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBd0M7QUFHeEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVE7SUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTFELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBUTtJQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFMUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0FBQ3pFLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEdBQVE7SUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTFELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztBQUN4RSxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFRO0lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDekUsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNyQixlQUFlO0lBQ2YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0NBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL3V0aWxzL3N1Yi9saW1pdHMudHNcblxuaW1wb3J0IHsgSFNMIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29yZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb2xvckluQm91bmRzKGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29yZS52YWxpZGF0ZUNvbG9yVmFsdWVzKGhzbCkpIHtcblx0XHRjb25zb2xlLmVycm9yKGBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gaXNUb29HcmF5KGhzbCkgfHwgaXNUb29EYXJrKGhzbCkgfHwgaXNUb29CcmlnaHQoaHNsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVG9vQnJpZ2h0KGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29yZS52YWxpZGF0ZUNvbG9yVmFsdWVzKGhzbCkpIHtcblx0XHRjb25zb2xlLmVycm9yKGBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gY29yZS5jbG9uZShoc2wpLnZhbHVlLmxpZ2h0bmVzcyA+IGNvbmZpZy5jb25zdHMudGhyZXNob2xkcy5saWdodDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVG9vRGFyayhoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvcmUudmFsaWRhdGVDb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWApO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuY2xvbmUoaHNsKS52YWx1ZS5saWdodG5lc3MgPCBjb25maWcuY29uc3RzLnRocmVzaG9sZHMuZGFyaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVG9vR3JheShoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvcmUudmFsaWRhdGVDb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWApO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuY2xvbmUoaHNsKS52YWx1ZS5zYXR1cmF0aW9uIDwgY29uZmlnLmNvbnN0cy50aHJlc2hvbGRzLmdyYXk7XG59XG5cbmV4cG9ydCBjb25zdCBsaW1pdHMgPSB7XG5cdGlzQ29sb3JJbkJvdW5kcyxcblx0aXNUb29CcmlnaHQsXG5cdGlzVG9vRGFyayxcblx0aXNUb29HcmF5XG59O1xuIl19