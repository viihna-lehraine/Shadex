// File: src/palette/utils/genHues.ts
import { core } from '../../common.js';
function analogous(color, numBoxes) {
    try {
        if (!core.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return [];
        }
        const clonedColor = core.clone(color);
        const analogousHues = [];
        const baseHue = clonedColor.value.hue;
        const maxTotalDistance = 60;
        const minTotalDistance = Math.max(20, 10 + (numBoxes - 2) * 12);
        const totalIncrement = Math.floor(Math.random() * (maxTotalDistance - minTotalDistance + 1)) + minTotalDistance;
        const increment = Math.floor(totalIncrement / (numBoxes - 1));
        for (let i = 1; i < numBoxes; i++) {
            analogousHues.push((baseHue + increment * i) % 360);
        }
        return analogousHues;
    }
    catch (error) {
        console.error(`Error generating analogous hues: ${error}`);
        return [];
    }
}
function splitComplementary(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        const modifier = Math.floor(Math.random() * 11) + 20;
        return [
            (clonedBaseHue + 180 + modifier) % 360,
            (clonedBaseHue + 180 - modifier + 360) % 360
        ];
    }
    catch (error) {
        console.error(`Error generating split complementary hues: ${error}`);
        return [];
    }
}
function tetradic(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        const randomOffset = Math.floor(Math.random() * 46) + 20;
        const distance = 90 + (Math.random() < 0.5 ? -randomOffset : randomOffset);
        return [
            clonedBaseHue,
            (clonedBaseHue + 180) % 360,
            (clonedBaseHue + distance) % 360,
            (clonedBaseHue + distance + 180) % 360
        ];
    }
    catch (error) {
        console.error(`Error generating tetradic hues: ${error}`);
        return [];
    }
}
function triadic(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        return [120, 240].map(increment => (clonedBaseHue + increment) % 360);
    }
    catch (error) {
        console.error(`Error generating triadic hues: ${error}`);
        return [];
    }
}
export const genHues = {
    analogous,
    splitComp: splitComplementary,
    tetradic,
    triadic
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuSHVlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL3V0aWxzL2dlbkh1ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDO0FBR3JDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEMsU0FBUyxTQUFTLENBQUMsS0FBVSxFQUFFLFFBQWdCO0lBQzlDLElBQUksQ0FBQztRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU5RCxPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBUSxDQUFDO1FBRTdDLE1BQU0sYUFBYSxHQUFhLEVBQUUsQ0FBQztRQUNuQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN0QyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUM1QixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNoRSxNQUFNLGNBQWMsR0FDbkIsSUFBSSxDQUFDLEtBQUssQ0FDVCxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FDekQsR0FBRyxnQkFBZ0IsQ0FBQztRQUN0QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTlELEtB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c291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvdXRpbHMvZ2VuSHVlcy50c1xuXG5pbXBvcnQgeyBIU0wgfSBmcm9tICcuLi8uLi9pbmRleCc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuZnVuY3Rpb24gYW5hbG9nb3VzKGNvbG9yOiBIU0wsIG51bUJveGVzOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFjb3JlLnZhbGlkYXRlQ29sb3JWYWx1ZXMoY29sb3IpKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBJbnZhbGlkIGNvbG9yIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoY29sb3IpfWApO1xuXG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXG5cdFx0Y29uc3QgY2xvbmVkQ29sb3IgPSBjb3JlLmNsb25lKGNvbG9yKSBhcyBIU0w7XG5cblx0XHRjb25zdCBhbmFsb2dvdXNIdWVzOiBudW1iZXJbXSA9IFtdO1xuXHRcdGNvbnN0IGJhc2VIdWUgPSBjbG9uZWRDb2xvci52YWx1ZS5odWU7XG5cdFx0Y29uc3QgbWF4VG90YWxEaXN0YW5jZSA9IDYwO1xuXHRcdGNvbnN0IG1pblRvdGFsRGlzdGFuY2UgPSBNYXRoLm1heCgyMCwgMTAgKyAobnVtQm94ZXMgLSAyKSAqIDEyKTtcblx0XHRjb25zdCB0b3RhbEluY3JlbWVudCA9XG5cdFx0XHRNYXRoLmZsb29yKFxuXHRcdFx0XHRNYXRoLnJhbmRvbSgpICogKG1heFRvdGFsRGlzdGFuY2UgLSBtaW5Ub3RhbERpc3RhbmNlICsgMSlcblx0XHRcdCkgKyBtaW5Ub3RhbERpc3RhbmNlO1xuXHRcdGNvbnN0IGluY3JlbWVudCA9IE1hdGguZmxvb3IodG90YWxJbmNyZW1lbnQgLyAobnVtQm94ZXMgLSAxKSk7XG5cblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IG51bUJveGVzOyBpKyspIHtcblx0XHRcdGFuYWxvZ291c0h1ZXMucHVzaCgoYmFzZUh1ZSArIGluY3JlbWVudCAqIGkpICUgMzYwKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYW5hbG9nb3VzSHVlcztcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIGFuYWxvZ291cyBodWVzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNwbGl0Q29tcGxlbWVudGFyeShiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQmFzZUh1ZSA9IGNvcmUuY2xvbmUoYmFzZUh1ZSk7XG5cdFx0Y29uc3QgbW9kaWZpZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMSkgKyAyMDtcblxuXHRcdHJldHVybiBbXG5cdFx0XHQoY2xvbmVkQmFzZUh1ZSArIDE4MCArIG1vZGlmaWVyKSAlIDM2MCxcblx0XHRcdChjbG9uZWRCYXNlSHVlICsgMTgwIC0gbW9kaWZpZXIgKyAzNjApICUgMzYwXG5cdFx0XTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIHNwbGl0IGNvbXBsZW1lbnRhcnkgaHVlczogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiBbXTtcblx0fVxufVxuXG5mdW5jdGlvbiB0ZXRyYWRpYyhiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQmFzZUh1ZSA9IGNvcmUuY2xvbmUoYmFzZUh1ZSk7XG5cdFx0Y29uc3QgcmFuZG9tT2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNDYpICsgMjA7XG5cdFx0Y29uc3QgZGlzdGFuY2UgPVxuXHRcdFx0OTAgKyAoTWF0aC5yYW5kb20oKSA8IDAuNSA/IC1yYW5kb21PZmZzZXQgOiByYW5kb21PZmZzZXQpO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdGNsb25lZEJhc2VIdWUsXG5cdFx0XHQoY2xvbmVkQmFzZUh1ZSArIDE4MCkgJSAzNjAsXG5cdFx0XHQoY2xvbmVkQmFzZUh1ZSArIGRpc3RhbmNlKSAlIDM2MCxcblx0XHRcdChjbG9uZWRCYXNlSHVlICsgZGlzdGFuY2UgKyAxODApICUgMzYwXG5cdFx0XTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIHRldHJhZGljIGh1ZXM6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gW107XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJpYWRpYyhiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQmFzZUh1ZSA9IGNvcmUuY2xvbmUoYmFzZUh1ZSk7XG5cblx0XHRyZXR1cm4gWzEyMCwgMjQwXS5tYXAoaW5jcmVtZW50ID0+IChjbG9uZWRCYXNlSHVlICsgaW5jcmVtZW50KSAlIDM2MCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyB0cmlhZGljIGh1ZXM6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gW107XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGdlbkh1ZXMgPSB7XG5cdGFuYWxvZ291cyxcblx0c3BsaXRDb21wOiBzcGxpdENvbXBsZW1lbnRhcnksXG5cdHRldHJhZGljLFxuXHR0cmlhZGljXG59O1xuIl19