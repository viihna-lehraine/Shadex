// File: src/palette/utils/create.ts
import { sub as paletteSubUtils } from './sub.js';
import { convert } from './convert.js';
import { idb } from '../../idb.js';
import { core, utils } from '../../common.js';
const limits = paletteSubUtils.limits;
const update = paletteSubUtils.update;
function createBaseColor(customColor, enableAlpha) {
    const color = core.clone(customColor ?? utils.random.hsl(enableAlpha));
    return color;
}
function createPaletteItem(color, enableAlpha) {
    const clonedColor = core.clone(color);
    clonedColor.value.alpha = enableAlpha ? Math.random() : 1;
    return {
        id: `${color.format}_${idb.getNextPaletteID()}`,
        colors: {
            cmyk: convert.hslToCMYK(clonedColor).value,
            hex: convert.hslToHex(clonedColor).value,
            hsl: clonedColor.value,
            hsv: convert.hslToHSV(clonedColor).value,
            lab: convert.hslToLAB(clonedColor).value,
            rgb: convert.hslToRGB(clonedColor).value,
            xyz: convert.hslToXYZ(clonedColor).value
        },
        colorStrings: {
            cmykString: utils.color.colorToColorString(convert.hslToCMYK(clonedColor)).value,
            hexString: utils.color.colorToColorString(convert.hslToHex(clonedColor)).value,
            hslString: utils.color.colorToColorString(clonedColor).value,
            hsvString: utils.color.colorToColorString(convert.hslToHSV(clonedColor)).value,
            labString: utils.color.colorToColorString(convert.hslToLAB(clonedColor)).value,
            rgbString: utils.color.colorToColorString(convert.hslToRGB(clonedColor)).value,
            xyzString: utils.color.colorToColorString(convert.hslToXYZ(clonedColor)).value
        },
        cssStrings: {
            cmykCSSString: core.getCSSColorString(convert.hslToCMYK(clonedColor)),
            hexCSSString: convert.hslToHex(clonedColor).value.hex,
            hslCSSString: core.getCSSColorString(clonedColor),
            hsvCSSString: core.getCSSColorString(convert.hslToHSV(clonedColor)),
            labCSSString: core.getCSSColorString(convert.hslToLAB(clonedColor)),
            rgbCSSString: core.getCSSColorString(convert.hslToRGB(clonedColor)),
            xyzCSSString: core.getCSSColorString(convert.hslToXYZ(clonedColor))
        }
    };
}
function createPaletteItemArray(baseColor, hues, enableAlpha, limitDark, limitGray, limitBright) {
    const paletteItems = [
        createPaletteItem(baseColor, enableAlpha)
    ];
    hues.forEach((hue, i) => {
        let newColor = null;
        do {
            const sl = utils.random.sl(enableAlpha);
            newColor = utils.conversion.genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
        } while (newColor &&
            ((limitGray && limits.isTooGray(newColor)) ||
                (limitDark && limits.isTooDark(newColor)) ||
                (limitBright && limits.isTooBright(newColor))));
        if (newColor) {
            paletteItems.push(createPaletteItem(newColor, enableAlpha));
            update.colorBox(newColor, i + 1);
        }
    });
    return paletteItems;
}
export const create = {
    baseColor: createBaseColor,
    paletteItem: createPaletteItem,
    paletteItemArray: createPaletteItemArray
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvdXRpbHMvY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9DQUFvQztBQW9CcEMsT0FBTyxFQUFFLEdBQUcsSUFBSSxlQUFlLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTNDLE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7QUFDdEMsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztBQUV0QyxTQUFTLGVBQWUsQ0FBQyxXQUF1QixFQUFFLFdBQW9CO0lBQ3JFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFdkUsT0FBTyxLQUFZLENBQUM7QUFDckIsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsS0FBVSxFQUFFLFdBQW9CO0lBQzFELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFRLENBQUM7SUFFN0MsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRCxPQUFPO1FBQ04sRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtRQUMvQyxNQUFNLEVBQUU7WUFDUCxJQUFJLEVBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxX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LENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBTyxDQUFDO1lBQzlDLFFBQVEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDO2dCQUM3QyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUMzQixNQUFNLEVBQUUsS0FBSzthQUNiLENBQUMsQ0FBQyxHQUFVLENBQUM7UUFDZixDQUFDLFFBQ0EsUUFBUTtZQUNSLENBQUMsQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDekMsQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDekMsQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQzlDO1FBRUYsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNkLFlBQVksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFFNUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sWUFBWSxDQUFDO0FBQ3JCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDckIsU0FBUyxFQUFFLGVBQWU7SUFDMUIsV0FBVyxFQUFFLGlCQUFpQjtJQUM5QixnQkFBZ0IsRUFBRSxzQkFBc0I7Q0FDeEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL3V0aWxzL2NyZWF0ZS50c1xuXG5pbXBvcnQge1xuXHRDTVlLLFxuXHRDTVlLU3RyaW5nLFxuXHRIZXgsXG5cdEhleFN0cmluZyxcblx0SFNMLFxuXHRIU0xTdHJpbmcsXG5cdEhTVixcblx0SFNWU3RyaW5nLFxuXHRMQUIsXG5cdExBQlN0cmluZyxcblx0UGFsZXR0ZUl0ZW0sXG5cdFJHQixcblx0UkdCU3RyaW5nLFxuXHRTTCxcblx0WFlaLFxuXHRYWVpTdHJpbmdcbn0gZnJvbSAnLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgc3ViIGFzIHBhbGV0dGVTdWJVdGlscyB9IGZyb20gJy4vc3ViJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuL2NvbnZlcnQnO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vaWRiJztcbmltcG9ydCB7IGNvcmUsIHV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY29uc3QgbGltaXRzID0gcGFsZXR0ZVN1YlV0aWxzLmxpbWl0cztcbmNvbnN0IHVwZGF0ZSA9IHBhbGV0dGVTdWJVdGlscy51cGRhdGU7XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDb2xvcihjdXN0b21Db2xvcjogSFNMIHwgbnVsbCwgZW5hYmxlQWxwaGE6IGJvb2xlYW4pOiBIU0wge1xuXHRjb25zdCBjb2xvciA9IGNvcmUuY2xvbmUoY3VzdG9tQ29sb3IgPz8gdXRpbHMucmFuZG9tLmhzbChlbmFibGVBbHBoYSkpO1xuXG5cdHJldHVybiBjb2xvciBhcyBIU0w7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGVJdGVtKGNvbG9yOiBIU0wsIGVuYWJsZUFscGhhOiBib29sZWFuKTogUGFsZXR0ZUl0ZW0ge1xuXHRjb25zdCBjbG9uZWRDb2xvciA9IGNvcmUuY2xvbmUoY29sb3IpIGFzIEhTTDtcblxuXHRjbG9uZWRDb2xvci52YWx1ZS5hbHBoYSA9IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDE7XG5cblx0cmV0dXJuIHtcblx0XHRpZDogYCR7Y29sb3IuZm9ybWF0fV8ke2lkYi5nZXROZXh0UGFsZXR0ZUlEKCl9YCxcblx0XHRjb2xvcnM6IHtcblx0XHRcdGNteWs6IChjb252ZXJ0LmhzbFRvQ01ZSyhjbG9uZWRDb2xvcikgYXMgQ01ZSykudmFsdWUsXG5cdFx0XHRoZXg6IChjb252ZXJ0LmhzbFRvSGV4KGNsb25lZENvbG9yKSBhcyBIZXgpLnZhbHVlLFxuXHRcdFx0aHNsOiBjbG9uZWRDb2xvci52YWx1ZSxcblx0XHRcdGhzdjogKGNvbnZlcnQuaHNsVG9IU1YoY2xvbmVkQ29sb3IpIGFzIEhTVikudmFsdWUsXG5cdFx0XHRsYWI6IChjb252ZXJ0LmhzbFRvTEFCKGNsb25lZENvbG9yKSBhcyBMQUIpLnZhbHVlLFxuXHRcdFx0cmdiOiAoY29udmVydC5oc2xUb1JHQihjbG9uZWRDb2xvcikgYXMgUkdCKS52YWx1ZSxcblx0XHRcdHh5ejogKGNvbnZlcnQuaHNsVG9YWVooY2xvbmVkQ29sb3IpIGFzIFhZWikudmFsdWVcblx0XHR9LFxuXHRcdGNvbG9yU3RyaW5nczoge1xuXHRcdFx0Y215a1N0cmluZzogKFxuXHRcdFx0XHR1dGlscy5jb2xvci5jb2xvclRvQ29sb3JTdHJpbmcoXG5cdFx0XHRcdFx0Y29udmVydC5oc2xUb0NNWUsoY2xvbmVkQ29sb3IpXG5cdFx0XHRcdCkgYXMgQ01ZS1N0cmluZ1xuXHRcdFx0KS52YWx1ZSxcblx0XHRcdGhleFN0cmluZzogKFxuXHRcdFx0XHR1dGlscy5jb2xvci5jb2xvclRvQ29sb3JTdHJpbmcoXG5cdFx0XHRcdFx0Y29udmVydC5oc2xUb0hleChjbG9uZWRDb2xvcilcblx0XHRcdFx0KSBhcyBIZXhTdHJpbmdcblx0XHRcdCkudmFsdWUsXG5cdFx0XHRoc2xTdHJpbmc6IChcblx0XHRcdFx0dXRpbHMuY29sb3IuY29sb3JUb0NvbG9yU3RyaW5nKGNsb25lZENvbG9yKSBhcyBIU0xTdHJpbmdcblx0XHRcdCkudmFsdWUsXG5cdFx0XHRoc3ZTdHJpbmc6IChcblx0XHRcdFx0dXRpbHMuY29sb3IuY29sb3JUb0NvbG9yU3RyaW5nKFxuXHRcdFx0XHRcdGNvbnZlcnQuaHNsVG9IU1YoY2xvbmVkQ29sb3IpXG5cdFx0XHRcdCkgYXMgSFNWU3RyaW5nXG5cdFx0XHQpLnZhbHVlLFxuXHRcdFx0bGFiU3RyaW5nOiAoXG5cdFx0XHRcdHV0aWxzLmNvbG9yLmNvbG9yVG9Db2xvclN0cmluZyhcblx0XHRcdFx0XHRjb252ZXJ0LmhzbFRvTEFCKGNsb25lZENvbG9yKVxuXHRcdFx0XHQpIGFzIExBQlN0cmluZ1xuXHRcdFx0KS52YWx1ZSxcblx0XHRcdHJnYlN0cmluZzogKFxuXHRcdFx0XHR1dGlscy5jb2xvci5jb2xvclRvQ29sb3JTdHJpbmcoXG5cdFx0XHRcdFx0Y29udmVydC5oc2xUb1JHQihjbG9uZWRDb2xvcilcblx0XHRcdFx0KSBhcyBSR0JTdHJpbmdcblx0XHRcdCkudmFsdWUsXG5cdFx0XHR4eXpTdHJpbmc6IChcblx0XHRcdFx0dXRpbHMuY29sb3IuY29sb3JUb0NvbG9yU3RyaW5nKFxuXHRcdFx0XHRcdGNvbnZlcnQuaHNsVG9YWVooY2xvbmVkQ29sb3IpXG5cdFx0XHRcdCkgYXMgWFlaU3RyaW5nXG5cdFx0XHQpLnZhbHVlXG5cdFx0fSxcblx0XHRjc3NTdHJpbmdzOiB7XG5cdFx0XHRjbXlrQ1NTU3RyaW5nOiBjb3JlLmdldENTU0NvbG9yU3RyaW5nKFxuXHRcdFx0XHRjb252ZXJ0LmhzbFRvQ01ZSyhjbG9uZWRDb2xvcilcblx0XHRcdCksXG5cdFx0XHRoZXhDU1NTdHJpbmc6IGNvbnZlcnQuaHNsVG9IZXgoY2xvbmVkQ29sb3IpLnZhbHVlLmhleCxcblx0XHRcdGhzbENTU1N0cmluZzogY29yZS5nZXRDU1NDb2xvclN0cmluZyhjbG9uZWRDb2xvciksXG5cdFx0XHRoc3ZDU1NTdHJpbmc6IGNvcmUuZ2V0Q1NTQ29sb3JTdHJpbmcoY29udmVydC5oc2xUb0hTVihjbG9uZWRDb2xvcikpLFxuXHRcdFx0bGFiQ1NTU3RyaW5nOiBjb3JlLmdldENTU0NvbG9yU3RyaW5nKGNvbnZlcnQuaHNsVG9MQUIoY2xvbmVkQ29sb3IpKSxcblx0XHRcdHJnYkNTU1N0cmluZzogY29yZS5nZXRDU1NDb2xvclN0cmluZyhjb252ZXJ0LmhzbFRvUkdCKGNsb25lZENvbG9yKSksXG5cdFx0XHR4eXpDU1NTdHJpbmc6IGNvcmUuZ2V0Q1NTQ29sb3JTdHJpbmcoY29udmVydC5oc2xUb1hZWihjbG9uZWRDb2xvcikpXG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQYWxldHRlSXRlbUFycmF5KFxuXHRiYXNlQ29sb3I6IEhTTCxcblx0aHVlczogbnVtYmVyW10sXG5cdGVuYWJsZUFscGhhOiBib29sZWFuLFxuXHRsaW1pdERhcms6IGJvb2xlYW4sXG5cdGxpbWl0R3JheTogYm9vbGVhbixcblx0bGltaXRCcmlnaHQ6IGJvb2xlYW5cbik6IFBhbGV0dGVJdGVtW10ge1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXG5cdFx0Y3JlYXRlUGFsZXR0ZUl0ZW0oYmFzZUNvbG9yLCBlbmFibGVBbHBoYSlcblx0XTtcblxuXHRodWVzLmZvckVhY2goKGh1ZSwgaSkgPT4ge1xuXHRcdGxldCBuZXdDb2xvcjogSFNMIHwgbnVsbCA9IG51bGw7XG5cblx0XHRkbyB7XG5cdFx0XHRjb25zdCBzbCA9IHV0aWxzLnJhbmRvbS5zbChlbmFibGVBbHBoYSkgYXMgU0w7XG5cdFx0XHRuZXdDb2xvciA9IHV0aWxzLmNvbnZlcnNpb24uZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0XHR2YWx1ZTogeyBodWUsIC4uLnNsLnZhbHVlIH0sXG5cdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdH0pLmhzbCBhcyBIU0w7XG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRuZXdDb2xvciAmJlxuXHRcdFx0KChsaW1pdEdyYXkgJiYgbGltaXRzLmlzVG9vR3JheShuZXdDb2xvcikpIHx8XG5cdFx0XHRcdChsaW1pdERhcmsgJiYgbGltaXRzLmlzVG9vRGFyayhuZXdDb2xvcikpIHx8XG5cdFx0XHRcdChsaW1pdEJyaWdodCAmJiBsaW1pdHMuaXNUb29CcmlnaHQobmV3Q29sb3IpKSlcblx0XHQpO1xuXG5cdFx0aWYgKG5ld0NvbG9yKSB7XG5cdFx0XHRwYWxldHRlSXRlbXMucHVzaChjcmVhdGVQYWxldHRlSXRlbShuZXdDb2xvciwgZW5hYmxlQWxwaGEpKTtcblxuXHRcdFx0dXBkYXRlLmNvbG9yQm94KG5ld0NvbG9yLCBpICsgMSk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gcGFsZXR0ZUl0ZW1zO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlID0ge1xuXHRiYXNlQ29sb3I6IGNyZWF0ZUJhc2VDb2xvcixcblx0cGFsZXR0ZUl0ZW06IGNyZWF0ZVBhbGV0dGVJdGVtLFxuXHRwYWxldHRlSXRlbUFycmF5OiBjcmVhdGVQYWxldHRlSXRlbUFycmF5XG59O1xuIl19