// File: src/palette/utils/adjust.ts
import { config } from '../../config.js';
import { core, helpers } from '../../common.js';
const adjustments = config.consts.adjustments;
function sl(color) {
    try {
        if (!core.validateColorValues(color)) {
            console.error('Invalid color valus for adjustment.');
            helpers.dom.showToast('Invalid color values');
            return color;
        }
        const adjustedSaturation = Math.min(Math.max(color.value.saturation + adjustments.slaValue, 0), 100);
        const adjustedLightness = Math.min(100);
        return {
            value: {
                hue: color.value.hue,
                saturation: adjustedSaturation,
                lightness: adjustedLightness,
                alpha: color.value.alpha
            },
            format: 'hsl'
        };
    }
    catch (error) {
        console.error(`Error adjusting saturation and lightness: ${error}`);
        return color;
    }
}
export const adjust = { sl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRqdXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvdXRpbHMvYWRqdXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9DQUFvQztBQUdwQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTdDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0FBRTlDLFNBQVMsRUFBRSxDQUFDLEtBQVU7SUFDckIsSUFBSSxDQUFDO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztZQUVyRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBRTlDLE9BQU8sS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUVELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUMxRCxHQUFHLENBQ0gsQ0FBQztRQUNGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4QyxPQUFPO1lBQ04sS0FBSyxFQUFFO2dCQUNOLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUc7Z0JBQ3BCLFVBQVUsRUFBRSxrQkFBa0I7Z0JBQzlCLFNBQVMsRUFBRSxpQkFBaUI7Z0JBQzVCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUs7YUFDeEI7WUFDRCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXBFLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL3V0aWxzL2FkanVzdC50c1xuXG5pbXBvcnQgeyBIU0wgfSBmcm9tICcuLi8uLi9pbmRleCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgY29yZSwgaGVscGVycyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IGFkanVzdG1lbnRzID0gY29uZmlnLmNvbnN0cy5hZGp1c3RtZW50cztcblxuZnVuY3Rpb24gc2woY29sb3I6IEhTTCk6IEhTTCB7XG5cdHRyeSB7XG5cdFx0aWYgKCFjb3JlLnZhbGlkYXRlQ29sb3JWYWx1ZXMoY29sb3IpKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdJbnZhbGlkIGNvbG9yIHZhbHVzIGZvciBhZGp1c3RtZW50LicpO1xuXG5cdFx0XHRoZWxwZXJzLmRvbS5zaG93VG9hc3QoJ0ludmFsaWQgY29sb3IgdmFsdWVzJyk7XG5cblx0XHRcdHJldHVybiBjb2xvcjtcblx0XHR9XG5cblx0XHRjb25zdCBhZGp1c3RlZFNhdHVyYXRpb24gPSBNYXRoLm1pbihcblx0XHRcdE1hdGgubWF4KGNvbG9yLnZhbHVlLnNhdHVyYXRpb24gKyBhZGp1c3RtZW50cy5zbGFWYWx1ZSwgMCksXG5cdFx0XHQxMDBcblx0XHQpO1xuXHRcdGNvbnN0IGFkanVzdGVkTGlnaHRuZXNzID0gTWF0aC5taW4oMTAwKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IGNvbG9yLnZhbHVlLmh1ZSxcblx0XHRcdFx0c2F0dXJhdGlvbjogYWRqdXN0ZWRTYXR1cmF0aW9uLFxuXHRcdFx0XHRsaWdodG5lc3M6IGFkanVzdGVkTGlnaHRuZXNzLFxuXHRcdFx0XHRhbHBoYTogY29sb3IudmFsdWUuYWxwaGFcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBhZGp1c3Rpbmcgc2F0dXJhdGlvbiBhbmQgbGlnaHRuZXNzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIGNvbG9yO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBhZGp1c3QgPSB7IHNsIH07XG4iXX0=