// File: src/paelette/utils/probability.ts
import { config } from '../../config.js';
const probabilities = config.consts.probabilities;
function getWeightedRandomInterval() {
    try {
        const weights = probabilities.weights;
        const probabilityValues = probabilities.values;
        const cumulativeProbabilities = probabilityValues.reduce((acc, prob, i) => {
            acc[i] = (acc[i - 1] || 0) + prob;
            return acc;
        }, []);
        const random = Math.random();
        for (let i = 0; i < cumulativeProbabilities.length; i++) {
            if (random < cumulativeProbabilities[i]) {
                return weights[i];
            }
        }
        return weights[weights.length - 1];
    }
    catch (error) {
        console.error(`Error generating weighted random interval: ${error}`);
        return 50;
    }
}
export const probability = { getWeightedRandomInterval };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvYmFiaWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGFsZXR0ZS91dGlscy9wcm9iYWJpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFFMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV0QyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUVsRCxTQUFTLHlCQUF5QjtJQUNqQyxJQUFJLENBQUM7UUFDSixNQUFNLE9BQU8sR0FBYSxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQ2hELE1BQU0saUJBQWlCLEdBQWEsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUN6RCxNQUFNLHVCQUF1QixHQUFhLGlCQUFpQixDQUFDLE1BQU0sQ0FDakUsQ0FBQyxHQUFhLEVBQUUsSUFBWSxFQUFFLENBQVMsRUFBRSxFQUFFO1lBQzFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLE9BQU8sR0FBRyxDQUFDO1FBQ1osQ0FBQyxFQUNELEVBQUUsQ0FDRixDQUFDO1FBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN6RCxJQUFJLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN6QyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixDQUFDO1FBQ0YsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUVyRSxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWVsZXR0ZS91dGlscy9wcm9iYWJpbGl0eS50c1xuXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5jb25zdCBwcm9iYWJpbGl0aWVzID0gY29uZmlnLmNvbnN0cy5wcm9iYWJpbGl0aWVzO1xuXG5mdW5jdGlvbiBnZXRXZWlnaHRlZFJhbmRvbUludGVydmFsKCk6IG51bWJlciB7XG5cdHRyeSB7XG5cdFx0Y29uc3Qgd2VpZ2h0czogbnVtYmVyW10gPSBwcm9iYWJpbGl0aWVzLndlaWdodHM7XG5cdFx0Y29uc3QgcHJvYmFiaWxpdHlWYWx1ZXM6IG51bWJlcltdID0gcHJvYmFiaWxpdGllcy52YWx1ZXM7XG5cdFx0Y29uc3QgY3VtdWxhdGl2ZVByb2JhYmlsaXRpZXM6IG51bWJlcltdID0gcHJvYmFiaWxpdHlWYWx1ZXMucmVkdWNlKFxuXHRcdFx0KGFjYzogbnVtYmVyW10sIHByb2I6IG51bWJlciwgaTogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGFjY1tpXSA9IChhY2NbaSAtIDFdIHx8IDApICsgcHJvYjtcblx0XHRcdFx0cmV0dXJuIGFjYztcblx0XHRcdH0sXG5cdFx0XHRbXVxuXHRcdCk7XG5cdFx0Y29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY3VtdWxhdGl2ZVByb2JhYmlsaXRpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChyYW5kb20gPCBjdW11bGF0aXZlUHJvYmFiaWxpdGllc1tpXSkge1xuXHRcdFx0XHRyZXR1cm4gd2VpZ2h0c1tpXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gd2VpZ2h0c1t3ZWlnaHRzLmxlbmd0aCAtIDFdO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgd2VpZ2h0ZWQgcmFuZG9tIGludGVydmFsOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIDUwO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwcm9iYWJpbGl0eSA9IHsgZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCB9O1xuIl19