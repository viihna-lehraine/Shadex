// File: src/palette/generate.ts
import { core } from '../common/index.js';
import { data } from '../data/index.js';
import { genPalette } from './main/index.js';
import { paletteHelpers } from './common/index.js';
const defaultPalette = data.defaults.palette.data;
const limits = paletteHelpers.limits;
const mode = data.mode;
const isTooDark = limits.isTooDark;
const isTooGray = limits.isTooGray;
const isTooLight = limits.isTooLight;
function limitedHSL(baseHue, limitDark, limitGray, limitLight, alphaValue) {
    let hsl;
    do {
        hsl = {
            value: {
                hue: core.brand.asRadial(baseHue),
                saturation: core.brand.asPercentile(Math.random() * 100),
                lightness: core.brand.asPercentile(Math.random() * 100),
                alpha: alphaValue
                    ? core.brand.asAlphaRange(alphaValue)
                    : core.brand.asAlphaRange(1)
            },
            format: 'hsl'
        };
    } while ((limitGray && isTooGray(hsl)) ||
        (limitDark && isTooDark(hsl)) ||
        (limitLight && isTooLight(hsl)));
    return hsl;
}
// async function generatePalette() {}
async function selectedPalette(options) {
    try {
        const { paletteType, numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness } = options;
        const args = {
            numBoxes,
            customColor,
            enableAlpha,
            limitDark: limitDarkness,
            limitGray: limitGrayness,
            limitLight: limitLightness
        };
        switch (paletteType) {
            case 1:
                return genPalette.random(args);
            case 2:
                return genPalette.complementary(args);
            case 3:
                return genPalette.triadic(args);
            case 4:
                return genPalette.tetradic(args);
            case 5:
                return genPalette.splitComplementary(args);
            case 6:
                return genPalette.analogous(args);
            case 7:
                return genPalette.hexadic(args);
            case 8:
                return genPalette.diadic(args);
            case 9:
                return genPalette.monochromatic(args);
            default:
                if (mode.errorLogs)
                    console.error('Invalid palette type.');
                return Promise.resolve(defaultPalette);
        }
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating palette: ${error}`);
        return Promise.resolve(defaultPalette);
    }
}
export const generate = {
    limitedHSL,
    selectedPalette
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFsZXR0ZS9nZW5lcmF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7QUFTaEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztBQUNsRCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDO0FBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFFdkIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNuQyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ25DLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFFckMsU0FBUyxVQUFVLENBQ2xCLE9BQWUsRUFDZixTQUFrQixFQUNsQixTQUFrQixFQUNsQixVQUFtQixFQUNuQixVQUF5QjtJQUV6QixJQUFJLEdBQVEsQ0FBQztJQUViLEdBQUcsQ0FBQztRQUNILEdBQUcsR0FBRztZQUNMLEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2dCQUNqQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFDeEQsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7Z0JBQ3ZELEtBQUssRUFBRSxVQUFVO29CQUNoQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO29CQUNyQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQzdCO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO0lBQ0gsQ0FBQyxRQUNBLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzlCO0lBRUYsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBRUQsc0NBQXNDO0FBRXRDLEtBQUssVUFBVSxlQUFlLENBQUMsT0FBdUI7SUFDckQsSUFBSSxDQUFDO1FBQ0osTUFBTSxFQUNMLFdBQVcsRUFDWCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGNBQWMsRUFDZCxHQUFHLE9BQU8sQ0FBQztRQUVaLE1BQU0sSUFBSSxHQUFtQjtZQUM1QixRQUFRO1lBQ1IsV0FBVztZQUNYLFdBQVc7WUFDWCxTQUFTLEVBQUUsYUFBYTtZQUN4QixTQUFTLEVBQUUsYUFBYTtZQUN4QixVQUFVLEVBQUUsY0FBYztTQUMxQixDQUFDO1FBRUYsUUFBUSxXQUFXLEVBQUUsQ0FBQztZQUNyQixLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hDLEtBQUssQ0FBQztnQkFDTCxPQUFPLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsS0FBSyxDQUFDO2dCQUNMLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLEtBQUssQ0FBQztnQkFDTCxPQUFPLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QyxLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLEtBQUssQ0FBQztnQkFDTCxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsS0FBSyxDQUFDO2dCQUNMLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQyxLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDO2dCQUNDLElBQUksSUFBSSxDQUFDLFNBQVM7b0JBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUUzRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDekMsQ0FBQztJQUNGLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLDZCQUE2QixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXhFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN4QyxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBK0I7SUFDbkQsVUFBVTtJQUNWLGVBQWU7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvZ2VuZXJhdGUudHNcblxuaW1wb3J0IHtcblx0R2VuUGFsZXR0ZUFyZ3MsXG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUdlbmVyYXRlRm5JbnRlcmZhY2UsXG5cdFBhbGV0dGVPcHRpb25zXG59IGZyb20gJy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2VuUGFsZXR0ZSB9IGZyb20gJy4vbWFpbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwYWxldHRlSGVscGVycyB9IGZyb20gJy4vY29tbW9uL2luZGV4LmpzJztcblxuY29uc3QgZGVmYXVsdFBhbGV0dGUgPSBkYXRhLmRlZmF1bHRzLnBhbGV0dGUuZGF0YTtcbmNvbnN0IGxpbWl0cyA9IHBhbGV0dGVIZWxwZXJzLmxpbWl0cztcbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5cbmNvbnN0IGlzVG9vRGFyayA9IGxpbWl0cy5pc1Rvb0Rhcms7XG5jb25zdCBpc1Rvb0dyYXkgPSBsaW1pdHMuaXNUb29HcmF5O1xuY29uc3QgaXNUb29MaWdodCA9IGxpbWl0cy5pc1Rvb0xpZ2h0O1xuXG5mdW5jdGlvbiBsaW1pdGVkSFNMKFxuXHRiYXNlSHVlOiBudW1iZXIsXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuLFxuXHRhbHBoYVZhbHVlOiBudW1iZXIgfCBudWxsXG4pOiBIU0wge1xuXHRsZXQgaHNsOiBIU0w7XG5cblx0ZG8ge1xuXHRcdGhzbCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZS5icmFuZC5hc1JhZGlhbChiYXNlSHVlKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoTWF0aC5yYW5kb20oKSAqIDEwMCksXG5cdFx0XHRcdGxpZ2h0bmVzczogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoTWF0aC5yYW5kb20oKSAqIDEwMCksXG5cdFx0XHRcdGFscGhhOiBhbHBoYVZhbHVlXG5cdFx0XHRcdFx0PyBjb3JlLmJyYW5kLmFzQWxwaGFSYW5nZShhbHBoYVZhbHVlKVxuXHRcdFx0XHRcdDogY29yZS5icmFuZC5hc0FscGhhUmFuZ2UoMSlcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblx0fSB3aGlsZSAoXG5cdFx0KGxpbWl0R3JheSAmJiBpc1Rvb0dyYXkoaHNsKSkgfHxcblx0XHQobGltaXREYXJrICYmIGlzVG9vRGFyayhoc2wpKSB8fFxuXHRcdChsaW1pdExpZ2h0ICYmIGlzVG9vTGlnaHQoaHNsKSlcblx0KTtcblxuXHRyZXR1cm4gaHNsO1xufVxuXG4vLyBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVBhbGV0dGUoKSB7fVxuXG5hc3luYyBmdW5jdGlvbiBzZWxlY3RlZFBhbGV0dGUob3B0aW9uczogUGFsZXR0ZU9wdGlvbnMpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0dHJ5IHtcblx0XHRjb25zdCB7XG5cdFx0XHRwYWxldHRlVHlwZSxcblx0XHRcdG51bUJveGVzLFxuXHRcdFx0Y3VzdG9tQ29sb3IsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRsaW1pdEdyYXluZXNzLFxuXHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHR9ID0gb3B0aW9ucztcblxuXHRcdGNvbnN0IGFyZ3M6IEdlblBhbGV0dGVBcmdzID0ge1xuXHRcdFx0bnVtQm94ZXMsXG5cdFx0XHRjdXN0b21Db2xvcixcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXREYXJrOiBsaW1pdERhcmtuZXNzLFxuXHRcdFx0bGltaXRHcmF5OiBsaW1pdEdyYXluZXNzLFxuXHRcdFx0bGltaXRMaWdodDogbGltaXRMaWdodG5lc3Ncblx0XHR9O1xuXG5cdFx0c3dpdGNoIChwYWxldHRlVHlwZSkge1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZS5yYW5kb20oYXJncyk7XG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlLmNvbXBsZW1lbnRhcnkoYXJncyk7XG5cdFx0XHRjYXNlIDM6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlLnRyaWFkaWMoYXJncyk7XG5cdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlLnRldHJhZGljKGFyZ3MpO1xuXHRcdFx0Y2FzZSA1OlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZS5zcGxpdENvbXBsZW1lbnRhcnkoYXJncyk7XG5cdFx0XHRjYXNlIDY6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlLmFuYWxvZ291cyhhcmdzKTtcblx0XHRcdGNhc2UgNzpcblx0XHRcdFx0cmV0dXJuIGdlblBhbGV0dGUuaGV4YWRpYyhhcmdzKTtcblx0XHRcdGNhc2UgODpcblx0XHRcdFx0cmV0dXJuIGdlblBhbGV0dGUuZGlhZGljKGFyZ3MpO1xuXHRcdFx0Y2FzZSA5OlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZS5tb25vY2hyb21hdGljKGFyZ3MpO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYgKG1vZGUuZXJyb3JMb2dzKSBjb25zb2xlLmVycm9yKCdJbnZhbGlkIHBhbGV0dGUgdHlwZS4nKTtcblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlZmF1bHRQYWxldHRlKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUuZXJyb3JMb2dzKSBjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIHBhbGV0dGU6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlZmF1bHRQYWxldHRlKTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGU6IFBhbGV0dGVHZW5lcmF0ZUZuSW50ZXJmYWNlID0ge1xuXHRsaW1pdGVkSFNMLFxuXHRzZWxlY3RlZFBhbGV0dGVcbn0gYXMgY29uc3Q7XG4iXX0=