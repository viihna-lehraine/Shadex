// File: src/palette/generate.ts
import { config } from '../config.js';
import { genPalette } from './main.js';
import { paletteUtils } from './utils.js';
const defaultPalette = config.defaults.palette.data;
const limits = paletteUtils.sub.limits;
const isTooBright = limits.isTooBright;
const isTooDark = limits.isTooDark;
const isTooGray = limits.isTooGray;
function limitedHSL(baseHue, limitDark, limitLight, limitGray, alpha) {
    let hsl;
    do {
        hsl = {
            value: {
                hue: baseHue,
                saturation: Math.random() * 100,
                lightness: Math.random() * 100,
                alpha: alpha ?? 1
            },
            format: 'hsl'
        };
    } while ((limitGray && isTooGray(hsl)) ||
        (limitDark && isTooDark(hsl)) ||
        (limitLight && isTooBright(hsl)));
    return hsl;
}
// async function generatePalette() {}
async function generateSelectedPalette(options) {
    try {
        const { paletteType, numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness } = options;
        switch (paletteType) {
            case 1:
                return genPalette.random(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 2:
                return genPalette.complementary(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 3:
                return genPalette.triadic(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 4:
                return genPalette.tetradic(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 5:
                return genPalette.splitComplementary(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 6:
                return genPalette.analogous(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 7:
                return genPalette.hexadic(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 8:
                return genPalette.diadic(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            case 9:
                return genPalette.monochromatic(numBoxes, customColor, enableAlpha, limitDarkness, limitGrayness, limitLightness);
            default:
                console.error('Invalid palette type.');
                return Promise.resolve(defaultPalette);
        }
    }
    catch (error) {
        console.error(`Error generating palette: ${error}`);
        return Promise.resolve(defaultPalette);
    }
}
export const generate = {
    limitedHSL,
    selectedPalette: generateSelectedPalette
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFsZXR0ZS9nZW5lcmF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7QUFHaEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFdkMsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3BELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBRXZDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDdkMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNuQyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBRW5DLFNBQVMsVUFBVSxDQUNsQixPQUFlLEVBQ2YsU0FBa0IsRUFDbEIsVUFBbUIsRUFDbkIsU0FBa0IsRUFDbEIsS0FBb0I7SUFFcEIsSUFBSSxHQUFRLENBQUM7SUFFYixHQUFHLENBQUM7UUFDSCxHQUFHLEdBQUc7WUFDTCxLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLE9BQU87Z0JBQ1osVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHO2dCQUMvQixTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUc7Z0JBQzlCLEtBQUssRUFBRSxLQUFLLElBQUksQ0FBQzthQUNqQjtZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztJQUNILENBQUMsUUFDQSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUMsVUFBVSxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUMvQjtJQUVGLE9BQU8sR0FBRyxDQUFDO0FBQ1osQ0FBQztBQUVELHNDQUFzQztBQUV0QyxLQUFLLFVBQVUsdUJBQXVCLENBQ3JDLE9BQXVCO0lBRXZCLElBQUksQ0FBQztRQUNKLE1BQU0sRUFDTCxXQUFXLEVBQ1gsUUFBUSxFQUNSLFdBQVcsRUFDWCxXQUFXLEVBQ1gsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLEVBQ2QsR0FBRyxPQUFPLENBQUM7UUFFWixRQUFRLFdBQVcsRUFBRSxDQUFDO1lBQ3JCLEtBQUssQ0FBQztnQkFDTCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQ3ZCLFFBQVEsRUFDUixXQUFXLEVBQ1gsV0FBVyxFQUNYLGFBQWEsRUFDYixhQUFhLEVBQ2IsY0FBYyxDQUNkLENBQUM7WUFDSCxLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsYUFBYSxDQUM5QixRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGNBQWMsQ0FDZCxDQUFDO1lBQ0gsS0FBSyxDQUFDO2dCQUNMLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FDeEIsUUFBUSxFQUNSLFdBQVcsRUFDWCxXQUFXLEVBQ1gsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLENBQ2QsQ0FBQztZQUNILEtBQUssQ0FBQztnQkFDTCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQ3pCLFFBQVEsRUFDUixXQUFXLEVBQ1gsV0FBVyxFQUNYLGFBQWEsRUFDYixhQUFhLEVBQ2IsY0FBYyxDQUNkLENBQUM7WUFDSCxLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsa0JBQWtCLENBQ25DLFFBQVEsRUFDUixXQUFXLEVBQ1gsV0FBVyxFQUNYLGFBQWEsRUFDYixhQUFhLEVBQ2IsY0FBYyxDQUNkLENBQUM7WUFDSCxLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUMxQixRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGNBQWMsQ0FDZCxDQUFDO1lBQ0gsS0FBSyxDQUFDO2dCQUNMLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FDeEIsUUFBUSxFQUNSLFdBQVcsRUFDWCxXQUFXLEVBQ1gsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLENBQ2QsQ0FBQztZQUNILEtBQUssQ0FBQztnQkFDTCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQ3ZCLFFBQVEsRUFDUixXQUFXLEVBQ1gsV0FBVyxFQUNYLGFBQWEsRUFDYixhQUFhLEVBQ2IsY0FBYyxDQUNkLENBQUM7WUFDSCxLQUFLLENBQUM7Z0JBQ0wsT0FBTyxVQUFVLENBQUMsYUFBYSxDQUM5QixRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGNBQWMsQ0FDZCxDQUFDO1lBQ0g7Z0JBQ0MsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUV2QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDekMsQ0FBQztJQUNGLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFcEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHO0lBQ3ZCLFVBQVU7SUFDVixlQUFlLEVBQUUsdUJBQXVCO0NBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9nZW5lcmF0ZS50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVPcHRpb25zIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IGdlblBhbGV0dGUgfSBmcm9tICcuL21haW4nO1xuaW1wb3J0IHsgcGFsZXR0ZVV0aWxzIH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGRlZmF1bHRQYWxldHRlID0gY29uZmlnLmRlZmF1bHRzLnBhbGV0dGUuZGF0YTtcbmNvbnN0IGxpbWl0cyA9IHBhbGV0dGVVdGlscy5zdWIubGltaXRzO1xuXG5jb25zdCBpc1Rvb0JyaWdodCA9IGxpbWl0cy5pc1Rvb0JyaWdodDtcbmNvbnN0IGlzVG9vRGFyayA9IGxpbWl0cy5pc1Rvb0Rhcms7XG5jb25zdCBpc1Rvb0dyYXkgPSBsaW1pdHMuaXNUb29HcmF5O1xuXG5mdW5jdGlvbiBsaW1pdGVkSFNMKFxuXHRiYXNlSHVlOiBudW1iZXIsXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRMaWdodDogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRhbHBoYTogbnVtYmVyIHwgbnVsbFxuKTogSFNMIHtcblx0bGV0IGhzbDogSFNMO1xuXG5cdGRvIHtcblx0XHRoc2wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IGJhc2VIdWUsXG5cdFx0XHRcdHNhdHVyYXRpb246IE1hdGgucmFuZG9tKCkgKiAxMDAsXG5cdFx0XHRcdGxpZ2h0bmVzczogTWF0aC5yYW5kb20oKSAqIDEwMCxcblx0XHRcdFx0YWxwaGE6IGFscGhhID8/IDFcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblx0fSB3aGlsZSAoXG5cdFx0KGxpbWl0R3JheSAmJiBpc1Rvb0dyYXkoaHNsKSkgfHxcblx0XHQobGltaXREYXJrICYmIGlzVG9vRGFyayhoc2wpKSB8fFxuXHRcdChsaW1pdExpZ2h0ICYmIGlzVG9vQnJpZ2h0KGhzbCkpXG5cdCk7XG5cblx0cmV0dXJuIGhzbDtcbn1cblxuLy8gYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVQYWxldHRlKCkge31cblxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTZWxlY3RlZFBhbGV0dGUoXG5cdG9wdGlvbnM6IFBhbGV0dGVPcHRpb25zXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0dHJ5IHtcblx0XHRjb25zdCB7XG5cdFx0XHRwYWxldHRlVHlwZSxcblx0XHRcdG51bUJveGVzLFxuXHRcdFx0Y3VzdG9tQ29sb3IsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRsaW1pdEdyYXluZXNzLFxuXHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHR9ID0gb3B0aW9ucztcblxuXHRcdHN3aXRjaCAocGFsZXR0ZVR5cGUpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0cmV0dXJuIGdlblBhbGV0dGUucmFuZG9tKFxuXHRcdFx0XHRcdG51bUJveGVzLFxuXHRcdFx0XHRcdGN1c3RvbUNvbG9yLFxuXHRcdFx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRcdFx0bGltaXRHcmF5bmVzcyxcblx0XHRcdFx0XHRsaW1pdExpZ2h0bmVzc1xuXHRcdFx0XHQpO1xuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZS5jb21wbGVtZW50YXJ5KFxuXHRcdFx0XHRcdG51bUJveGVzLFxuXHRcdFx0XHRcdGN1c3RvbUNvbG9yLFxuXHRcdFx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRcdFx0bGltaXRHcmF5bmVzcyxcblx0XHRcdFx0XHRsaW1pdExpZ2h0bmVzc1xuXHRcdFx0XHQpO1xuXHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZS50cmlhZGljKFxuXHRcdFx0XHRcdG51bUJveGVzLFxuXHRcdFx0XHRcdGN1c3RvbUNvbG9yLFxuXHRcdFx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRcdFx0bGltaXRHcmF5bmVzcyxcblx0XHRcdFx0XHRsaW1pdExpZ2h0bmVzc1xuXHRcdFx0XHQpO1xuXHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZS50ZXRyYWRpYyhcblx0XHRcdFx0XHRudW1Cb3hlcyxcblx0XHRcdFx0XHRjdXN0b21Db2xvcixcblx0XHRcdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdFx0XHRsaW1pdERhcmtuZXNzLFxuXHRcdFx0XHRcdGxpbWl0R3JheW5lc3MsXG5cdFx0XHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHRcdFx0KTtcblx0XHRcdGNhc2UgNTpcblx0XHRcdFx0cmV0dXJuIGdlblBhbGV0dGUuc3BsaXRDb21wbGVtZW50YXJ5KFxuXHRcdFx0XHRcdG51bUJveGVzLFxuXHRcdFx0XHRcdGN1c3RvbUNvbG9yLFxuXHRcdFx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRcdFx0bGltaXRHcmF5bmVzcyxcblx0XHRcdFx0XHRsaW1pdExpZ2h0bmVzc1xuXHRcdFx0XHQpO1xuXHRcdFx0Y2FzZSA2OlxuXHRcdFx0XHRyZXR1cm4gZ2VuUGFsZXR0ZS5hbmFsb2dvdXMoXG5cdFx0XHRcdFx0bnVtQm94ZXMsXG5cdFx0XHRcdFx0Y3VzdG9tQ29sb3IsXG5cdFx0XHRcdFx0ZW5hYmxlQWxwaGEsXG5cdFx0XHRcdFx0bGltaXREYXJrbmVzcyxcblx0XHRcdFx0XHRsaW1pdEdyYXluZXNzLFxuXHRcdFx0XHRcdGxpbWl0TGlnaHRuZXNzXG5cdFx0XHRcdCk7XG5cdFx0XHRjYXNlIDc6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlLmhleGFkaWMoXG5cdFx0XHRcdFx0bnVtQm94ZXMsXG5cdFx0XHRcdFx0Y3VzdG9tQ29sb3IsXG5cdFx0XHRcdFx0ZW5hYmxlQWxwaGEsXG5cdFx0XHRcdFx0bGltaXREYXJrbmVzcyxcblx0XHRcdFx0XHRsaW1pdEdyYXluZXNzLFxuXHRcdFx0XHRcdGxpbWl0TGlnaHRuZXNzXG5cdFx0XHRcdCk7XG5cdFx0XHRjYXNlIDg6XG5cdFx0XHRcdHJldHVybiBnZW5QYWxldHRlLmRpYWRpYyhcblx0XHRcdFx0XHRudW1Cb3hlcyxcblx0XHRcdFx0XHRjdXN0b21Db2xvcixcblx0XHRcdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdFx0XHRsaW1pdERhcmtuZXNzLFxuXHRcdFx0XHRcdGxpbWl0R3JheW5lc3MsXG5cdFx0XHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHRcdFx0KTtcblx0XHRcdGNhc2UgOTpcblx0XHRcdFx0cmV0dXJuIGdlblBhbGV0dGUubW9ub2Nocm9tYXRpYyhcblx0XHRcdFx0XHRudW1Cb3hlcyxcblx0XHRcdFx0XHRjdXN0b21Db2xvcixcblx0XHRcdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdFx0XHRsaW1pdERhcmtuZXNzLFxuXHRcdFx0XHRcdGxpbWl0R3JheW5lc3MsXG5cdFx0XHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHRcdFx0KTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgcGFsZXR0ZSB0eXBlLicpO1xuXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVmYXVsdFBhbGV0dGUpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIHBhbGV0dGU6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlZmF1bHRQYWxldHRlKTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGUgPSB7XG5cdGxpbWl0ZWRIU0wsXG5cdHNlbGVjdGVkUGFsZXR0ZTogZ2VuZXJhdGVTZWxlY3RlZFBhbGV0dGVcbn07XG4iXX0=