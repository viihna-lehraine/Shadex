// File: src/palette/start.ts
import { IDBManager } from '../idb/index.js';
import { data } from '../data/index.js';
import { generate } from '../palette/index.js';
import { helpers, superUtils, utils } from '../common/index.js';
const mode = data.mode;
async function paletteGen(options) {
    try {
        let { numBoxes, customColor } = options;
        const idb = IDBManager.getInstance();
        if (customColor === null || customColor === undefined) {
            if (mode.errorLogs)
                console.error('Custom color is null or undefined.');
            return;
        }
        const validatedCustomColor = helpers.dom.validateAndConvertColor(customColor) ??
            utils.random.hsl(options.enableAlpha);
        options.customColor = validatedCustomColor;
        const palette = await generate.selectedPalette(options);
        if (palette.items.length === 0) {
            if (mode.errorLogs)
                console.error('Colors array is empty or invalid.');
            return;
        }
        if (!mode.quiet)
            console.log(`Colors array generated: ${JSON.stringify(palette.items)}`);
        const tableId = await idb.getNextTableID();
        if (!tableId)
            throw new Error('Table ID is null or undefined.');
        await superUtils.dom.genPaletteBox(palette.items, numBoxes, tableId);
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error starting palette generation: ${error}`);
    }
}
export const start = {
    paletteGen
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFsZXR0ZS9zdGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFPN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFaEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUV2QixLQUFLLFVBQVUsVUFBVSxDQUFDLE9BQXVCO0lBQ2hELElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBRXhDLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVyQyxJQUFJLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3ZELElBQUksSUFBSSxDQUFDLFNBQVM7Z0JBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztZQUVyRCxPQUFPO1FBQ1IsQ0FBQztRQUVELE1BQU0sb0JBQW9CLEdBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFTO1lBQ3pELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV2QyxPQUFPLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDO1FBRTNDLE1BQU0sT0FBTyxHQUFHLE1BQU0sUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RCxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2hDLElBQUksSUFBSSxDQUFDLFNBQVM7Z0JBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztZQUVwRCxPQUFPO1FBQ1IsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQ1YsMkJBQTJCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzFELENBQUM7UUFFSCxNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUUzQyxJQUFJLENBQUMsT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUVoRSxNQUFNLFVBQVUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBNEI7SUFDN0MsVUFBVTtDQUNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9zdGFydC50c1xuXG5pbXBvcnQge1xuXHRIU0wsXG5cdFBhbGV0dGVPcHRpb25zLFxuXHRQYWxldHRlU3RhcnRGbkludGVyZmFjZVxufSBmcm9tICcuLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBJREJNYW5hZ2VyIH0gZnJvbSAnLi4vaWRiL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi9kYXRhL2luZGV4LmpzJztcbmltcG9ydCB7IGdlbmVyYXRlIH0gZnJvbSAnLi4vcGFsZXR0ZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBoZWxwZXJzLCBzdXBlclV0aWxzLCB1dGlscyB9IGZyb20gJy4uL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5cbmFzeW5jIGZ1bmN0aW9uIHBhbGV0dGVHZW4ob3B0aW9uczogUGFsZXR0ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcblx0dHJ5IHtcblx0XHRsZXQgeyBudW1Cb3hlcywgY3VzdG9tQ29sb3IgfSA9IG9wdGlvbnM7XG5cblx0XHRjb25zdCBpZGIgPSBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cblx0XHRpZiAoY3VzdG9tQ29sb3IgPT09IG51bGwgfHwgY3VzdG9tQ29sb3IgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdDdXN0b20gY29sb3IgaXMgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCB2YWxpZGF0ZWRDdXN0b21Db2xvcjogSFNMID1cblx0XHRcdChoZWxwZXJzLmRvbS52YWxpZGF0ZUFuZENvbnZlcnRDb2xvcihjdXN0b21Db2xvcikgYXMgSFNMKSA/P1xuXHRcdFx0dXRpbHMucmFuZG9tLmhzbChvcHRpb25zLmVuYWJsZUFscGhhKTtcblxuXHRcdG9wdGlvbnMuY3VzdG9tQ29sb3IgPSB2YWxpZGF0ZWRDdXN0b21Db2xvcjtcblxuXHRcdGNvbnN0IHBhbGV0dGUgPSBhd2FpdCBnZW5lcmF0ZS5zZWxlY3RlZFBhbGV0dGUob3B0aW9ucyk7XG5cblx0XHRpZiAocGFsZXR0ZS5pdGVtcy5sZW5ndGggPT09IDApIHtcblx0XHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdFx0Y29uc29sZS5lcnJvcignQ29sb3JzIGFycmF5IGlzIGVtcHR5IG9yIGludmFsaWQuJyk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIW1vZGUucXVpZXQpXG5cdFx0XHRjb25zb2xlLmxvZyhcblx0XHRcdFx0YENvbG9ycyBhcnJheSBnZW5lcmF0ZWQ6ICR7SlNPTi5zdHJpbmdpZnkocGFsZXR0ZS5pdGVtcyl9YFxuXHRcdFx0KTtcblxuXHRcdGNvbnN0IHRhYmxlSWQgPSBhd2FpdCBpZGIuZ2V0TmV4dFRhYmxlSUQoKTtcblxuXHRcdGlmICghdGFibGVJZCkgdGhyb3cgbmV3IEVycm9yKCdUYWJsZSBJRCBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblxuXHRcdGF3YWl0IHN1cGVyVXRpbHMuZG9tLmdlblBhbGV0dGVCb3gocGFsZXR0ZS5pdGVtcywgbnVtQm94ZXMsIHRhYmxlSWQpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHN0YXJ0aW5nIHBhbGV0dGUgZ2VuZXJhdGlvbjogJHtlcnJvcn1gKTtcblx0fVxufVxuXG5leHBvcnQgY29uc3Qgc3RhcnQ6IFBhbGV0dGVTdGFydEZuSW50ZXJmYWNlID0ge1xuXHRwYWxldHRlR2VuXG59IGFzIGNvbnN0O1xuIl19