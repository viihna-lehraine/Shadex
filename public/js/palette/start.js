// File: src/palette/start.ts
import { config } from '../config';
import { generate } from '../palette';
import { helpers, superUtils, utils } from '../common';
import { idb } from '../idb';
const mode = config.mode;
async function paletteGen(options) {
    try {
        let { numBoxes, customColor } = options;
        if (customColor === null || customColor === undefined) {
            if (mode.logErrors)
                console.error('Custom color is null or undefined.');
            return;
        }
        const validatedCustomColor = helpers.dom.validateAndConvertColor(customColor) ??
            utils.random.hsl(options.enableAlpha);
        options.customColor = validatedCustomColor;
        const palette = await generate.selectedPalette(options);
        if (palette.items.length === 0) {
            if (mode.logErrors)
                console.error('Colors array is empty or invalid.');
            return;
        }
        if (!mode.quiet)
            console.log(`Colors array generated: ${JSON.stringify(palette.items)}`);
        const tableId = await idb.getNextTableID();
        await superUtils.dom.genPaletteBox(palette.items, numBoxes, tableId);
    }
    catch (error) {
        if (mode.logErrors)
            console.error(`Error starting palette generation: ${error}`);
    }
}
export const start = { paletteGen };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFsZXR0ZS9zdGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFHN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTdCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFFekIsS0FBSyxVQUFVLFVBQVUsQ0FBQyxPQUF1QjtJQUNoRCxJQUFJLENBQUM7UUFDSixJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUV4QyxJQUFJLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3ZELElBQUksSUFBSSxDQUFDLFNBQVM7Z0JBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztZQUVyRCxPQUFPO1FBQ1IsQ0FBQztRQUVELE1BQU0sb0JBQW9CLEdBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFTO1lBQ3pELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV2QyxPQUFPLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDO1FBRTNDLE1BQU0sT0FBTyxHQUFHLE1BQU0sUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RCxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2hDLElBQUksSUFBSSxDQUFDLFNBQVM7Z0JBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztZQUVwRCxPQUFPO1FBQ1IsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQ1YsMkJBQTJCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzFELENBQUM7UUFFSCxNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUUzQyxNQUFNLFVBQVUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvc3RhcnQudHNcblxuaW1wb3J0IHsgSFNMLCBQYWxldHRlT3B0aW9ucyB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBnZW5lcmF0ZSB9IGZyb20gJy4uL3BhbGV0dGUnO1xuaW1wb3J0IHsgaGVscGVycywgc3VwZXJVdGlscywgdXRpbHMgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vaWRiJztcblxuY29uc3QgbW9kZSA9IGNvbmZpZy5tb2RlO1xuXG5hc3luYyBmdW5jdGlvbiBwYWxldHRlR2VuKG9wdGlvbnM6IFBhbGV0dGVPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG5cdHRyeSB7XG5cdFx0bGV0IHsgbnVtQm94ZXMsIGN1c3RvbUNvbG9yIH0gPSBvcHRpb25zO1xuXG5cdFx0aWYgKGN1c3RvbUNvbG9yID09PSBudWxsIHx8IGN1c3RvbUNvbG9yID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGlmIChtb2RlLmxvZ0Vycm9ycylcblx0XHRcdFx0Y29uc29sZS5lcnJvcignQ3VzdG9tIGNvbG9yIGlzIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgdmFsaWRhdGVkQ3VzdG9tQ29sb3I6IEhTTCA9XG5cdFx0XHQoaGVscGVycy5kb20udmFsaWRhdGVBbmRDb252ZXJ0Q29sb3IoY3VzdG9tQ29sb3IpIGFzIEhTTCkgPz9cblx0XHRcdHV0aWxzLnJhbmRvbS5oc2wob3B0aW9ucy5lbmFibGVBbHBoYSk7XG5cblx0XHRvcHRpb25zLmN1c3RvbUNvbG9yID0gdmFsaWRhdGVkQ3VzdG9tQ29sb3I7XG5cblx0XHRjb25zdCBwYWxldHRlID0gYXdhaXQgZ2VuZXJhdGUuc2VsZWN0ZWRQYWxldHRlKG9wdGlvbnMpO1xuXG5cdFx0aWYgKHBhbGV0dGUuaXRlbXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRpZiAobW9kZS5sb2dFcnJvcnMpXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0NvbG9ycyBhcnJheSBpcyBlbXB0eSBvciBpbnZhbGlkLicpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFtb2RlLnF1aWV0KVxuXHRcdFx0Y29uc29sZS5sb2coXG5cdFx0XHRcdGBDb2xvcnMgYXJyYXkgZ2VuZXJhdGVkOiAke0pTT04uc3RyaW5naWZ5KHBhbGV0dGUuaXRlbXMpfWBcblx0XHRcdCk7XG5cblx0XHRjb25zdCB0YWJsZUlkID0gYXdhaXQgaWRiLmdldE5leHRUYWJsZUlEKCk7XG5cblx0XHRhd2FpdCBzdXBlclV0aWxzLmRvbS5nZW5QYWxldHRlQm94KHBhbGV0dGUuaXRlbXMsIG51bUJveGVzLCB0YWJsZUlkKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAobW9kZS5sb2dFcnJvcnMpXG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBzdGFydGluZyBwYWxldHRlIGdlbmVyYXRpb246ICR7ZXJyb3J9YCk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHN0YXJ0ID0geyBwYWxldHRlR2VuIH07XG4iXX0=