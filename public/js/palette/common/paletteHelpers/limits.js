// File: src/palette/common/paletteHelpers/limits.js
import { core } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { log } from '../../../classes/logger/index.js';
const logMode = data.mode.logging;
function isColorInBounds(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            log.error(`isColorInBounds: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return isTooDark(hsl) || isTooGray(hsl) || isTooLight(hsl);
}
function isTooDark(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            log.error(`isTooDark: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.base.clone(hsl).value.lightness < data.consts.thresholds.dark;
}
function isTooGray(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            log.error(`isTooGray: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.base.clone(hsl).value.saturation < data.consts.thresholds.gray;
}
function isTooLight(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            log.error(`isTooLight: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.base.clone(hsl).value.lightness > data.consts.thresholds.light;
}
export const limits = {
    isColorInBounds,
    isTooDark,
    isTooGray,
    isTooLight
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvY29tbW9uL3BhbGV0dGVIZWxwZXJzL2xpbWl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvREFBb0Q7QUFHcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFbEMsU0FBUyxlQUFlLENBQUMsR0FBUTtJQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNO1lBQ2pCLEdBQUcsQ0FBQyxLQUFLLENBQ1Isc0NBQXNDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDM0QsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQVE7SUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDckMsSUFBSSxPQUFPLENBQUMsTUFBTTtZQUNqQixHQUFHLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVsRSxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQzNFLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFRO0lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JDLElBQUksT0FBTyxDQUFDLE1BQU07WUFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEUsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztBQUM1RSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBUTtJQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNO1lBQ2pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFDNUUsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBaUM7SUFDbkQsZUFBZTtJQUNmLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtDQUNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9jb21tb24vcGFsZXR0ZUhlbHBlcnMvbGltaXRzLmpzXG5cbmltcG9ydCB7IEhTTCwgUGFsZXR0ZUNvbW1vbl9IZWxwZXJzX0xpbWl0cyB9IGZyb20gJy4uLy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vLi4vLi4vY2xhc3Nlcy9sb2dnZXIvaW5kZXguanMnO1xuXG5jb25zdCBsb2dNb2RlID0gZGF0YS5tb2RlLmxvZ2dpbmc7XG5cbmZ1bmN0aW9uIGlzQ29sb3JJbkJvdW5kcyhoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9ycylcblx0XHRcdGxvZy5lcnJvcihcblx0XHRcdFx0YGlzQ29sb3JJbkJvdW5kczogSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWBcblx0XHRcdCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gaXNUb29EYXJrKGhzbCkgfHwgaXNUb29HcmF5KGhzbCkgfHwgaXNUb29MaWdodChoc2wpO1xufVxuXG5mdW5jdGlvbiBpc1Rvb0RhcmsoaHNsOiBIU0wpOiBib29sZWFuIHtcblx0aWYgKCFjb3JlLnZhbGlkYXRlLmNvbG9yVmFsdWVzKGhzbCkpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMpXG5cdFx0XHRsb2cuZXJyb3IoYGlzVG9vRGFyazogSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWApO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuYmFzZS5jbG9uZShoc2wpLnZhbHVlLmxpZ2h0bmVzcyA8IGRhdGEuY29uc3RzLnRocmVzaG9sZHMuZGFyaztcbn1cblxuZnVuY3Rpb24gaXNUb29HcmF5KGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29yZS52YWxpZGF0ZS5jb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3JzKVxuXHRcdFx0bG9nLmVycm9yKGBpc1Rvb0dyYXk6IEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBjb3JlLmJhc2UuY2xvbmUoaHNsKS52YWx1ZS5zYXR1cmF0aW9uIDwgZGF0YS5jb25zdHMudGhyZXNob2xkcy5ncmF5O1xufVxuXG5mdW5jdGlvbiBpc1Rvb0xpZ2h0KGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29yZS52YWxpZGF0ZS5jb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3JzKVxuXHRcdFx0bG9nLmVycm9yKGBpc1Rvb0xpZ2h0OiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gY29yZS5iYXNlLmNsb25lKGhzbCkudmFsdWUubGlnaHRuZXNzID4gZGF0YS5jb25zdHMudGhyZXNob2xkcy5saWdodDtcbn1cblxuZXhwb3J0IGNvbnN0IGxpbWl0czogUGFsZXR0ZUNvbW1vbl9IZWxwZXJzX0xpbWl0cyA9IHtcblx0aXNDb2xvckluQm91bmRzLFxuXHRpc1Rvb0RhcmssXG5cdGlzVG9vR3JheSxcblx0aXNUb29MaWdodFxufSBhcyBjb25zdDtcbiJdfQ==