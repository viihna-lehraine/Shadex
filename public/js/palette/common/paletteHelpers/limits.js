// File: src/palette/common/paletteHelpers/limits.js
import { core } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { logger } from '../../../logger/index.js';
const logMode = data.mode.logging;
function isColorInBounds(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            logger.error(`isColorInBounds: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return isTooDark(hsl) || isTooGray(hsl) || isTooLight(hsl);
}
function isTooDark(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            logger.error(`isTooDark: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.base.clone(hsl).value.lightness < data.consts.thresholds.dark;
}
function isTooGray(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            logger.error(`isTooGray: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.base.clone(hsl).value.saturation < data.consts.thresholds.gray;
}
function isTooLight(hsl) {
    if (!core.validate.colorValues(hsl)) {
        if (logMode.errors)
            logger.error(`isTooLight: Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.base.clone(hsl).value.lightness > data.consts.thresholds.light;
}
export const limits = {
    isColorInBounds,
    isTooDark,
    isTooGray,
    isTooLight
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvY29tbW9uL3BhbGV0dGVIZWxwZXJzL2xpbWl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvREFBb0Q7QUFHcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFbEMsU0FBUyxlQUFlLENBQUMsR0FBUTtJQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNO1lBQ2pCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsc0NBQXNDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDM0QsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQVE7SUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDckMsSUFBSSxPQUFPLENBQUMsTUFBTTtZQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVyRSxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQzNFLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFRO0lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JDLElBQUksT0FBTyxDQUFDLE1BQU07WUFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFckUsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztBQUM1RSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBUTtJQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNO1lBQ2pCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsaUNBQWlDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDdEQsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFDNUUsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBaUM7SUFDbkQsZUFBZTtJQUNmLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtDQUNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9jb21tb24vcGFsZXR0ZUhlbHBlcnMvbGltaXRzLmpzXG5cbmltcG9ydCB7IEhTTCwgUGFsZXR0ZUNvbW1vbl9IZWxwZXJzX0xpbWl0cyB9IGZyb20gJy4uLy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vLi4vLi4vbG9nZ2VyL2luZGV4LmpzJztcblxuY29uc3QgbG9nTW9kZSA9IGRhdGEubW9kZS5sb2dnaW5nO1xuXG5mdW5jdGlvbiBpc0NvbG9ySW5Cb3VuZHMoaHNsOiBIU0wpOiBib29sZWFuIHtcblx0aWYgKCFjb3JlLnZhbGlkYXRlLmNvbG9yVmFsdWVzKGhzbCkpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMpXG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBpc0NvbG9ySW5Cb3VuZHM6IEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGlzVG9vRGFyayhoc2wpIHx8IGlzVG9vR3JheShoc2wpIHx8IGlzVG9vTGlnaHQoaHNsKTtcbn1cblxuZnVuY3Rpb24gaXNUb29EYXJrKGhzbDogSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29yZS52YWxpZGF0ZS5jb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3JzKVxuXHRcdFx0bG9nZ2VyLmVycm9yKGBpc1Rvb0Rhcms6IEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBjb3JlLmJhc2UuY2xvbmUoaHNsKS52YWx1ZS5saWdodG5lc3MgPCBkYXRhLmNvbnN0cy50aHJlc2hvbGRzLmRhcms7XG59XG5cbmZ1bmN0aW9uIGlzVG9vR3JheShoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9ycylcblx0XHRcdGxvZ2dlci5lcnJvcihgaXNUb29HcmF5OiBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gY29yZS5iYXNlLmNsb25lKGhzbCkudmFsdWUuc2F0dXJhdGlvbiA8IGRhdGEuY29uc3RzLnRocmVzaG9sZHMuZ3JheTtcbn1cblxuZnVuY3Rpb24gaXNUb29MaWdodChoc2w6IEhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvcmUudmFsaWRhdGUuY29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9ycylcblx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0YGlzVG9vTGlnaHQ6IEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuYmFzZS5jbG9uZShoc2wpLnZhbHVlLmxpZ2h0bmVzcyA+IGRhdGEuY29uc3RzLnRocmVzaG9sZHMubGlnaHQ7XG59XG5cbmV4cG9ydCBjb25zdCBsaW1pdHM6IFBhbGV0dGVDb21tb25fSGVscGVyc19MaW1pdHMgPSB7XG5cdGlzQ29sb3JJbkJvdW5kcyxcblx0aXNUb29EYXJrLFxuXHRpc1Rvb0dyYXksXG5cdGlzVG9vTGlnaHRcbn0gYXMgY29uc3Q7XG4iXX0=