// File: src/palette/common/paletteSuperUtils/create.js
import { convert, core, utils } from '../../../common/index.js';
import { IDBManager } from '../../../idb/index.js';
import { paletteHelpers } from '../paletteHelpers/index.js';
const limits = paletteHelpers.limits;
const update = paletteHelpers.update;
const hslTo = convert.hslTo;
const idb = IDBManager.getInstance();
function baseColor(customColor, enableAlpha) {
    const color = core.base.clone(customColor ?? utils.random.hsl(enableAlpha));
    return color;
}
function paletteItem(color, enableAlpha) {
    const clonedColor = core.base.clone(color);
    clonedColor.value.alpha = enableAlpha
        ? core.brand.asAlphaRange(Math.random())
        : core.brand.asAlphaRange(1);
    return {
        id: `${color.format}_${idb.getNextPaletteID()}`,
        colors: {
            cmyk: hslTo(clonedColor, 'cmyk').value,
            hex: hslTo(clonedColor, 'hex').value,
            hsl: clonedColor.value,
            hsv: hslTo(clonedColor, 'hsv').value,
            lab: hslTo(clonedColor, 'lab').value,
            rgb: hslTo(clonedColor, 'rgb').value,
            xyz: hslTo(clonedColor, 'xyz').value
        },
        colorStrings: {
            cmykString: utils.color.colorToColorString(hslTo(clonedColor, 'cmyk')).value,
            hexString: utils.color.colorToColorString(hslTo(clonedColor, 'hex')).value,
            hslString: utils.color.colorToColorString(clonedColor).value,
            hsvString: utils.color.colorToColorString(hslTo(clonedColor, 'hsv')).value,
            labString: utils.color.colorToColorString(hslTo(clonedColor, 'lab')).value,
            rgbString: utils.color.colorToColorString(hslTo(clonedColor, 'rgb')).value,
            xyzString: utils.color.colorToColorString(hslTo(clonedColor, 'xyz')).value
        },
        cssStrings: {
            cmykCSSString: core.convert.toCSSColorString(hslTo(clonedColor, 'cmyk')),
            hexCSSString: core.convert.toCSSColorString(hslTo(clonedColor, 'hex')),
            hslCSSString: core.convert.toCSSColorString(clonedColor),
            hsvCSSString: core.convert.toCSSColorString(hslTo(clonedColor, 'hsv')),
            labCSSString: core.convert.toCSSColorString(hslTo(clonedColor, 'lab')),
            rgbCSSString: core.convert.toCSSColorString(hslTo(clonedColor, 'rgb')),
            xyzCSSString: core.convert.toCSSColorString(hslTo(clonedColor, 'xyz'))
        }
    };
}
function paletteItemArray(baseColor, hues, enableAlpha, limitDark, limitGray, limitLight) {
    const paletteItems = [paletteItem(baseColor, enableAlpha)];
    hues.forEach((hue, i) => {
        let newColor = null;
        do {
            const sl = utils.random.sl(enableAlpha);
            newColor = utils.conversion.genAllColorValues({
                value: {
                    hue: core.brand.asRadial(hue),
                    ...sl.value
                },
                format: 'hsl'
            }).hsl;
        } while (newColor &&
            ((limitGray && limits.isTooGray(newColor)) ||
                (limitDark && limits.isTooDark(newColor)) ||
                (limitLight && limits.isTooLight(newColor))));
        if (newColor) {
            paletteItems.push(paletteItem(newColor, enableAlpha));
            update.colorBox(newColor, i + 1);
        }
    });
    return paletteItems;
}
export const create = {
    baseColor,
    paletteItem,
    paletteItemArray
};
//# sourceMappingURL=data:application/json;base64,