// File: src/palette/common/paletteSuperUtils/create.ts
import { core, utils } from '../../../common';
import { idb } from '../../../idb';
import { paletteHelpers } from '../paletteHelpers';
import { paletteUtils } from '../paletteUtils';
const limits = paletteHelpers.limits;
const update = paletteHelpers.update;
const hslTo = paletteUtils.convert.hslTo;
function baseColor(customColor, enableAlpha) {
    const color = core.clone(customColor ?? utils.random.hsl(enableAlpha));
    return color;
}
function paletteItem(color, enableAlpha) {
    const clonedColor = core.clone(color);
    clonedColor.value.alpha = enableAlpha ? Math.random() : 1;
    return {
        id: `${color.format}_${idb.getNextPaletteID()}`,
        colors: {
            cmyk: hslTo(clonedColor, 'cmyk').value,
            hex: hslTo(clonedColor, 'hex').value,
            hsl: clonedColor.value,
            hsv: hslTo(clonedColor, 'hsv').value,
            lab: hslTo(clonedColor, 'lab').value,
            rgb: hslTo(clonedColor, 'rgb').value,
            xyz: hslTo(clonedColor, 'xyz').value
        },
        colorStrings: {
            cmykString: utils.color.colorToColorString(hslTo(clonedColor, 'cmyk')).value,
            hexString: utils.color.colorToColorString(hslTo(clonedColor, 'hex')).value,
            hslString: utils.color.colorToColorString(clonedColor).value,
            hsvString: utils.color.colorToColorString(hslTo(clonedColor, 'hsv')).value,
            labString: utils.color.colorToColorString(hslTo(clonedColor, 'lab')).value,
            rgbString: utils.color.colorToColorString(hslTo(clonedColor, 'rgb')).value,
            xyzString: utils.color.colorToColorString(hslTo(clonedColor, 'xyz')).value
        },
        cssStrings: {
            cmykCSSString: core.getCSSColorString(hslTo(clonedColor, 'cmyk')),
            hexCSSString: core.getCSSColorString(hslTo(clonedColor, 'hex')),
            hslCSSString: core.getCSSColorString(clonedColor),
            hsvCSSString: core.getCSSColorString(hslTo(clonedColor, 'hsv')),
            labCSSString: core.getCSSColorString(hslTo(clonedColor, 'lab')),
            rgbCSSString: core.getCSSColorString(hslTo(clonedColor, 'rgb')),
            xyzCSSString: core.getCSSColorString(hslTo(clonedColor, 'xyz'))
        }
    };
}
function paletteItemArray(baseColor, hues, enableAlpha, limitDark, limitGray, limitLight) {
    const paletteItems = [paletteItem(baseColor, enableAlpha)];
    hues.forEach((hue, i) => {
        let newColor = null;
        do {
            const sl = utils.random.sl(enableAlpha);
            newColor = utils.conversion.genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
        } while (newColor &&
            ((limitGray && limits.isTooGray(newColor)) ||
                (limitDark && limits.isTooDark(newColor)) ||
                (limitLight && limits.isTooLight(newColor))));
        if (newColor) {
            paletteItems.push(paletteItem(newColor, enableAlpha));
            update.colorBox(newColor, i + 1);
        }
    });
    return paletteItems;
}
export const create = {
    baseColor,
    paletteItem,
    paletteItemArray
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvY29tbW9uL3BhbGV0dGVTdXBlclV0aWxzL2NyZWF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1REFBdUQ7QUFvQnZELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUM7QUFDckMsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQztBQUVyQyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUV6QyxTQUFTLFNBQVMsQ0FBQyxXQUF1QixFQUFFLFdBQW9CO0lBQy9ELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFdkUsT0FBTyxLQUFZLENBQUM7QUFDckIsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLEtBQVUsRUFBRSxXQUFvQjtJQUNwRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBUSxDQUFDO0lBRTdDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUQsT0FBTztRQUNOLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLGdC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UUFBUSxHQUFlLElBQUksQ0FBQztRQUVoQyxHQUFHLENBQUM7WUFDSCxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQU8sQ0FBQztZQUM5QyxRQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDN0MsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDM0IsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDLENBQUMsR0FBVSxDQUFDO1FBQ2YsQ0FBQyxRQUNBLFFBQVE7WUFDUixDQUFDLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3pDLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3pDLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUM1QztRQUVGLElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUV0RCxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQztJQUNGLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxZQUFZLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNyQixTQUFTO0lBQ1QsV0FBVztJQUNYLGdCQUFnQjtDQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9jb21tb24vcGFsZXR0ZVN1cGVyVXRpbHMvY3JlYXRlLnRzXG5cbmltcG9ydCB7XG5cdENNWUssXG5cdENNWUtTdHJpbmcsXG5cdEhleCxcblx0SGV4U3RyaW5nLFxuXHRIU0wsXG5cdEhTTFN0cmluZyxcblx0SFNWLFxuXHRIU1ZTdHJpbmcsXG5cdExBQixcblx0TEFCU3RyaW5nLFxuXHRQYWxldHRlSXRlbSxcblx0UkdCLFxuXHRSR0JTdHJpbmcsXG5cdFNMLFxuXHRYWVosXG5cdFhZWlN0cmluZ1xufSBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQgeyBjb3JlLCB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBpZGIgfSBmcm9tICcuLi8uLi8uLi9pZGInO1xuaW1wb3J0IHsgcGFsZXR0ZUhlbHBlcnMgfSBmcm9tICcuLi9wYWxldHRlSGVscGVycyc7XG5pbXBvcnQgeyBwYWxldHRlVXRpbHMgfSBmcm9tICcuLi9wYWxldHRlVXRpbHMnO1xuXG5jb25zdCBsaW1pdHMgPSBwYWxldHRlSGVscGVycy5saW1pdHM7XG5jb25zdCB1cGRhdGUgPSBwYWxldHRlSGVscGVycy51cGRhdGU7XG5cbmNvbnN0IGhzbFRvID0gcGFsZXR0ZVV0aWxzLmNvbnZlcnQuaHNsVG87XG5cbmZ1bmN0aW9uIGJhc2VDb2xvcihjdXN0b21Db2xvcjogSFNMIHwgbnVsbCwgZW5hYmxlQWxwaGE6IGJvb2xlYW4pOiBIU0wge1xuXHRjb25zdCBjb2xvciA9IGNvcmUuY2xvbmUoY3VzdG9tQ29sb3IgPz8gdXRpbHMucmFuZG9tLmhzbChlbmFibGVBbHBoYSkpO1xuXG5cdHJldHVybiBjb2xvciBhcyBIU0w7XG59XG5cbmZ1bmN0aW9uIHBhbGV0dGVJdGVtKGNvbG9yOiBIU0wsIGVuYWJsZUFscGhhOiBib29sZWFuKTogUGFsZXR0ZUl0ZW0ge1xuXHRjb25zdCBjbG9uZWRDb2xvciA9IGNvcmUuY2xvbmUoY29sb3IpIGFzIEhTTDtcblxuXHRjbG9uZWRDb2xvci52YWx1ZS5hbHBoYSA9IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDE7XG5cblx0cmV0dXJuIHtcblx0XHRpZDogYCR7Y29sb3IuZm9ybWF0fV8ke2lkYi5nZXROZXh0UGFsZXR0ZUlEKCl9YCxcblx0XHRjb2xvcnM6IHtcblx0XHRcdGNteWs6IChoc2xUbyhjbG9uZWRDb2xvciwgJ2NteWsnKSBhcyBDTVlLKS52YWx1ZSxcblx0XHRcdGhleDogKGhzbFRvKGNsb25lZENvbG9yLCAnaGV4JykgYXMgSGV4KS52YWx1ZSxcblx0XHRcdGhzbDogY2xvbmVkQ29sb3IudmFsdWUsXG5cdFx0XHRoc3Y6IChoc2xUbyhjbG9uZWRDb2xvciwgJ2hzdicpIGFzIEhTVikudmFsdWUsXG5cdFx0XHRsYWI6IChoc2xUbyhjbG9uZWRDb2xvciwgJ2xhYicpIGFzIExBQikudmFsdWUsXG5cdFx0XHRyZ2I6IChoc2xUbyhjbG9uZWRDb2xvciwgJ3JnYicpIGFzIFJHQikudmFsdWUsXG5cdFx0XHR4eXo6IChoc2xUbyhjbG9uZWRDb2xvciwgJ3h5eicpIGFzIFhZWikudmFsdWVcblx0XHR9LFxuXHRcdGNvbG9yU3RyaW5nczoge1xuXHRcdFx0Y215a1N0cmluZzogKFxuXHRcdFx0XHR1dGlscy5jb2xvci5jb2xvclRvQ29sb3JTdHJpbmcoXG5cdFx0XHRcdFx0aHNsVG8oY2xvbmVkQ29sb3IsICdjbXlrJylcblx0XHRcdFx0KSBhcyBDTVlLU3RyaW5nXG5cdFx0XHQpLnZhbHVlLFxuXHRcdFx0aGV4U3RyaW5nOiAoXG5cdFx0XHRcdHV0aWxzLmNvbG9yLmNvbG9yVG9Db2xvclN0cmluZyhcblx0XHRcdFx0XHRoc2xUbyhjbG9uZWRDb2xvciwgJ2hleCcpXG5cdFx0XHRcdCkgYXMgSGV4U3RyaW5nXG5cdFx0XHQpLnZhbHVlLFxuXHRcdFx0aHNsU3RyaW5nOiAoXG5cdFx0XHRcdHV0aWxzLmNvbG9yLmNvbG9yVG9Db2xvclN0cmluZyhjbG9uZWRDb2xvcikgYXMgSFNMU3RyaW5nXG5cdFx0XHQpLnZhbHVlLFxuXHRcdFx0aHN2U3RyaW5nOiAoXG5cdFx0XHRcdHV0aWxzLmNvbG9yLmNvbG9yVG9Db2xvclN0cmluZyhcblx0XHRcdFx0XHRoc2xUbyhjbG9uZWRDb2xvciwgJ2hzdicpXG5cdFx0XHRcdCkgYXMgSFNWU3RyaW5nXG5cdFx0XHQpLnZhbHVlLFxuXHRcdFx0bGFiU3RyaW5nOiAoXG5cdFx0XHRcdHV0aWxzLmNvbG9yLmNvbG9yVG9Db2xvclN0cmluZyhcblx0XHRcdFx0XHRoc2xUbyhjbG9uZWRDb2xvciwgJ2xhYicpXG5cdFx0XHRcdCkgYXMgTEFCU3RyaW5nXG5cdFx0XHQpLnZhbHVlLFxuXHRcdFx0cmdiU3RyaW5nOiAoXG5cdFx0XHRcdHV0aWxzLmNvbG9yLmNvbG9yVG9Db2xvclN0cmluZyhcblx0XHRcdFx0XHRoc2xUbyhjbG9uZWRDb2xvciwgJ3JnYicpXG5cdFx0XHRcdCkgYXMgUkdCU3RyaW5nXG5cdFx0XHQpLnZhbHVlLFxuXHRcdFx0eHl6U3RyaW5nOiAoXG5cdFx0XHRcdHV0aWxzLmNvbG9yLmNvbG9yVG9Db2xvclN0cmluZyhcblx0XHRcdFx0XHRoc2xUbyhjbG9uZWRDb2xvciwgJ3h5eicpXG5cdFx0XHRcdCkgYXMgWFlaU3RyaW5nXG5cdFx0XHQpLnZhbHVlXG5cdFx0fSxcblx0XHRjc3NTdHJpbmdzOiB7XG5cdFx0XHRjbXlrQ1NTU3RyaW5nOiBjb3JlLmdldENTU0NvbG9yU3RyaW5nKGhzbFRvKGNsb25lZENvbG9yLCAnY215aycpKSxcblx0XHRcdGhleENTU1N0cmluZzogY29yZS5nZXRDU1NDb2xvclN0cmluZyhoc2xUbyhjbG9uZWRDb2xvciwgJ2hleCcpKSxcblx0XHRcdGhzbENTU1N0cmluZzogY29yZS5nZXRDU1NDb2xvclN0cmluZyhjbG9uZWRDb2xvciksXG5cdFx0XHRoc3ZDU1NTdHJpbmc6IGNvcmUuZ2V0Q1NTQ29sb3JTdHJpbmcoaHNsVG8oY2xvbmVkQ29sb3IsICdoc3YnKSksXG5cdFx0XHRsYWJDU1NTdHJpbmc6IGNvcmUuZ2V0Q1NTQ29sb3JTdHJpbmcoaHNsVG8oY2xvbmVkQ29sb3IsICdsYWInKSksXG5cdFx0XHRyZ2JDU1NTdHJpbmc6IGNvcmUuZ2V0Q1NTQ29sb3JTdHJpbmcoaHNsVG8oY2xvbmVkQ29sb3IsICdyZ2InKSksXG5cdFx0XHR4eXpDU1NTdHJpbmc6IGNvcmUuZ2V0Q1NTQ29sb3JTdHJpbmcoaHNsVG8oY2xvbmVkQ29sb3IsICd4eXonKSlcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIHBhbGV0dGVJdGVtQXJyYXkoXG5cdGJhc2VDb2xvcjogSFNMLFxuXHRodWVzOiBudW1iZXJbXSxcblx0ZW5hYmxlQWxwaGE6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuXG4pOiBQYWxldHRlSXRlbVtdIHtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW3BhbGV0dGVJdGVtKGJhc2VDb2xvciwgZW5hYmxlQWxwaGEpXTtcblxuXHRodWVzLmZvckVhY2goKGh1ZSwgaSkgPT4ge1xuXHRcdGxldCBuZXdDb2xvcjogSFNMIHwgbnVsbCA9IG51bGw7XG5cblx0XHRkbyB7XG5cdFx0XHRjb25zdCBzbCA9IHV0aWxzLnJhbmRvbS5zbChlbmFibGVBbHBoYSkgYXMgU0w7XG5cdFx0XHRuZXdDb2xvciA9IHV0aWxzLmNvbnZlcnNpb24uZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0XHR2YWx1ZTogeyBodWUsIC4uLnNsLnZhbHVlIH0sXG5cdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdH0pLmhzbCBhcyBIU0w7XG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRuZXdDb2xvciAmJlxuXHRcdFx0KChsaW1pdEdyYXkgJiYgbGltaXRzLmlzVG9vR3JheShuZXdDb2xvcikpIHx8XG5cdFx0XHRcdChsaW1pdERhcmsgJiYgbGltaXRzLmlzVG9vRGFyayhuZXdDb2xvcikpIHx8XG5cdFx0XHRcdChsaW1pdExpZ2h0ICYmIGxpbWl0cy5pc1Rvb0xpZ2h0KG5ld0NvbG9yKSkpXG5cdFx0KTtcblxuXHRcdGlmIChuZXdDb2xvcikge1xuXHRcdFx0cGFsZXR0ZUl0ZW1zLnB1c2gocGFsZXR0ZUl0ZW0obmV3Q29sb3IsIGVuYWJsZUFscGhhKSk7XG5cblx0XHRcdHVwZGF0ZS5jb2xvckJveChuZXdDb2xvciwgaSArIDEpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHBhbGV0dGVJdGVtcztcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IHtcblx0YmFzZUNvbG9yLFxuXHRwYWxldHRlSXRlbSxcblx0cGFsZXR0ZUl0ZW1BcnJheVxufSBhcyBjb25zdDtcbiJdfQ==