// File: src/palette/common/paletteSuperUtils/genHues.js
import { core, utils } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { paletteUtils } from '../paletteUtils/index.js';
const mode = data.mode;
const genAllColorValues = utils.conversion.genAllColorValues;
const getWeightedRandomInterval = paletteUtils.probability.getWeightedRandomInterval;
const validateColorValues = core.validate.colorValues;
function analogous(color, numBoxes) {
    try {
        if (!validateColorValues(color)) {
            if (mode.errorLogs)
                console.error(`Invalid color value ${JSON.stringify(color)}`);
            return [];
        }
        const clonedColor = core.base.clone(color);
        const analogousHues = [];
        const baseHue = clonedColor.value.hue;
        const maxTotalDistance = 60;
        const minTotalDistance = Math.max(20, 10 + (numBoxes - 2) * 12);
        const totalIncrement = Math.floor(Math.random() * (maxTotalDistance - minTotalDistance + 1)) + minTotalDistance;
        const increment = Math.floor(totalIncrement / (numBoxes - 1));
        for (let i = 1; i < numBoxes; i++) {
            analogousHues.push((baseHue + increment * i) % 360);
        }
        return analogousHues;
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating analogous hues: ${error}`);
        return [];
    }
}
function diadic(baseHue) {
    try {
        const clonedBaseHue = core.base.clone(baseHue);
        const diadicHues = [];
        const randomDistance = getWeightedRandomInterval();
        const hue1 = clonedBaseHue;
        const hue2 = (hue1 + randomDistance) % 360;
        diadicHues.push(hue1, hue2);
        return diadicHues;
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating diadic hues: ${error}`);
        return [];
    }
}
function hexadic(color) {
    try {
        const clonedColor = core.base.clone(color);
        if (!validateColorValues(clonedColor)) {
            if (mode.errorLogs)
                console.error(`Invalid color value ${JSON.stringify(clonedColor)}`);
            return [];
        }
        const clonedBaseHSL = genAllColorValues(clonedColor).hsl;
        if (!clonedBaseHSL) {
            if (!mode.gracefulErrors)
                throw new Error('Unable to generate hexadic hues - missing HSL values');
            else if (mode.errorLogs)
                console.error('Unable to generate hexadic hues - missing HSL values');
            else if (!mode.quiet)
                console.error('Error generating hexadic hues');
            return [];
        }
        const hexadicHues = [];
        const baseHue = clonedBaseHSL.value.hue;
        const hue1 = baseHue;
        const hue2 = (hue1 + 180) % 360;
        const randomDistance = Math.floor(Math.random() * 61 + 30);
        const hue3 = (hue1 + randomDistance) % 360;
        const hue4 = (hue3 + 180) % 360;
        const hue5 = (hue1 + 360 - randomDistance) % 360;
        const hue6 = (hue5 + 180) % 360;
        hexadicHues.push(hue1, hue2, hue3, hue4, hue5, hue6);
        return hexadicHues;
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating hexadic hues: ${error}`);
        return [];
    }
}
function splitComplementary(baseHue) {
    try {
        const clonedBaseHue = core.base.clone(baseHue);
        const modifier = Math.floor(Math.random() * 11) + 20;
        return [
            (clonedBaseHue + 180 + modifier) % 360,
            (clonedBaseHue + 180 - modifier + 360) % 360
        ];
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating split complementary hues: ${error}`);
        return [];
    }
}
function tetradic(baseHue) {
    try {
        const clonedBaseHue = core.base.clone(baseHue);
        const randomOffset = Math.floor(Math.random() * 46) + 20;
        const distance = 90 + (Math.random() < 0.5 ? -randomOffset : randomOffset);
        return [
            clonedBaseHue,
            (clonedBaseHue + 180) % 360,
            (clonedBaseHue + distance) % 360,
            (clonedBaseHue + distance + 180) % 360
        ];
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating tetradic hues: ${error}`);
        return [];
    }
}
function triadic(baseHue) {
    try {
        const clonedBaseHue = core.base.clone(baseHue);
        return [120, 240].map(increment => (clonedBaseHue + increment) % 360);
    }
    catch (error) {
        if (mode.errorLogs)
            console.error(`Error generating triadic hues: ${error}`);
        return [];
    }
}
export const genHues = {
    analogous,
    diadic,
    hexadic,
    splitComplementary,
    tetradic,
    triadic
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuSHVlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL2NvbW1vbi9wYWxldHRlU3VwZXJVdGlscy9nZW5IdWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdEQUF3RDtBQUd4RCxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFeEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUV2QixNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUM7QUFDN0QsTUFBTSx5QkFBeUIsR0FDOUIsWUFBWSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQztBQUNwRCxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0FBRXRELFNBQVMsU0FBUyxDQUFDLEtBQVUsRUFBRSxRQUFnQjtJQUM5QyxJQUFJLENBQUM7UUFDSixJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxJQUFJLElBQUksQ0FBQyxTQUFTO2dCQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUUvRCxPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQVEsQ0FBQztRQUVsRCxNQUFNLGFBQWEsR0FBYSxFQUFFLENBQUM7UUFDbkMsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDdEMsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDNUIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDaEUsTUFBTSxjQUFjLEdBQ25CLElBQUksQ0FBQyxLQUFLLENBQ1QsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQ3pELEdBQUcsZ0JBQWdCLENBQUM7UUFDdEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU5RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbkMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUVELE9BQU8sYUFBYSxDQUFDO0lBQ3RCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU1RCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsT0FBZTtJQUM5QixJQUFJLENBQUM7UUFDSixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxjQUFjLEdBQUcseUJBQXlCLEVBQUUsQ0FBQztRQUNuRCxNQUFNLElBQUksR0FBRyxhQUFhLENBQUM7UUFDM0IsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRTNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTVCLE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUV6RCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsS0FBVTtJQUMxQixJQUFJLENBQUM7UUFDSixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUN2QyxJQUFJLElBQUksQ0FBQyxTQUFTO2dCQUNqQixPQUFPLENBQUMsS0FBSyxDQUNaLHVCQUF1QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQ3BELENBQUM7WUFFSCxPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFFRCxNQUFNLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFVLENBQUM7UUFFaEUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYztnQkFDdkIsTUFBTSxJQUFJLEtBQUssQ0FDZCxzREFBc0QsQ0FDdEQsQ0FBQztpQkFDRSxJQUFJLElBQUksQ0FBQyxTQUFTO2dCQUN0QixPQUFPLENBQUMsS0FBSyxDQUNaLHNEQUFzRCxDQUN0RCxDQUFDO2lCQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztnQkFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1lBRWhELE9BQU8sRUFBRSxDQUFDO1FBQ1gsQ0FBQztRQUVELE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztRQUNqQyxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN4QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUM7UUFDckIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMzRCxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDM0MsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDakQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRWhDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVyRCxPQUFPLFdBQVcsQ0FBQztJQUNwQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQyxTQUFTO1lBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFMUQsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQUMsT0FBZTtJQUMxQyxJQUFJLENBQUM7UUFDSixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFckQsT0FBTztZQUNOLENBQUMsYUFBYSxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQ3RDLENBQUMsYUFBYSxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztTQUM1QyxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUNaLDhDQUE4QyxLQUFLLEVBQUUsQ0FDckQsQ0FBQztRQUVILE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxPQUFlO0lBQ2hDLElBQUksQ0FBQztRQUNKLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN6RCxNQUFNLFFBQVEsR0FDYixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFM0QsT0FBTztZQUNOLGFBQWE7WUFDYixDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHO1lBQzNCLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDaEMsQ0FBQyxhQUFhLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7U0FDdEMsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUUzRCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsT0FBZTtJQUMvQixJQUFJLENBQUM7UUFDSixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUUxRCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFxQztJQUN4RCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLE9BQU87Q0FDRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvY29tbW9uL3BhbGV0dGVTdXBlclV0aWxzL2dlbkh1ZXMuanNcblxuaW1wb3J0IHsgSFNMLCBQYWxldHRlQ29tbW9uX1N1cGVyVXRpbHNfR2VuSHVlcyB9IGZyb20gJy4uLy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUsIHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2luZGV4LmpzJztcbmltcG9ydCB7IHBhbGV0dGVVdGlscyB9IGZyb20gJy4uL3BhbGV0dGVVdGlscy9pbmRleC5qcyc7XG5cbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5cbmNvbnN0IGdlbkFsbENvbG9yVmFsdWVzID0gdXRpbHMuY29udmVyc2lvbi5nZW5BbGxDb2xvclZhbHVlcztcbmNvbnN0IGdldFdlaWdodGVkUmFuZG9tSW50ZXJ2YWwgPVxuXHRwYWxldHRlVXRpbHMucHJvYmFiaWxpdHkuZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbDtcbmNvbnN0IHZhbGlkYXRlQ29sb3JWYWx1ZXMgPSBjb3JlLnZhbGlkYXRlLmNvbG9yVmFsdWVzO1xuXG5mdW5jdGlvbiBhbmFsb2dvdXMoY29sb3I6IEhTTCwgbnVtQm94ZXM6IG51bWJlcik6IG51bWJlcltdIHtcblx0dHJ5IHtcblx0XHRpZiAoIXZhbGlkYXRlQ29sb3JWYWx1ZXMoY29sb3IpKSB7XG5cdFx0XHRpZiAobW9kZS5lcnJvckxvZ3MpXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEludmFsaWQgY29sb3IgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShjb2xvcil9YCk7XG5cblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cblx0XHRjb25zdCBjbG9uZWRDb2xvciA9IGNvcmUuYmFzZS5jbG9uZShjb2xvcikgYXMgSFNMO1xuXG5cdFx0Y29uc3QgYW5hbG9nb3VzSHVlczogbnVtYmVyW10gPSBbXTtcblx0XHRjb25zdCBiYXNlSHVlID0gY2xvbmVkQ29sb3IudmFsdWUuaHVlO1xuXHRcdGNvbnN0IG1heFRvdGFsRGlzdGFuY2UgPSA2MDtcblx0XHRjb25zdCBtaW5Ub3RhbERpc3RhbmNlID0gTWF0aC5tYXgoMjAsIDEwICsgKG51bUJveGVzIC0gMikgKiAxMik7XG5cdFx0Y29uc3QgdG90YWxJbmNyZW1lbnQgPVxuXHRcdFx0TWF0aC5mbG9vcihcblx0XHRcdFx0TWF0aC5yYW5kb20oKSAqIChtYXhUb3RhbERpc3RhbmNlIC0gbWluVG90YWxEaXN0YW5jZSArIDEpXG5cdFx0XHQpICsgbWluVG90YWxEaXN0YW5jZTtcblx0XHRjb25zdCBpbmNyZW1lbnQgPSBNYXRoLmZsb29yKHRvdGFsSW5jcmVtZW50IC8gKG51bUJveGVzIC0gMSkpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCBudW1Cb3hlczsgaSsrKSB7XG5cdFx0XHRhbmFsb2dvdXNIdWVzLnB1c2goKGJhc2VIdWUgKyBpbmNyZW1lbnQgKiBpKSAlIDM2MCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFuYWxvZ291c0h1ZXM7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyBhbmFsb2dvdXMgaHVlczogJHtlcnJvcn1gKTtcblxuXHRcdHJldHVybiBbXTtcblx0fVxufVxuXG5mdW5jdGlvbiBkaWFkaWMoYmFzZUh1ZTogbnVtYmVyKTogbnVtYmVyW10ge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNsb25lZEJhc2VIdWUgPSBjb3JlLmJhc2UuY2xvbmUoYmFzZUh1ZSk7XG5cdFx0Y29uc3QgZGlhZGljSHVlcyA9IFtdO1xuXHRcdGNvbnN0IHJhbmRvbURpc3RhbmNlID0gZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCgpO1xuXHRcdGNvbnN0IGh1ZTEgPSBjbG9uZWRCYXNlSHVlO1xuXHRcdGNvbnN0IGh1ZTIgPSAoaHVlMSArIHJhbmRvbURpc3RhbmNlKSAlIDM2MDtcblxuXHRcdGRpYWRpY0h1ZXMucHVzaChodWUxLCBodWUyKTtcblxuXHRcdHJldHVybiBkaWFkaWNIdWVzO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgZGlhZGljIGh1ZXM6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gW107XG5cdH1cbn1cblxuZnVuY3Rpb24gaGV4YWRpYyhjb2xvcjogSFNMKTogbnVtYmVyW10ge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNsb25lZENvbG9yID0gY29yZS5iYXNlLmNsb25lKGNvbG9yKTtcblxuXHRcdGlmICghdmFsaWRhdGVDb2xvclZhbHVlcyhjbG9uZWRDb2xvcikpIHtcblx0XHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0XHRgSW52YWxpZCBjb2xvciB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGNsb25lZENvbG9yKX1gXG5cdFx0XHRcdCk7XG5cblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cblx0XHRjb25zdCBjbG9uZWRCYXNlSFNMID0gZ2VuQWxsQ29sb3JWYWx1ZXMoY2xvbmVkQ29sb3IpLmhzbCBhcyBIU0w7XG5cblx0XHRpZiAoIWNsb25lZEJhc2VIU0wpIHtcblx0XHRcdGlmICghbW9kZS5ncmFjZWZ1bEVycm9ycylcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdCdVbmFibGUgdG8gZ2VuZXJhdGUgaGV4YWRpYyBodWVzIC0gbWlzc2luZyBIU0wgdmFsdWVzJ1xuXHRcdFx0XHQpO1xuXHRcdFx0ZWxzZSBpZiAobW9kZS5lcnJvckxvZ3MpXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdFx0J1VuYWJsZSB0byBnZW5lcmF0ZSBoZXhhZGljIGh1ZXMgLSBtaXNzaW5nIEhTTCB2YWx1ZXMnXG5cdFx0XHRcdCk7XG5cdFx0XHRlbHNlIGlmICghbW9kZS5xdWlldClcblx0XHRcdFx0Y29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBoZXhhZGljIGh1ZXMnKTtcblxuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IGhleGFkaWNIdWVzOiBudW1iZXJbXSA9IFtdO1xuXHRcdGNvbnN0IGJhc2VIdWUgPSBjbG9uZWRCYXNlSFNMLnZhbHVlLmh1ZTtcblx0XHRjb25zdCBodWUxID0gYmFzZUh1ZTtcblx0XHRjb25zdCBodWUyID0gKGh1ZTEgKyAxODApICUgMzYwO1xuXHRcdGNvbnN0IHJhbmRvbURpc3RhbmNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNjEgKyAzMCk7XG5cdFx0Y29uc3QgaHVlMyA9IChodWUxICsgcmFuZG9tRGlzdGFuY2UpICUgMzYwO1xuXHRcdGNvbnN0IGh1ZTQgPSAoaHVlMyArIDE4MCkgJSAzNjA7XG5cdFx0Y29uc3QgaHVlNSA9IChodWUxICsgMzYwIC0gcmFuZG9tRGlzdGFuY2UpICUgMzYwO1xuXHRcdGNvbnN0IGh1ZTYgPSAoaHVlNSArIDE4MCkgJSAzNjA7XG5cblx0XHRoZXhhZGljSHVlcy5wdXNoKGh1ZTEsIGh1ZTIsIGh1ZTMsIGh1ZTQsIGh1ZTUsIGh1ZTYpO1xuXG5cdFx0cmV0dXJuIGhleGFkaWNIdWVzO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgaGV4YWRpYyBodWVzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNwbGl0Q29tcGxlbWVudGFyeShiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQmFzZUh1ZSA9IGNvcmUuYmFzZS5jbG9uZShiYXNlSHVlKTtcblx0XHRjb25zdCBtb2RpZmllciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDExKSArIDIwO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdChjbG9uZWRCYXNlSHVlICsgMTgwICsgbW9kaWZpZXIpICUgMzYwLFxuXHRcdFx0KGNsb25lZEJhc2VIdWUgKyAxODAgLSBtb2RpZmllciArIDM2MCkgJSAzNjBcblx0XHRdO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdGBFcnJvciBnZW5lcmF0aW5nIHNwbGl0IGNvbXBsZW1lbnRhcnkgaHVlczogJHtlcnJvcn1gXG5cdFx0XHQpO1xuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRldHJhZGljKGJhc2VIdWU6IG51bWJlcik6IG51bWJlcltdIHtcblx0dHJ5IHtcblx0XHRjb25zdCBjbG9uZWRCYXNlSHVlID0gY29yZS5iYXNlLmNsb25lKGJhc2VIdWUpO1xuXHRcdGNvbnN0IHJhbmRvbU9mZnNldCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQ2KSArIDIwO1xuXHRcdGNvbnN0IGRpc3RhbmNlID1cblx0XHRcdDkwICsgKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAtcmFuZG9tT2Zmc2V0IDogcmFuZG9tT2Zmc2V0KTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHRjbG9uZWRCYXNlSHVlLFxuXHRcdFx0KGNsb25lZEJhc2VIdWUgKyAxODApICUgMzYwLFxuXHRcdFx0KGNsb25lZEJhc2VIdWUgKyBkaXN0YW5jZSkgJSAzNjAsXG5cdFx0XHQoY2xvbmVkQmFzZUh1ZSArIGRpc3RhbmNlICsgMTgwKSAlIDM2MFxuXHRcdF07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyB0ZXRyYWRpYyBodWVzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRyaWFkaWMoYmFzZUh1ZTogbnVtYmVyKTogbnVtYmVyW10ge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNsb25lZEJhc2VIdWUgPSBjb3JlLmJhc2UuY2xvbmUoYmFzZUh1ZSk7XG5cblx0XHRyZXR1cm4gWzEyMCwgMjQwXS5tYXAoaW5jcmVtZW50ID0+IChjbG9uZWRCYXNlSHVlICsgaW5jcmVtZW50KSAlIDM2MCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKG1vZGUuZXJyb3JMb2dzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyB0cmlhZGljIGh1ZXM6ICR7ZXJyb3J9YCk7XG5cblx0XHRyZXR1cm4gW107XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGdlbkh1ZXM6IFBhbGV0dGVDb21tb25fU3VwZXJVdGlsc19HZW5IdWVzID0ge1xuXHRhbmFsb2dvdXMsXG5cdGRpYWRpYyxcblx0aGV4YWRpYyxcblx0c3BsaXRDb21wbGVtZW50YXJ5LFxuXHR0ZXRyYWRpYyxcblx0dHJpYWRpY1xufSBhcyBjb25zdDtcbiJdfQ==