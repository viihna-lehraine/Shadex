// File: src/palette/main/types/hexadic.ts
import { idb } from '../../../idb';
import { config } from '../../../config';
import { paletteSuperUtils } from '../../common';
import { utils } from '../../../common';
const consts = config.consts;
const create = paletteSuperUtils.create;
const defaults = config.defaults;
const genHues = paletteSuperUtils.genHues;
const mode = config.mode;
const paletteRanges = consts.palette.ranges;
export async function hexadic(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const currentHexadicPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 6) {
        if (mode.logWarnings)
            console.warn('Hexadic palette requires at least 6 swatches.');
        return utils.palette.createObject('hexadic', [], defaults.colors.hsl, 0, currentHexadicPaletteID, enableAlpha, limitDark, limitGray, limitLight);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const hues = genHues.hexadic(baseColor);
    const paletteItems = hues.map((hue, _i) => {
        const saturationShift = Math.random() * paletteRanges.hexad.satShift -
            paletteRanges.hexad.satShift / 2;
        const lightnessShift = Math.random() * paletteRanges.hexad.lightShift -
            paletteRanges.hexad.lightShift / 2;
        const newColor = {
            value: {
                hue,
                saturation: Math.min(100, Math.max(0, baseColor.value.saturation + saturationShift)),
                lightness: Math.min(100, Math.max(0, baseColor.value.lightness + lightnessShift)),
                alpha: enableAlpha ? Math.random() : 1
            },
            format: 'hsl'
        };
        return create.paletteItem(newColor, enableAlpha);
    });
    return await idb.savePaletteToDB('hexadic', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4YWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvaGV4YWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFHMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQzdCLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ2pDLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztBQUMxQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ3pCLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBRTVDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUM1QixRQUFnQixFQUNoQixXQUF1QixFQUN2QixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQixFQUNsQixVQUFtQjtJQUVuQixNQUFNLHVCQUF1QixHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFaEUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLENBQUMsV0FBVztZQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFFL0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FDaEMsU0FBUyxFQUNULEVBQUUsRUFDRixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFDbkIsQ0FBQyxFQUNELHVCQUF1QixFQUN2QixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLENBQ1YsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDekMsTUFBTSxlQUFlLEdBQ3BCLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVE7WUFDNUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sY0FBYyxHQUNuQixJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQzlDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLFFBQVEsR0FBUTtZQUNyQixLQUFLLEVBQUU7Z0JBQ04sR0FBRztnQkFDSCxVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbkIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQyxDQUN6RDtnQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbEIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxDQUN2RDtnQkFDRCxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEM7WUFDRCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLEdBQUcsQ0FBQyxlQUFlLENBQy9CLFNBQVMsRUFDVCxZQUFZLEVBQ1osU0FBUyxFQUNULFFBQVEsRUFDUixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLENBQ1YsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9tYWluL3R5cGVzL2hleGFkaWMudHNcblxuaW1wb3J0IHsgSFNMLCBQYWxldHRlIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXgnO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vLi4vaWRiJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IGNvbnN0cyA9IGNvbmZpZy5jb25zdHM7XG5jb25zdCBjcmVhdGUgPSBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGU7XG5jb25zdCBkZWZhdWx0cyA9IGNvbmZpZy5kZWZhdWx0cztcbmNvbnN0IGdlbkh1ZXMgPSBwYWxldHRlU3VwZXJVdGlscy5nZW5IdWVzO1xuY29uc3QgbW9kZSA9IGNvbmZpZy5tb2RlO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGNvbnN0cy5wYWxldHRlLnJhbmdlcztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhleGFkaWMoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsLFxuXHRlbmFibGVBbHBoYTogYm9vbGVhbixcblx0bGltaXREYXJrOiBib29sZWFuLFxuXHRsaW1pdEdyYXk6IGJvb2xlYW4sXG5cdGxpbWl0TGlnaHQ6IGJvb2xlYW5cbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBjdXJyZW50SGV4YWRpY1BhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKG51bUJveGVzIDwgNikge1xuXHRcdGlmIChtb2RlLmxvZ1dhcm5pbmdzKVxuXHRcdFx0Y29uc29sZS53YXJuKCdIZXhhZGljIHBhbGV0dGUgcmVxdWlyZXMgYXQgbGVhc3QgNiBzd2F0Y2hlcy4nKTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCdoZXhhZGljJyxcblx0XHRcdFtdLFxuXHRcdFx0ZGVmYXVsdHMuY29sb3JzLmhzbCxcblx0XHRcdDAsXG5cdFx0XHRjdXJyZW50SGV4YWRpY1BhbGV0dGVJRCxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXREYXJrLFxuXHRcdFx0bGltaXRHcmF5LFxuXHRcdFx0bGltaXRMaWdodFxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGN1c3RvbUNvbG9yLCBlbmFibGVBbHBoYSk7XG5cdGNvbnN0IGh1ZXMgPSBnZW5IdWVzLmhleGFkaWMoYmFzZUNvbG9yKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zID0gaHVlcy5tYXAoKGh1ZSwgX2kpID0+IHtcblx0XHRjb25zdCBzYXR1cmF0aW9uU2hpZnQgPVxuXHRcdFx0TWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuaGV4YWQuc2F0U2hpZnQgLVxuXHRcdFx0cGFsZXR0ZVJhbmdlcy5oZXhhZC5zYXRTaGlmdCAvIDI7XG5cdFx0Y29uc3QgbGlnaHRuZXNzU2hpZnQgPVxuXHRcdFx0TWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuaGV4YWQubGlnaHRTaGlmdCAtXG5cdFx0XHRwYWxldHRlUmFuZ2VzLmhleGFkLmxpZ2h0U2hpZnQgLyAyO1xuXHRcdGNvbnN0IG5ld0NvbG9yOiBIU0wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWUsXG5cdFx0XHRcdHNhdHVyYXRpb246IE1hdGgubWluKFxuXHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRNYXRoLm1heCgwLCBiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArIHNhdHVyYXRpb25TaGlmdClcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBNYXRoLm1pbihcblx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIGxpZ2h0bmVzc1NoaWZ0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRhbHBoYTogZW5hYmxlQWxwaGEgPyBNYXRoLnJhbmRvbSgpIDogMVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGNyZWF0ZS5wYWxldHRlSXRlbShuZXdDb2xvciwgZW5hYmxlQWxwaGEpO1xuXHR9KTtcblxuXHRyZXR1cm4gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnaGV4YWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRudW1Cb3hlcyxcblx0XHRlbmFibGVBbHBoYSxcblx0XHRsaW1pdERhcmssXG5cdFx0bGltaXRHcmF5LFxuXHRcdGxpbWl0TGlnaHRcblx0KTtcbn1cbiJdfQ==