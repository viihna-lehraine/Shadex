// File: src/palette/main/types/splitComplementary.ts
import { config } from '../../../config';
import { idb } from '../../../idb';
import { paletteSuperUtils } from '../../common';
import { utils } from '../../../common';
const create = paletteSuperUtils.create;
const defaults = config.defaults;
const genHues = paletteSuperUtils.genHues;
const mode = config.mode;
const paletteRanges = config.consts.palette.ranges;
export async function splitComplementary(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const currentSplitComplementaryPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 3) {
        if (mode.logWarnings)
            console.warn('Split complementary palette requires at least 3 swatches.');
        return utils.palette.createObject('splitComplementary', [], defaults.colors.hsl, 0, currentSplitComplementaryPaletteID, enableAlpha, limitDark, limitGray, limitLight);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const [hue1, hue2] = genHues.splitComplementary(baseColor.value.hue);
    const paletteItems = [
        create.paletteItem(baseColor, enableAlpha),
        ...[hue1, hue2].map((hue, index) => {
            const adjustedHSL = {
                value: {
                    hue,
                    saturation: Math.max(0, Math.min(baseColor.value.saturation +
                        (index === 0
                            ? -paletteRanges.splitComp.satShift
                            : paletteRanges.splitComp.satShift), 100)),
                    lightness: Math.max(0, Math.min(baseColor.value.lightness +
                        (index === 0
                            ? -paletteRanges.splitComp.lightShift
                            : paletteRanges.splitComp.lightShift), 100)),
                    alpha: enableAlpha ? Math.random() : 1
                },
                format: 'hsl'
            };
            const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL);
            return create.paletteItem(adjustedColor, enableAlpha);
        })
    ];
    return await idb.savePaletteToDB('splitComplementary', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRDb21wbGVtZW50YXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscURBQXFEO0FBR3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQ3hDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDakMsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDO0FBQzFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDekIsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBRW5ELE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3ZDLFFBQWdCLEVBQ2hCLFdBQXVCLEVBQ3ZCLFdBQW9CLEVBQ3BCLFNBQWtCLEVBQ2xCLFNBQWtCLEVBQ2xCLFVBQW1CO0lBRW5CLE1BQU0sa0NBQWtDLEdBQUcsTUFBTSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUUzRSxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxXQUFXO1lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQ1gsMkRBQTJELENBQzNELENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUNoQyxvQkFBb0IsRUFDcEIsRUFBRSxFQUNGLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUNuQixDQUFDLEVBQ0Qsa0NBQWtDLEVBQ2xDLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsQ0FDVixDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdELE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckUsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQztRQUMxQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBUTtnQkFDeEIsS0FBSyxFQUFFO29CQUNOLEdBQUc7b0JBQ0gsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ25CLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVTt3QkFDekIsQ0FBQyxLQUFLLEtBQUssQ0FBQzs0QkFDWCxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVE7NEJBQ25DLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUNyQyxHQUFHLENBQ0gsQ0FDRDtvQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbEIsQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQ1AsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTO3dCQUN4QixDQUFDLEtBQUssS0FBSyxDQUFDOzRCQUNYLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVTs0QkFDckMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQ3ZDLEdBQUcsQ0FDSCxDQUNEO29CQUNELEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdEM7Z0JBQ0QsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDO1lBQ0YsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FDdkQsV0FBVyxDQUNKLENBQUM7WUFFVCxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQztLQUNGLENBQUM7SUFFRixPQUFPLE1BQU0sR0FBRyxDQUFDLGVBQWUsQ0FDL0Isb0JBQW9CLEVBQ3BCLFlBQVksRUFDWixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsQ0FDVixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvc3BsaXRDb21wbGVtZW50YXJ5LnRzXG5cbmltcG9ydCB7IEhTTCwgUGFsZXR0ZSwgUGFsZXR0ZUl0ZW0gfSBmcm9tICcuLi8uLi8uLi9pbmRleC9pbmRleCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vLi4vaWRiJztcbmltcG9ydCB7IHBhbGV0dGVTdXBlclV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uJztcblxuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgZGVmYXVsdHMgPSBjb25maWcuZGVmYXVsdHM7XG5jb25zdCBnZW5IdWVzID0gcGFsZXR0ZVN1cGVyVXRpbHMuZ2VuSHVlcztcbmNvbnN0IG1vZGUgPSBjb25maWcubW9kZTtcbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBjb25maWcuY29uc3RzLnBhbGV0dGUucmFuZ2VzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3BsaXRDb21wbGVtZW50YXJ5KFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogSFNMIHwgbnVsbCxcblx0ZW5hYmxlQWxwaGE6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudFNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKG51bUJveGVzIDwgMykge1xuXHRcdGlmIChtb2RlLmxvZ1dhcm5pbmdzKVxuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHQnU3BsaXQgY29tcGxlbWVudGFyeSBwYWxldHRlIHJlcXVpcmVzIGF0IGxlYXN0IDMgc3dhdGNoZXMuJ1xuXHRcdFx0KTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCdzcGxpdENvbXBsZW1lbnRhcnknLFxuXHRcdFx0W10sXG5cdFx0XHRkZWZhdWx0cy5jb2xvcnMuaHNsLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnRTcGxpdENvbXBsZW1lbnRhcnlQYWxldHRlSUQsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFyayxcblx0XHRcdGxpbWl0R3JheSxcblx0XHRcdGxpbWl0TGlnaHRcblx0XHQpO1xuXHR9XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBbaHVlMSwgaHVlMl0gPSBnZW5IdWVzLnNwbGl0Q29tcGxlbWVudGFyeShiYXNlQ29sb3IudmFsdWUuaHVlKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW1xuXHRcdGNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IsIGVuYWJsZUFscGhhKSxcblx0XHQuLi5baHVlMSwgaHVlMl0ubWFwKChodWUsIGluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCBhZGp1c3RlZEhTTDogSFNMID0ge1xuXHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdGh1ZSxcblx0XHRcdFx0XHRzYXR1cmF0aW9uOiBNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy5zcGxpdENvbXAuc2F0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy5zcGxpdENvbXAuc2F0U2hpZnQpLFxuXHRcdFx0XHRcdFx0XHQxMDBcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGxpZ2h0bmVzczogTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy5zcGxpdENvbXAubGlnaHRTaGlmdFxuXHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnNwbGl0Q29tcC5saWdodFNoaWZ0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRhbHBoYTogZW5hYmxlQWxwaGEgPyBNYXRoLnJhbmRvbSgpIDogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgYWRqdXN0ZWRDb2xvciA9IHV0aWxzLmNvbnZlcnNpb24uZ2VuQWxsQ29sb3JWYWx1ZXMoXG5cdFx0XHRcdGFkanVzdGVkSFNMXG5cdFx0XHQpIGFzIEhTTDtcblxuXHRcdFx0cmV0dXJuIGNyZWF0ZS5wYWxldHRlSXRlbShhZGp1c3RlZENvbG9yLCBlbmFibGVBbHBoYSk7XG5cdFx0fSlcblx0XTtcblxuXHRyZXR1cm4gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnc3BsaXRDb21wbGVtZW50YXJ5Jyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdG51bUJveGVzLFxuXHRcdGVuYWJsZUFscGhhLFxuXHRcdGxpbWl0RGFyayxcblx0XHRsaW1pdEdyYXksXG5cdFx0bGltaXRMaWdodFxuXHQpO1xufVxuIl19