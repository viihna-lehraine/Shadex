// File: src/palette/main/types/splitComplementary.js
import { core, utils } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { IDBManager } from '../../../idb/index.js';
import { paletteSuperUtils } from '../../common/index.js';
const create = paletteSuperUtils.create;
const defaults = data.defaults;
const genHues = paletteSuperUtils.genHues;
const mode = data.mode;
const paletteRanges = data.consts.paletteRanges;
const idb = IDBManager.getInstance();
export async function splitComplementary(args) {
    const currentSplitComplementaryPaletteID = await idb.getCurrentPaletteID();
    if (args.numBoxes < 3) {
        if (mode.warnLogs)
            console.warn('Split complementary palette requires at least 3 swatches.');
        return utils.palette.createObject('splitComplementary', [], core.brandColor.asHSL(defaults.colors.hsl), 0, currentSplitComplementaryPaletteID, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    }
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const [hue1, hue2] = genHues.splitComplementary(baseColor.value.hue);
    const paletteItems = [
        create.paletteItem(baseColor, args.enableAlpha),
        ...[hue1, hue2].map((hue, index) => {
            const adjustedHSL = {
                value: {
                    hue: core.brand.asRadial(hue),
                    saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                        (index === 0
                            ? -paletteRanges.splitComp.satShift
                            : paletteRanges.splitComp.satShift), 100))),
                    lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                        (index === 0
                            ? -paletteRanges.splitComp.lightShift
                            : paletteRanges.splitComp.lightShift), 100))),
                    alpha: args.enableAlpha
                        ? core.brand.asAlphaRange(Math.random())
                        : core.brand.asAlphaRange(1)
                },
                format: 'hsl'
            };
            const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL);
            return create.paletteItem(adjustedColor, args.enableAlpha);
        })
    ];
    const splitComplementaryPalette = await idb.savePaletteToDB('splitComplementary', paletteItems, baseColor, args.numBoxes, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!splitComplementaryPalette)
        throw new Error('Split complementary palette is either null or undefined.');
    else
        return splitComplementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRDb21wbGVtZW50YXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscURBQXFEO0FBUXJELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDeEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMvQixNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUN2QixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUVoRCxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFckMsTUFBTSxDQUFDLEtBQUssVUFBVSxrQkFBa0IsQ0FDdkMsSUFBb0I7SUFFcEIsTUFBTSxrQ0FBa0MsR0FBRyxNQUFNLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBRTNFLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRO1lBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQ1gsMkRBQTJELENBQzNELENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUNoQyxvQkFBb0IsRUFDcEIsRUFBRSxFQUNGLElB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LCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9tYWluL3R5cGVzL3NwbGl0Q29tcGxlbWVudGFyeS5qc1xuXG5pbXBvcnQge1xuXHRHZW5QYWxldHRlQXJncyxcblx0SFNMLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlSXRlbVxufSBmcm9tICcuLi8uLi8uLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlLCB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBJREJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vLi4vaWRiL2luZGV4LmpzJztcbmltcG9ydCB7IHBhbGV0dGVTdXBlclV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uL2luZGV4LmpzJztcblxuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgZGVmYXVsdHMgPSBkYXRhLmRlZmF1bHRzO1xuY29uc3QgZ2VuSHVlcyA9IHBhbGV0dGVTdXBlclV0aWxzLmdlbkh1ZXM7XG5jb25zdCBtb2RlID0gZGF0YS5tb2RlO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGRhdGEuY29uc3RzLnBhbGV0dGVSYW5nZXM7XG5cbmNvbnN0IGlkYiA9IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNwbGl0Q29tcGxlbWVudGFyeShcblx0YXJnczogR2VuUGFsZXR0ZUFyZ3Ncbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBjdXJyZW50U3BsaXRDb21wbGVtZW50YXJ5UGFsZXR0ZUlEID0gYXdhaXQgaWRiLmdldEN1cnJlbnRQYWxldHRlSUQoKTtcblxuXHRpZiAoYXJncy5udW1Cb3hlcyA8IDMpIHtcblx0XHRpZiAobW9kZS53YXJuTG9ncylcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0J1NwbGl0IGNvbXBsZW1lbnRhcnkgcGFsZXR0ZSByZXF1aXJlcyBhdCBsZWFzdCAzIHN3YXRjaGVzLidcblx0XHRcdCk7XG5cblx0XHRyZXR1cm4gdXRpbHMucGFsZXR0ZS5jcmVhdGVPYmplY3QoXG5cdFx0XHQnc3BsaXRDb21wbGVtZW50YXJ5Jyxcblx0XHRcdFtdLFxuXHRcdFx0Y29yZS5icmFuZENvbG9yLmFzSFNMKGRlZmF1bHRzLmNvbG9ycy5oc2wpLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnRTcGxpdENvbXBsZW1lbnRhcnlQYWxldHRlSUQsXG5cdFx0XHRhcmdzLmVuYWJsZUFscGhhLFxuXHRcdFx0YXJncy5saW1pdERhcmssXG5cdFx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRcdGFyZ3MubGltaXRMaWdodFxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGFyZ3MuY3VzdG9tQ29sb3IsIGFyZ3MuZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBbaHVlMSwgaHVlMl0gPSBnZW5IdWVzLnNwbGl0Q29tcGxlbWVudGFyeShiYXNlQ29sb3IudmFsdWUuaHVlKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW1xuXHRcdGNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IsIGFyZ3MuZW5hYmxlQWxwaGEpLFxuXHRcdC4uLltodWUxLCBodWUyXS5tYXAoKGh1ZSwgaW5kZXgpID0+IHtcblx0XHRcdGNvbnN0IGFkanVzdGVkSFNMOiBIU0wgPSB7XG5cdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0aHVlOiBjb3JlLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdFx0KGluZGV4ID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLnNhdFNoaWZ0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy5zcGxpdENvbXAuc2F0U2hpZnQpLFxuXHRcdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgK1xuXHRcdFx0XHRcdFx0XHRcdFx0KGluZGV4ID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLmxpZ2h0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnNwbGl0Q29tcC5saWdodFNoaWZ0KSxcblx0XHRcdFx0XHRcdFx0XHQxMDBcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0YWxwaGE6IGFyZ3MuZW5hYmxlQWxwaGFcblx0XHRcdFx0XHRcdD8gY29yZS5icmFuZC5hc0FscGhhUmFuZ2UoTWF0aC5yYW5kb20oKSlcblx0XHRcdFx0XHRcdDogY29yZS5icmFuZC5hc0FscGhhUmFuZ2UoMSlcblx0XHRcdFx0fSxcblx0XHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdFx0fTtcblx0XHRcdGNvbnN0IGFkanVzdGVkQ29sb3IgPSB1dGlscy5jb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKFxuXHRcdFx0XHRhZGp1c3RlZEhTTFxuXHRcdFx0KSBhcyBIU0w7XG5cblx0XHRcdHJldHVybiBjcmVhdGUucGFsZXR0ZUl0ZW0oYWRqdXN0ZWRDb2xvciwgYXJncy5lbmFibGVBbHBoYSk7XG5cdFx0fSlcblx0XTtcblxuXHRjb25zdCBzcGxpdENvbXBsZW1lbnRhcnlQYWxldHRlID0gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnc3BsaXRDb21wbGVtZW50YXJ5Jyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdGFyZ3MubnVtQm94ZXMsXG5cdFx0YXJncy5lbmFibGVBbHBoYSxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIXNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGUpXG5cdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0J1NwbGl0IGNvbXBsZW1lbnRhcnkgcGFsZXR0ZSBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJ1xuXHRcdCk7XG5cdGVsc2UgcmV0dXJuIHNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGU7XG59XG4iXX0=