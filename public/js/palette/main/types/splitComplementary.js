// File: src/palette/main/types/splitComplementary.js
import { core, utils } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { IDBManager } from '../../../idb/index.js';
import { paletteSuperUtils } from '../../common/index.js';
import { ui } from '../../../ui/index.js';
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
const paletteRanges = data.consts.paletteRanges;
const idb = IDBManager.getInstance();
// *DEV-NOTE* update to reflect the fact this will always return 3 color swatches
export async function splitComplementary(args) {
    // ensure exactly 3 color swatches
    if (args.numBoxes < 3) {
        ui.enforceSwatchRules(3, 3);
    }
    // base color setup
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    // generate split complementary hues
    const [hue1, hue2] = genHues.splitComplementary(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add base color as the first item in the array
    const basePaletteItem = await create.paletteItem(baseColor, args.enableAlpha);
    paletteItems.push(basePaletteItem);
    for (const [index, hue] of [hue1, hue2].entries()) {
        const adjustedHSL = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index === 0
                        ? -paletteRanges.splitComp.satShift
                        : paletteRanges.splitComp.satShift), 100))),
                lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index === 0
                        ? -paletteRanges.splitComp.lightShift
                        : paletteRanges.splitComp.lightShift), 100))),
                alpha: args.enableAlpha
                    ? core.brand.asAlphaRange(Math.random())
                    : core.brand.asAlphaRange(1)
            },
            format: 'hsl'
        };
        const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL).hsl;
        if (adjustedColor) {
            const paletteItem = await create.paletteItem(adjustedColor, args.enableAlpha);
            paletteItems.push(paletteItem);
        }
    }
    const splitComplementaryPalette = await idb.savePaletteToDB('splitComplementary', paletteItems, baseColor, args.numBoxes, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!splitComplementaryPalette) {
        throw new Error('Split complementary palette is either null or undefined.');
    }
    return splitComplementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRDb21wbGVtZW50YXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscURBQXFEO0FBUXJELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFMUMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQ3hDLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztBQUMxQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUVoRCxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFckMsaUZBQWlGO0FBQ2pGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3ZDLElBQW9CO0lBRXBCLGtDQUFrQztJQUNsQyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdkIsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsbUJBQW1CO0lBQ25CLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFdkUsb0NBQW9DO0lBQ3BDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFckUsaUNBQWlDO0lBQ2pDLE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7SUFFdkMsZ0RBQWdEO0lBQ2hELE1BQU0sZUFBZSxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FDL0MsU0FBUyxFQUNULElBQUksQ0FBQyxXQUFXLENBQ2hCLENBQUM7SUFDRixZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRW5DLEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1FBQ25ELE1BQU0sV0FBVyxHQUFRO1lBQ3hCLEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO2dCQUM3QixVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQ2xDLElBQUksQ0FBQyxHQUFHLENBQ1AsQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQ1AsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVO29CQUN6QixDQUFDLEtBQUssS0FBSyxDQUFDO3dCQUNYLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUTt3QkFDbkMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQ3JDLEdBQUcsQ0FDSCxDQUNELENBQ0Q7Z0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNqQyxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUztvQkFDeEIsQ0FBQyxLQUFLLEtBQUssQ0FBQzt3QkFDWCxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVU7d0JBQ3JDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUN2QyxHQUFHLENBQ0gsQ0FDRCxDQUNEO2dCQUNELEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVztvQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztvQkFDeEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUM3QjtZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUNsQixLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUVyRCxJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ25CLE1BQU0sV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FDM0MsYUFBYSxFQUNiLElBQUksQ0FBQyxXQUFXLENBQ2hCLENBQUM7WUFFRixZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7SUFDRixDQUFDO0lBRUQsTUFBTSx5QkFBeUIsR0FBRyxNQUFNLEdBQUcsQ0FBQyxlQUFlLENBQzFELG9CQUFvQixFQUNwQixZQUFZLEVBQ1osU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxVQUFVLENBQ2YsQ0FBQztJQUVGLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQ2QsMERBQTBELENBQzFELENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyx5QkFBeUIsQ0FBQztBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkuanNcblxuaW1wb3J0IHtcblx0R2VuUGFsZXR0ZUFyZ3MsXG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUl0ZW1cbn0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgY29yZSwgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2lkYi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyB1aSB9IGZyb20gJy4uLy4uLy4uL3VpL2luZGV4LmpzJztcblxuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgZ2VuSHVlcyA9IHBhbGV0dGVTdXBlclV0aWxzLmdlbkh1ZXM7XG5jb25zdCBwYWxldHRlUmFuZ2VzID0gZGF0YS5jb25zdHMucGFsZXR0ZVJhbmdlcztcblxuY29uc3QgaWRiID0gSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4vLyAqREVWLU5PVEUqIHVwZGF0ZSB0byByZWZsZWN0IHRoZSBmYWN0IHRoaXMgd2lsbCBhbHdheXMgcmV0dXJuIDMgY29sb3Igc3dhdGNoZXNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzcGxpdENvbXBsZW1lbnRhcnkoXG5cdGFyZ3M6IEdlblBhbGV0dGVBcmdzXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Ly8gZW5zdXJlIGV4YWN0bHkgMyBjb2xvciBzd2F0Y2hlc1xuXHRpZiAoYXJncy5udW1Cb3hlcyA8IDMpIHtcblx0XHR1aS5lbmZvcmNlU3dhdGNoUnVsZXMoMywgMyk7XG5cdH1cblxuXHQvLyBiYXNlIGNvbG9yIHNldHVwXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoYXJncy5jdXN0b21Db2xvciwgYXJncy5lbmFibGVBbHBoYSk7XG5cblx0Ly8gZ2VuZXJhdGUgc3BsaXQgY29tcGxlbWVudGFyeSBodWVzXG5cdGNvbnN0IFtodWUxLCBodWUyXSA9IGdlbkh1ZXMuc3BsaXRDb21wbGVtZW50YXJ5KGJhc2VDb2xvci52YWx1ZS5odWUpO1xuXG5cdC8vIGluaXRpYWxpemUgcGFsZXR0ZSBpdGVtcyBhcnJheVxuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXTtcblxuXHQvLyBhZGQgYmFzZSBjb2xvciBhcyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgYXJyYXlcblx0Y29uc3QgYmFzZVBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKFxuXHRcdGJhc2VDb2xvcixcblx0XHRhcmdzLmVuYWJsZUFscGhhXG5cdCk7XG5cdHBhbGV0dGVJdGVtcy5wdXNoKGJhc2VQYWxldHRlSXRlbSk7XG5cblx0Zm9yIChjb25zdCBbaW5kZXgsIGh1ZV0gb2YgW2h1ZTEsIGh1ZTJdLmVudHJpZXMoKSkge1xuXHRcdGNvbnN0IGFkanVzdGVkSFNMOiBIU0wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IGNvcmUuYnJhbmQuYXNSYWRpYWwoaHVlKSxcblx0XHRcdFx0c2F0dXJhdGlvbjogY29yZS5icmFuZC5hc1BlcmNlbnRpbGUoXG5cdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLnNhdFNoaWZ0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLnNhdFNoaWZ0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLmxpZ2h0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy5zcGxpdENvbXAubGlnaHRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGFyZ3MuZW5hYmxlQWxwaGFcblx0XHRcdFx0XHQ/IGNvcmUuYnJhbmQuYXNBbHBoYVJhbmdlKE1hdGgucmFuZG9tKCkpXG5cdFx0XHRcdFx0OiBjb3JlLmJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0Y29uc3QgYWRqdXN0ZWRDb2xvciA9XG5cdFx0XHR1dGlscy5jb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKGFkanVzdGVkSFNMKS5oc2w7XG5cblx0XHRpZiAoYWRqdXN0ZWRDb2xvcikge1xuXHRcdFx0Y29uc3QgcGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0XHRcdGFkanVzdGVkQ29sb3IsXG5cdFx0XHRcdGFyZ3MuZW5hYmxlQWxwaGFcblx0XHRcdCk7XG5cblx0XHRcdHBhbGV0dGVJdGVtcy5wdXNoKHBhbGV0dGVJdGVtKTtcblx0XHR9XG5cdH1cblxuXHRjb25zdCBzcGxpdENvbXBsZW1lbnRhcnlQYWxldHRlID0gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnc3BsaXRDb21wbGVtZW50YXJ5Jyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdGFyZ3MubnVtQm94ZXMsXG5cdFx0YXJncy5lbmFibGVBbHBoYSxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHRpZiAoIXNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHQnU3BsaXQgY29tcGxlbWVudGFyeSBwYWxldHRlIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nXG5cdFx0KTtcblx0fVxuXG5cdHJldHVybiBzcGxpdENvbXBsZW1lbnRhcnlQYWxldHRlO1xufVxuIl19