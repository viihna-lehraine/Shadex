// File: src/palette/main/types/splitComplementary.ts
import { idb } from '../../../idb.js';
import { config } from '../../../config.js';
import { utils } from '../../../common.js';
import { paletteUtils } from '../../utils.js';
const create = paletteUtils.create;
const defaults = config.defaults;
const genHues = paletteUtils.genHues;
const paletteRanges = config.consts.palette.ranges;
export async function splitComplementary(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const currentSplitComplementaryPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 3) {
        console.warn('Split complementary palette requires at least 3 swatches.');
        return utils.palette.createObject('splitComplementary', [], defaults.colors.hsl, 0, currentSplitComplementaryPaletteID, enableAlpha, limitBright, limitDark, limitGray);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const [hue1, hue2] = genHues.splitComp(baseColor.value.hue);
    const paletteItems = [
        paletteUtils.create.paletteItem(baseColor, enableAlpha),
        ...[hue1, hue2].map((hue, index) => {
            const adjustedHSL = {
                value: {
                    hue,
                    saturation: Math.max(0, Math.min(baseColor.value.saturation +
                        (index === 0
                            ? -paletteRanges.splitComp.satShift
                            : paletteRanges.splitComp.satShift), 100)),
                    lightness: Math.max(0, Math.min(baseColor.value.lightness +
                        (index === 0
                            ? -paletteRanges.splitComp.lightShift
                            : paletteRanges.splitComp.lightShift), 100)),
                    alpha: enableAlpha ? Math.random() : 1
                },
                format: 'hsl'
            };
            const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL);
            return paletteUtils.create.paletteItem(adjustedColor, enableAlpha);
        })
    ];
    return await idb.savePaletteToDB('splitComplementary', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRDb21wbGVtZW50YXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscURBQXFEO0FBR3JELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTNDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDbkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3JDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUVuRCxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUN2QyxRQUFnQixFQUNoQixXQUF1QixFQUN2QixXQUFvQixFQUNwQixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQjtJQUVsQixNQUFNLGtDQUFrQyxHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFM0UsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLElBQUksQ0FDWCwyREFBMkQsQ0FDM0QsQ0FBQztRQUVGLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQ2hDLG9CQUFvQixFQUNwQixFQUFFLEVBQ0YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQ25CLENBQUMsRUFDRCxrQ0FBa0MsRUFDbEMsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUQsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7UUFDdkQsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEMsTUFBTSxXQUFXLEdBQVE7Z0JBQ3hCLEtBQUssRUFBRTtvQkFDTixHQUFHO29CQUNILFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUNuQixDQUFDLEVBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7d0JBQ3pCLENBQUMsS0FBSyxLQUFLLENBQUM7NEJBQ1gsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFROzRCQUNuQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFDckMsR0FBRyxDQUNILENBQ0Q7b0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ2xCLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUzt3QkFDeEIsQ0FBQyxLQUFLLEtBQUssQ0FBQzs0QkFDWCxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVU7NEJBQ3JDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUN2QyxHQUFHLENBQ0gsQ0FDRDtvQkFDRCxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3RDO2dCQUNELE1BQU0sRUFBRSxLQUFLO2FBQ2IsQ0FBQztZQUNGLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQ3ZELFdBQVcsQ0FDSixDQUFDO1lBRVQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDO0tBQ0YsQ0FBQztJQUVGLE9BQU8sTUFBTSxHQUFHLENBQUMsZUFBZSxDQUMvQixvQkFBb0IsRUFDcEIsWUFBWSxFQUNaLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9zcGxpdENvbXBsZW1lbnRhcnkudHNcblxuaW1wb3J0IHsgSFNMLCBQYWxldHRlLCBQYWxldHRlSXRlbSB9IGZyb20gJy4uLy4uLy4uL2luZGV4L2luZGV4JztcbmltcG9ydCB7IGlkYiB9IGZyb20gJy4uLy4uLy4uL2lkYic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgcGFsZXR0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5jb25zdCBjcmVhdGUgPSBwYWxldHRlVXRpbHMuY3JlYXRlO1xuY29uc3QgZGVmYXVsdHMgPSBjb25maWcuZGVmYXVsdHM7XG5jb25zdCBnZW5IdWVzID0gcGFsZXR0ZVV0aWxzLmdlbkh1ZXM7XG5jb25zdCBwYWxldHRlUmFuZ2VzID0gY29uZmlnLmNvbnN0cy5wYWxldHRlLnJhbmdlcztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNwbGl0Q29tcGxlbWVudGFyeShcblx0bnVtQm94ZXM6IG51bWJlcixcblx0Y3VzdG9tQ29sb3I6IEhTTCB8IG51bGwsXG5cdGVuYWJsZUFscGhhOiBib29sZWFuLFxuXHRsaW1pdEJyaWdodDogYm9vbGVhbixcblx0bGltaXREYXJrOiBib29sZWFuLFxuXHRsaW1pdEdyYXk6IGJvb2xlYW5cbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBjdXJyZW50U3BsaXRDb21wbGVtZW50YXJ5UGFsZXR0ZUlEID0gYXdhaXQgaWRiLmdldEN1cnJlbnRQYWxldHRlSUQoKTtcblxuXHRpZiAobnVtQm94ZXMgPCAzKSB7XG5cdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0J1NwbGl0IGNvbXBsZW1lbnRhcnkgcGFsZXR0ZSByZXF1aXJlcyBhdCBsZWFzdCAzIHN3YXRjaGVzLidcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHV0aWxzLnBhbGV0dGUuY3JlYXRlT2JqZWN0KFxuXHRcdFx0J3NwbGl0Q29tcGxlbWVudGFyeScsXG5cdFx0XHRbXSxcblx0XHRcdGRlZmF1bHRzLmNvbG9ycy5oc2wsXG5cdFx0XHQwLFxuXHRcdFx0Y3VycmVudFNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGVJRCxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXRCcmlnaHQsXG5cdFx0XHRsaW1pdERhcmssXG5cdFx0XHRsaW1pdEdyYXlcblx0XHQpO1xuXHR9XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBbaHVlMSwgaHVlMl0gPSBnZW5IdWVzLnNwbGl0Q29tcChiYXNlQ29sb3IudmFsdWUuaHVlKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW1xuXHRcdHBhbGV0dGVVdGlscy5jcmVhdGUucGFsZXR0ZUl0ZW0oYmFzZUNvbG9yLCBlbmFibGVBbHBoYSksXG5cdFx0Li4uW2h1ZTEsIGh1ZTJdLm1hcCgoaHVlLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgYWRqdXN0ZWRIU0w6IEhTTCA9IHtcblx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRodWUsXG5cdFx0XHRcdFx0c2F0dXJhdGlvbjogTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLnNhdFNoaWZ0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLnNhdFNoaWZ0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRsaWdodG5lc3M6IE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMuc3BsaXRDb21wLmxpZ2h0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy5zcGxpdENvbXAubGlnaHRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0YWxwaGE6IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdFx0fTtcblx0XHRcdGNvbnN0IGFkanVzdGVkQ29sb3IgPSB1dGlscy5jb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKFxuXHRcdFx0XHRhZGp1c3RlZEhTTFxuXHRcdFx0KSBhcyBIU0w7XG5cblx0XHRcdHJldHVybiBwYWxldHRlVXRpbHMuY3JlYXRlLnBhbGV0dGVJdGVtKGFkanVzdGVkQ29sb3IsIGVuYWJsZUFscGhhKTtcblx0XHR9KVxuXHRdO1xuXG5cdHJldHVybiBhd2FpdCBpZGIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCdzcGxpdENvbXBsZW1lbnRhcnknLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRiYXNlQ29sb3IsXG5cdFx0bnVtQm94ZXMsXG5cdFx0ZW5hYmxlQWxwaGEsXG5cdFx0bGltaXRCcmlnaHQsXG5cdFx0bGltaXREYXJrLFxuXHRcdGxpbWl0R3JheVxuXHQpO1xufVxuIl19