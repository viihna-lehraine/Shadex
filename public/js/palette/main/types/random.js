// File: src/paletteGen/palettes/types/random.ts
import { idb } from '../../../idb.js';
import { utils } from '../../../common.js';
import { paletteUtils } from '../../utils.js';
const create = paletteUtils.create;
const update = paletteUtils.sub.update;
export async function random(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const baseColor = create.baseColor(customColor, enableAlpha);
    const paletteItems = [
        paletteUtils.create.paletteItem(baseColor, enableAlpha)
    ];
    for (let i = 1; i < numBoxes; i++) {
        const randomColor = utils.random.hsl(enableAlpha);
        paletteItems.push(create.paletteItem(randomColor, enableAlpha));
        update.colorBox(randomColor, i);
    }
    return await idb.savePaletteToDB('random', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBR2hELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFM0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUNuQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUV2QyxNQUFNLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FDM0IsUUFBZ0IsRUFDaEIsV0FBdUIsRUFDdkIsV0FBb0IsRUFDcEIsV0FBb0IsRUFDcEIsU0FBa0IsRUFDbEIsU0FBa0I7SUFFbEIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7S0FDdkQsQ0FBQztJQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVsRCxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFFaEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE9BQU8sTUFBTSxHQUFHLENBQUMsZUFBZSxDQUMvQixRQUFRLEVBQ1IsWUFBWSxFQUNaLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGVHZW4vcGFsZXR0ZXMvdHlwZXMvcmFuZG9tLnRzXG5cbmltcG9ydCB7IEhTTCwgUGFsZXR0ZSwgUGFsZXR0ZUl0ZW0gfSBmcm9tICcuLi8uLi8uLi9pbmRleC9pbmRleCc7XG5pbXBvcnQgeyBpZGIgfSBmcm9tICcuLi8uLi8uLi9pZGInO1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgcGFsZXR0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5jb25zdCBjcmVhdGUgPSBwYWxldHRlVXRpbHMuY3JlYXRlO1xuY29uc3QgdXBkYXRlID0gcGFsZXR0ZVV0aWxzLnN1Yi51cGRhdGU7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByYW5kb20oXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsLFxuXHRlbmFibGVBbHBoYTogYm9vbGVhbixcblx0bGltaXRCcmlnaHQ6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXG5cdFx0cGFsZXR0ZVV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IsIGVuYWJsZUFscGhhKVxuXHRdO1xuXG5cdGZvciAobGV0IGkgPSAxOyBpIDwgbnVtQm94ZXM7IGkrKykge1xuXHRcdGNvbnN0IHJhbmRvbUNvbG9yID0gdXRpbHMucmFuZG9tLmhzbChlbmFibGVBbHBoYSk7XG5cblx0XHRwYWxldHRlSXRlbXMucHVzaChjcmVhdGUucGFsZXR0ZUl0ZW0ocmFuZG9tQ29sb3IsIGVuYWJsZUFscGhhKSk7XG5cblx0XHR1cGRhdGUuY29sb3JCb3gocmFuZG9tQ29sb3IsIGkpO1xuXHR9XG5cblx0cmV0dXJuIGF3YWl0IGlkYi5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J3JhbmRvbScsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRudW1Cb3hlcyxcblx0XHRlbmFibGVBbHBoYSxcblx0XHRsaW1pdEJyaWdodCxcblx0XHRsaW1pdERhcmssXG5cdFx0bGltaXRHcmF5XG5cdCk7XG59XG4iXX0=