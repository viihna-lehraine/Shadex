// File: src/paletteGen/palettes/types/random.js
import { IDBManager } from '../../../classes/idb/index.js';
import { paletteHelpers, paletteSuperUtils } from '../../common/index.js';
import { utils } from '../../../common/index.js';
const create = paletteSuperUtils.create;
const update = paletteHelpers.update;
const idb = IDBManager.getInstance();
export async function random(args) {
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const paletteItems = [
        await create.paletteItem(baseColor, args.enableAlpha)
    ];
    for (let i = 1; i < args.numBoxes; i++) {
        const randomColor = utils.random.hsl(args.enableAlpha);
        const nextPaletteItem = await create.paletteItem(randomColor, args.enableAlpha);
        paletteItems.push(nextPaletteItem);
        update.colorBox(randomColor, i);
    }
    const randomPalette = await idb.savePaletteToDB('random', paletteItems, baseColor, args.numBoxes, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!randomPalette)
        throw new Error('Random palette is either null or undefined.');
    else
        return randomPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBR2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWpELE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDO0FBRXJDLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxJQUFvQjtJQUNoRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sWUFBWSxHQUFrQjtRQUNuQyxNQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDckQsQ0FBQztJQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sZUFBZSxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FDL0MsV0FBVyxFQUNYLElBQUksQ0FBQyxXQUFXLENBQ2hCLENBQUM7UUFFRixZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRW5DLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLGFBQWEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxlQUFlLENBQzlDLFFBQVEsRUFDUixZQUFZLEVBQ1osU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxVQUFVLENBQ2YsQ0FBQztJQUVGLElBQUksQ0FBQyxhQUFhO1FBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQzs7UUFDM0QsT0FBTyxhQUFhLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlR2VuL3BhbGV0dGVzL3R5cGVzL3JhbmRvbS5qc1xuXG5pbXBvcnQgeyBHZW5QYWxldHRlQXJncywgUGFsZXR0ZSwgUGFsZXR0ZUl0ZW0gfSBmcm9tICcuLi8uLi8uLi9pbmRleC9pbmRleC5qcyc7XG5pbXBvcnQgeyBJREJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vLi4vY2xhc3Nlcy9pZGIvaW5kZXguanMnO1xuaW1wb3J0IHsgcGFsZXR0ZUhlbHBlcnMsIHBhbGV0dGVTdXBlclV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcblxuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgdXBkYXRlID0gcGFsZXR0ZUhlbHBlcnMudXBkYXRlO1xuXG5jb25zdCBpZGIgPSBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByYW5kb20oYXJnczogR2VuUGFsZXR0ZUFyZ3MpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihhcmdzLmN1c3RvbUNvbG9yLCBhcmdzLmVuYWJsZUFscGhhKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW1xuXHRcdGF3YWl0IGNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IsIGFyZ3MuZW5hYmxlQWxwaGEpXG5cdF07XG5cblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLm51bUJveGVzOyBpKyspIHtcblx0XHRjb25zdCByYW5kb21Db2xvciA9IHV0aWxzLnJhbmRvbS5oc2woYXJncy5lbmFibGVBbHBoYSk7XG5cdFx0Y29uc3QgbmV4dFBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKFxuXHRcdFx0cmFuZG9tQ29sb3IsXG5cdFx0XHRhcmdzLmVuYWJsZUFscGhhXG5cdFx0KTtcblxuXHRcdHBhbGV0dGVJdGVtcy5wdXNoKG5leHRQYWxldHRlSXRlbSk7XG5cblx0XHR1cGRhdGUuY29sb3JCb3gocmFuZG9tQ29sb3IsIGkpO1xuXHR9XG5cblx0Y29uc3QgcmFuZG9tUGFsZXR0ZSA9IGF3YWl0IGlkYi5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J3JhbmRvbScsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRhcmdzLm51bUJveGVzLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGEsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0aWYgKCFyYW5kb21QYWxldHRlKVxuXHRcdHRocm93IG5ldyBFcnJvcignUmFuZG9tIHBhbGV0dGUgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXHRlbHNlIHJldHVybiByYW5kb21QYWxldHRlO1xufVxuIl19