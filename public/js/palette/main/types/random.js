// File: src/paletteGen/palettes/types/random.ts
import { idb } from '../../../idb';
import { paletteHelpers, paletteSuperUtils } from '../../common';
import { utils } from '../../../common';
const create = paletteSuperUtils.create;
const update = paletteHelpers.update;
export async function random(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const baseColor = create.baseColor(customColor, enableAlpha);
    const paletteItems = [
        create.paletteItem(baseColor, enableAlpha)
    ];
    for (let i = 1; i < numBoxes; i++) {
        const randomColor = utils.random.hsl(enableAlpha);
        paletteItems.push(create.paletteItem(randomColor, enableAlpha));
        update.colorBox(randomColor, i);
    }
    return await idb.savePaletteToDB('random', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9yYW5kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBR2hELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQ3hDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUM7QUFFckMsTUFBTSxDQUFDLEtBQUssVUFBVSxNQUFNLENBQzNCLFFBQWdCLEVBQ2hCLFdBQXVCLEVBQ3ZCLFdBQW9CLEVBQ3BCLFNBQWtCLEVBQ2xCLFNBQWtCLEVBQ2xCLFVBQW1CO0lBRW5CLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdELE1BQU0sWUFBWSxHQUFrQjtRQUNuQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7S0FDMUMsQ0FBQztJQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVsRCxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFFaEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE9BQU8sTUFBTSxHQUFHLENBQUMsZUFBZSxDQUMvQixRQUFRLEVBQ1IsWUFBWSxFQUNaLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxDQUNWLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGVHZW4vcGFsZXR0ZXMvdHlwZXMvcmFuZG9tLnRzXG5cbmltcG9ydCB7IEhTTCwgUGFsZXR0ZSwgUGFsZXR0ZUl0ZW0gfSBmcm9tICcuLi8uLi8uLi9pbmRleC9pbmRleCc7XG5pbXBvcnQgeyBpZGIgfSBmcm9tICcuLi8uLi8uLi9pZGInO1xuaW1wb3J0IHsgcGFsZXR0ZUhlbHBlcnMsIHBhbGV0dGVTdXBlclV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uJztcblxuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgdXBkYXRlID0gcGFsZXR0ZUhlbHBlcnMudXBkYXRlO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmFuZG9tKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogSFNMIHwgbnVsbCxcblx0ZW5hYmxlQWxwaGE6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXG5cdFx0Y3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvciwgZW5hYmxlQWxwaGEpXG5cdF07XG5cblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBudW1Cb3hlczsgaSsrKSB7XG5cdFx0Y29uc3QgcmFuZG9tQ29sb3IgPSB1dGlscy5yYW5kb20uaHNsKGVuYWJsZUFscGhhKTtcblxuXHRcdHBhbGV0dGVJdGVtcy5wdXNoKGNyZWF0ZS5wYWxldHRlSXRlbShyYW5kb21Db2xvciwgZW5hYmxlQWxwaGEpKTtcblxuXHRcdHVwZGF0ZS5jb2xvckJveChyYW5kb21Db2xvciwgaSk7XG5cdH1cblxuXHRyZXR1cm4gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQncmFuZG9tJyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdG51bUJveGVzLFxuXHRcdGVuYWJsZUFscGhhLFxuXHRcdGxpbWl0RGFyayxcblx0XHRsaW1pdEdyYXksXG5cdFx0bGltaXRMaWdodFxuXHQpO1xufVxuIl19