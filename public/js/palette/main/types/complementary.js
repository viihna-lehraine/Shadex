// File: src/palette/main/types/complementary.ts
import { config } from '../../../config';
import { idb } from '../../../idb';
import { paletteSuperUtils } from '../../common';
import { utils } from '../../../common';
const create = paletteSuperUtils.create;
const defaults = config.defaults;
const mode = config.mode;
const paletteRanges = config.consts.palette.ranges;
export async function complementary(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const currentComplementaryPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        if (mode.logWarnings)
            console.warn('Complementary palette requires at least 2 swatches.');
        return utils.palette.createObject('complementary', [], defaults.colors.hsl, 0, currentComplementaryPaletteID, enableAlpha, limitDark, limitGray, limitLight);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const hues = Array.from({ length: numBoxes - 1 }, (_, _i) => (complementaryHue +
        (Math.random() * paletteRanges.comp.hueShift -
            paletteRanges.comp.hueShift / 2)) %
        360);
    const paletteItems = hues.map((hue, i) => {
        const saturation = Math.min(100, Math.max(0, baseColor.value.saturation + (Math.random() - 0.5) * 15));
        const lightness = Math.min(100, Math.max(0, baseColor.value.lightness + (i % 2 === 0 ? -10 : 10)));
        const alpha = enableAlpha ? Math.random() : 1;
        const newColor = {
            value: { hue, saturation, lightness, alpha },
            format: 'hsl'
        };
        return create.paletteItem(newColor, enableAlpha);
    });
    paletteItems.unshift(create.paletteItem(baseColor, enableAlpha));
    return await idb.savePaletteToDB('complementary', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7QUFHaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDeEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ3pCLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUVuRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDbEMsUUFBZ0IsRUFDaEIsV0FBdUIsRUFDdkIsV0FBb0IsRUFDcEIsU0FBa0IsRUFDbEIsU0FBa0IsRUFDbEIsVUFBbUI7SUFFbkIsTUFBTSw2QkFBNkIsR0FBRyxNQUFNLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBRXRFLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFdBQVc7WUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQ2hDLGVBQWUsRUFDZixFQUFFLEVBQ0YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQ25CLENBQUMsRUFDRCw2QkFBNkIsRUFDN0IsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxDQUNWLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUN0QixFQUFFLE1BQU0sRUFBRSxRQUFRLEdBQUcsQ0FBQyxFQUFFLEVBQ3hCLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQ1QsQ0FBQyxnQkFBZ0I7UUFDaEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQzNDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FDSixDQUFDO0lBQ0YsTUFBTSxZQUFZLEdBQWtCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDMUIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUNwRSxDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDekIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNqRSxDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLFFBQVEsR0FBUTtZQUNyQixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7WUFDNUMsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUVqRSxPQUFPLE1BQU0sR0FBRyxDQUFDLGVBQWUsQ0FDL0IsZUFBZSxFQUNmLFlBQVksRUFDWixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsQ0FDVixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IGlkYiB9IGZyb20gJy4uLy4uLy4uL2lkYic7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcbmNvbnN0IGRlZmF1bHRzID0gY29uZmlnLmRlZmF1bHRzO1xuY29uc3QgbW9kZSA9IGNvbmZpZy5tb2RlO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGNvbmZpZy5jb25zdHMucGFsZXR0ZS5yYW5nZXM7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wbGVtZW50YXJ5KFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogSFNMIHwgbnVsbCxcblx0ZW5hYmxlQWxwaGE6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudENvbXBsZW1lbnRhcnlQYWxldHRlSUQgPSBhd2FpdCBpZGIuZ2V0Q3VycmVudFBhbGV0dGVJRCgpO1xuXG5cdGlmIChudW1Cb3hlcyA8IDIpIHtcblx0XHRpZiAobW9kZS5sb2dXYXJuaW5ncylcblx0XHRcdGNvbnNvbGUud2FybignQ29tcGxlbWVudGFyeSBwYWxldHRlIHJlcXVpcmVzIGF0IGxlYXN0IDIgc3dhdGNoZXMuJyk7XG5cblx0XHRyZXR1cm4gdXRpbHMucGFsZXR0ZS5jcmVhdGVPYmplY3QoXG5cdFx0XHQnY29tcGxlbWVudGFyeScsXG5cdFx0XHRbXSxcblx0XHRcdGRlZmF1bHRzLmNvbG9ycy5oc2wsXG5cdFx0XHQwLFxuXHRcdFx0Y3VycmVudENvbXBsZW1lbnRhcnlQYWxldHRlSUQsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFyayxcblx0XHRcdGxpbWl0R3JheSxcblx0XHRcdGxpbWl0TGlnaHRcblx0XHQpO1xuXHR9XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBjb21wbGVtZW50YXJ5SHVlID0gKGJhc2VDb2xvci52YWx1ZS5odWUgKyAxODApICUgMzYwO1xuXHRjb25zdCBodWVzID0gQXJyYXkuZnJvbShcblx0XHR7IGxlbmd0aDogbnVtQm94ZXMgLSAxIH0sXG5cdFx0KF8sIF9pKSA9PlxuXHRcdFx0KGNvbXBsZW1lbnRhcnlIdWUgK1xuXHRcdFx0XHQoTWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuY29tcC5odWVTaGlmdCAtXG5cdFx0XHRcdFx0cGFsZXR0ZVJhbmdlcy5jb21wLmh1ZVNoaWZ0IC8gMikpICVcblx0XHRcdDM2MFxuXHQpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBodWVzLm1hcCgoaHVlLCBpKSA9PiB7XG5cdFx0Y29uc3Qgc2F0dXJhdGlvbiA9IE1hdGgubWluKFxuXHRcdFx0MTAwLFxuXHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAxNSlcblx0XHQpO1xuXHRcdGNvbnN0IGxpZ2h0bmVzcyA9IE1hdGgubWluKFxuXHRcdFx0MTAwLFxuXHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIChpICUgMiA9PT0gMCA/IC0xMCA6IDEwKSlcblx0XHQpO1xuXHRcdGNvbnN0IGFscGhhID0gZW5hYmxlQWxwaGEgPyBNYXRoLnJhbmRvbSgpIDogMTtcblx0XHRjb25zdCBuZXdDb2xvcjogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHsgaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFscGhhIH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdHJldHVybiBjcmVhdGUucGFsZXR0ZUl0ZW0obmV3Q29sb3IsIGVuYWJsZUFscGhhKTtcblx0fSk7XG5cblx0cGFsZXR0ZUl0ZW1zLnVuc2hpZnQoY3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvciwgZW5hYmxlQWxwaGEpKTtcblxuXHRyZXR1cm4gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnY29tcGxlbWVudGFyeScsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRudW1Cb3hlcyxcblx0XHRlbmFibGVBbHBoYSxcblx0XHRsaW1pdERhcmssXG5cdFx0bGltaXRHcmF5LFxuXHRcdGxpbWl0TGlnaHRcblx0KTtcbn1cbiJdfQ==