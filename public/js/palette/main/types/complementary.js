// File: src/palette/main/types/complementary.ts
import { idb } from '../../../idb.js';
import { config } from '../../../config.js';
import { utils } from '../../../common.js';
import { paletteUtils } from '../../utils.js';
const create = paletteUtils.create;
const defaults = config.defaults;
const paletteRanges = config.consts.palette.ranges;
export async function complementary(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const currentComplementaryPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        console.warn('Complementary palette requires at least 2 swatches.');
        return utils.palette.createObject('complementary', [], defaults.colors.hsl, 0, currentComplementaryPaletteID, enableAlpha, limitBright, limitDark, limitGray);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const hues = Array.from({ length: numBoxes - 1 }, (_, _i) => (complementaryHue +
        (Math.random() * paletteRanges.comp.hueShift -
            paletteRanges.comp.hueShift / 2)) %
        360);
    const paletteItems = hues.map((hue, i) => {
        const saturation = Math.min(100, Math.max(0, baseColor.value.saturation + (Math.random() - 0.5) * 15));
        const lightness = Math.min(100, Math.max(0, baseColor.value.lightness + (i % 2 === 0 ? -10 : 10)));
        const alpha = enableAlpha ? Math.random() : 1;
        const newColor = {
            value: { hue, saturation, lightness, alpha },
            format: 'hsl'
        };
        return create.paletteItem(newColor, enableAlpha);
    });
    paletteItems.unshift(paletteUtils.create.paletteItem(baseColor, enableAlpha));
    return await idb.savePaletteToDB('complementary', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7QUFHaEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFM0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ2pDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUVuRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDbEMsUUFBZ0IsRUFDaEIsV0FBdUIsRUFDdkIsV0FBb0IsRUFDcEIsV0FBb0IsRUFDcEIsU0FBa0IsRUFDbEIsU0FBa0I7SUFFbEIsTUFBTSw2QkFBNkIsR0FBRyxNQUFNLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBRXRFLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMscURBQXFELENBQUMsQ0FBQztRQUVwRSxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUNoQyxlQUFlLEVBQ2YsRUFBRSxFQUNGLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUNuQixDQUFDLEVBQ0QsNkJBQTZCLEVBQzdCLFdBQVcsRUFDWCxXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsQ0FDVCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdELE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDM0QsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FDdEIsRUFBRSxNQUFNLEVBQUUsUUFBUSxHQUFHLENBQUMsRUFBRSxFQUN4QixDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUNULENBQUMsZ0JBQWdCO1FBQ2hCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUMzQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQ0osQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUFrQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQzFCLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FDcEUsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3pCLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDakUsQ0FBQztRQUNGLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsTUFBTSxRQUFRLEdBQVE7WUFDckIsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFO1lBQzVDLE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxZQUFZLENBQUMsT0FBTyxDQUNuQixZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQ3ZELENBQUM7SUFFRixPQUFPLE1BQU0sR0FBRyxDQUFDLGVBQWUsQ0FDL0IsZUFBZSxFQUNmLFlBQVksRUFDWixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDWCxXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsQ0FDVCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXgnO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vLi4vaWRiJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBwYWxldHRlVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVVdGlscy5jcmVhdGU7XG5jb25zdCBkZWZhdWx0cyA9IGNvbmZpZy5kZWZhdWx0cztcbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBjb25maWcuY29uc3RzLnBhbGV0dGUucmFuZ2VzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcGxlbWVudGFyeShcblx0bnVtQm94ZXM6IG51bWJlcixcblx0Y3VzdG9tQ29sb3I6IEhTTCB8IG51bGwsXG5cdGVuYWJsZUFscGhhOiBib29sZWFuLFxuXHRsaW1pdEJyaWdodDogYm9vbGVhbixcblx0bGltaXREYXJrOiBib29sZWFuLFxuXHRsaW1pdEdyYXk6IGJvb2xlYW5cbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBjdXJyZW50Q29tcGxlbWVudGFyeVBhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdGNvbnNvbGUud2FybignQ29tcGxlbWVudGFyeSBwYWxldHRlIHJlcXVpcmVzIGF0IGxlYXN0IDIgc3dhdGNoZXMuJyk7XG5cblx0XHRyZXR1cm4gdXRpbHMucGFsZXR0ZS5jcmVhdGVPYmplY3QoXG5cdFx0XHQnY29tcGxlbWVudGFyeScsXG5cdFx0XHRbXSxcblx0XHRcdGRlZmF1bHRzLmNvbG9ycy5oc2wsXG5cdFx0XHQwLFxuXHRcdFx0Y3VycmVudENvbXBsZW1lbnRhcnlQYWxldHRlSUQsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0QnJpZ2h0LFxuXHRcdFx0bGltaXREYXJrLFxuXHRcdFx0bGltaXRHcmF5XG5cdFx0KTtcblx0fVxuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoY3VzdG9tQ29sb3IsIGVuYWJsZUFscGhhKTtcblx0Y29uc3QgY29tcGxlbWVudGFyeUh1ZSA9IChiYXNlQ29sb3IudmFsdWUuaHVlICsgMTgwKSAlIDM2MDtcblx0Y29uc3QgaHVlcyA9IEFycmF5LmZyb20oXG5cdFx0eyBsZW5ndGg6IG51bUJveGVzIC0gMSB9LFxuXHRcdChfLCBfaSkgPT5cblx0XHRcdChjb21wbGVtZW50YXJ5SHVlICtcblx0XHRcdFx0KE1hdGgucmFuZG9tKCkgKiBwYWxldHRlUmFuZ2VzLmNvbXAuaHVlU2hpZnQgLVxuXHRcdFx0XHRcdHBhbGV0dGVSYW5nZXMuY29tcC5odWVTaGlmdCAvIDIpKSAlXG5cdFx0XHQzNjBcblx0KTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gaHVlcy5tYXAoKGh1ZSwgaSkgPT4ge1xuXHRcdGNvbnN0IHNhdHVyYXRpb24gPSBNYXRoLm1pbihcblx0XHRcdDEwMCxcblx0XHRcdE1hdGgubWF4KDAsIGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICsgKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTUpXG5cdFx0KTtcblx0XHRjb25zdCBsaWdodG5lc3MgPSBNYXRoLm1pbihcblx0XHRcdDEwMCxcblx0XHRcdE1hdGgubWF4KDAsIGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgKyAoaSAlIDIgPT09IDAgPyAtMTAgOiAxMCkpXG5cdFx0KTtcblx0XHRjb25zdCBhbHBoYSA9IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDE7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7IGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYSB9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHRyZXR1cm4gY3JlYXRlLnBhbGV0dGVJdGVtKG5ld0NvbG9yLCBlbmFibGVBbHBoYSk7XG5cdH0pO1xuXG5cdHBhbGV0dGVJdGVtcy51bnNoaWZ0KFxuXHRcdHBhbGV0dGVVdGlscy5jcmVhdGUucGFsZXR0ZUl0ZW0oYmFzZUNvbG9yLCBlbmFibGVBbHBoYSlcblx0KTtcblxuXHRyZXR1cm4gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnY29tcGxlbWVudGFyeScsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRudW1Cb3hlcyxcblx0XHRlbmFibGVBbHBoYSxcblx0XHRsaW1pdEJyaWdodCxcblx0XHRsaW1pdERhcmssXG5cdFx0bGltaXRHcmF5XG5cdCk7XG59XG4iXX0=