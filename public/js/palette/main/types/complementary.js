// File: src/palette/main/types/complementary.js
import { IDBManager } from '../../../idb/index.js';
import { core, utils } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { paletteSuperUtils } from '../../common/index.js';
const create = paletteSuperUtils.create;
const defaults = data.defaults;
const mode = data.mode;
const paletteRanges = data.consts.paletteRanges;
const idb = IDBManager.getInstance();
export async function complementary(args) {
    const currentComplementaryPaletteID = await idb.getCurrentPaletteID();
    if (args.numBoxes < 2) {
        if (mode.warnLogs)
            console.warn('Complementary palette requires at least 2 swatches.');
        return utils.palette.createObject('complementary', [], core.brandColor.asHSL(defaults.colors.hsl), 0, currentComplementaryPaletteID, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    }
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const complementaryHue = (baseColor.value.hue + 180) % 360;
    const hues = Array.from({ length: args.numBoxes - 1 }, (_, _i) => (complementaryHue +
        (Math.random() * paletteRanges.comp.hueShift -
            paletteRanges.comp.hueShift / 2)) %
        360);
    const paletteItems = hues.map((hue, i) => {
        const saturation = Math.min(100, Math.max(0, baseColor.value.saturation + (Math.random() - 0.5) * 15));
        const lightness = Math.min(100, Math.max(0, baseColor.value.lightness + (i % 2 === 0 ? -10 : 10)));
        const alpha = args.enableAlpha ? Math.random() : 1;
        const newColor = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(saturation),
                lightness: core.brand.asPercentile(lightness),
                alpha: core.brand.asAlphaRange(alpha)
            },
            format: 'hsl'
        };
        return create.paletteItem(newColor, args.enableAlpha);
    });
    paletteItems.unshift(create.paletteItem(baseColor, args.enableAlpha));
    const complementaryPalette = await idb.savePaletteToDB('complementary', paletteItems, baseColor, args.numBoxes, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!complementaryPalette)
        throw new Error('Complementary palette is null or undefined.');
    else
        return complementaryPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvY29tcGxlbWVudGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7QUFRaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDdkIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFaEQsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUFDLElBQW9CO0lBQ3ZELE1BQU0sNkJBQTZCLEdBQUcsTUFBTSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUV0RSxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLHFEQUFxRCxDQUFDLENBQUM7UUFFckUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FDaEMsZUFBZSxFQUNmLEVBQUUsRUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxF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TUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDOztRQUMzRCxPQUFPLG9CQUFvQixDQUFDO0FBQ2xDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9tYWluL3R5cGVzL2NvbXBsZW1lbnRhcnkuanNcblxuaW1wb3J0IHtcblx0R2VuUGFsZXR0ZUFyZ3MsXG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUl0ZW1cbn0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2lkYi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjb3JlLCB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcbmNvbnN0IGRlZmF1bHRzID0gZGF0YS5kZWZhdWx0cztcbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5jb25zdCBwYWxldHRlUmFuZ2VzID0gZGF0YS5jb25zdHMucGFsZXR0ZVJhbmdlcztcblxuY29uc3QgaWRiID0gSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcGxlbWVudGFyeShhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBjdXJyZW50Q29tcGxlbWVudGFyeVBhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKGFyZ3MubnVtQm94ZXMgPCAyKSB7XG5cdFx0aWYgKG1vZGUud2FybkxvZ3MpXG5cdFx0XHRjb25zb2xlLndhcm4oJ0NvbXBsZW1lbnRhcnkgcGFsZXR0ZSByZXF1aXJlcyBhdCBsZWFzdCAyIHN3YXRjaGVzLicpO1xuXG5cdFx0cmV0dXJuIHV0aWxzLnBhbGV0dGUuY3JlYXRlT2JqZWN0KFxuXHRcdFx0J2NvbXBsZW1lbnRhcnknLFxuXHRcdFx0W10sXG5cdFx0XHRjb3JlLmJyYW5kQ29sb3IuYXNIU0woZGVmYXVsdHMuY29sb3JzLmhzbCksXG5cdFx0XHQwLFxuXHRcdFx0Y3VycmVudENvbXBsZW1lbnRhcnlQYWxldHRlSUQsXG5cdFx0XHRhcmdzLmVuYWJsZUFscGhhLFxuXHRcdFx0YXJncy5saW1pdERhcmssXG5cdFx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRcdGFyZ3MubGltaXRMaWdodFxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGFyZ3MuY3VzdG9tQ29sb3IsIGFyZ3MuZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBjb21wbGVtZW50YXJ5SHVlID0gKGJhc2VDb2xvci52YWx1ZS5odWUgKyAxODApICUgMzYwO1xuXHRjb25zdCBodWVzID0gQXJyYXkuZnJvbShcblx0XHR7IGxlbmd0aDogYXJncy5udW1Cb3hlcyAtIDEgfSxcblx0XHQoXywgX2kpID0+XG5cdFx0XHQoY29tcGxlbWVudGFyeUh1ZSArXG5cdFx0XHRcdChNYXRoLnJhbmRvbSgpICogcGFsZXR0ZVJhbmdlcy5jb21wLmh1ZVNoaWZ0IC1cblx0XHRcdFx0XHRwYWxldHRlUmFuZ2VzLmNvbXAuaHVlU2hpZnQgLyAyKSkgJVxuXHRcdFx0MzYwXG5cdCk7XG5cdGNvbnN0IHBhbGV0dGVJdGVtczogUGFsZXR0ZUl0ZW1bXSA9IGh1ZXMubWFwKChodWUsIGkpID0+IHtcblx0XHRjb25zdCBzYXR1cmF0aW9uID0gTWF0aC5taW4oXG5cdFx0XHQxMDAsXG5cdFx0XHRNYXRoLm1heCgwLCBiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDE1KVxuXHRcdCk7XG5cdFx0Y29uc3QgbGlnaHRuZXNzID0gTWF0aC5taW4oXG5cdFx0XHQxMDAsXG5cdFx0XHRNYXRoLm1heCgwLCBiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICsgKGkgJSAyID09PSAwID8gLTEwIDogMTApKVxuXHRcdCk7XG5cdFx0Y29uc3QgYWxwaGEgPSBhcmdzLmVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDE7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZS5icmFuZC5hc1JhZGlhbChodWUpLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShzYXR1cmF0aW9uKSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShsaWdodG5lc3MpLFxuXHRcdFx0XHRhbHBoYTogY29yZS5icmFuZC5hc0FscGhhUmFuZ2UoYWxwaGEpXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHRyZXR1cm4gY3JlYXRlLnBhbGV0dGVJdGVtKG5ld0NvbG9yLCBhcmdzLmVuYWJsZUFscGhhKTtcblx0fSk7XG5cblx0cGFsZXR0ZUl0ZW1zLnVuc2hpZnQoY3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvciwgYXJncy5lbmFibGVBbHBoYSkpO1xuXG5cdGNvbnN0IGNvbXBsZW1lbnRhcnlQYWxldHRlID0gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnY29tcGxlbWVudGFyeScsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRhcmdzLm51bUJveGVzLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGEsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0aWYgKCFjb21wbGVtZW50YXJ5UGFsZXR0ZSlcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvbXBsZW1lbnRhcnkgcGFsZXR0ZSBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0ZWxzZSByZXR1cm4gY29tcGxlbWVudGFyeVBhbGV0dGU7XG59XG4iXX0=