// File: src/palette/main/types/triadic.ts
import { idb } from '../../../idb.js';
import { config } from '../../../config.js';
import { utils } from '../../../common.js';
import { paletteUtils } from '../../utils.js';
const conversion = utils.conversion;
const create = paletteUtils.create;
const defaults = config.defaults;
const genHues = paletteUtils.genHues;
const paletteRanges = config.consts.palette.ranges;
export async function triadic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const currentTriadicPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 3) {
        console.warn('Triadic palette requires at least 3 swatches.');
        return utils.palette.createObject('triadic', [], defaults.colors.hsl, 0, currentTriadicPaletteID, enableAlpha, limitBright, limitDark, limitGray);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const hues = genHues.triadic(baseColor.value.hue);
    const paletteItems = [
        create.paletteItem(baseColor, enableAlpha),
        ...hues.map((hue, index) => {
            const adjustedHSL = {
                value: {
                    hue,
                    saturation: Math.max(0, Math.min(baseColor.value.saturation +
                        (index % 2 === 0
                            ? -paletteRanges.triad.satShift
                            : paletteRanges.triad.satShift), 100)),
                    lightness: Math.max(0, Math.min(baseColor.value.lightness +
                        (index % 2 === 0
                            ? -paletteRanges.triad.lightShift
                            : paletteRanges.triad.lightShift), 100)),
                    alpha: enableAlpha ? Math.random() : 1
                },
                format: 'hsl'
            };
            const adjustedColor = conversion.genAllColorValues(adjustedHSL);
            return create.paletteItem(adjustedColor, enableAlpha);
        })
    ];
    return await idb.savePaletteToDB('triadic', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvdHJpYWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFHMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFM0MsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ25DLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDakMsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUNyQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFFbkQsTUFBTSxDQUFDLEtBQUssVUFBVSxPQUFPLENBQzVCLFFBQWdCLEVBQ2hCLFdBQXVCLEVBQ3ZCLFdBQW9CLEVBQ3BCLFdBQW9CLEVBQ3BCLFNBQWtCLEVBQ2xCLFNBQWtCO0lBRWxCLE1BQU0sdUJBQXVCLEdBQUcsTUFBTSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUVoRSxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFFOUQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FDaEMsU0FBUyxFQUNULEVBQUUsRUFDRixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFDbkIsQ0FBQyxFQUNELHVCQUF1QixFQUN2QixXQUFXLEVBQ1gsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLENBQ1QsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQztRQUMxQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxXQUFXLEdBQVE7Z0JBQ3hCLEtBQUssRUFBRTtvQkFDTixHQUFHO29CQUNILFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUNuQixDQUFDLEVBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7d0JBQ3pCLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDOzRCQUNmLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUTs0QkFDL0IsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQ2pDLEdBQUcsQ0FDSCxDQUNEO29CQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUNsQixDQUFDLEVBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVM7d0JBQ3hCLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDOzRCQUNmLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVTs0QkFDakMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQ25DLEdBQUcsQ0FDSCxDQUNEO29CQUNELEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdEM7Z0JBQ0QsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDO1lBQ0YsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWhFLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFvQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQztLQUNGLENBQUM7SUFFRixPQUFPLE1BQU0sR0FBRyxDQUFDLGVBQWUsQ0FDL0IsU0FBUyxFQUNULFlBQVksRUFDWixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDWCxXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsQ0FDVCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvdHJpYWRpYy50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXgnO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vLi4vaWRiJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBwYWxldHRlVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IGNvbnZlcnNpb24gPSB1dGlscy5jb252ZXJzaW9uO1xuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVV0aWxzLmNyZWF0ZTtcbmNvbnN0IGRlZmF1bHRzID0gY29uZmlnLmRlZmF1bHRzO1xuY29uc3QgZ2VuSHVlcyA9IHBhbGV0dGVVdGlscy5nZW5IdWVzO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGNvbmZpZy5jb25zdHMucGFsZXR0ZS5yYW5nZXM7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0cmlhZGljKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogSFNMIHwgbnVsbCxcblx0ZW5hYmxlQWxwaGE6IGJvb2xlYW4sXG5cdGxpbWl0QnJpZ2h0OiBib29sZWFuLFxuXHRsaW1pdERhcms6IGJvb2xlYW4sXG5cdGxpbWl0R3JheTogYm9vbGVhblxuKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdGNvbnN0IGN1cnJlbnRUcmlhZGljUGFsZXR0ZUlEID0gYXdhaXQgaWRiLmdldEN1cnJlbnRQYWxldHRlSUQoKTtcblxuXHRpZiAobnVtQm94ZXMgPCAzKSB7XG5cdFx0Y29uc29sZS53YXJuKCdUcmlhZGljIHBhbGV0dGUgcmVxdWlyZXMgYXQgbGVhc3QgMyBzd2F0Y2hlcy4nKTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCd0cmlhZGljJyxcblx0XHRcdFtdLFxuXHRcdFx0ZGVmYXVsdHMuY29sb3JzLmhzbCxcblx0XHRcdDAsXG5cdFx0XHRjdXJyZW50VHJpYWRpY1BhbGV0dGVJRCxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXRCcmlnaHQsXG5cdFx0XHRsaW1pdERhcmssXG5cdFx0XHRsaW1pdEdyYXlcblx0XHQpO1xuXHR9XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBodWVzID0gZ2VuSHVlcy50cmlhZGljKGJhc2VDb2xvci52YWx1ZS5odWUpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXG5cdFx0Y3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvciwgZW5hYmxlQWxwaGEpLFxuXHRcdC4uLmh1ZXMubWFwKChodWUsIGluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCBhZGp1c3RlZEhTTDogSFNMID0ge1xuXHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdGh1ZSxcblx0XHRcdFx0XHRzYXR1cmF0aW9uOiBNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCAlIDIgPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMudHJpYWQuc2F0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy50cmlhZC5zYXRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0bGlnaHRuZXNzOiBNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ICUgMiA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy50cmlhZC5saWdodFNoaWZ0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMudHJpYWQubGlnaHRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0YWxwaGE6IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdFx0fTtcblx0XHRcdGNvbnN0IGFkanVzdGVkQ29sb3IgPSBjb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKGFkanVzdGVkSFNMKTtcblxuXHRcdFx0cmV0dXJuIGNyZWF0ZS5wYWxldHRlSXRlbShhZGp1c3RlZENvbG9yIGFzIEhTTCwgZW5hYmxlQWxwaGEpO1xuXHRcdH0pXG5cdF07XG5cblx0cmV0dXJuIGF3YWl0IGlkYi5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J3RyaWFkaWMnLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRiYXNlQ29sb3IsXG5cdFx0bnVtQm94ZXMsXG5cdFx0ZW5hYmxlQWxwaGEsXG5cdFx0bGltaXRCcmlnaHQsXG5cdFx0bGltaXREYXJrLFxuXHRcdGxpbWl0R3JheVxuXHQpO1xufVxuIl19