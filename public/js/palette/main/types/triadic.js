// File: src/palette/main/types/triadic.ts
import { config } from '../../../config';
import { idb } from '../../../idb';
import { paletteSuperUtils, paletteUtils } from '../../common';
import { utils } from '../../../common';
const conversion = utils.conversion;
const create = paletteSuperUtils.create;
const defaults = config.defaults;
const genHues = paletteUtils.genHues;
const mode = config.mode;
const paletteRanges = config.consts.palette.ranges;
export async function triadic(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const currentTriadicPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 3) {
        if (mode.logWarnings)
            console.warn('Triadic palette requires at least 3 swatches.');
        return utils.palette.createObject('triadic', [], defaults.colors.hsl, 0, currentTriadicPaletteID, enableAlpha, limitDark, limitGray, limitLight);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const hues = genHues.triadic(baseColor.value.hue);
    const paletteItems = [
        create.paletteItem(baseColor, enableAlpha),
        ...hues.map((hue, index) => {
            const adjustedHSL = {
                value: {
                    hue,
                    saturation: Math.max(0, Math.min(baseColor.value.saturation +
                        (index % 2 === 0
                            ? -paletteRanges.triad.satShift
                            : paletteRanges.triad.satShift), 100)),
                    lightness: Math.max(0, Math.min(baseColor.value.lightness +
                        (index % 2 === 0
                            ? -paletteRanges.triad.lightShift
                            : paletteRanges.triad.lightShift), 100)),
                    alpha: enableAlpha ? Math.random() : 1
                },
                format: 'hsl'
            };
            const adjustedColor = conversion.genAllColorValues(adjustedHSL);
            return create.paletteItem(adjustedColor, enableAlpha);
        })
    ];
    return await idb.savePaletteToDB('triadic', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvdHJpYWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFHMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDeEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3JDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDekIsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBRW5ELE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUM1QixRQUFnQixFQUNoQixXQUF1QixFQUN2QixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQixFQUNsQixVQUFtQjtJQUVuQixNQUFNLHVCQUF1QixHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFaEUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLENBQUMsV0FBVztZQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFFL0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FDaEMsU0FBUyxFQUNULEVBQUUsRUFDRixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFDbkIsQ0FBQyxFQUNELHVCQUF1QixFQUN2QixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLENBQ1YsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQztRQUMxQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxXQUFXLEdBQVE7Z0JBQ3hCLEtBQUssRUFBRTtvQkFDTixHQUFHO29CQUNILFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUNuQixDQUFDLEVBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7d0JBQ3pCLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDOzRCQUNmLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUTs0QkFDL0IsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQ2pDLEdBQUcsQ0FDSCxDQUNEO29CQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUNsQixDQUFDLEVBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVM7d0JBQ3hCLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDOzRCQUNmLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVTs0QkFDakMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQ25DLEdBQUcsQ0FDSCxDQUNEO29CQUNELEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdEM7Z0JBQ0QsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDO1lBQ0YsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWhFLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFvQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQztLQUNGLENBQUM7SUFFRixPQUFPLE1BQU0sR0FBRyxDQUFDLGVBQWUsQ0FDL0IsU0FBUyxFQUNULFlBQVksRUFDWixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsQ0FDVixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvdHJpYWRpYy50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IGlkYiB9IGZyb20gJy4uLy4uLy4uL2lkYic7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscywgcGFsZXR0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uJztcblxuY29uc3QgY29udmVyc2lvbiA9IHV0aWxzLmNvbnZlcnNpb247XG5jb25zdCBjcmVhdGUgPSBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGU7XG5jb25zdCBkZWZhdWx0cyA9IGNvbmZpZy5kZWZhdWx0cztcbmNvbnN0IGdlbkh1ZXMgPSBwYWxldHRlVXRpbHMuZ2VuSHVlcztcbmNvbnN0IG1vZGUgPSBjb25maWcubW9kZTtcbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBjb25maWcuY29uc3RzLnBhbGV0dGUucmFuZ2VzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdHJpYWRpYyhcblx0bnVtQm94ZXM6IG51bWJlcixcblx0Y3VzdG9tQ29sb3I6IEhTTCB8IG51bGwsXG5cdGVuYWJsZUFscGhhOiBib29sZWFuLFxuXHRsaW1pdERhcms6IGJvb2xlYW4sXG5cdGxpbWl0R3JheTogYm9vbGVhbixcblx0bGltaXRMaWdodDogYm9vbGVhblxuKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdGNvbnN0IGN1cnJlbnRUcmlhZGljUGFsZXR0ZUlEID0gYXdhaXQgaWRiLmdldEN1cnJlbnRQYWxldHRlSUQoKTtcblxuXHRpZiAobnVtQm94ZXMgPCAzKSB7XG5cdFx0aWYgKG1vZGUubG9nV2FybmluZ3MpXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RyaWFkaWMgcGFsZXR0ZSByZXF1aXJlcyBhdCBsZWFzdCAzIHN3YXRjaGVzLicpO1xuXG5cdFx0cmV0dXJuIHV0aWxzLnBhbGV0dGUuY3JlYXRlT2JqZWN0KFxuXHRcdFx0J3RyaWFkaWMnLFxuXHRcdFx0W10sXG5cdFx0XHRkZWZhdWx0cy5jb2xvcnMuaHNsLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnRUcmlhZGljUGFsZXR0ZUlELFxuXHRcdFx0ZW5hYmxlQWxwaGEsXG5cdFx0XHRsaW1pdERhcmssXG5cdFx0XHRsaW1pdEdyYXksXG5cdFx0XHRsaW1pdExpZ2h0XG5cdFx0KTtcblx0fVxuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoY3VzdG9tQ29sb3IsIGVuYWJsZUFscGhhKTtcblx0Y29uc3QgaHVlcyA9IGdlbkh1ZXMudHJpYWRpYyhiYXNlQ29sb3IudmFsdWUuaHVlKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW1xuXHRcdGNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IsIGVuYWJsZUFscGhhKSxcblx0XHQuLi5odWVzLm1hcCgoaHVlLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgYWRqdXN0ZWRIU0w6IEhTTCA9IHtcblx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRodWUsXG5cdFx0XHRcdFx0c2F0dXJhdGlvbjogTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggJSAyID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnRyaWFkLnNhdFNoaWZ0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMudHJpYWQuc2F0U2hpZnQpLFxuXHRcdFx0XHRcdFx0XHQxMDBcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGxpZ2h0bmVzczogTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0TWF0aC5taW4oXG5cdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCAlIDIgPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMudHJpYWQubGlnaHRTaGlmdFxuXHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnRyaWFkLmxpZ2h0U2hpZnQpLFxuXHRcdFx0XHRcdFx0XHQxMDBcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGFscGhhOiBlbmFibGVBbHBoYSA/IE1hdGgucmFuZG9tKCkgOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdH07XG5cdFx0XHRjb25zdCBhZGp1c3RlZENvbG9yID0gY29udmVyc2lvbi5nZW5BbGxDb2xvclZhbHVlcyhhZGp1c3RlZEhTTCk7XG5cblx0XHRcdHJldHVybiBjcmVhdGUucGFsZXR0ZUl0ZW0oYWRqdXN0ZWRDb2xvciBhcyBIU0wsIGVuYWJsZUFscGhhKTtcblx0XHR9KVxuXHRdO1xuXG5cdHJldHVybiBhd2FpdCBpZGIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCd0cmlhZGljJyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdG51bUJveGVzLFxuXHRcdGVuYWJsZUFscGhhLFxuXHRcdGxpbWl0RGFyayxcblx0XHRsaW1pdEdyYXksXG5cdFx0bGltaXRMaWdodFxuXHQpO1xufVxuIl19