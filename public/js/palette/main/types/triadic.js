// File: src/palette/main/types/triadic.js
import { core, utils } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { IDBManager } from '../../../classes/idb/index.js';
import { paletteSuperUtils } from '../../common/index.js';
import { ui } from '../../../ui/index.js';
const conversion = utils.conversion;
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
const paletteRanges = data.consts.paletteRanges;
const idb = IDBManager.getInstance();
export async function triadic(args) {
    // ensure exactly 3 swatches
    if (args.numBoxes < 3) {
        ui.enforceSwatchRules(3, 3);
    }
    // base color setup
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    // generate triadic hues
    const hues = genHues.triadic(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add the base color as the first palette item
    const basePaletteItem = await create.paletteItem(baseColor, args.enableAlpha);
    paletteItems.push(basePaletteItem);
    // add the triadic colors sequentially
    for (let index = 0; index < hues.length; index++) {
        const hue = hues[index];
        const adjustedHSL = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index % 2 === 0
                        ? -paletteRanges.triad.satShift
                        : paletteRanges.triad.satShift), 100))),
                lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index % 2 === 0
                        ? -paletteRanges.triad.lightShift
                        : paletteRanges.triad.lightShift), 100))),
                alpha: args.enableAlpha
                    ? core.brand.asAlphaRange(Math.random())
                    : core.brand.asAlphaRange(1)
            },
            format: 'hsl'
        };
        // generate all color values and create the palette item
        const adjustedColor = conversion.genAllColorValues(adjustedHSL)
            .hsl;
        const paletteItem = await create.paletteItem(adjustedColor, args.enableAlpha);
        paletteItems.push(paletteItem);
    }
    // save the palette to the database
    const triadicPalette = await idb.savePaletteToDB('triadic', paletteItems, baseColor, args.numBoxes, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    // handle null or undefined palette
    if (!triadicPalette) {
        throw new Error('Triadic palette is either null or undefined.');
    }
    return triadicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvdHJpYWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFRMUMsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDMUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFaEQsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUFDLElBQW9CO0lBQ2pELDRCQUE0QjtJQUM1QixJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdkIsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsbUJBQW1CO0lBQ25CLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFdkUsd0JBQXdCO0lBQ3hCLE1BQU0sSUFBSSxHQUFHLE9BQU8s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bWFpbi90eXBlcy90cmlhZGljLmpzXG5cbmltcG9ydCB7XG5cdEdlblBhbGV0dGVBcmdzLFxuXHRIU0wsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUsIHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9jbGFzc2VzL2lkYi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyB1aSB9IGZyb20gJy4uLy4uLy4uL3VpL2luZGV4LmpzJztcblxuY29uc3QgY29udmVyc2lvbiA9IHV0aWxzLmNvbnZlcnNpb247XG5jb25zdCBjcmVhdGUgPSBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGU7XG5jb25zdCBnZW5IdWVzID0gcGFsZXR0ZVN1cGVyVXRpbHMuZ2VuSHVlcztcbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBkYXRhLmNvbnN0cy5wYWxldHRlUmFuZ2VzO1xuXG5jb25zdCBpZGIgPSBJREJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0cmlhZGljKGFyZ3M6IEdlblBhbGV0dGVBcmdzKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdC8vIGVuc3VyZSBleGFjdGx5IDMgc3dhdGNoZXNcblx0aWYgKGFyZ3MubnVtQm94ZXMgPCAzKSB7XG5cdFx0dWkuZW5mb3JjZVN3YXRjaFJ1bGVzKDMsIDMpO1xuXHR9XG5cblx0Ly8gYmFzZSBjb2xvciBzZXR1cFxuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGFyZ3MuY3VzdG9tQ29sb3IsIGFyZ3MuZW5hYmxlQWxwaGEpO1xuXG5cdC8vIGdlbmVyYXRlIHRyaWFkaWMgaHVlc1xuXHRjb25zdCBodWVzID0gZ2VuSHVlcy50cmlhZGljKGJhc2VDb2xvci52YWx1ZS5odWUpO1xuXG5cdC8vIGluaXRpYWxpemUgcGFsZXR0ZSBpdGVtcyBhcnJheVxuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXTtcblxuXHQvLyBhZGQgdGhlIGJhc2UgY29sb3IgYXMgdGhlIGZpcnN0IHBhbGV0dGUgaXRlbVxuXHRjb25zdCBiYXNlUGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0YmFzZUNvbG9yLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGFcblx0KTtcblx0cGFsZXR0ZUl0ZW1zLnB1c2goYmFzZVBhbGV0dGVJdGVtKTtcblxuXHQvLyBhZGQgdGhlIHRyaWFkaWMgY29sb3JzIHNlcXVlbnRpYWxseVxuXHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaHVlcy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRjb25zdCBodWUgPSBodWVzW2luZGV4XTtcblx0XHRjb25zdCBhZGp1c3RlZEhTTDogSFNMID0ge1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlOiBjb3JlLmJyYW5kLmFzUmFkaWFsKGh1ZSksXG5cdFx0XHRcdHNhdHVyYXRpb246IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ICUgMiA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy50cmlhZC5zYXRTaGlmdFxuXHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnRyaWFkLnNhdFNoaWZ0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICtcblx0XHRcdFx0XHRcdFx0XHQoaW5kZXggJSAyID09PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnRyaWFkLmxpZ2h0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy50cmlhZC5saWdodFNoaWZ0KSxcblx0XHRcdFx0XHRcdFx0MTAwXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRhbHBoYTogYXJncy5lbmFibGVBbHBoYVxuXHRcdFx0XHRcdD8gY29yZS5icmFuZC5hc0FscGhhUmFuZ2UoTWF0aC5yYW5kb20oKSlcblx0XHRcdFx0XHQ6IGNvcmUuYnJhbmQuYXNBbHBoYVJhbmdlKDEpXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH07XG5cblx0XHQvLyBnZW5lcmF0ZSBhbGwgY29sb3IgdmFsdWVzIGFuZCBjcmVhdGUgdGhlIHBhbGV0dGUgaXRlbVxuXHRcdGNvbnN0IGFkanVzdGVkQ29sb3IgPSBjb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKGFkanVzdGVkSFNMKVxuXHRcdFx0LmhzbCBhcyBIU0w7XG5cdFx0Y29uc3QgcGFsZXR0ZUl0ZW0gPSBhd2FpdCBjcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0XHRhZGp1c3RlZENvbG9yLFxuXHRcdFx0YXJncy5lbmFibGVBbHBoYVxuXHRcdCk7XG5cdFx0cGFsZXR0ZUl0ZW1zLnB1c2gocGFsZXR0ZUl0ZW0pO1xuXHR9XG5cblx0Ly8gc2F2ZSB0aGUgcGFsZXR0ZSB0byB0aGUgZGF0YWJhc2Vcblx0Y29uc3QgdHJpYWRpY1BhbGV0dGUgPSBhd2FpdCBpZGIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCd0cmlhZGljJyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdGFyZ3MubnVtQm94ZXMsXG5cdFx0YXJncy5lbmFibGVBbHBoYSxcblx0XHRhcmdzLmxpbWl0RGFyayxcblx0XHRhcmdzLmxpbWl0R3JheSxcblx0XHRhcmdzLmxpbWl0TGlnaHRcblx0KTtcblxuXHQvLyBoYW5kbGUgbnVsbCBvciB1bmRlZmluZWQgcGFsZXR0ZVxuXHRpZiAoIXRyaWFkaWNQYWxldHRlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUcmlhZGljIHBhbGV0dGUgaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuXHR9XG5cblx0cmV0dXJuIHRyaWFkaWNQYWxldHRlO1xufVxuIl19