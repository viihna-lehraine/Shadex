// File: src/palette/main/types/triadic.js
import { core, utils } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { IDBManager } from '../../../idb/index.js';
import { paletteSuperUtils } from '../../common/index.js';
import { ui } from '../../../ui/index.js';
const conversion = utils.conversion;
const create = paletteSuperUtils.create;
const genHues = paletteSuperUtils.genHues;
const paletteRanges = data.consts.paletteRanges;
const idb = IDBManager.getInstance();
export async function triadic(args) {
    // ensure exactly 3 swatches
    if (args.numBoxes < 3) {
        ui.enforceSwatchRules(3, 3);
    }
    // base color setup
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    // generate triadic hues
    const hues = genHues.triadic(baseColor.value.hue);
    // initialize palette items array
    const paletteItems = [];
    // add the base color as the first palette item
    const basePaletteItem = await create.paletteItem(baseColor, args.enableAlpha);
    paletteItems.push(basePaletteItem);
    // add the triadic colors sequentially
    for (let index = 0; index < hues.length; index++) {
        const hue = hues[index];
        const adjustedHSL = {
            value: {
                hue: core.brand.asRadial(hue),
                saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                    (index % 2 === 0
                        ? -paletteRanges.triad.satShift
                        : paletteRanges.triad.satShift), 100))),
                lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                    (index % 2 === 0
                        ? -paletteRanges.triad.lightShift
                        : paletteRanges.triad.lightShift), 100))),
                alpha: args.enableAlpha
                    ? core.brand.asAlphaRange(Math.random())
                    : core.brand.asAlphaRange(1)
            },
            format: 'hsl'
        };
        // generate all color values and create the palette item
        const adjustedColor = conversion.genAllColorValues(adjustedHSL)
            .hsl;
        const paletteItem = await create.paletteItem(adjustedColor, args.enableAlpha);
        paletteItems.push(paletteItem);
    }
    // save the palette to the database
    const triadicPalette = await idb.savePaletteToDB('triadic', paletteItems, baseColor, args.numBoxes, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    // handle null or undefined palette
    if (!triadicPalette) {
        throw new Error('Triadic palette is either null or undefined.');
    }
    return triadicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvdHJpYWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFRMUMsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDMUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFaEQsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUFDLElBQW9CO0lBQ2pELDRCQUE0QjtJQUM1QixJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdkIsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsbUJBQW1CO0lBQ25CLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFdkUsd0JBQXdCO0lBQ3hCLE1BQU0sSUFBSSxHQUFHLE9BQU8s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bWFpbi90eXBlcy90cmlhZGljLmpzXG5cbmltcG9ydCB7XG5cdEdlblBhbGV0dGVBcmdzLFxuXHRIU0wsXG5cdFBhbGV0dGUsXG5cdFBhbGV0dGVJdGVtXG59IGZyb20gJy4uLy4uLy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGNvcmUsIHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2luZGV4LmpzJztcbmltcG9ydCB7IElEQk1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi9pZGIvaW5kZXguanMnO1xuaW1wb3J0IHsgcGFsZXR0ZVN1cGVyVXRpbHMgfSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgdWkgfSBmcm9tICcuLi8uLi8uLi91aS9pbmRleC5qcyc7XG5cbmNvbnN0IGNvbnZlcnNpb24gPSB1dGlscy5jb252ZXJzaW9uO1xuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgZ2VuSHVlcyA9IHBhbGV0dGVTdXBlclV0aWxzLmdlbkh1ZXM7XG5jb25zdCBwYWxldHRlUmFuZ2VzID0gZGF0YS5jb25zdHMucGFsZXR0ZVJhbmdlcztcblxuY29uc3QgaWRiID0gSURCTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdHJpYWRpYyhhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHQvLyBlbnN1cmUgZXhhY3RseSAzIHN3YXRjaGVzXG5cdGlmIChhcmdzLm51bUJveGVzIDwgMykge1xuXHRcdHVpLmVuZm9yY2VTd2F0Y2hSdWxlcygzLCAzKTtcblx0fVxuXG5cdC8vIGJhc2UgY29sb3Igc2V0dXBcblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihhcmdzLmN1c3RvbUNvbG9yLCBhcmdzLmVuYWJsZUFscGhhKTtcblxuXHQvLyBnZW5lcmF0ZSB0cmlhZGljIGh1ZXNcblx0Y29uc3QgaHVlcyA9IGdlbkh1ZXMudHJpYWRpYyhiYXNlQ29sb3IudmFsdWUuaHVlKTtcblxuXHQvLyBpbml0aWFsaXplIHBhbGV0dGUgaXRlbXMgYXJyYXlcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW107XG5cblx0Ly8gYWRkIHRoZSBiYXNlIGNvbG9yIGFzIHRoZSBmaXJzdCBwYWxldHRlIGl0ZW1cblx0Y29uc3QgYmFzZVBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKFxuXHRcdGJhc2VDb2xvcixcblx0XHRhcmdzLmVuYWJsZUFscGhhXG5cdCk7XG5cdHBhbGV0dGVJdGVtcy5wdXNoKGJhc2VQYWxldHRlSXRlbSk7XG5cblx0Ly8gYWRkIHRoZSB0cmlhZGljIGNvbG9ycyBzZXF1ZW50aWFsbHlcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGh1ZXMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0Y29uc3QgaHVlID0gaHVlc1tpbmRleF07XG5cdFx0Y29uc3QgYWRqdXN0ZWRIU0w6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogY29yZS5icmFuZC5hc1JhZGlhbChodWUpLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCAlIDIgPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMudHJpYWQuc2F0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy50cmlhZC5zYXRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBjb3JlLmJyYW5kLmFzUGVyY2VudGlsZShcblx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ICUgMiA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy50cmlhZC5saWdodFNoaWZ0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMudHJpYWQubGlnaHRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGFyZ3MuZW5hYmxlQWxwaGFcblx0XHRcdFx0XHQ/IGNvcmUuYnJhbmQuYXNBbHBoYVJhbmdlKE1hdGgucmFuZG9tKCkpXG5cdFx0XHRcdFx0OiBjb3JlLmJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0Ly8gZ2VuZXJhdGUgYWxsIGNvbG9yIHZhbHVlcyBhbmQgY3JlYXRlIHRoZSBwYWxldHRlIGl0ZW1cblx0XHRjb25zdCBhZGp1c3RlZENvbG9yID0gY29udmVyc2lvbi5nZW5BbGxDb2xvclZhbHVlcyhhZGp1c3RlZEhTTClcblx0XHRcdC5oc2wgYXMgSFNMO1xuXHRcdGNvbnN0IHBhbGV0dGVJdGVtID0gYXdhaXQgY3JlYXRlLnBhbGV0dGVJdGVtKFxuXHRcdFx0YWRqdXN0ZWRDb2xvcixcblx0XHRcdGFyZ3MuZW5hYmxlQWxwaGFcblx0XHQpO1xuXHRcdHBhbGV0dGVJdGVtcy5wdXNoKHBhbGV0dGVJdGVtKTtcblx0fVxuXG5cdC8vIHNhdmUgdGhlIHBhbGV0dGUgdG8gdGhlIGRhdGFiYXNlXG5cdGNvbnN0IHRyaWFkaWNQYWxldHRlID0gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQndHJpYWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRhcmdzLm51bUJveGVzLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGEsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0Ly8gaGFuZGxlIG51bGwgb3IgdW5kZWZpbmVkIHBhbGV0dGVcblx0aWYgKCF0cmlhZGljUGFsZXR0ZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignVHJpYWRpYyBwYWxldHRlIGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZC4nKTtcblx0fVxuXG5cdHJldHVybiB0cmlhZGljUGFsZXR0ZTtcbn1cbiJdfQ==