// File: src/palette/main/types/triadic.js
import { core, utils } from '../../../common/index.js';
import { data } from '../../../data/index.js';
import { IDBManager } from '../../../idb/index.js';
import { paletteSuperUtils } from '../../common/index.js';
const conversion = utils.conversion;
const create = paletteSuperUtils.create;
const defaults = data.defaults;
const genHues = paletteSuperUtils.genHues;
const mode = data.mode;
const paletteRanges = data.consts.paletteRanges;
const idb = IDBManager.getInstance();
export async function triadic(args) {
    const currentTriadicPaletteID = await idb.getCurrentPaletteID();
    if (args.numBoxes < 3) {
        if (mode.warnLogs)
            console.warn('Triadic palette requires at least 3 swatches.');
        return utils.palette.createObject('triadic', [], core.brandColor.asHSL(defaults.colors.hsl), 0, currentTriadicPaletteID, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    }
    const baseColor = create.baseColor(args.customColor, args.enableAlpha);
    const hues = genHues.triadic(baseColor.value.hue);
    const paletteItems = [
        create.paletteItem(baseColor, args.enableAlpha),
        ...hues.map((hue, index) => {
            const adjustedHSL = {
                value: {
                    hue: core.brand.asRadial(hue),
                    saturation: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.saturation +
                        (index % 2 === 0
                            ? -paletteRanges.triad.satShift
                            : paletteRanges.triad.satShift), 100))),
                    lightness: core.brand.asPercentile(Math.max(0, Math.min(baseColor.value.lightness +
                        (index % 2 === 0
                            ? -paletteRanges.triad.lightShift
                            : paletteRanges.triad.lightShift), 100))),
                    alpha: args.enableAlpha
                        ? core.brand.asAlphaRange(Math.random())
                        : core.brand.asAlphaRange(1)
                },
                format: 'hsl'
            };
            const adjustedColor = conversion.genAllColorValues(adjustedHSL);
            return create.paletteItem(adjustedColor, args.enableAlpha);
        })
    ];
    const triadicPalette = await idb.savePaletteToDB('triadic', paletteItems, baseColor, args.numBoxes, args.enableAlpha, args.limitDark, args.limitGray, args.limitLight);
    if (!triadicPalette)
        throw new Error('Triadic palette is either null or undefined.');
    else
        return triadicPalette;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvdHJpYWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFRMUMsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQ3hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDL0IsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDO0FBQzFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDdkIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFFaEQsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUFDLElBQW9CO0lBQ2pELE1BQU0sdUJBQXVCLEdBQUcsTUFBTSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUVoRSxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFFL0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FDaEMsU0FBUyxFQUNULEVBQUUsRUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUMxQyxDQUFDLEVBQ0QsdUJBQXVCLEVBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDL0MsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzFCLE1BQU0sV0FBVyxHQUFRO2dCQUN4QixLQUFLLEVBQUU7b0JBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztvQkFDN0IsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNsQyxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVTt3QkFDekIsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUM7NEJBQ2YsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFROzRCQUMvQixDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFDakMsR0FBRyxDQUNILENBQ0QsQ0FDRDtvQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQ2pDLElBQUksQ0FBQyxHQUFHLENBQ1AsQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQ1AsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTO3dCQUN4QixDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQzs0QkFDZixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVU7NEJBQ2pDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUNuQyxHQUFHLENBQ0gsQ0FDRCxDQUNEO29CQUNELEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVzt3QkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzt3QkFDeEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztpQkFDN0I7Z0JBQ0QsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDO1lBQ0YsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWhFLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFvQixFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRSxDQUFDLENBQUM7S0FDRixDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsTUFBTSxHQUFHLENBQUMsZUFBZSxDQUMvQyxTQUFTLEVBQ1QsWUFBWSxFQUNaLFNBQVMsRUFDVCxJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQUM7SUFFRixJQUFJLENBQUMsY0FBYztRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7O1FBQzVELE9BQU8sY0FBYyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9tYWluL3R5cGVzL3RyaWFkaWMuanNcblxuaW1wb3J0IHtcblx0R2VuUGFsZXR0ZUFyZ3MsXG5cdEhTTCxcblx0UGFsZXR0ZSxcblx0UGFsZXR0ZUl0ZW1cbn0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgY29yZSwgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgSURCTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL2lkYi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbmRleC5qcyc7XG5cbmNvbnN0IGNvbnZlcnNpb24gPSB1dGlscy5jb252ZXJzaW9uO1xuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgZGVmYXVsdHMgPSBkYXRhLmRlZmF1bHRzO1xuY29uc3QgZ2VuSHVlcyA9IHBhbGV0dGVTdXBlclV0aWxzLmdlbkh1ZXM7XG5jb25zdCBtb2RlID0gZGF0YS5tb2RlO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGRhdGEuY29uc3RzLnBhbGV0dGVSYW5nZXM7XG5cbmNvbnN0IGlkYiA9IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRyaWFkaWMoYXJnczogR2VuUGFsZXR0ZUFyZ3MpOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudFRyaWFkaWNQYWxldHRlSUQgPSBhd2FpdCBpZGIuZ2V0Q3VycmVudFBhbGV0dGVJRCgpO1xuXG5cdGlmIChhcmdzLm51bUJveGVzIDwgMykge1xuXHRcdGlmIChtb2RlLndhcm5Mb2dzKVxuXHRcdFx0Y29uc29sZS53YXJuKCdUcmlhZGljIHBhbGV0dGUgcmVxdWlyZXMgYXQgbGVhc3QgMyBzd2F0Y2hlcy4nKTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCd0cmlhZGljJyxcblx0XHRcdFtdLFxuXHRcdFx0Y29yZS5icmFuZENvbG9yLmFzSFNMKGRlZmF1bHRzLmNvbG9ycy5oc2wpLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnRUcmlhZGljUGFsZXR0ZUlELFxuXHRcdFx0YXJncy5lbmFibGVBbHBoYSxcblx0XHRcdGFyZ3MubGltaXREYXJrLFxuXHRcdFx0YXJncy5saW1pdEdyYXksXG5cdFx0XHRhcmdzLmxpbWl0TGlnaHRcblx0XHQpO1xuXHR9XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihhcmdzLmN1c3RvbUNvbG9yLCBhcmdzLmVuYWJsZUFscGhhKTtcblx0Y29uc3QgaHVlcyA9IGdlbkh1ZXMudHJpYWRpYyhiYXNlQ29sb3IudmFsdWUuaHVlKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gW1xuXHRcdGNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IsIGFyZ3MuZW5hYmxlQWxwaGEpLFxuXHRcdC4uLmh1ZXMubWFwKChodWUsIGluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCBhZGp1c3RlZEhTTDogSFNMID0ge1xuXHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdGh1ZTogY29yZS5icmFuZC5hc1JhZGlhbChodWUpLFxuXHRcdFx0XHRcdHNhdHVyYXRpb246IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICtcblx0XHRcdFx0XHRcdFx0XHRcdChpbmRleCAlIDIgPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy50cmlhZC5zYXRTaGlmdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMudHJpYWQuc2F0U2hpZnQpLFxuXHRcdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRsaWdodG5lc3M6IGNvcmUuYnJhbmQuYXNQZXJjZW50aWxlKFxuXHRcdFx0XHRcdFx0TWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdE1hdGgubWluKFxuXHRcdFx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgK1xuXHRcdFx0XHRcdFx0XHRcdFx0KGluZGV4ICUgMiA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ/IC1wYWxldHRlUmFuZ2VzLnRyaWFkLmxpZ2h0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0OiBwYWxldHRlUmFuZ2VzLnRyaWFkLmxpZ2h0U2hpZnQpLFxuXHRcdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRhbHBoYTogYXJncy5lbmFibGVBbHBoYVxuXHRcdFx0XHRcdFx0PyBjb3JlLmJyYW5kLmFzQWxwaGFSYW5nZShNYXRoLnJhbmRvbSgpKVxuXHRcdFx0XHRcdFx0OiBjb3JlLmJyYW5kLmFzQWxwaGFSYW5nZSgxKVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgYWRqdXN0ZWRDb2xvciA9IGNvbnZlcnNpb24uZ2VuQWxsQ29sb3JWYWx1ZXMoYWRqdXN0ZWRIU0wpO1xuXG5cdFx0XHRyZXR1cm4gY3JlYXRlLnBhbGV0dGVJdGVtKGFkanVzdGVkQ29sb3IgYXMgSFNMLCBhcmdzLmVuYWJsZUFscGhhKTtcblx0XHR9KVxuXHRdO1xuXG5cdGNvbnN0IHRyaWFkaWNQYWxldHRlID0gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQndHJpYWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRhcmdzLm51bUJveGVzLFxuXHRcdGFyZ3MuZW5hYmxlQWxwaGEsXG5cdFx0YXJncy5saW1pdERhcmssXG5cdFx0YXJncy5saW1pdEdyYXksXG5cdFx0YXJncy5saW1pdExpZ2h0XG5cdCk7XG5cblx0aWYgKCF0cmlhZGljUGFsZXR0ZSlcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RyaWFkaWMgcGFsZXR0ZSBpcyBlaXRoZXIgbnVsbCBvciB1bmRlZmluZWQuJyk7XG5cdGVsc2UgcmV0dXJuIHRyaWFkaWNQYWxldHRlO1xufVxuIl19