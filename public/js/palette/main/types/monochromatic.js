// File: src/palette/main/types/monochromatic.ts
import { idb } from '../../../idb.js';
import { config } from '../../../config.js';
import { utils } from '../../../common.js';
import { paletteUtils } from '../../utils.js';
const create = paletteUtils.create;
const defaults = config.defaults;
export async function monochromatic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const currentMonochromaticPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        console.warn('Monochromatic palette requires at least 2 swatches.');
        return utils.palette.createObject('monochromatic', [], defaults.colors.hsl, 0, currentMonochromaticPaletteID, enableAlpha, limitBright, limitDark, limitGray);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const paletteItems = [
        paletteUtils.create.paletteItem(baseColor, enableAlpha)
    ];
    for (let i = 1; i < numBoxes; i++) {
        const hueShift = Math.random() * 10 - 5;
        const newColor = utils.conversion.genAllColorValues({
            value: {
                hue: (baseColor.value.hue + hueShift + 360) % 360,
                saturation: Math.min(100, Math.max(0, baseColor.value.saturation - i * 5)),
                lightness: Math.min(100, Math.max(0, baseColor.value.lightness + (i * 10 - 20))),
                alpha: enableAlpha ? Math.random() : 1
            },
            format: 'hsl'
        }).hsl;
        if (newColor) {
            paletteItems.push(create.paletteItem(newColor, enableAlpha));
        }
    }
    return await idb.savePaletteToDB('monochromatic', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ub2Nocm9tYXRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvbW9ub2Nocm9tYXRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7QUFHaEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFM0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBRWpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUNsQyxRQUFnQixFQUNoQixXQUF1QixFQUN2QixXQUFvQixFQUNwQixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQjtJQUVsQixNQUFNLDZCQUE2QixHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFdEUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBRXBFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQ2hDLGVBQWUsRUFDZixFQUFFLEVBQ0YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQ25CLENBQUMsRUFDRCw2QkFBNkIsRUFDN0IsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7S0FDdkQsQ0FBQztJQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDO1lBQ25ELEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztnQkFDakQsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ25CLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQy9DO2dCQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUNsQixHQUFHLEVBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQ3REO2dCQUNELEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0QztZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUVQLElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLE1BQU0sR0FBRyxDQUFDLGVBQWUsQ0FDL0IsZUFBZSxFQUNmLFlBQVksRUFDWixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDWCxXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsQ0FDVCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvbW9ub2Nocm9tYXRpYy50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXgnO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vLi4vaWRiJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBwYWxldHRlVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVVdGlscy5jcmVhdGU7XG5jb25zdCBkZWZhdWx0cyA9IGNvbmZpZy5kZWZhdWx0cztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1vbm9jaHJvbWF0aWMoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsLFxuXHRlbmFibGVBbHBoYTogYm9vbGVhbixcblx0bGltaXRCcmlnaHQ6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudE1vbm9jaHJvbWF0aWNQYWxldHRlSUQgPSBhd2FpdCBpZGIuZ2V0Q3VycmVudFBhbGV0dGVJRCgpO1xuXG5cdGlmIChudW1Cb3hlcyA8IDIpIHtcblx0XHRjb25zb2xlLndhcm4oJ01vbm9jaHJvbWF0aWMgcGFsZXR0ZSByZXF1aXJlcyBhdCBsZWFzdCAyIHN3YXRjaGVzLicpO1xuXG5cdFx0cmV0dXJuIHV0aWxzLnBhbGV0dGUuY3JlYXRlT2JqZWN0KFxuXHRcdFx0J21vbm9jaHJvbWF0aWMnLFxuXHRcdFx0W10sXG5cdFx0XHRkZWZhdWx0cy5jb2xvcnMuaHNsLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnRNb25vY2hyb21hdGljUGFsZXR0ZUlELFxuXHRcdFx0ZW5hYmxlQWxwaGEsXG5cdFx0XHRsaW1pdEJyaWdodCxcblx0XHRcdGxpbWl0RGFyayxcblx0XHRcdGxpbWl0R3JheVxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGN1c3RvbUNvbG9yLCBlbmFibGVBbHBoYSk7XG5cdGNvbnN0IHBhbGV0dGVJdGVtczogUGFsZXR0ZUl0ZW1bXSA9IFtcblx0XHRwYWxldHRlVXRpbHMuY3JlYXRlLnBhbGV0dGVJdGVtKGJhc2VDb2xvciwgZW5hYmxlQWxwaGEpXG5cdF07XG5cblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBudW1Cb3hlczsgaSsrKSB7XG5cdFx0Y29uc3QgaHVlU2hpZnQgPSBNYXRoLnJhbmRvbSgpICogMTAgLSA1O1xuXHRcdGNvbnN0IG5ld0NvbG9yID0gdXRpbHMuY29udmVyc2lvbi5nZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IChiYXNlQ29sb3IudmFsdWUuaHVlICsgaHVlU2hpZnQgKyAzNjApICUgMzYwLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBNYXRoLm1pbihcblx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gLSBpICogNSlcblx0XHRcdFx0KSxcblx0XHRcdFx0bGlnaHRuZXNzOiBNYXRoLm1pbihcblx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArIChpICogMTAgLSAyMCkpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGFscGhhOiBlbmFibGVBbHBoYSA/IE1hdGgucmFuZG9tKCkgOiAxXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH0pLmhzbDtcblxuXHRcdGlmIChuZXdDb2xvcikge1xuXHRcdFx0cGFsZXR0ZUl0ZW1zLnB1c2goY3JlYXRlLnBhbGV0dGVJdGVtKG5ld0NvbG9yLCBlbmFibGVBbHBoYSkpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhd2FpdCBpZGIuc2F2ZVBhbGV0dGVUb0RCKFxuXHRcdCdtb25vY2hyb21hdGljJyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdG51bUJveGVzLFxuXHRcdGVuYWJsZUFscGhhLFxuXHRcdGxpbWl0QnJpZ2h0LFxuXHRcdGxpbWl0RGFyayxcblx0XHRsaW1pdEdyYXlcblx0KTtcbn1cbiJdfQ==