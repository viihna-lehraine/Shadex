// File: src/palette/main/types/monochromatic.ts
import { config } from '../../../config';
import { idb } from '../../../idb';
import { paletteSuperUtils } from '../../common';
import { utils } from '../../../common';
const create = paletteSuperUtils.create;
const defaultHSL = config.defaults.colors.hsl;
const mode = config.mode;
export async function monochromatic(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const currentMonochromaticPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        if (mode.logWarnings)
            console.warn('Monochromatic palette requires at least 2 swatches.');
        return utils.palette.createObject('monochromatic', [], defaultHSL, 0, currentMonochromaticPaletteID, enableAlpha, limitDark, limitGray, limitLight);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const paletteItems = [
        create.paletteItem(baseColor, enableAlpha)
    ];
    for (let i = 1; i < numBoxes; i++) {
        const hueShift = Math.random() * 10 - 5;
        const newColor = utils.conversion.genAllColorValues({
            value: {
                hue: (baseColor.value.hue + hueShift + 360) % 360,
                saturation: Math.min(100, Math.max(0, baseColor.value.saturation - i * 5)),
                lightness: Math.min(100, Math.max(0, baseColor.value.lightness + (i * 10 - 20))),
                alpha: enableAlpha ? Math.random() : 1
            },
            format: 'hsl'
        }).hsl;
        if (newColor) {
            paletteItems.push(create.paletteItem(newColor, enableAlpha));
        }
    }
    return await idb.savePaletteToDB('monochromatic', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ub2Nocm9tYXRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wYWxldHRlL21haW4vdHlwZXMvbW9ub2Nocm9tYXRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7QUFHaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDeEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQzlDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFFekIsTUFBTSxDQUFDLEtBQUssVUFBVSxhQUFhLENBQ2xDLFFBQWdCLEVBQ2hCLFdBQXVCLEVBQ3ZCLFdBQW9CLEVBQ3BCLFNBQWtCLEVBQ2xCLFNBQWtCLEVBQ2xCLFVBQW1CO0lBRW5CLE1BQU0sNkJBQTZCLEdBQUcsTUFBTSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUV0RSxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxXQUFXO1lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMscURBQXFELENBQUMsQ0FBQztRQUVyRSxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUNoQyxlQUFlLEVBQ2YsRUFBRSxFQUNGLFVBQVUsRUFDVixDQUFDLEVBQ0QsNkJBQTZCLEVBQzdCLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsQ0FDVixDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdELE1BQU0sWUFBWSxHQUFrQjtRQUNuQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7S0FDMUMsQ0FBQztJQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDO1lBQ25ELEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztnQkFDakQsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ25CLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQy9DO2dCQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUNsQixHQUFHLEVBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQ3REO2dCQUNELEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0QztZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUVQLElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLE1BQU0sR0FBRyxDQUFDLGVBQWUsQ0FDL0IsZUFBZSxFQUNmLFlBQVksRUFDWixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsQ0FDVixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9wYWxldHRlL21haW4vdHlwZXMvbW9ub2Nocm9tYXRpYy50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXgnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IGlkYiB9IGZyb20gJy4uLy4uLy4uL2lkYic7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVTdXBlclV0aWxzLmNyZWF0ZTtcbmNvbnN0IGRlZmF1bHRIU0wgPSBjb25maWcuZGVmYXVsdHMuY29sb3JzLmhzbDtcbmNvbnN0IG1vZGUgPSBjb25maWcubW9kZTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1vbm9jaHJvbWF0aWMoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsLFxuXHRlbmFibGVBbHBoYTogYm9vbGVhbixcblx0bGltaXREYXJrOiBib29sZWFuLFxuXHRsaW1pdEdyYXk6IGJvb2xlYW4sXG5cdGxpbWl0TGlnaHQ6IGJvb2xlYW5cbik6IFByb21pc2U8UGFsZXR0ZT4ge1xuXHRjb25zdCBjdXJyZW50TW9ub2Nocm9tYXRpY1BhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdGlmIChtb2RlLmxvZ1dhcm5pbmdzKVxuXHRcdFx0Y29uc29sZS53YXJuKCdNb25vY2hyb21hdGljIHBhbGV0dGUgcmVxdWlyZXMgYXQgbGVhc3QgMiBzd2F0Y2hlcy4nKTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCdtb25vY2hyb21hdGljJyxcblx0XHRcdFtdLFxuXHRcdFx0ZGVmYXVsdEhTTCxcblx0XHRcdDAsXG5cdFx0XHRjdXJyZW50TW9ub2Nocm9tYXRpY1BhbGV0dGVJRCxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXREYXJrLFxuXHRcdFx0bGltaXRHcmF5LFxuXHRcdFx0bGltaXRMaWdodFxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGN1c3RvbUNvbG9yLCBlbmFibGVBbHBoYSk7XG5cdGNvbnN0IHBhbGV0dGVJdGVtczogUGFsZXR0ZUl0ZW1bXSA9IFtcblx0XHRjcmVhdGUucGFsZXR0ZUl0ZW0oYmFzZUNvbG9yLCBlbmFibGVBbHBoYSlcblx0XTtcblxuXHRmb3IgKGxldCBpID0gMTsgaSA8IG51bUJveGVzOyBpKyspIHtcblx0XHRjb25zdCBodWVTaGlmdCA9IE1hdGgucmFuZG9tKCkgKiAxMCAtIDU7XG5cdFx0Y29uc3QgbmV3Q29sb3IgPSB1dGlscy5jb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogKGJhc2VDb2xvci52YWx1ZS5odWUgKyBodWVTaGlmdCArIDM2MCkgJSAzNjAsXG5cdFx0XHRcdHNhdHVyYXRpb246IE1hdGgubWluKFxuXHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRNYXRoLm1heCgwLCBiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiAtIGkgKiA1KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IE1hdGgubWluKFxuXHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRNYXRoLm1heCgwLCBiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICsgKGkgKiAxMCAtIDIwKSlcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDFcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSkuaHNsO1xuXG5cdFx0aWYgKG5ld0NvbG9yKSB7XG5cdFx0XHRwYWxldHRlSXRlbXMucHVzaChjcmVhdGUucGFsZXR0ZUl0ZW0obmV3Q29sb3IsIGVuYWJsZUFscGhhKSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGF3YWl0IGlkYi5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J21vbm9jaHJvbWF0aWMnLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRiYXNlQ29sb3IsXG5cdFx0bnVtQm94ZXMsXG5cdFx0ZW5hYmxlQWxwaGEsXG5cdFx0bGltaXREYXJrLFxuXHRcdGxpbWl0R3JheSxcblx0XHRsaW1pdExpZ2h0XG5cdCk7XG59XG4iXX0=