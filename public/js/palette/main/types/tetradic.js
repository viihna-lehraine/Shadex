// File: src/palette/main/types/tetradic.ts
import { idb } from '../../../idb.js';
import { config } from '../../../config.js';
import { utils } from '../../../common.js';
import { paletteUtils } from '../../utils.js';
const create = paletteUtils.create;
const defaults = config.defaults;
const genHues = paletteUtils.genHues;
const paletteRanges = config.consts.palette.ranges;
export async function tetradic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const currentTetradicPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 4) {
        console.warn('Tetradic palette requires at least 4 swatches.');
        return utils.palette.createObject('tetradic', [], defaults.colors.hsl, 0, currentTetradicPaletteID, enableAlpha, limitBright, limitDark, limitGray);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const tetradicHues = genHues.tetradic(baseColor.value.hue);
    const paletteItems = [
        paletteUtils.create.paletteItem(baseColor, enableAlpha),
        ...tetradicHues.map((hue, index) => {
            const adjustedHSL = {
                value: {
                    hue,
                    saturation: Math.max(0, Math.min(baseColor.value.saturation +
                        (index % 2 === 0
                            ? -paletteRanges.tetra.satShift
                            : paletteRanges.tetra.satShift), 100)),
                    lightness: Math.max(0, Math.min(baseColor.value.lightness +
                        (index % 2 === 0
                            ? -paletteRanges.tetra.lightShift
                            : paletteRanges.tetra.lightShift), 100)),
                    alpha: enableAlpha ? Math.random() : 1
                },
                format: 'hsl'
            };
            const adjustedColor = utils.conversion.genAllColorValues(adjustedHSL);
            return paletteUtils.create.paletteItem(adjustedColor.hsl, enableAlpha);
        })
    ];
    return await idb.savePaletteToDB('tetradic', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFkaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFsZXR0ZS9tYWluL3R5cGVzL3RldHJhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJDQUEyQztBQUczQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUzQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ25DLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDakMsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUNyQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFFbkQsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQzdCLFFBQWdCLEVBQ2hCLFdBQXVCLEVBQ3ZCLFdBQW9CLEVBQ3BCLFdBQW9CLEVBQ3BCLFNBQWtCLEVBQ2xCLFNBQWtCO0lBRWxCLE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUVqRSxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7UUFFL0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FDaEMsVUFBVSxFQUNWLEVBQUUsRUFDRixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFDbkIsQ0FBQyxFQUNELHdCQUF3QixFQUN4QixXQUFXLEVBQ1gsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLENBQ1QsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0QsTUFBTSxZQUFZLEdBQWtCO1FBQ25DLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7UUFDdkQsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFRO2dCQUN4QixLQUFLLEVBQUU7b0JBQ04sR0FBRztvQkFDSCxVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbkIsQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQ1AsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVO3dCQUN6QixDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQzs0QkFDZixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVE7NEJBQy9CLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUNqQyxHQUFHLENBQ0gsQ0FDRDtvQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbEIsQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQ1AsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTO3dCQUN4QixDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQzs0QkFDZixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVU7NEJBQ2pDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUNuQyxHQUFHLENBQ0gsQ0FDRDtvQkFDRCxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3RDO2dCQUNELE1BQU0sRUFBRSxLQUFLO2FBQ2IsQ0FBQztZQUNGLE1BQU0sYUFBYSxHQUNsQixLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWpELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQ3JDLGFBQWEsQ0FBQyxHQUFVLEVBQ3hCLFdBQVcsQ0FDWCxDQUFDO1FBQ0gsQ0FBQyxDQUFDO0tBQ0YsQ0FBQztJQUVGLE9BQU8sTUFBTSxHQUFHLENBQUMsZUFBZSxDQUMvQixVQUFVLEVBQ1YsWUFBWSxFQUNaLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvbWFpbi90eXBlcy90ZXRyYWRpYy50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXgnO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vLi4vaWRiJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBwYWxldHRlVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVVdGlscy5jcmVhdGU7XG5jb25zdCBkZWZhdWx0cyA9IGNvbmZpZy5kZWZhdWx0cztcbmNvbnN0IGdlbkh1ZXMgPSBwYWxldHRlVXRpbHMuZ2VuSHVlcztcbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBjb25maWcuY29uc3RzLnBhbGV0dGUucmFuZ2VzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGV0cmFkaWMoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsLFxuXHRlbmFibGVBbHBoYTogYm9vbGVhbixcblx0bGltaXRCcmlnaHQ6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudFRldHJhZGljUGFsZXR0ZUlEID0gYXdhaXQgaWRiLmdldEN1cnJlbnRQYWxldHRlSUQoKTtcblxuXHRpZiAobnVtQm94ZXMgPCA0KSB7XG5cdFx0Y29uc29sZS53YXJuKCdUZXRyYWRpYyBwYWxldHRlIHJlcXVpcmVzIGF0IGxlYXN0IDQgc3dhdGNoZXMuJyk7XG5cblx0XHRyZXR1cm4gdXRpbHMucGFsZXR0ZS5jcmVhdGVPYmplY3QoXG5cdFx0XHQndGV0cmFkaWMnLFxuXHRcdFx0W10sXG5cdFx0XHRkZWZhdWx0cy5jb2xvcnMuaHNsLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnRUZXRyYWRpY1BhbGV0dGVJRCxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXRCcmlnaHQsXG5cdFx0XHRsaW1pdERhcmssXG5cdFx0XHRsaW1pdEdyYXlcblx0XHQpO1xuXHR9XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCB0ZXRyYWRpY0h1ZXMgPSBnZW5IdWVzLnRldHJhZGljKGJhc2VDb2xvci52YWx1ZS5odWUpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBbXG5cdFx0cGFsZXR0ZVV0aWxzLmNyZWF0ZS5wYWxldHRlSXRlbShiYXNlQ29sb3IsIGVuYWJsZUFscGhhKSxcblx0XHQuLi50ZXRyYWRpY0h1ZXMubWFwKChodWUsIGluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCBhZGp1c3RlZEhTTDogSFNMID0ge1xuXHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdGh1ZSxcblx0XHRcdFx0XHRzYXR1cmF0aW9uOiBNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gK1xuXHRcdFx0XHRcdFx0XHRcdChpbmRleCAlIDIgPT09IDBcblx0XHRcdFx0XHRcdFx0XHRcdD8gLXBhbGV0dGVSYW5nZXMudGV0cmEuc2F0U2hpZnRcblx0XHRcdFx0XHRcdFx0XHRcdDogcGFsZXR0ZVJhbmdlcy50ZXRyYS5zYXRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0bGlnaHRuZXNzOiBNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRNYXRoLm1pbihcblx0XHRcdFx0XHRcdFx0YmFzZUNvbG9yLnZhbHVlLmxpZ2h0bmVzcyArXG5cdFx0XHRcdFx0XHRcdFx0KGluZGV4ICUgMiA9PT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0PyAtcGFsZXR0ZVJhbmdlcy50ZXRyYS5saWdodFNoaWZ0XG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHBhbGV0dGVSYW5nZXMudGV0cmEubGlnaHRTaGlmdCksXG5cdFx0XHRcdFx0XHRcdDEwMFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0YWxwaGE6IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdFx0fTtcblx0XHRcdGNvbnN0IGFkanVzdGVkQ29sb3IgPVxuXHRcdFx0XHR1dGlscy5jb252ZXJzaW9uLmdlbkFsbENvbG9yVmFsdWVzKGFkanVzdGVkSFNMKTtcblxuXHRcdFx0cmV0dXJuIHBhbGV0dGVVdGlscy5jcmVhdGUucGFsZXR0ZUl0ZW0oXG5cdFx0XHRcdGFkanVzdGVkQ29sb3IuaHNsIGFzIEhTTCxcblx0XHRcdFx0ZW5hYmxlQWxwaGFcblx0XHRcdCk7XG5cdFx0fSlcblx0XTtcblxuXHRyZXR1cm4gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQndGV0cmFkaWMnLFxuXHRcdHBhbGV0dGVJdGVtcyxcblx0XHRiYXNlQ29sb3IsXG5cdFx0bnVtQm94ZXMsXG5cdFx0ZW5hYmxlQWxwaGEsXG5cdFx0bGltaXRCcmlnaHQsXG5cdFx0bGltaXREYXJrLFxuXHRcdGxpbWl0R3JheVxuXHQpO1xufVxuIl19