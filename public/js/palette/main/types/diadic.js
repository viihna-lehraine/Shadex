// File: src/palette/main/types/diadic.ts
import { config } from '../../../config.js';
import { core, utils } from '../../../common.js';
import { idb } from '../../../idb.js';
import { paletteUtils } from '../../utils.js';
const consts = config.consts;
const create = paletteUtils.create;
const defaults = config.defaults;
const paletteRanges = consts.palette.ranges;
const getWeightedRandomInterval = paletteUtils.probability.getWeightedRandomInterval;
function genHues(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        const diadicHues = [];
        const randomDistance = getWeightedRandomInterval();
        const hue1 = clonedBaseHue;
        const hue2 = (hue1 + randomDistance) % 360;
        diadicHues.push(hue1, hue2);
        return diadicHues;
    }
    catch (error) {
        console.error(`Error generating diadic hues: ${error}`);
        return [];
    }
}
export async function diadic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const currentDiadicPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        console.warn('Diadic palette requires at least 2 swatches.');
        return utils.palette.createObject('diadic', [], defaults.colors.hsl, 0, currentDiadicPaletteID, enableAlpha, limitBright, limitDark, limitGray);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const hues = genHues(baseColor.value.hue);
    const paletteItems = Array.from({ length: numBoxes }, (_, i) => {
        const saturationShift = Math.random() * paletteRanges.diadic.satShift -
            paletteRanges.diadic.satShift / 2;
        const lightnessShift = Math.random() * paletteRanges.diadic.lightShift -
            paletteRanges.diadic.lightShift / 2;
        const newColor = {
            value: {
                hue: hues[i % hues.length],
                saturation: Math.min(100, Math.max(0, baseColor.value.saturation + saturationShift)),
                lightness: Math.min(100, Math.max(0, baseColor.value.lightness + lightnessShift)),
                alpha: enableAlpha ? Math.random() : 1
            },
            format: 'hsl'
        };
        return create.paletteItem(newColor, enableAlpha);
    });
    return await idb.savePaletteToDB('diadic', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZGljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9kaWFkaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUNBQXlDO0FBR3pDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUzQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQzdCLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDbkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUU1QyxNQUFNLHlCQUF5QixHQUM5QixZQUFZLENBQUMsV0FBVyxDQUFDLHlCQUF5QixDQUFDO0FBRXBELFNBQVMsT0FBTyxDQUFDLE9BQWU7SUFDL0IsSUFBSSxDQUFDO1FBQ0osTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxjQUFjLEdBQUcseUJBQXlCLEVBQUUsQ0FBQztRQUNuRCxNQUFNLElBQUksR0FBRyxhQUFhLENBQUM7UUFDM0IsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRTNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTVCLE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUMzQixRQUFnQixFQUNoQixXQUF1QixFQUN2QixXQUFvQixFQUNwQixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQjtJQUVsQixNQUFNLHNCQUFzQixHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFL0QsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBRTdELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQ2hDLFFBQVEsRUFDUixFQUFFLEVBQ0YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQ25CLENBQUMsRUFDRCxzQkFBc0IsRUFDdEIsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM5RCxNQUFNLGVBQWUsR0FDcEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUTtZQUM3QyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbkMsTUFBTSxjQUFjLEdBQ25CLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVU7WUFDL0MsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sUUFBUSxHQUFRO1lBQ3JCLEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUMxQixVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbkIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQyxDQUN6RDtnQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbEIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxDQUN2RDtnQkFDRCxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEM7WUFDRCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLEdBQUcsQ0FBQyxlQUFlLENBQy9CLFFBQVEsRUFDUixZQUFZLEVBQ1osU0FBUyxFQUNULFFBQVEsRUFDUixXQUFXLEVBQ1gsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLENBQ1QsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9tYWluL3R5cGVzL2RpYWRpYy50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUgfSBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgY29yZSwgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgaWRiIH0gZnJvbSAnLi4vLi4vLi4vaWRiJztcbmltcG9ydCB7IHBhbGV0dGVVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuY29uc3QgY29uc3RzID0gY29uZmlnLmNvbnN0cztcbmNvbnN0IGNyZWF0ZSA9IHBhbGV0dGVVdGlscy5jcmVhdGU7XG5jb25zdCBkZWZhdWx0cyA9IGNvbmZpZy5kZWZhdWx0cztcbmNvbnN0IHBhbGV0dGVSYW5nZXMgPSBjb25zdHMucGFsZXR0ZS5yYW5nZXM7XG5cbmNvbnN0IGdldFdlaWdodGVkUmFuZG9tSW50ZXJ2YWwgPVxuXHRwYWxldHRlVXRpbHMucHJvYmFiaWxpdHkuZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbDtcblxuZnVuY3Rpb24gZ2VuSHVlcyhiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xvbmVkQmFzZUh1ZSA9IGNvcmUuY2xvbmUoYmFzZUh1ZSk7XG5cdFx0Y29uc3QgZGlhZGljSHVlcyA9IFtdO1xuXHRcdGNvbnN0IHJhbmRvbURpc3RhbmNlID0gZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCgpO1xuXHRcdGNvbnN0IGh1ZTEgPSBjbG9uZWRCYXNlSHVlO1xuXHRcdGNvbnN0IGh1ZTIgPSAoaHVlMSArIHJhbmRvbURpc3RhbmNlKSAlIDM2MDtcblxuXHRcdGRpYWRpY0h1ZXMucHVzaChodWUxLCBodWUyKTtcblxuXHRcdHJldHVybiBkaWFkaWNIdWVzO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgZGlhZGljIGh1ZXM6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkaWFkaWMoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsLFxuXHRlbmFibGVBbHBoYTogYm9vbGVhbixcblx0bGltaXRCcmlnaHQ6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudERpYWRpY1BhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdGNvbnNvbGUud2FybignRGlhZGljIHBhbGV0dGUgcmVxdWlyZXMgYXQgbGVhc3QgMiBzd2F0Y2hlcy4nKTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCdkaWFkaWMnLFxuXHRcdFx0W10sXG5cdFx0XHRkZWZhdWx0cy5jb2xvcnMuaHNsLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnREaWFkaWNQYWxldHRlSUQsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0QnJpZ2h0LFxuXHRcdFx0bGltaXREYXJrLFxuXHRcdFx0bGltaXRHcmF5XG5cdFx0KTtcblx0fVxuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoY3VzdG9tQ29sb3IsIGVuYWJsZUFscGhhKTtcblx0Y29uc3QgaHVlcyA9IGdlbkh1ZXMoYmFzZUNvbG9yLnZhbHVlLmh1ZSk7XG5cdGNvbnN0IHBhbGV0dGVJdGVtcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IG51bUJveGVzIH0sIChfLCBpKSA9PiB7XG5cdFx0Y29uc3Qgc2F0dXJhdGlvblNoaWZ0ID1cblx0XHRcdE1hdGgucmFuZG9tKCkgKiBwYWxldHRlUmFuZ2VzLmRpYWRpYy5zYXRTaGlmdCAtXG5cdFx0XHRwYWxldHRlUmFuZ2VzLmRpYWRpYy5zYXRTaGlmdCAvIDI7XG5cdFx0Y29uc3QgbGlnaHRuZXNzU2hpZnQgPVxuXHRcdFx0TWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuZGlhZGljLmxpZ2h0U2hpZnQgLVxuXHRcdFx0cGFsZXR0ZVJhbmdlcy5kaWFkaWMubGlnaHRTaGlmdCAvIDI7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogaHVlc1tpICUgaHVlcy5sZW5ndGhdLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBNYXRoLm1pbihcblx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gKyBzYXR1cmF0aW9uU2hpZnQpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGxpZ2h0bmVzczogTWF0aC5taW4oXG5cdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdE1hdGgubWF4KDAsIGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgKyBsaWdodG5lc3NTaGlmdClcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDFcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdHJldHVybiBjcmVhdGUucGFsZXR0ZUl0ZW0obmV3Q29sb3IsIGVuYWJsZUFscGhhKTtcblx0fSk7XG5cblx0cmV0dXJuIGF3YWl0IGlkYi5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J2RpYWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRudW1Cb3hlcyxcblx0XHRlbmFibGVBbHBoYSxcblx0XHRsaW1pdEJyaWdodCxcblx0XHRsaW1pdERhcmssXG5cdFx0bGltaXRHcmF5XG5cdCk7XG59XG4iXX0=