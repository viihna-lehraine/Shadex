// File: src/palette/main/types/diadic.ts
import { config } from '../../../config';
import { idb } from '../../../idb';
import { paletteSuperUtils } from '../../common';
import { utils } from '../../../common';
const consts = config.consts;
const create = paletteSuperUtils.create;
const defaults = config.defaults;
const genHues = paletteSuperUtils.genHues;
const mode = config.mode;
const paletteRanges = consts.palette.ranges;
export async function diadic(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const currentDiadicPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        if (mode.logWarnings)
            console.warn('Diadic palette requires at least 2 swatches.');
        return utils.palette.createObject('diadic', [], defaults.colors.hsl, 0, currentDiadicPaletteID, enableAlpha, limitDark, limitGray, limitLight);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const hues = genHues.diadic(baseColor.value.hue);
    const paletteItems = Array.from({ length: numBoxes }, (_, i) => {
        const saturationShift = Math.random() * paletteRanges.diadic.satShift -
            paletteRanges.diadic.satShift / 2;
        const lightnessShift = Math.random() * paletteRanges.diadic.lightShift -
            paletteRanges.diadic.lightShift / 2;
        const newColor = {
            value: {
                hue: hues[i % hues.length],
                saturation: Math.min(100, Math.max(0, baseColor.value.saturation + saturationShift)),
                lightness: Math.min(100, Math.max(0, baseColor.value.lightness + lightnessShift)),
                alpha: enableAlpha ? Math.random() : 1
            },
            format: 'hsl'
        };
        return create.paletteItem(newColor, enableAlpha);
    });
    return await idb.savePaletteToDB('diadic', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZGljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9kaWFkaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUNBQXlDO0FBR3pDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM3QixNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDeEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDMUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUN6QixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUU1QyxNQUFNLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FDM0IsUUFBZ0IsRUFDaEIsV0FBdUIsRUFDdkIsV0FBb0IsRUFDcEIsU0FBa0IsRUFDbEIsU0FBa0IsRUFDbEIsVUFBbUI7SUFFbkIsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBRS9ELElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFdBQVc7WUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBRTlELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQ2hDLFFBQVEsRUFDUixFQUFFLEVBQ0YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQ25CLENBQUMsRUFDRCxzQkFBc0IsRUFDdEIsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxDQUNWLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDOUQsTUFBTSxlQUFlLEdBQ3BCLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVE7WUFDN0MsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sY0FBYyxHQUNuQixJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVO1lBQy9DLGFBQWEsQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNyQyxNQUFNLFFBQVEsR0FBUTtZQUNyQixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDMUIsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ25CLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsQ0FDekQ7Z0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ2xCLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsQ0FDdkQ7Z0JBQ0QsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxHQUFHLENBQUMsZUFBZSxDQUMvQixRQUFRLEVBQ1IsWUFBWSxFQUNaLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxDQUNWLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9kaWFkaWMudHNcblxuaW1wb3J0IHsgSFNMLCBQYWxldHRlIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IGlkYiB9IGZyb20gJy4uLy4uLy4uL2lkYic7XG5pbXBvcnQgeyBwYWxldHRlU3VwZXJVdGlscyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IGNvbnN0cyA9IGNvbmZpZy5jb25zdHM7XG5jb25zdCBjcmVhdGUgPSBwYWxldHRlU3VwZXJVdGlscy5jcmVhdGU7XG5jb25zdCBkZWZhdWx0cyA9IGNvbmZpZy5kZWZhdWx0cztcbmNvbnN0IGdlbkh1ZXMgPSBwYWxldHRlU3VwZXJVdGlscy5nZW5IdWVzO1xuY29uc3QgbW9kZSA9IGNvbmZpZy5tb2RlO1xuY29uc3QgcGFsZXR0ZVJhbmdlcyA9IGNvbnN0cy5wYWxldHRlLnJhbmdlcztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRpYWRpYyhcblx0bnVtQm94ZXM6IG51bWJlcixcblx0Y3VzdG9tQ29sb3I6IEhTTCB8IG51bGwsXG5cdGVuYWJsZUFscGhhOiBib29sZWFuLFxuXHRsaW1pdERhcms6IGJvb2xlYW4sXG5cdGxpbWl0R3JheTogYm9vbGVhbixcblx0bGltaXRMaWdodDogYm9vbGVhblxuKTogUHJvbWlzZTxQYWxldHRlPiB7XG5cdGNvbnN0IGN1cnJlbnREaWFkaWNQYWxldHRlSUQgPSBhd2FpdCBpZGIuZ2V0Q3VycmVudFBhbGV0dGVJRCgpO1xuXG5cdGlmIChudW1Cb3hlcyA8IDIpIHtcblx0XHRpZiAobW9kZS5sb2dXYXJuaW5ncylcblx0XHRcdGNvbnNvbGUud2FybignRGlhZGljIHBhbGV0dGUgcmVxdWlyZXMgYXQgbGVhc3QgMiBzd2F0Y2hlcy4nKTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCdkaWFkaWMnLFxuXHRcdFx0W10sXG5cdFx0XHRkZWZhdWx0cy5jb2xvcnMuaHNsLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnREaWFkaWNQYWxldHRlSUQsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFyayxcblx0XHRcdGxpbWl0R3JheSxcblx0XHRcdGxpbWl0TGlnaHRcblx0XHQpO1xuXHR9XG5cblx0Y29uc3QgYmFzZUNvbG9yID0gY3JlYXRlLmJhc2VDb2xvcihjdXN0b21Db2xvciwgZW5hYmxlQWxwaGEpO1xuXHRjb25zdCBodWVzID0gZ2VuSHVlcy5kaWFkaWMoYmFzZUNvbG9yLnZhbHVlLmh1ZSk7XG5cdGNvbnN0IHBhbGV0dGVJdGVtcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IG51bUJveGVzIH0sIChfLCBpKSA9PiB7XG5cdFx0Y29uc3Qgc2F0dXJhdGlvblNoaWZ0ID1cblx0XHRcdE1hdGgucmFuZG9tKCkgKiBwYWxldHRlUmFuZ2VzLmRpYWRpYy5zYXRTaGlmdCAtXG5cdFx0XHRwYWxldHRlUmFuZ2VzLmRpYWRpYy5zYXRTaGlmdCAvIDI7XG5cdFx0Y29uc3QgbGlnaHRuZXNzU2hpZnQgPVxuXHRcdFx0TWF0aC5yYW5kb20oKSAqIHBhbGV0dGVSYW5nZXMuZGlhZGljLmxpZ2h0U2hpZnQgLVxuXHRcdFx0cGFsZXR0ZVJhbmdlcy5kaWFkaWMubGlnaHRTaGlmdCAvIDI7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogaHVlc1tpICUgaHVlcy5sZW5ndGhdLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBNYXRoLm1pbihcblx0XHRcdFx0XHQxMDAsXG5cdFx0XHRcdFx0TWF0aC5tYXgoMCwgYmFzZUNvbG9yLnZhbHVlLnNhdHVyYXRpb24gKyBzYXR1cmF0aW9uU2hpZnQpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGxpZ2h0bmVzczogTWF0aC5taW4oXG5cdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdE1hdGgubWF4KDAsIGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgKyBsaWdodG5lc3NTaGlmdClcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDFcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdHJldHVybiBjcmVhdGUucGFsZXR0ZUl0ZW0obmV3Q29sb3IsIGVuYWJsZUFscGhhKTtcblx0fSk7XG5cblx0cmV0dXJuIGF3YWl0IGlkYi5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J2RpYWRpYycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRudW1Cb3hlcyxcblx0XHRlbmFibGVBbHBoYSxcblx0XHRsaW1pdERhcmssXG5cdFx0bGltaXRHcmF5LFxuXHRcdGxpbWl0TGlnaHRcblx0KTtcbn1cbiJdfQ==