// File: src/palette/main/types/analogous.ts
import { config } from '../../../config';
import { idb } from '../../../idb';
import { paletteUtils, paletteSuperUtils } from '../../common';
import { utils } from '../../../common';
const create = paletteSuperUtils.create;
const defaultHSL = config.defaults.colors.hsl;
const genHues = paletteUtils.genHues;
const mode = config.mode;
export async function analogous(numBoxes, customColor, enableAlpha, limitDark, limitGray, limitLight) {
    const currentAnalogousPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        if (mode.logWarnings)
            console.warn('Analogous palette requires at least 2 swatches.');
        return utils.palette.createObject('analogous', [], defaultHSL, 0, currentAnalogousPaletteID, enableAlpha, limitDark, limitGray, limitLight);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const hues = genHues.analogous(baseColor, numBoxes);
    const paletteItems = hues.map((hue, i) => {
        const newColor = {
            value: {
                hue,
                saturation: Math.min(100, Math.max(0, baseColor.value.saturation + (Math.random() - 0.5) * 10)),
                lightness: Math.min(100, Math.max(0, baseColor.value.lightness + (i % 2 === 0 ? 5 : -5))),
                alpha: enableAlpha ? Math.random() : 1
            },
            format: 'hsl'
        };
        return create.paletteItem(newColor, enableAlpha);
    });
    return await idb.savePaletteToDB('analogous', paletteItems, baseColor, numBoxes, enableAlpha, limitDark, limitGray, limitLight);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbG9nb3VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9hbmFsb2dvdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBRzVDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDL0QsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXhDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUN4QyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDOUMsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUNyQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBRXpCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUM5QixRQUFnQixFQUNoQixXQUF1QixFQUN2QixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQixFQUNsQixVQUFtQjtJQUVuQixNQUFNLHlCQUF5QixHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFbEUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLENBQUMsV0FBVztZQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLGlEQUFpRCxDQUFDLENBQUM7UUFFakUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FDaEMsV0FBVyxFQUNYLEVBQUUsRUFDRixVQUFVLEVBQ1YsQ0FBQyxFQUNELHlCQUF5QixFQUN6QixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLENBQ1YsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRCxNQUFNLFlBQVksR0FBa0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN2RCxNQUFNLFFBQVEsR0FBUTtZQUNyQixLQUFLLEVBQUU7Z0JBQ04sR0FBRztnQkFDSCxVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbkIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQ1AsQ0FBQyxFQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FDdkQsQ0FDRDtnQkFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FDbEIsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQ1AsQ0FBQyxFQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEQsQ0FDRDtnQkFDRCxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEM7WUFDRCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLEdBQUcsQ0FBQyxlQUFlLENBQy9CLFdBQVcsRUFDWCxZQUFZLEVBQ1osU0FBUyxFQUNULFFBQVEsRUFDUixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLENBQ1YsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvcGFsZXR0ZS9tYWluL3R5cGVzL2FuYWxvZ291cy50c1xuXG5pbXBvcnQgeyBIU0wsIFBhbGV0dGUsIFBhbGV0dGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IGlkYiB9IGZyb20gJy4uLy4uLy4uL2lkYic7XG5pbXBvcnQgeyBwYWxldHRlVXRpbHMsIHBhbGV0dGVTdXBlclV0aWxzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uJztcblxuY29uc3QgY3JlYXRlID0gcGFsZXR0ZVN1cGVyVXRpbHMuY3JlYXRlO1xuY29uc3QgZGVmYXVsdEhTTCA9IGNvbmZpZy5kZWZhdWx0cy5jb2xvcnMuaHNsO1xuY29uc3QgZ2VuSHVlcyA9IHBhbGV0dGVVdGlscy5nZW5IdWVzO1xuY29uc3QgbW9kZSA9IGNvbmZpZy5tb2RlO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYW5hbG9nb3VzKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogSFNMIHwgbnVsbCxcblx0ZW5hYmxlQWxwaGE6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuLFxuXHRsaW1pdExpZ2h0OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudEFuYWxvZ291c1BhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdGlmIChtb2RlLmxvZ1dhcm5pbmdzKVxuXHRcdFx0Y29uc29sZS53YXJuKCdBbmFsb2dvdXMgcGFsZXR0ZSByZXF1aXJlcyBhdCBsZWFzdCAyIHN3YXRjaGVzLicpO1xuXG5cdFx0cmV0dXJuIHV0aWxzLnBhbGV0dGUuY3JlYXRlT2JqZWN0KFxuXHRcdFx0J2FuYWxvZ291cycsXG5cdFx0XHRbXSxcblx0XHRcdGRlZmF1bHRIU0wsXG5cdFx0XHQwLFxuXHRcdFx0Y3VycmVudEFuYWxvZ291c1BhbGV0dGVJRCxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXREYXJrLFxuXHRcdFx0bGltaXRHcmF5LFxuXHRcdFx0bGltaXRMaWdodFxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBiYXNlQ29sb3IgPSBjcmVhdGUuYmFzZUNvbG9yKGN1c3RvbUNvbG9yLCBlbmFibGVBbHBoYSk7XG5cdGNvbnN0IGh1ZXMgPSBnZW5IdWVzLmFuYWxvZ291cyhiYXNlQ29sb3IsIG51bUJveGVzKTtcblx0Y29uc3QgcGFsZXR0ZUl0ZW1zOiBQYWxldHRlSXRlbVtdID0gaHVlcy5tYXAoKGh1ZSwgaSkgPT4ge1xuXHRcdGNvbnN0IG5ld0NvbG9yOiBIU0wgPSB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWUsXG5cdFx0XHRcdHNhdHVyYXRpb246IE1hdGgubWluKFxuXHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUuc2F0dXJhdGlvbiArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDEwXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsaWdodG5lc3M6IE1hdGgubWluKFxuXHRcdFx0XHRcdDEwMCxcblx0XHRcdFx0XHRNYXRoLm1heChcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRiYXNlQ29sb3IudmFsdWUubGlnaHRuZXNzICsgKGkgJSAyID09PSAwID8gNSA6IC01KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0YWxwaGE6IGVuYWJsZUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDFcblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fTtcblxuXHRcdHJldHVybiBjcmVhdGUucGFsZXR0ZUl0ZW0obmV3Q29sb3IsIGVuYWJsZUFscGhhKTtcblx0fSk7XG5cblx0cmV0dXJuIGF3YWl0IGlkYi5zYXZlUGFsZXR0ZVRvREIoXG5cdFx0J2FuYWxvZ291cycsXG5cdFx0cGFsZXR0ZUl0ZW1zLFxuXHRcdGJhc2VDb2xvcixcblx0XHRudW1Cb3hlcyxcblx0XHRlbmFibGVBbHBoYSxcblx0XHRsaW1pdERhcmssXG5cdFx0bGltaXRHcmF5LFxuXHRcdGxpbWl0TGlnaHRcblx0KTtcbn1cbiJdfQ==