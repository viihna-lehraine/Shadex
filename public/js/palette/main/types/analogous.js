// File: src/palette/main/types/analogous.ts
import { config } from '../../../config.js';
import { utils } from '../../../common.js';
import { paletteUtils } from '../../utils.js';
import { idb } from '../../../idb.js';
const create = paletteUtils.create;
const defaults = config.defaults;
const genHues = paletteUtils.genHues;
export async function analogous(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray) {
    const currentAnalogousPaletteID = await idb.getCurrentPaletteID();
    if (numBoxes < 2) {
        console.warn('Analogous palette requires at least 2 swatches.');
        return utils.palette.createObject('analogous', [], defaults.colors.hsl, 0, currentAnalogousPaletteID, enableAlpha, limitBright, limitDark, limitGray);
    }
    const baseColor = create.baseColor(customColor, enableAlpha);
    const hues = genHues.analogous(baseColor, numBoxes);
    const paletteItems = hues.map((hue, i) => {
        const newColor = {
            value: {
                hue,
                saturation: Math.min(100, Math.max(0, baseColor.value.saturation + (Math.random() - 0.5) * 10)),
                lightness: Math.min(100, Math.max(0, baseColor.value.lightness + (i % 2 === 0 ? 5 : -5))),
                alpha: enableAlpha ? Math.random() : 1
            },
            format: 'hsl'
        };
        return create.paletteItem(newColor, enableAlpha);
    });
    return await idb.savePaletteToDB('analogous', paletteItems, baseColor, numBoxes, enableAlpha, limitBright, limitDark, limitGray);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbG9nb3VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9hbmFsb2dvdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBRzVDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRW5DLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDbkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUM5QixRQUFnQixFQUNoQixXQUF1QixFQUN2QixXQUFvQixFQUNwQixXQUFvQixFQUNwQixTQUFrQixFQUNsQixTQUFrQjtJQUVsQixNQUFNLHlCQUF5QixHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFbEUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBRWhFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQ2hDLFdBQVcsRUFDWCxFQUFFLEVBQ0YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQ25CLENBQUMsRUFDRCx5QkFBeUIsRUFDekIsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEQsTUFBTSxZQUFZLEdBQWtCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkQsTUFBTSxRQUFRLEdBQVE7WUFDckIsS0FBSyxFQUFFO2dCQUNOLEdBQUc7Z0JBQ0gsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ25CLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQ3ZELENBQ0Q7Z0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQ2xCLEdBQUcsRUFDSCxJQUFJLENBQUMsR0FBRyxDQUNQLENBQUMsRUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2xELENBQ0Q7Z0JBQ0QsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxHQUFHLENBQUMsZUFBZSxDQUMvQixXQUFXLEVBQ1gsWUFBWSxFQUNaLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxDQUNULENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL3BhbGV0dGUvbWFpbi90eXBlcy9hbmFsb2dvdXMudHNcblxuaW1wb3J0IHsgSFNMLCBQYWxldHRlLCBQYWxldHRlSXRlbSB9IGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBwYWxldHRlVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBpZGIgfSBmcm9tICcuLi8uLi8uLi9pZGInO1xuXG5jb25zdCBjcmVhdGUgPSBwYWxldHRlVXRpbHMuY3JlYXRlO1xuY29uc3QgZGVmYXVsdHMgPSBjb25maWcuZGVmYXVsdHM7XG5jb25zdCBnZW5IdWVzID0gcGFsZXR0ZVV0aWxzLmdlbkh1ZXM7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhbmFsb2dvdXMoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsLFxuXHRlbmFibGVBbHBoYTogYm9vbGVhbixcblx0bGltaXRCcmlnaHQ6IGJvb2xlYW4sXG5cdGxpbWl0RGFyazogYm9vbGVhbixcblx0bGltaXRHcmF5OiBib29sZWFuXG4pOiBQcm9taXNlPFBhbGV0dGU+IHtcblx0Y29uc3QgY3VycmVudEFuYWxvZ291c1BhbGV0dGVJRCA9IGF3YWl0IGlkYi5nZXRDdXJyZW50UGFsZXR0ZUlEKCk7XG5cblx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdGNvbnNvbGUud2FybignQW5hbG9nb3VzIHBhbGV0dGUgcmVxdWlyZXMgYXQgbGVhc3QgMiBzd2F0Y2hlcy4nKTtcblxuXHRcdHJldHVybiB1dGlscy5wYWxldHRlLmNyZWF0ZU9iamVjdChcblx0XHRcdCdhbmFsb2dvdXMnLFxuXHRcdFx0W10sXG5cdFx0XHRkZWZhdWx0cy5jb2xvcnMuaHNsLFxuXHRcdFx0MCxcblx0XHRcdGN1cnJlbnRBbmFsb2dvdXNQYWxldHRlSUQsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0QnJpZ2h0LFxuXHRcdFx0bGltaXREYXJrLFxuXHRcdFx0bGltaXRHcmF5XG5cdFx0KTtcblx0fVxuXG5cdGNvbnN0IGJhc2VDb2xvciA9IGNyZWF0ZS5iYXNlQ29sb3IoY3VzdG9tQ29sb3IsIGVuYWJsZUFscGhhKTtcblx0Y29uc3QgaHVlcyA9IGdlbkh1ZXMuYW5hbG9nb3VzKGJhc2VDb2xvciwgbnVtQm94ZXMpO1xuXHRjb25zdCBwYWxldHRlSXRlbXM6IFBhbGV0dGVJdGVtW10gPSBodWVzLm1hcCgoaHVlLCBpKSA9PiB7XG5cdFx0Y29uc3QgbmV3Q29sb3I6IEhTTCA9IHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZSxcblx0XHRcdFx0c2F0dXJhdGlvbjogTWF0aC5taW4oXG5cdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5zYXR1cmF0aW9uICsgKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTBcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGxpZ2h0bmVzczogTWF0aC5taW4oXG5cdFx0XHRcdFx0MTAwLFxuXHRcdFx0XHRcdE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdGJhc2VDb2xvci52YWx1ZS5saWdodG5lc3MgKyAoaSAlIDIgPT09IDAgPyA1IDogLTUpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRhbHBoYTogZW5hYmxlQWxwaGEgPyBNYXRoLnJhbmRvbSgpIDogMVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGNyZWF0ZS5wYWxldHRlSXRlbShuZXdDb2xvciwgZW5hYmxlQWxwaGEpO1xuXHR9KTtcblxuXHRyZXR1cm4gYXdhaXQgaWRiLnNhdmVQYWxldHRlVG9EQihcblx0XHQnYW5hbG9nb3VzJyxcblx0XHRwYWxldHRlSXRlbXMsXG5cdFx0YmFzZUNvbG9yLFxuXHRcdG51bUJveGVzLFxuXHRcdGVuYWJsZUFscGhhLFxuXHRcdGxpbWl0QnJpZ2h0LFxuXHRcdGxpbWl0RGFyayxcblx0XHRsaW1pdEdyYXlcblx0KTtcbn1cbiJdfQ==