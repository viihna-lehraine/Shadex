function getElement(id) {
    return document.getElementById(id);
}
const adjustSLAmount = 10;
const xyzMaxX = 95.047;
const xyzMaxY = 100;
const xyzMaxZ = 108.883;
const xyzMinX = 0;
const xyzMinY = 0;
const xyzMinZ = 0;
const buttonDebounce = 300;
const inputDebounce = 200;
const advancedMenu = getElement('advanced-menu');
const advancedMenuToggleButton = getElement('advanced-menu-toggle-button');
const applyCustomColorButton = getElement('apply-custom-color-button');
const clearCustomColorButton = getElement('clear-custom-color-button');
const closeButton = getElement('close-button');
const customColorElement = getElement('custom-color');
const customColorToggleButton = getElement('custom-color-toggle-button');
const desaturateButton = getElement('desaturate-button');
const enableAlphaCheckbox = getElement('enable-alpha-checkbox');
const generateButton = getElement('generate-button');
const historyMenuButton = getElement('history-menu-button');
const historyModal = getElement('history-modal');
const limitBrightCheckbox = getElement('limit-light-checkbox');
const limitDarkCheckbox = getElement('limit-dark-checkbox');
const limitGrayCheckbox = getElement('limit-gray-checkbox');
const paletteNumberOptions = getElement('palette-number-options');
const paletteTypeOptions = getElement('palette-type-options');
const popupDivButton = getElement('custom-color-button');
const saturateButton = getElement('saturate-button');
const selectedColorOptions = getElement('selected-color-options');
const showAsCMYKButton = getElement('show-as-cmyk-button');
const showAsHexButton = getElement('show-as-hex-button');
const showAsHSLButton = getElement('show-as-hsl-button');
const showAsHSVButton = getElement('show-as-hsv-button');
const showAsLABButton = getElement('show-as-lab-button');
const showAsRGBButton = getElement('show-as-rgb-button');
const complementaryHueShiftRange = 10;
const diadicLightnessShiftRange = 30;
const diadicSaturationShiftRange = 30;
const hexadicLightnessShiftRange = 30;
const hexadicSaturationShiftRange = 30;
const splitComplementaryLightnessShiftRange = 30;
const splitComplementarySaturationShiftRange = 30;
const tetradicLightnessShiftRange = 30;
const tetradicSaturationShiftRange = 30;
const triadicLightnessShiftRange = 30;
const triadicSaturationShiftRange = 30;
const probabilities = [40, 45, 50, 55, 60, 65, 70];
const weights = [0.1, 0.15, 0.2, 0.3, 0.15, 0.05, 0.05];
const brightnessThreshold = 75;
const darknessThreshold = 25;
const grayThreshold = 20;
const copyButtonTextTimeout = 1000;
const toastTimeout = 3000;
const tooltipTimeout = 1000;
// ***** Constructed Constants *****
const adjustments = {
    adjustSLAmount
};
const boundaries = {
    xyzMaxX,
    xyzMaxY,
    xyzMaxZ,
    xyzMinX,
    xyzMinY,
    xyzMinZ
};
const debounce = {
    buttonDebounce,
    inputDebounce
};
const domElements = {
    advancedMenu,
    advancedMenuToggleButton,
    applyCustomColorButton,
    clearCustomColorButton,
    closeButton,
    customColorElement,
    customColorToggleButton,
    desaturateButton,
    enableAlphaCheckbox,
    generateButton,
    historyMenuButton,
    historyModal,
    limitBrightCheckbox,
    limitDarkCheckbox,
    limitGrayCheckbox,
    paletteNumberOptions,
    paletteTypeOptions,
    popupDivButton,
    saturateButton,
    selectedColorOptions,
    showAsCMYKButton,
    showAsHexButton,
    showAsHSLButton,
    showAsHSVButton,
    showAsLABButton,
    showAsRGBButton
};
const paletteShiftRanges = {
    complementaryHueShiftRange,
    diadicLightnessShiftRange,
    diadicSaturationShiftRange,
    hexadicLightnessShiftRange,
    hexadicSaturationShiftRange,
    splitComplementaryLightnessShiftRange,
    splitComplementarySaturationShiftRange,
    tetradicLightnessShiftRange,
    tetradicSaturationShiftRange,
    triadicLightnessShiftRange,
    triadicSaturationShiftRange
};
const probabilityConstants = {
    probabilities,
    weights
};
const thresholds = {
    brightnessThreshold,
    darknessThreshold,
    grayThreshold
};
const timeouts = {
    copyButtonTextTimeout,
    toastTimeout,
    tooltipTimeout
};
// **** Master Config Object ****
export const config = {
    ...adjustments,
    ...boundaries,
    ...debounce,
    ...domElements,
    ...paletteShiftRanges,
    ...probabilityConstants,
    ...thresholds,
    ...timeouts
};
//# sourceMappingURL=data:application/json;base64,