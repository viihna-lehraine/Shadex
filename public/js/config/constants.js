const adjustSLAmount = 10;
const xyzMaxX = 95.047;
const xyzMaxY = 100;
const xyzMaxZ = 108.883;
const xyzMinX = 0;
const xyzMinY = 0;
const xyzMinZ = 0;
const buttonDebounce = 300;
const inputDebounce = 200;
const probabilities = [40, 45, 50, 55, 60, 65, 70];
const weights = [0.1, 0.15, 0.2, 0.3, 0.15, 0.05, 0.05];
const cmykBrightnessThreshold = 10;
const cmykDarknessThreshold = 90;
const cmykGrayThreshold = 5;
const hslBrightnessThreshold = 75;
const hslDarknessThreshold = 25;
const hslGrayThreshold = 20;
const hsvBrightnessValueThreshold = 90;
const hsvBrightnessSaturationThreshold = 10;
const hsvDarknessThreshold = 10;
const hsvGrayThreshold = 10;
const labBrightnessThreshold = 90;
const labDarknessThreshold = 10;
const labGrayThreshold = 10;
const rgbMaxBrightness = 200;
const rgbMinBrightness = 50;
const rgbGrayThreshold = 10;
const copyButtonTextTimeout = 1000;
const toastTimeout = 3000;
const tooltipTimeout = 1000;
// ***** Constructed Constants *****
const adjustments = {
    adjustSLAmount
};
const boundaries = {
    xyzMaxX,
    xyzMaxY,
    xyzMaxZ,
    xyzMinX,
    xyzMinY,
    xyzMinZ
};
const debounce = {
    buttonDebounce,
    inputDebounce
};
const probabilityConstants = {
    probabilities,
    weights
};
const thresholds = {
    cmykBrightnessThreshold,
    cmykDarknessThreshold,
    cmykGrayThreshold,
    hslBrightnessThreshold,
    hslDarknessThreshold,
    hslGrayThreshold,
    hsvBrightnessValueThreshold,
    hsvBrightnessSaturationThreshold,
    hsvDarknessThreshold,
    hsvGrayThreshold,
    labBrightnessThreshold,
    labDarknessThreshold,
    labGrayThreshold,
    rgbMaxBrightness,
    rgbMinBrightness,
    rgbGrayThreshold
};
const timeouts = {
    copyButtonTextTimeout,
    toastTimeout,
    tooltipTimeout
};
// **** Master Config Object ****
export const config = {
    ...adjustments,
    ...boundaries,
    ...debounce,
    ...probabilityConstants,
    ...thresholds,
    ...timeouts
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbmZpZy9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUN2QixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUM7QUFDcEIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3hCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWxCLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQztBQUMzQixNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUM7QUFFMUIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNuRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXhELE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQ25DLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ2xDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzVCLE1BQU0sMkJBQTJCLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sZ0NBQWdDLEdBQUcsRUFBRSxDQUFDO0FBQzVDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzVCLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ2xDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzVCLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzVCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTVCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDO0FBQ25DLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQztBQUMxQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFFNUIsb0NBQW9DO0FBRXBDLE1BQU0sV0FBVyxHQUEwQjtJQUMxQyxjQUFjO0NBQ2QsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUF5QjtJQUN4QyxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87Q0FDUCxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQXVCO0lBQ3BDLGNBQWM7SUFDZCxhQUFhO0NBQ2IsQ0FBQztBQUVGLE1BQU0sb0JBQW9CLEdBQW1DO0lBQzVELGFBQWE7SUFDYixPQUFPO0NBQ1AsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUF5QjtJQUN4Qyx1QkFBdUI7SUFDdkIscUJBQXFCO0lBQ3JCLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQiwyQkFBMkI7SUFDM0IsZ0NBQWdDO0lBQ2hDLG9CQUFvQjtJQUNwQixnQkFBZ0I7SUFDaEIsc0JBQXNCO0lBQ3RCLG9CQUFvQjtJQUNwQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixnQkFBZ0I7Q0FDaEIsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUF1QjtJQUNwQyxxQkFBcUI7SUFDckIsWUFBWTtJQUNaLGNBQWM7Q0FDZCxDQUFDO0FBRUYsaUNBQWlDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBcUI7SUFDdkMsR0FBRyxXQUFXO0lBQ2QsR0FBRyxVQUFVO0lBQ2IsR0FBRyxRQUFRO0lBQ1gsR0FBRyxvQkFBb0I7SUFDdkIsR0FBRyxVQUFVO0lBQ2IsR0FBRyxRQUFRO0NBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuLi9pbmRleC9jb25maWcnO1xuXG5jb25zdCBhZGp1c3RTTEFtb3VudCA9IDEwO1xuXG5jb25zdCB4eXpNYXhYID0gOTUuMDQ3O1xuY29uc3QgeHl6TWF4WSA9IDEwMDtcbmNvbnN0IHh5ek1heFogPSAxMDguODgzO1xuY29uc3QgeHl6TWluWCA9IDA7XG5jb25zdCB4eXpNaW5ZID0gMDtcbmNvbnN0IHh5ek1pblogPSAwO1xuXG5jb25zdCBidXR0b25EZWJvdW5jZSA9IDMwMDtcbmNvbnN0IGlucHV0RGVib3VuY2UgPSAyMDA7XG5cbmNvbnN0IHByb2JhYmlsaXRpZXMgPSBbNDAsIDQ1LCA1MCwgNTUsIDYwLCA2NSwgNzBdO1xuY29uc3Qgd2VpZ2h0cyA9IFswLjEsIDAuMTUsIDAuMiwgMC4zLCAwLjE1LCAwLjA1LCAwLjA1XTtcblxuY29uc3QgY215a0JyaWdodG5lc3NUaHJlc2hvbGQgPSAxMDtcbmNvbnN0IGNteWtEYXJrbmVzc1RocmVzaG9sZCA9IDkwO1xuY29uc3QgY215a0dyYXlUaHJlc2hvbGQgPSA1O1xuY29uc3QgaHNsQnJpZ2h0bmVzc1RocmVzaG9sZCA9IDc1O1xuY29uc3QgaHNsRGFya25lc3NUaHJlc2hvbGQgPSAyNTtcbmNvbnN0IGhzbEdyYXlUaHJlc2hvbGQgPSAyMDtcbmNvbnN0IGhzdkJyaWdodG5lc3NWYWx1ZVRocmVzaG9sZCA9IDkwO1xuY29uc3QgaHN2QnJpZ2h0bmVzc1NhdHVyYXRpb25UaHJlc2hvbGQgPSAxMDtcbmNvbnN0IGhzdkRhcmtuZXNzVGhyZXNob2xkID0gMTA7XG5jb25zdCBoc3ZHcmF5VGhyZXNob2xkID0gMTA7XG5jb25zdCBsYWJCcmlnaHRuZXNzVGhyZXNob2xkID0gOTA7XG5jb25zdCBsYWJEYXJrbmVzc1RocmVzaG9sZCA9IDEwO1xuY29uc3QgbGFiR3JheVRocmVzaG9sZCA9IDEwO1xuY29uc3QgcmdiTWF4QnJpZ2h0bmVzcyA9IDIwMDtcbmNvbnN0IHJnYk1pbkJyaWdodG5lc3MgPSA1MDtcbmNvbnN0IHJnYkdyYXlUaHJlc2hvbGQgPSAxMDtcblxuY29uc3QgY29weUJ1dHRvblRleHRUaW1lb3V0ID0gMTAwMDtcbmNvbnN0IHRvYXN0VGltZW91dCA9IDMwMDA7XG5jb25zdCB0b29sdGlwVGltZW91dCA9IDEwMDA7XG5cbi8vICoqKioqIENvbnN0cnVjdGVkIENvbnN0YW50cyAqKioqKlxuXG5jb25zdCBhZGp1c3RtZW50czogY29uc3RhbnRzLkFkanVzdG1lbnRzID0ge1xuXHRhZGp1c3RTTEFtb3VudFxufTtcblxuY29uc3QgYm91bmRhcmllczogY29uc3RhbnRzLkJvdW5kYXJpZXMgPSB7XG5cdHh5ek1heFgsXG5cdHh5ek1heFksXG5cdHh5ek1heFosXG5cdHh5ek1pblgsXG5cdHh5ek1pblksXG5cdHh5ek1pblpcbn07XG5cbmNvbnN0IGRlYm91bmNlOiBjb25zdGFudHMuRGVib3VuY2UgPSB7XG5cdGJ1dHRvbkRlYm91bmNlLFxuXHRpbnB1dERlYm91bmNlXG59O1xuXG5jb25zdCBwcm9iYWJpbGl0eUNvbnN0YW50czogY29uc3RhbnRzLlByb2JhYmlsaXR5Q29uc3RhbnRzID0ge1xuXHRwcm9iYWJpbGl0aWVzLFxuXHR3ZWlnaHRzXG59O1xuXG5jb25zdCB0aHJlc2hvbGRzOiBjb25zdGFudHMuVGhyZXNob2xkcyA9IHtcblx0Y215a0JyaWdodG5lc3NUaHJlc2hvbGQsXG5cdGNteWtEYXJrbmVzc1RocmVzaG9sZCxcblx0Y215a0dyYXlUaHJlc2hvbGQsXG5cdGhzbEJyaWdodG5lc3NUaHJlc2hvbGQsXG5cdGhzbERhcmtuZXNzVGhyZXNob2xkLFxuXHRoc2xHcmF5VGhyZXNob2xkLFxuXHRoc3ZCcmlnaHRuZXNzVmFsdWVUaHJlc2hvbGQsXG5cdGhzdkJyaWdodG5lc3NTYXR1cmF0aW9uVGhyZXNob2xkLFxuXHRoc3ZEYXJrbmVzc1RocmVzaG9sZCxcblx0aHN2R3JheVRocmVzaG9sZCxcblx0bGFiQnJpZ2h0bmVzc1RocmVzaG9sZCxcblx0bGFiRGFya25lc3NUaHJlc2hvbGQsXG5cdGxhYkdyYXlUaHJlc2hvbGQsXG5cdHJnYk1heEJyaWdodG5lc3MsXG5cdHJnYk1pbkJyaWdodG5lc3MsXG5cdHJnYkdyYXlUaHJlc2hvbGRcbn07XG5cbmNvbnN0IHRpbWVvdXRzOiBjb25zdGFudHMuVGltZW91dHMgPSB7XG5cdGNvcHlCdXR0b25UZXh0VGltZW91dCxcblx0dG9hc3RUaW1lb3V0LFxuXHR0b29sdGlwVGltZW91dFxufTtcblxuLy8gKioqKiBNYXN0ZXIgQ29uZmlnIE9iamVjdCAqKioqXG5cbmV4cG9ydCBjb25zdCBjb25maWc6IGNvbnN0YW50cy5Db25maWcgPSB7XG5cdC4uLmFkanVzdG1lbnRzLFxuXHQuLi5ib3VuZGFyaWVzLFxuXHQuLi5kZWJvdW5jZSxcblx0Li4ucHJvYmFiaWxpdHlDb25zdGFudHMsXG5cdC4uLnRocmVzaG9sZHMsXG5cdC4uLnRpbWVvdXRzXG59O1xuIl19