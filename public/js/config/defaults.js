const cmyk = {
    value: { cyan: 0, magenta: 0, yellow: 0, key: 0, alpha: 1 },
    format: 'cmyk'
};
const cmykString = {
    value: { cyan: '0%', magenta: '0%', yellow: '0%', key: '0%', alpha: '1' },
    format: 'cmyk'
};
const hex = {
    value: {
        hex: '#000000FF',
        alpha: 'FF',
        numericAlpha: 1
    },
    format: 'hex'
};
const hsl = {
    value: { hue: 0, saturation: 0, lightness: 0, alpha: 1 },
    format: 'hsl'
};
const hslString = {
    value: { hue: '0', saturation: '0%', lightness: '0%', alpha: '1' },
    format: 'hsl'
};
const hsv = {
    value: { hue: 0, saturation: 0, value: 0, alpha: 1 },
    format: 'hsv'
};
const hsvString = {
    value: { hue: '0', saturation: '0%', value: '0%', alpha: '1' },
    format: 'hsv'
};
const lab = {
    value: { l: 0, a: 0, b: 0, alpha: 1 },
    format: 'lab'
};
const rgb = {
    value: { red: 0, green: 0, blue: 0, alpha: 1 },
    format: 'rgb'
};
const settings = {
    colorSpace: 'hsl',
    lastTableID: 0
};
const sl = {
    value: { saturation: 0, lightness: 0, alpha: 1 },
    format: 'sl'
};
const slString = {
    value: { saturation: '0%', lightness: '0%', alpha: '1' },
    format: 'sl'
};
const sv = {
    value: { saturation: 0, value: 0, alpha: 1 },
    format: 'sv'
};
const svString = {
    value: { saturation: '0%', value: '0%', alpha: '1' },
    format: 'sv'
};
const xyz = {
    value: { x: 0, y: 0, z: 0, alpha: 1 },
    format: 'xyz'
};
const mutation = {
    timestamp: new Date().toISOString(),
    key: 'test_key',
    action: 'update',
    newValue: { value: 'new_value' },
    oldValue: { value: 'old_value' },
    origin: 'test'
};
const paletteData = {
    id: `null-palette-${Date.now()}`,
    items: [],
    flags: {
        enableAlpha: false,
        limitDark: false,
        limitGray: false,
        limitLight: false
    },
    metadata: {
        numBoxes: 5,
        paletteType: 'ERROR',
        customColor: {
            hslColor: hsl,
            convertedColors: {
                cmyk: cmyk,
                hex: hex,
                hsl: hsl,
                hsv: hsv,
                lab: lab,
                rgb: rgb,
                xyz: xyz
            }
        }
    }
};
const paletteItem = {
    id: 'fake',
    colors: {
        cmyk: cmyk,
        hex: hex,
        hsl: hsl,
        hsv: hsv,
        lab: lab,
        rgb: rgb,
        xyz: xyz
    },
    colorStrings: {
        cmykString: cmykString,
        hslString: hslString,
        hsvString: hsvString,
        slString: slString,
        svString: svString
    },
    cssStrings: {
        cmykCSSString: 'cmyk(0%, 0%, 0%, 100%, 1)',
        hexCSSString: '#000000FF',
        hslCSSString: 'hsl(0, 0%, 0%, 0)',
        hsvCSSString: 'hsv(0, 0%, 0%, 0)',
        labCSSString: 'lab(0, 0, 0, 0)',
        xyzCSSString: 'xyz(0, 0, 0, 0)'
    }
};
const storedPalette = {
    tableID: 1,
    palette: paletteData
};
export const defaults = {
    cmyk,
    cmykString,
    hex,
    hsl,
    hslString,
    hsv,
    hsvString,
    lab,
    mutation,
    paletteData,
    paletteItem,
    rgb,
    settings,
    sl,
    slString,
    storedPalette,
    sv,
    svString,
    xyz
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uZmlnL2RlZmF1bHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE1BQU0sSUFBSSxHQUFnQjtJQUN6QixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7SUFDM0QsTUFBTSxFQUFFLE1BQU07Q0FDZCxDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQXNCO0lBQ3JDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtJQUN6RSxNQUFNLEVBQUUsTUFBTTtDQUNkLENBQUM7QUFFRixNQUFNLEdBQUcsR0FBZTtJQUN2QixLQUFLLEVBQUU7UUFDTixHQUFHLEVBQUUsV0FBVztRQUNoQixLQUFLLEVBQUUsSUFBSTtRQUNYLFlBQVksRUFBRSxDQUFDO0tBQ2Y7SUFDRCxNQUFNLEVBQUUsS0FBSztDQUNiLENBQUM7QUFFRixNQUFNLEdBQUcsR0FBZTtJQUN2QixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO0lBQ3hELE1BQU0sRUFBRSxLQUFLO0NBQ2IsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFxQjtJQUNuQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO0lBQ2xFLE1BQU0sRUFBRSxLQUFLO0NBQ2IsQ0FB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QUNILFNBQVM7SUFDVCxHQUFHO0lBQ0gsU0FBUztJQUNULEdBQUc7SUFDSCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxHQUFHO0lBQ0gsUUFBUTtJQUNSLEVBQUU7SUFDRixRQUFRO0lBQ1IsYUFBYTtJQUNiLEVBQUU7SUFDRixRQUFRO0lBQ1IsR0FBRztDQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnLi4vaW5kZXgvY29sb3JzJztcbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICcuLi9pbmRleC9jb25maWcnO1xuaW1wb3J0ICogYXMgaWRiIGZyb20gJy4uL2luZGV4L2RhdGFiYXNlJztcbmltcG9ydCAqIGFzIHBhbGV0dGUgZnJvbSAnLi4vaW5kZXgvcGFsZXR0ZSc7XG5cbmNvbnN0IGNteWs6IGNvbG9ycy5DTVlLID0ge1xuXHR2YWx1ZTogeyBjeWFuOiAwLCBtYWdlbnRhOiAwLCB5ZWxsb3c6IDAsIGtleTogMCwgYWxwaGE6IDEgfSxcblx0Zm9ybWF0OiAnY215aydcbn07XG5cbmNvbnN0IGNteWtTdHJpbmc6IGNvbG9ycy5DTVlLU3RyaW5nID0ge1xuXHR2YWx1ZTogeyBjeWFuOiAnMCUnLCBtYWdlbnRhOiAnMCUnLCB5ZWxsb3c6ICcwJScsIGtleTogJzAlJywgYWxwaGE6ICcxJyB9LFxuXHRmb3JtYXQ6ICdjbXlrJ1xufTtcblxuY29uc3QgaGV4OiBjb2xvcnMuSGV4ID0ge1xuXHR2YWx1ZToge1xuXHRcdGhleDogJyMwMDAwMDBGRicsXG5cdFx0YWxwaGE6ICdGRicsXG5cdFx0bnVtZXJpY0FscGhhOiAxXG5cdH0sXG5cdGZvcm1hdDogJ2hleCdcbn07XG5cbmNvbnN0IGhzbDogY29sb3JzLkhTTCA9IHtcblx0dmFsdWU6IHsgaHVlOiAwLCBzYXR1cmF0aW9uOiAwLCBsaWdodG5lc3M6IDAsIGFscGhhOiAxIH0sXG5cdGZvcm1hdDogJ2hzbCdcbn07XG5cbmNvbnN0IGhzbFN0cmluZzogY29sb3JzLkhTTFN0cmluZyA9IHtcblx0dmFsdWU6IHsgaHVlOiAnMCcsIHNhdHVyYXRpb246ICcwJScsIGxpZ2h0bmVzczogJzAlJywgYWxwaGE6ICcxJyB9LFxuXHRmb3JtYXQ6ICdoc2wnXG59O1xuXG5jb25zdCBoc3Y6IGNvbG9ycy5IU1YgPSB7XG5cdHZhbHVlOiB7IGh1ZTogMCwgc2F0dXJhdGlvbjogMCwgdmFsdWU6IDAsIGFscGhhOiAxIH0sXG5cdGZvcm1hdDogJ2hzdidcbn07XG5cbmNvbnN0IGhzdlN0cmluZzogY29sb3JzLkhTVlN0cmluZyA9IHtcblx0dmFsdWU6IHsgaHVlOiAnMCcsIHNhdHVyYXRpb246ICcwJScsIHZhbHVlOiAnMCUnLCBhbHBoYTogJzEnIH0sXG5cdGZvcm1hdDogJ2hzdidcbn07XG5cbmNvbnN0IGxhYjogY29sb3JzLkxBQiA9IHtcblx0dmFsdWU6IHsgbDogMCwgYTogMCwgYjogMCwgYWxwaGE6IDEgfSxcblx0Zm9ybWF0OiAnbGFiJ1xufTtcblxuY29uc3QgcmdiOiBjb2xvcnMuUkdCID0ge1xuXHR2YWx1ZTogeyByZWQ6IDAsIGdyZWVuOiAwLCBibHVlOiAwLCBhbHBoYTogMSB9LFxuXHRmb3JtYXQ6ICdyZ2InXG59O1xuXG5jb25zdCBzZXR0aW5nczogaWRiLlNldHRpbmdzID0ge1xuXHRjb2xvclNwYWNlOiAnaHNsJyxcblx0bGFzdFRhYmxlSUQ6IDBcbn07XG5cbmNvbnN0IHNsOiBjb2xvcnMuU0wgPSB7XG5cdHZhbHVlOiB7IHNhdHVyYXRpb246IDAsIGxpZ2h0bmVzczogMCwgYWxwaGE6IDEgfSxcblx0Zm9ybWF0OiAnc2wnXG59O1xuXG5jb25zdCBzbFN0cmluZzogY29sb3JzLlNMU3RyaW5nID0ge1xuXHR2YWx1ZTogeyBzYXR1cmF0aW9uOiAnMCUnLCBsaWdodG5lc3M6ICcwJScsIGFscGhhOiAnMScgfSxcblx0Zm9ybWF0OiAnc2wnXG59O1xuXG5jb25zdCBzdjogY29sb3JzLlNWID0ge1xuXHR2YWx1ZTogeyBzYXR1cmF0aW9uOiAwLCB2YWx1ZTogMCwgYWxwaGE6IDEgfSxcblx0Zm9ybWF0OiAnc3YnXG59O1xuXG5jb25zdCBzdlN0cmluZzogY29sb3JzLlNWU3RyaW5nID0ge1xuXHR2YWx1ZTogeyBzYXR1cmF0aW9uOiAnMCUnLCB2YWx1ZTogJzAlJywgYWxwaGE6ICcxJyB9LFxuXHRmb3JtYXQ6ICdzdidcbn07XG5cbmNvbnN0IHh5ejogY29sb3JzLlhZWiA9IHtcblx0dmFsdWU6IHsgeDogMCwgeTogMCwgejogMCwgYWxwaGE6IDEgfSxcblx0Zm9ybWF0OiAneHl6J1xufTtcblxuY29uc3QgbXV0YXRpb246IGlkYi5NdXRhdGlvbkxvZyA9IHtcblx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdGtleTogJ3Rlc3Rfa2V5Jyxcblx0YWN0aW9uOiAndXBkYXRlJyBhcyAndXBkYXRlJyxcblx0bmV3VmFsdWU6IHsgdmFsdWU6ICduZXdfdmFsdWUnIH0sXG5cdG9sZFZhbHVlOiB7IHZhbHVlOiAnb2xkX3ZhbHVlJyB9LFxuXHRvcmlnaW46ICd0ZXN0J1xufTtcblxuY29uc3QgcGFsZXR0ZURhdGE6IHBhbGV0dGUuUGFsZXR0ZSA9IHtcblx0aWQ6IGBudWxsLXBhbGV0dGUtJHtEYXRlLm5vdygpfWAsXG5cdGl0ZW1zOiBbXSxcblx0ZmxhZ3M6IHtcblx0XHRlbmFibGVBbHBoYTogZmFsc2UsXG5cdFx0bGltaXREYXJrOiBmYWxzZSxcblx0XHRsaW1pdEdyYXk6IGZhbHNlLFxuXHRcdGxpbWl0TGlnaHQ6IGZhbHNlXG5cdH0sXG5cdG1ldGFkYXRhOiB7XG5cdFx0bnVtQm94ZXM6IDUsXG5cdFx0cGFsZXR0ZVR5cGU6ICdFUlJPUicsXG5cdFx0Y3VzdG9tQ29sb3I6IHtcblx0XHRcdGhzbENvbG9yOiBoc2wsXG5cdFx0XHRjb252ZXJ0ZWRDb2xvcnM6IHtcblx0XHRcdFx0Y215azogY215ayxcblx0XHRcdFx0aGV4OiBoZXgsXG5cdFx0XHRcdGhzbDogaHNsLFxuXHRcdFx0XHRoc3Y6IGhzdixcblx0XHRcdFx0bGFiOiBsYWIsXG5cdFx0XHRcdHJnYjogcmdiLFxuXHRcdFx0XHR4eXo6IHh5elxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuY29uc3QgcGFsZXR0ZUl0ZW06IHBhbGV0dGUuUGFsZXR0ZUl0ZW0gPSB7XG5cdGlkOiAnZmFrZScsXG5cdGNvbG9yczoge1xuXHRcdGNteWs6IGNteWssXG5cdFx0aGV4OiBoZXgsXG5cdFx0aHNsOiBoc2wsXG5cdFx0aHN2OiBoc3YsXG5cdFx0bGFiOiBsYWIsXG5cdFx0cmdiOiByZ2IsXG5cdFx0eHl6OiB4eXpcblx0fSxcblx0Y29sb3JTdHJpbmdzOiB7XG5cdFx0Y215a1N0cmluZzogY215a1N0cmluZyxcblx0XHRoc2xTdHJpbmc6IGhzbFN0cmluZyxcblx0XHRoc3ZTdHJpbmc6IGhzdlN0cmluZyxcblx0XHRzbFN0cmluZzogc2xTdHJpbmcsXG5cdFx0c3ZTdHJpbmc6IHN2U3RyaW5nXG5cdH0sXG5cdGNzc1N0cmluZ3M6IHtcblx0XHRjbXlrQ1NTU3RyaW5nOiAnY215aygwJSwgMCUsIDAlLCAxMDAlLCAxKScsXG5cdFx0aGV4Q1NTU3RyaW5nOiAnIzAwMDAwMEZGJyxcblx0XHRoc2xDU1NTdHJpbmc6ICdoc2woMCwgMCUsIDAlLCAwKScsXG5cdFx0aHN2Q1NTU3RyaW5nOiAnaHN2KDAsIDAlLCAwJSwgMCknLFxuXHRcdGxhYkNTU1N0cmluZzogJ2xhYigwLCAwLCAwLCAwKScsXG5cdFx0eHl6Q1NTU3RyaW5nOiAneHl6KDAsIDAsIDAsIDApJ1xuXHR9XG59O1xuXG5jb25zdCBzdG9yZWRQYWxldHRlOiBpZGIuU3RvcmVkUGFsZXR0ZSA9IHtcblx0dGFibGVJRDogMSxcblx0cGFsZXR0ZTogcGFsZXR0ZURhdGFcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0czogY29uZmlnLkRlZmF1bHRzID0ge1xuXHRjbXlrLFxuXHRjbXlrU3RyaW5nLFxuXHRoZXgsXG5cdGhzbCxcblx0aHNsU3RyaW5nLFxuXHRoc3YsXG5cdGhzdlN0cmluZyxcblx0bGFiLFxuXHRtdXRhdGlvbixcblx0cGFsZXR0ZURhdGEsXG5cdHBhbGV0dGVJdGVtLFxuXHRyZ2IsXG5cdHNldHRpbmdzLFxuXHRzbCxcblx0c2xTdHJpbmcsXG5cdHN0b3JlZFBhbGV0dGUsXG5cdHN2LFxuXHRzdlN0cmluZyxcblx0eHl6XG59O1xuIl19