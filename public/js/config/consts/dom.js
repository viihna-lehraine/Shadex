// File: src/config/consts/dom.ts
import { core } from '../../common.js';
export const dom = {
    advancedMenuButton: core.getElement('advanced-menu-button'),
    applyCustomColorButton: core.getElement('apply-custom-color-button'),
    clearCustomColorButton: core.getElement('clear-custom-color-button'),
    closeCustomColorMenuButton: core.getElement('close-custom-color-menu-button'),
    closeAdvancedMenuButton: core.getElement('close-advanced-menu-button'),
    closeHelpMenuButton: core.getElement('close-help-menu-button'),
    closeHistoryMenuButton: core.getElement('close-history-menu-button'),
    customColorElement: core.getElement('custom-color'),
    customColorMenuButton: core.getElement('custom-color-menu-button'),
    desaturateButton: core.getElement('desaturate-button'),
    enableAlphaCheckbox: core.getElement('enable-alpha-checkbox'),
    generateButton: core.getElement('generate-button'),
    helpMenuButton: core.getElement('help-menu-button'),
    historyMenuButton: core.getElement('history-menu-button'),
    limitDarknessCheckbox: core.getElement('limit-darkness-checkbox'),
    limitGraynessCheckbox: core.getElement('limit-grayness-checkbox'),
    limitLightnessCheckbox: core.getElement('limit-lightness-checkbox'),
    paletteNumberOptions: core.getElement('palette-number-options'),
    paletteTypeOptions: core.getElement('palette-type-options'),
    saturateButton: core.getElement('saturate-button'),
    selectedColorOption: core.getElement('selected-color-option'),
    showAsCMYKButton: core.getElement('show-as-cmyk-button'),
    showAsHexButton: core.getElement('show-as-hex-button'),
    showAsHSLButton: core.getElement('show-as-hsl-button'),
    showAsHSVButton: core.getElement('show-as-hsv-button'),
    showAsLABButton: core.getElement('show-as-lab-button'),
    showAsRGBButton: core.getElement('show-as-rgb-button')
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbmZpZy9jb25zdHMvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRztJQUNsQixrQkFBa0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUNsQyxzQkFBc0IsQ0FDdEI7SUFDRCxzQkFBc0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUN0QywyQkFBMkIsQ0FDM0I7SUFDRCxzQkFBc0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUN0QywyQkFBMkIsQ0FDM0I7SUFDRCwwQkFBMEIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUMxQyxnQ0FBZ0MsQ0FDaEM7SUFDRCx1QkFBdUIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUN2Qyw0QkFBNEIsQ0FDNUI7SUFDRCxtQkFBbUIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUNuQyx3QkFBd0IsQ0FDeEI7SUFDRCxzQkFBc0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUN0QywyQkFBMkIsQ0FDM0I7SUFDRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFtQixjQUFjLENBQUM7SUFDckUscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FDckMsMEJBQTBCLENBQzFCO0lBQ0QsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBb0IsbUJBQW1CLENBQUM7SUFDekUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FDbkMsdUJBQXVCLENBQ3ZCO0lBQ0QsY0FBYyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQW9CLGlCQUFpQixDQUFDO0lBQ3JFLGNBQWMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFvQixrQkFBa0IsQ0FBQztJQUN0RSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUNqQyxxQkFBcUIsQ0FDckI7SUFDRCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUNyQyx5QkFBeUIsQ0FDekI7SUFDRCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUNyQyx5QkFBeUIsQ0FDekI7SUFDRCxzQkFBc0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUN0QywwQkFBMEIsQ0FDMUI7SUFDRCxvQkFBb0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUNwQyx3QkFBd0IsQ0FDeEI7SUFDRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUNsQyxzQkFBc0IsQ0FDdEI7SUFDRCxjQUFjLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBb0IsaUJBQWlCLENBQUM7SUFDckUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FDbkMsdUJBQXVCLENBQ0s7SUFDN0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBb0IscUJBQXFCLENBQUM7SUFDM0UsZUFBZSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQW9CLG9CQUFvQixDQUFDO0lBQ3pFLGVBQWUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQztJQUN6RSxlQUFlLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBb0Isb0JBQW9CLENBQUM7SUFDekUsZUFBZSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQW9CLG9CQUFvQixDQUFDO0lBQ3pFLGVBQWUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQztDQUN6RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NvbmZpZy9jb25zdHMvZG9tLnRzXG5cbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5leHBvcnQgY29uc3QgZG9tID0ge1xuXHRhZHZhbmNlZE1lbnVCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdFx0J2FkdmFuY2VkLW1lbnUtYnV0dG9uJ1xuXHQpLFxuXHRhcHBseUN1c3RvbUNvbG9yQnV0dG9uOiBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHRcdCdhcHBseS1jdXN0b20tY29sb3ItYnV0dG9uJ1xuXHQpLFxuXHRjbGVhckN1c3RvbUNvbG9yQnV0dG9uOiBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHRcdCdjbGVhci1jdXN0b20tY29sb3ItYnV0dG9uJ1xuXHQpLFxuXHRjbG9zZUN1c3RvbUNvbG9yTWVudUJ1dHRvbjogY29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pihcblx0XHQnY2xvc2UtY3VzdG9tLWNvbG9yLW1lbnUtYnV0dG9uJ1xuXHQpLFxuXHRjbG9zZUFkdmFuY2VkTWVudUJ1dHRvbjogY29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pihcblx0XHQnY2xvc2UtYWR2YW5jZWQtbWVudS1idXR0b24nXG5cdCksXG5cdGNsb3NlSGVscE1lbnVCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdFx0J2Nsb3NlLWhlbHAtbWVudS1idXR0b24nXG5cdCksXG5cdGNsb3NlSGlzdG9yeU1lbnVCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdFx0J2Nsb3NlLWhpc3RvcnktbWVudS1idXR0b24nXG5cdCksXG5cdGN1c3RvbUNvbG9yRWxlbWVudDogY29yZS5nZXRFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KCdjdXN0b20tY29sb3InKSxcblx0Y3VzdG9tQ29sb3JNZW51QnV0dG9uOiBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHRcdCdjdXN0b20tY29sb3ItbWVudS1idXR0b24nXG5cdCksXG5cdGRlc2F0dXJhdGVCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ2Rlc2F0dXJhdGUtYnV0dG9uJyksXG5cdGVuYWJsZUFscGhhQ2hlY2tib3g6IGNvcmUuZ2V0RWxlbWVudDxIVE1MSW5wdXRFbGVtZW50Pihcblx0XHQnZW5hYmxlLWFscGhhLWNoZWNrYm94J1xuXHQpLFxuXHRnZW5lcmF0ZUJ1dHRvbjogY29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50PignZ2VuZXJhdGUtYnV0dG9uJyksXG5cdGhlbHBNZW51QnV0dG9uOiBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KCdoZWxwLW1lbnUtYnV0dG9uJyksXG5cdGhpc3RvcnlNZW51QnV0dG9uOiBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHRcdCdoaXN0b3J5LW1lbnUtYnV0dG9uJ1xuXHQpLFxuXHRsaW1pdERhcmtuZXNzQ2hlY2tib3g6IGNvcmUuZ2V0RWxlbWVudDxIVE1MSW5wdXRFbGVtZW50Pihcblx0XHQnbGltaXQtZGFya25lc3MtY2hlY2tib3gnXG5cdCksXG5cdGxpbWl0R3JheW5lc3NDaGVja2JveDogY29yZS5nZXRFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KFxuXHRcdCdsaW1pdC1ncmF5bmVzcy1jaGVja2JveCdcblx0KSxcblx0bGltaXRMaWdodG5lc3NDaGVja2JveDogY29yZS5nZXRFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KFxuXHRcdCdsaW1pdC1saWdodG5lc3MtY2hlY2tib3gnXG5cdCksXG5cdHBhbGV0dGVOdW1iZXJPcHRpb25zOiBjb3JlLmdldEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG5cdFx0J3BhbGV0dGUtbnVtYmVyLW9wdGlvbnMnXG5cdCksXG5cdHBhbGV0dGVUeXBlT3B0aW9uczogY29yZS5nZXRFbGVtZW50PEhUTUxTZWxlY3RFbGVtZW50Pihcblx0XHQncGFsZXR0ZS10eXBlLW9wdGlvbnMnXG5cdCksXG5cdHNhdHVyYXRlQnV0dG9uOiBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KCdzYXR1cmF0ZS1idXR0b24nKSxcblx0c2VsZWN0ZWRDb2xvck9wdGlvbjogY29yZS5nZXRFbGVtZW50PEhUTUxTZWxlY3RFbGVtZW50Pihcblx0XHQnc2VsZWN0ZWQtY29sb3Itb3B0aW9uJ1xuXHQpIGFzIEhUTUxTZWxlY3RFbGVtZW50IHwgbnVsbCxcblx0c2hvd0FzQ01ZS0J1dHRvbjogY29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2hvdy1hcy1jbXlrLWJ1dHRvbicpLFxuXHRzaG93QXNIZXhCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ3Nob3ctYXMtaGV4LWJ1dHRvbicpLFxuXHRzaG93QXNIU0xCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ3Nob3ctYXMtaHNsLWJ1dHRvbicpLFxuXHRzaG93QXNIU1ZCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ3Nob3ctYXMtaHN2LWJ1dHRvbicpLFxuXHRzaG93QXNMQUJCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ3Nob3ctYXMtbGFiLWJ1dHRvbicpLFxuXHRzaG93QXNSR0JCdXR0b246IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ3Nob3ctYXMtcmdiLWJ1dHRvbicpXG59O1xuIl19