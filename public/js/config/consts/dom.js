// File: src/config/consts/dom.ts
import { core } from '../../common';
const advancedMenuButton = core.getElement('advanced-menu-button');
const applyCustomColorButton = core.getElement('apply-custom-color-button');
const clearCustomColorButton = core.getElement('clear-custom-color-button');
const closeCustomColorMenuButton = core.getElement('close-custom-color-menu-button');
const closeAdvancedMenuButton = core.getElement('close-advanced-menu-button');
const closeHelpMenuButton = core.getElement('close-help-menu-button');
const closeHistoryMenuButton = core.getElement('close-history-menu-button');
const customColorElement = core.getElement('custom-color');
const customColorMenuButton = core.getElement('custom-color-menu-button');
const desaturateButton = core.getElement('desaturate-button');
const enableAlphaCheckbox = core.getElement('enable-alpha-checkbox');
const generateButton = core.getElement('generate-button');
const helpMenuButton = core.getElement('help-menu-button');
const historyMenuButton = core.getElement('history-menu-button');
const limitDarknessCheckbox = core.getElement('limit-darkness-checkbox');
const limitGraynessCheckbox = core.getElement('limit-grayness-checkbox');
const limitLightnessCheckbox = core.getElement('limit-lightness-checkbox');
const paletteNumberOptions = core.getElement('palette-number-options');
const paletteTypeOptions = core.getElement('palette-type-options');
const saturateButton = core.getElement('saturate-button');
const selectedColorOption = core.getElement('selected-color-option');
const showAsCMYKButton = core.getElement('show-as-cmyk-button');
const showAsHexButton = core.getElement('show-as-hex-button');
const showAsHSLButton = core.getElement('show-as-hsl-button');
const showAsHSVButton = core.getElement('show-as-hsv-button');
const showAsLABButton = core.getElement('show-as-lab-button');
const showAsRGBButton = core.getElement('show-as-rgb-button');
export const dom = {
    advancedMenuButton,
    applyCustomColorButton,
    clearCustomColorButton,
    closeAdvancedMenuButton,
    closeCustomColorMenuButton,
    closeHelpMenuButton,
    closeHistoryMenuButton,
    customColorElement,
    customColorMenuButton,
    desaturateButton,
    enableAlphaCheckbox,
    generateButton,
    helpMenuButton,
    historyMenuButton,
    limitDarknessCheckbox,
    limitGraynessCheckbox,
    limitLightnessCheckbox,
    paletteNumberOptions,
    paletteTypeOptions,
    saturateButton,
    selectedColorOption,
    showAsCMYKButton,
    showAsHexButton,
    showAsHSLButton,
    showAsHSVButton,
    showAsLABButton,
    showAsRGBButton
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbmZpZy9jb25zdHMvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDekMsc0JBQXNCLENBQ3RCLENBQUM7QUFDRixNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQzdDLDJCQUEyQixDQUMzQixDQUFDO0FBQ0YsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUM3QywyQkFBMkIsQ0FDM0IsQ0FBQztBQUNGLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDakQsZ0NBQWdDLENBQ2hDLENBQUM7QUFDRixNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQyxVQUFVLENBQzlDLDRCQUE0QixDQUM1QixDQUFDO0FBQ0YsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUMxQyx3QkFBd0IsQ0FDeEIsQ0FBQztBQUNGLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDN0MsMkJBQTJCLENBQzNCLENBQUM7QUFDRixNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQW1CLGNBQWMsQ0FBQyxDQUFDO0FBQzdFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDNUMsMEJBQTBCLENBQzFCLENBQUM7QUFDRixNQUFNLGdCQUFnQixHQUNyQixJQUFJLENBQUMsVUFBVSxDQUFvQixtQkFBbUIsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDMUMsdUJBQXVCLENBQ3ZCLENBQUM7QUFDRixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFvQixpQkFBaUIsQ0FBQyxDQUFDO0FBQzdFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQW9CLGtCQUFrQixDQUFDLENBQUM7QUFDOUUsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUN4QyxxQkFBcUIsQ0FDckIsQ0FBQztBQUNGLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDNUMseUJBQXlCLENBQ3pCLENBQUM7QUFDRixNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQzVDLHlCQUF5QixDQUN6QixDQUFDO0FBQ0YsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUM3QywwQkFBMEIsQ0FDMUIsQ0FBQztBQUNGLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDM0Msd0JBQXdCLENBQ3hCLENBQUM7QUFDRixNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQ3pDLHNCQUFzQixDQUN0QixDQUFDO0FBQ0YsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBb0IsaUJBQWlCLENBQUMsQ0FBQztBQUM3RSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQzFDLHVCQUF1QixDQUN2QixDQUFDO0FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUN2QyxxQkFBcUIsQ0FDckIsQ0FBQztBQUNGLE1BQU0sZUFBZSxHQUNwQixJQUFJLENBQUMsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBQzFELE1BQU0sZUFBZSxHQUNwQixJQUFJLENBQUMsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBQzFELE1BQU0sZUFBZSxHQUNwQixJQUFJLENBQUMsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBQzFELE1BQU0sZUFBZSxHQUNwQixJQUFJLENBQUMsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBQzFELE1BQU0sZUFBZSxHQUNwQixJQUFJLENBQUMsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBRTFELE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRztJQUNsQixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLHNCQUFzQjtJQUN0Qix1QkFBdUI7SUFDdkIsMEJBQTBCO0lBQzFCLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixxQkFBcUI7SUFDckIsc0JBQXNCO0lBQ3RCLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsY0FBYztJQUNkLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLGVBQWU7SUFDZixlQUFlO0lBQ2YsZUFBZTtJQUNmLGVBQWU7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2NvbmZpZy9jb25zdHMvZG9tLnRzXG5cbmltcG9ydCB7IGNvcmUgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jb25zdCBhZHZhbmNlZE1lbnVCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnYWR2YW5jZWQtbWVudS1idXR0b24nXG4pO1xuY29uc3QgYXBwbHlDdXN0b21Db2xvckJ1dHRvbiA9IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdCdhcHBseS1jdXN0b20tY29sb3ItYnV0dG9uJ1xuKTtcbmNvbnN0IGNsZWFyQ3VzdG9tQ29sb3JCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnY2xlYXItY3VzdG9tLWNvbG9yLWJ1dHRvbidcbik7XG5jb25zdCBjbG9zZUN1c3RvbUNvbG9yTWVudUJ1dHRvbiA9IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdCdjbG9zZS1jdXN0b20tY29sb3ItbWVudS1idXR0b24nXG4pO1xuY29uc3QgY2xvc2VBZHZhbmNlZE1lbnVCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnY2xvc2UtYWR2YW5jZWQtbWVudS1idXR0b24nXG4pO1xuY29uc3QgY2xvc2VIZWxwTWVudUJ1dHRvbiA9IGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdCdjbG9zZS1oZWxwLW1lbnUtYnV0dG9uJ1xuKTtcbmNvbnN0IGNsb3NlSGlzdG9yeU1lbnVCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnY2xvc2UtaGlzdG9yeS1tZW51LWJ1dHRvbidcbik7XG5jb25zdCBjdXN0b21Db2xvckVsZW1lbnQgPSBjb3JlLmdldEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oJ2N1c3RvbS1jb2xvcicpO1xuY29uc3QgY3VzdG9tQ29sb3JNZW51QnV0dG9uID0gY29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pihcblx0J2N1c3RvbS1jb2xvci1tZW51LWJ1dHRvbidcbik7XG5jb25zdCBkZXNhdHVyYXRlQnV0dG9uID1cblx0Y29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50PignZGVzYXR1cmF0ZS1idXR0b24nKTtcbmNvbnN0IGVuYWJsZUFscGhhQ2hlY2tib3ggPSBjb3JlLmdldEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG5cdCdlbmFibGUtYWxwaGEtY2hlY2tib3gnXG4pO1xuY29uc3QgZ2VuZXJhdGVCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KCdnZW5lcmF0ZS1idXR0b24nKTtcbmNvbnN0IGhlbHBNZW51QnV0dG9uID0gY29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50PignaGVscC1tZW51LWJ1dHRvbicpO1xuY29uc3QgaGlzdG9yeU1lbnVCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnaGlzdG9yeS1tZW51LWJ1dHRvbidcbik7XG5jb25zdCBsaW1pdERhcmtuZXNzQ2hlY2tib3ggPSBjb3JlLmdldEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG5cdCdsaW1pdC1kYXJrbmVzcy1jaGVja2JveCdcbik7XG5jb25zdCBsaW1pdEdyYXluZXNzQ2hlY2tib3ggPSBjb3JlLmdldEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG5cdCdsaW1pdC1ncmF5bmVzcy1jaGVja2JveCdcbik7XG5jb25zdCBsaW1pdExpZ2h0bmVzc0NoZWNrYm94ID0gY29yZS5nZXRFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KFxuXHQnbGltaXQtbGlnaHRuZXNzLWNoZWNrYm94J1xuKTtcbmNvbnN0IHBhbGV0dGVOdW1iZXJPcHRpb25zID0gY29yZS5nZXRFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KFxuXHQncGFsZXR0ZS1udW1iZXItb3B0aW9ucydcbik7XG5jb25zdCBwYWxldHRlVHlwZU9wdGlvbnMgPSBjb3JlLmdldEVsZW1lbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KFxuXHQncGFsZXR0ZS10eXBlLW9wdGlvbnMnXG4pO1xuY29uc3Qgc2F0dXJhdGVCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KCdzYXR1cmF0ZS1idXR0b24nKTtcbmNvbnN0IHNlbGVjdGVkQ29sb3JPcHRpb24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KFxuXHQnc2VsZWN0ZWQtY29sb3Itb3B0aW9uJ1xuKTtcbmNvbnN0IHNob3dBc0NNWUtCdXR0b24gPSBjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnc2hvdy1hcy1jbXlrLWJ1dHRvbidcbik7XG5jb25zdCBzaG93QXNIZXhCdXR0b24gPVxuXHRjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KCdzaG93LWFzLWhleC1idXR0b24nKTtcbmNvbnN0IHNob3dBc0hTTEJ1dHRvbiA9XG5cdGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ3Nob3ctYXMtaHNsLWJ1dHRvbicpO1xuY29uc3Qgc2hvd0FzSFNWQnV0dG9uID1cblx0Y29yZS5nZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2hvdy1hcy1oc3YtYnV0dG9uJyk7XG5jb25zdCBzaG93QXNMQUJCdXR0b24gPVxuXHRjb3JlLmdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KCdzaG93LWFzLWxhYi1idXR0b24nKTtcbmNvbnN0IHNob3dBc1JHQkJ1dHRvbiA9XG5cdGNvcmUuZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ3Nob3ctYXMtcmdiLWJ1dHRvbicpO1xuXG5leHBvcnQgY29uc3QgZG9tID0ge1xuXHRhZHZhbmNlZE1lbnVCdXR0b24sXG5cdGFwcGx5Q3VzdG9tQ29sb3JCdXR0b24sXG5cdGNsZWFyQ3VzdG9tQ29sb3JCdXR0b24sXG5cdGNsb3NlQWR2YW5jZWRNZW51QnV0dG9uLFxuXHRjbG9zZUN1c3RvbUNvbG9yTWVudUJ1dHRvbixcblx0Y2xvc2VIZWxwTWVudUJ1dHRvbixcblx0Y2xvc2VIaXN0b3J5TWVudUJ1dHRvbixcblx0Y3VzdG9tQ29sb3JFbGVtZW50LFxuXHRjdXN0b21Db2xvck1lbnVCdXR0b24sXG5cdGRlc2F0dXJhdGVCdXR0b24sXG5cdGVuYWJsZUFscGhhQ2hlY2tib3gsXG5cdGdlbmVyYXRlQnV0dG9uLFxuXHRoZWxwTWVudUJ1dHRvbixcblx0aGlzdG9yeU1lbnVCdXR0b24sXG5cdGxpbWl0RGFya25lc3NDaGVja2JveCxcblx0bGltaXRHcmF5bmVzc0NoZWNrYm94LFxuXHRsaW1pdExpZ2h0bmVzc0NoZWNrYm94LFxuXHRwYWxldHRlTnVtYmVyT3B0aW9ucyxcblx0cGFsZXR0ZVR5cGVPcHRpb25zLFxuXHRzYXR1cmF0ZUJ1dHRvbixcblx0c2VsZWN0ZWRDb2xvck9wdGlvbixcblx0c2hvd0FzQ01ZS0J1dHRvbixcblx0c2hvd0FzSGV4QnV0dG9uLFxuXHRzaG93QXNIU0xCdXR0b24sXG5cdHNob3dBc0hTVkJ1dHRvbixcblx0c2hvd0FzTEFCQnV0dG9uLFxuXHRzaG93QXNSR0JCdXR0b25cbn0gYXMgY29uc3Q7XG4iXX0=