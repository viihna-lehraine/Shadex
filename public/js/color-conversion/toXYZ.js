import { conversionHelpers } from '../helpers/conversion.js';
const defaulXYZ = { x: 0, y: 0, z: 0, format: 'xyz' };
export function cmykToXYZ(cmyk) {
    try {
        return conversionHelpers.cmykToXYZTryCaseHelper(cmyk);
    }
    catch (error) {
        console.error(`cmykToXYZ error: ${error}`);
        return defaulXYZ;
    }
}
export function hexToXYZ(hex) {
    try {
        return conversionHelpers.hexToXYZTryCaseHelper(hex);
    }
    catch (error) {
        console.error(`hexToXYZ error: ${error}`);
        return defaulXYZ;
    }
}
export function hslToXYZ(hsl) {
    try {
        return conversionHelpers.hslToXYZTryCaseHelper(hsl);
    }
    catch (error) {
        console.error(`hslToXYZ error: ${error}`);
        return defaulXYZ;
    }
}
export function hsvToXYZ(hsv) {
    try {
        return conversionHelpers.hsvToXYZTryCaseHelper(hsv);
    }
    catch (error) {
        console.error(`hsvToXYZ error: ${error}`);
        return defaulXYZ;
    }
}
export function labToXYZ(lab) {
    try {
        const refX = 95.047, refY = 100.0, refZ = 108.883;
        let y = (lab.l + 16) / 116;
        let x = lab.a / 500 + y;
        let z = y - lab.b / 200;
        const pow = Math.pow;
        return {
            x: refX *
                (pow(x, 3) > 0.008856 ? pow(x, 3) : (x - 16 / 116) / 7.787),
            y: refY *
                (pow(y, 3) > 0.008856 ? pow(y, 3) : (y - 16 / 116) / 7.787),
            z: refZ *
                (pow(z, 3) > 0.008856 ? pow(z, 3) : (z - 16 / 116) / 7.787),
            format: 'xyz'
        };
    }
    catch (error) {
        console.error(`labToXYZ error: ${error}`);
        return { x: 0, y: 0, z: 0, format: 'xyz' };
    }
}
export function rgbToXYZ(rgb) {
    try {
        rgb.red = rgb.red / 255;
        rgb.green = rgb.green / 255;
        rgb.blue = rgb.blue / 255;
        rgb.red =
            rgb.red > 0.04045
                ? Math.pow((rgb.red + 0.055) / 1.055, 2.4)
                : rgb.red / 12.92;
        rgb.green =
            rgb.green > 0.04045
                ? Math.pow((rgb.green + 0.055) / 1.055, 2.4)
                : rgb.green / 12.92;
        rgb.blue =
            rgb.blue > 0.04045
                ? Math.pow((rgb.blue + 0.055) / 1.055, 2.4)
                : rgb.blue / 12.92;
        rgb.red = rgb.red * 100;
        rgb.green = rgb.green * 100;
        rgb.blue = rgb.blue * 100;
        return {
            x: rgb.red * 0.4124 + rgb.green * 0.3576 + rgb.blue * 0.1805,
            y: rgb.red * 0.2126 + rgb.green * 0.7152 + rgb.blue * 0.0722,
            z: rgb.red * 0.0193 + rgb.green * 0.1192 + rgb.blue * 0.9505,
            format: 'xyz'
        };
    }
    catch (error) {
        console.error(`rgbToXYZ error: ${error}`);
        return defaulXYZ;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9YWVouanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sb3ItY29udmVyc2lvbi90b1hZWi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRCxNQUFNLFNBQVMsR0FBYyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUVqRSxNQUFNLFVBQVUsU0FBUyxDQUFDLElBQWdCO0lBQ3pDLElBQUksQ0FBQztRQUNKLE9BQU8saUJBQWlCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMzQyxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsR0FBYztJQUN0QyxJQUFJLENBQUM7UUFDSixPQUFPLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUMsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQWM7SUFDdEMsSUFBSSxDQUFDO1FBQ0osT0FBTyxpQkFBaUIsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLG1CQUFtQixLQUFL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LEdBQUcsTUFBTTtZQUM1RCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLG1CQUFtQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sU0FBUyxDQUFDO0lBQ2xCLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVyc2lvbkhlbHBlcnMgfSBmcm9tICcuLi9oZWxwZXJzL2NvbnZlcnNpb24nO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vaW5kZXgnO1xuXG5jb25zdCBkZWZhdWxYWVo6IHR5cGVzLlhZWiA9IHsgeDogMCwgeTogMCwgejogMCwgZm9ybWF0OiAneHl6JyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gY215a1RvWFlaKGNteWs6IHR5cGVzLkNNWUspOiB0eXBlcy5YWVoge1xuXHR0cnkge1xuXHRcdHJldHVybiBjb252ZXJzaW9uSGVscGVycy5jbXlrVG9YWVpUcnlDYXNlSGVscGVyKGNteWspO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYGNteWtUb1hZWiBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsWFlaO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1hZWihoZXg6IHR5cGVzLkhleCk6IHR5cGVzLlhZWiB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGNvbnZlcnNpb25IZWxwZXJzLmhleFRvWFlaVHJ5Q2FzZUhlbHBlcihoZXgpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYGhleFRvWFlaIGVycm9yOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWxYWVo7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvWFlaKGhzbDogdHlwZXMuSFNMKTogdHlwZXMuWFlaIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gY29udmVyc2lvbkhlbHBlcnMuaHNsVG9YWVpUcnlDYXNlSGVscGVyKGhzbCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgaHNsVG9YWVogZXJyb3I6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bFhZWjtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaHN2VG9YWVooaHN2OiB0eXBlcy5IU1YpOiB0eXBlcy5YWVoge1xuXHR0cnkge1xuXHRcdHJldHVybiBjb252ZXJzaW9uSGVscGVycy5oc3ZUb1hZWlRyeUNhc2VIZWxwZXIoaHN2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBoc3ZUb1hZWiBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsWFlaO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYWJUb1hZWihsYWI6IHR5cGVzLkxBQik6IHR5cGVzLlhZWiB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmVmWCA9IDk1LjA0Nyxcblx0XHRcdHJlZlkgPSAxMDAuMCxcblx0XHRcdHJlZlogPSAxMDguODgzO1xuXG5cdFx0bGV0IHkgPSAobGFiLmwgKyAxNikgLyAxMTY7XG5cdFx0bGV0IHggPSBsYWIuYSAvIDUwMCArIHk7XG5cdFx0bGV0IHogPSB5IC0gbGFiLmIgLyAyMDA7XG5cblx0XHRjb25zdCBwb3cgPSBNYXRoLnBvdztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OlxuXHRcdFx0XHRyZWZYICpcblx0XHRcdFx0KHBvdyh4LCAzKSA+IDAuMDA4ODU2ID8gcG93KHgsIDMpIDogKHggLSAxNiAvIDExNikgLyA3Ljc4NyksXG5cdFx0XHR5OlxuXHRcdFx0XHRyZWZZICpcblx0XHRcdFx0KHBvdyh5LCAzKSA+IDAuMDA4ODU2ID8gcG93KHksIDMpIDogKHkgLSAxNiAvIDExNikgLyA3Ljc4NyksXG5cdFx0XHR6OlxuXHRcdFx0XHRyZWZaICpcblx0XHRcdFx0KHBvdyh6LCAzKSA+IDAuMDA4ODU2ID8gcG93KHosIDMpIDogKHogLSAxNiAvIDExNikgLyA3Ljc4NyksXG5cdFx0XHRmb3JtYXQ6ICd4eXonXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBsYWJUb1hZWiBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4geyB4OiAwLCB5OiAwLCB6OiAwLCBmb3JtYXQ6ICd4eXonIH07XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvWFlaKHJnYjogdHlwZXMuUkdCKTogdHlwZXMuWFlaIHtcblx0dHJ5IHtcblx0XHRyZ2IucmVkID0gcmdiLnJlZCAvIDI1NTtcblx0XHRyZ2IuZ3JlZW4gPSByZ2IuZ3JlZW4gLyAyNTU7XG5cdFx0cmdiLmJsdWUgPSByZ2IuYmx1ZSAvIDI1NTtcblxuXHRcdHJnYi5yZWQgPVxuXHRcdFx0cmdiLnJlZCA+IDAuMDQwNDVcblx0XHRcdFx0PyBNYXRoLnBvdygocmdiLnJlZCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpXG5cdFx0XHRcdDogcmdiLnJlZCAvIDEyLjkyO1xuXHRcdHJnYi5ncmVlbiA9XG5cdFx0XHRyZ2IuZ3JlZW4gPiAwLjA0MDQ1XG5cdFx0XHRcdD8gTWF0aC5wb3coKHJnYi5ncmVlbiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpXG5cdFx0XHRcdDogcmdiLmdyZWVuIC8gMTIuOTI7XG5cdFx0cmdiLmJsdWUgPVxuXHRcdFx0cmdiLmJsdWUgPiAwLjA0MDQ1XG5cdFx0XHRcdD8gTWF0aC5wb3coKHJnYi5ibHVlICsgMC4wNTUpIC8gMS4wNTUsIDIuNClcblx0XHRcdFx0OiByZ2IuYmx1ZSAvIDEyLjkyO1xuXG5cdFx0cmdiLnJlZCA9IHJnYi5yZWQgKiAxMDA7XG5cdFx0cmdiLmdyZWVuID0gcmdiLmdyZWVuICogMTAwO1xuXHRcdHJnYi5ibHVlID0gcmdiLmJsdWUgKiAxMDA7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogcmdiLnJlZCAqIDAuNDEyNCArIHJnYi5ncmVlbiAqIDAuMzU3NiArIHJnYi5ibHVlICogMC4xODA1LFxuXHRcdFx0eTogcmdiLnJlZCAqIDAuMjEyNiArIHJnYi5ncmVlbiAqIDAuNzE1MiArIHJnYi5ibHVlICogMC4wNzIyLFxuXHRcdFx0ejogcmdiLnJlZCAqIDAuMDE5MyArIHJnYi5ncmVlbiAqIDAuMTE5MiArIHJnYi5ibHVlICogMC45NTA1LFxuXHRcdFx0Zm9ybWF0OiAneHl6J1xuXHRcdH07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgcmdiVG9YWVogZXJyb3I6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bFhZWjtcblx0fVxufVxuIl19