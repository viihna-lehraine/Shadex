import { convert } from './conversion-index.js';
const defaultLAB = { l: 0, a: 0, b: 0, format: 'lab' };
export function xyzToLAB(xyz) {
    try {
        const refX = 95.047, refY = 100.0, refZ = 108.883;
        xyz.x = xyz.x / refX;
        xyz.y = xyz.y / refY;
        xyz.z = xyz.z / refZ;
        xyz.x =
            xyz.x > 0.008856
                ? Math.pow(xyz.x, 1 / 3)
                : 7.787 * xyz.x + 16 / 116;
        xyz.y =
            xyz.y > 0.008856
                ? Math.pow(xyz.y, 1 / 3)
                : 7.787 * xyz.y + 16 / 116;
        xyz.z =
            xyz.z > 0.008856
                ? Math.pow(xyz.z, 1 / 3)
                : 7.787 * xyz.z + 16 / 116;
        let l = parseFloat((116 * xyz.y - 16).toFixed(2));
        let a = parseFloat((500 * (xyz.x - xyz.y)).toFixed(2));
        let b = parseFloat((200 * (xyz.y - xyz.z)).toFixed(2));
        return { l, a, b, format: 'lab' };
    }
    catch (error) {
        console.error(`xyzToLab() error: ${error}`);
        return defaultLAB;
    }
}
export function hexToLAB(hex) {
    try {
        const rgb = convert.hexToRGB(hex);
        const xyz = convert.rgbToXYZ(rgb);
        return xyzToLAB(xyz);
    }
    catch (error) {
        console.error(`hexToLAB() error: ${error}`);
        return defaultLAB;
    }
}
export function rgbToLAB(rgb) {
    try {
        const xyz = convert.rgbToXYZ(rgb);
        return xyzToLAB(xyz);
    }
    catch (error) {
        console.error(`rgbToLab() error: ${error}`);
        return defaultLAB;
    }
}
export function hslToLAB(hsl) {
    try {
        const rgb = convert.hslToRGB(hsl);
        const xyz = convert.rgbToXYZ(rgb);
        return xyzToLAB(xyz);
    }
    catch (error) {
        console.error(`hslToLab() error: ${error}`);
        return defaultLAB;
    }
}
export function hsvToLAB(hsv) {
    try {
        const rgb = convert.hsvToRGB(hsv);
        const xyz = convert.rgbToXYZ(rgb);
        return xyzToLAB(xyz);
    }
    catch (error) {
        console.error(`hsvToLab() error: ${error}`);
        return defaultLAB;
    }
}
export function cmykToLAB(cmyk) {
    try {
        const rgb = convert.cmykToRGB(cmyk);
        const xyz = convert.rgbToXYZ(rgb);
        return xyzToLAB(xyz);
    }
    catch (error) {
        console.error(`cmykToLab() error: ${error}`);
        return defaultLAB;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9MQUIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sb3ItY29udmVyc2lvbi90b0xBQi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHN0MsTUFBTSxVQUFVLEdBQWMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFFbEUsTUFBTSxVQUFVLFFBQVEsQ0FBQyxHQUFjO0lBQ3RDLElBQUksQ0FBQztRQUNKLE1BQU0sSUFBSSxHQUFHLE1BQU0sRUFDbEIsSUFBSSxHQUFHLEtBQUssRUFDWixJQUFJLEdBQUcsT0FBTyxDQUFDO1FBRWhCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXJCLEdBQUcsQ0FBQyxDQUFDO1lBQ0osR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO2dCQUNmLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEIsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUM7WUFDSixHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7Z0JBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QixDQUFDLENBQUMs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LE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsQyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFnQjtJQUN6QyxJQUFJLENBQUM7UUFDSixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEMsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM3QyxPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuL2NvbnZlcnNpb24taW5kZXgnO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vaW5kZXgnO1xuXG5jb25zdCBkZWZhdWx0TEFCOiB0eXBlcy5MQUIgPSB7IGw6IDAsIGE6IDAsIGI6IDAsIGZvcm1hdDogJ2xhYicgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIHh5elRvTEFCKHh5ejogdHlwZXMuWFlaKTogdHlwZXMuTEFCIHtcblx0dHJ5IHtcblx0XHRjb25zdCByZWZYID0gOTUuMDQ3LFxuXHRcdFx0cmVmWSA9IDEwMC4wLFxuXHRcdFx0cmVmWiA9IDEwOC44ODM7XG5cblx0XHR4eXoueCA9IHh5ei54IC8gcmVmWDtcblx0XHR4eXoueSA9IHh5ei55IC8gcmVmWTtcblx0XHR4eXoueiA9IHh5ei56IC8gcmVmWjtcblxuXHRcdHh5ei54ID1cblx0XHRcdHh5ei54ID4gMC4wMDg4NTZcblx0XHRcdFx0PyBNYXRoLnBvdyh4eXoueCwgMSAvIDMpXG5cdFx0XHRcdDogNy43ODcgKiB4eXoueCArIDE2IC8gMTE2O1xuXHRcdHh5ei55ID1cblx0XHRcdHh5ei55ID4gMC4wMDg4NTZcblx0XHRcdFx0PyBNYXRoLnBvdyh4eXoueSwgMSAvIDMpXG5cdFx0XHRcdDogNy43ODcgKiB4eXoueSArIDE2IC8gMTE2O1xuXHRcdHh5ei56ID1cblx0XHRcdHh5ei56ID4gMC4wMDg4NTZcblx0XHRcdFx0PyBNYXRoLnBvdyh4eXoueiwgMSAvIDMpXG5cdFx0XHRcdDogNy43ODcgKiB4eXoueiArIDE2IC8gMTE2O1xuXG5cdFx0bGV0IGwgPSBwYXJzZUZsb2F0KCgxMTYgKiB4eXoueSAtIDE2KS50b0ZpeGVkKDIpKTtcblx0XHRsZXQgYSA9IHBhcnNlRmxvYXQoKDUwMCAqICh4eXoueCAtIHh5ei55KSkudG9GaXhlZCgyKSk7XG5cdFx0bGV0IGIgPSBwYXJzZUZsb2F0KCgyMDAgKiAoeHl6LnkgLSB4eXoueikpLnRvRml4ZWQoMikpO1xuXG5cdFx0cmV0dXJuIHsgbCwgYSwgYiwgZm9ybWF0OiAnbGFiJyB9O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYHh5elRvTGFiKCkgZXJyb3I6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bHRMQUI7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvTEFCKGhleDogdHlwZXMuSGV4KTogdHlwZXMuTEFCIHtcblx0dHJ5IHtcblx0XHRjb25zdCByZ2IgPSBjb252ZXJ0LmhleFRvUkdCKGhleCk7XG5cdFx0Y29uc3QgeHl6ID0gY29udmVydC5yZ2JUb1hZWihyZ2IpO1xuXG5cdFx0cmV0dXJuIHh5elRvTEFCKHh5eik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgaGV4VG9MQUIoKSBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdExBQjtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9MQUIocmdiOiB0eXBlcy5SR0IpOiB0eXBlcy5MQUIge1xuXHR0cnkge1xuXHRcdGNvbnN0IHh5eiA9IGNvbnZlcnQucmdiVG9YWVoocmdiKTtcblx0XHRyZXR1cm4geHl6VG9MQUIoeHl6KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGByZ2JUb0xhYigpIGVycm9yOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0TEFCO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb0xBQihoc2w6IHR5cGVzLkhTTCk6IHR5cGVzLkxBQiB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmdiID0gY29udmVydC5oc2xUb1JHQihoc2wpO1xuXHRcdGNvbnN0IHh5eiA9IGNvbnZlcnQucmdiVG9YWVoocmdiKTtcblxuXHRcdHJldHVybiB4eXpUb0xBQih4eXopO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYGhzbFRvTGFiKCkgZXJyb3I6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bHRMQUI7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzdlRvTEFCKGhzdjogdHlwZXMuSFNWKTogdHlwZXMuTEFCIHtcblx0dHJ5IHtcblx0XHRjb25zdCByZ2IgPSBjb252ZXJ0LmhzdlRvUkdCKGhzdik7XG5cdFx0Y29uc3QgeHl6ID0gY29udmVydC5yZ2JUb1hZWihyZ2IpO1xuXG5cdFx0cmV0dXJuIHh5elRvTEFCKHh5eik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgaHN2VG9MYWIoKSBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdExBQjtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY215a1RvTEFCKGNteWs6IHR5cGVzLkNNWUspOiB0eXBlcy5MQUIge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJnYiA9IGNvbnZlcnQuY215a1RvUkdCKGNteWspO1xuXHRcdGNvbnN0IHh5eiA9IGNvbnZlcnQucmdiVG9YWVoocmdiKTtcblxuXHRcdHJldHVybiB4eXpUb0xBQih4eXopO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYGNteWtUb0xhYigpIGVycm9yOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0TEFCO1xuXHR9XG59XG4iXX0=