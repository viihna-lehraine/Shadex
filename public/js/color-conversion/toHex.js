import { convert } from '../color-conversion/conversion-index.js';
import { conversionHelpers } from '../helpers/conversion.js';
import { defaults } from '../utils/defaults.js';
import { transforms } from '../utils/transforms.js';
function cmykToHex(cmyk) {
    try {
        const rgb = convert.cmykToRGB(cmyk);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`cmykToHex error: ${error}`);
        return defaults.defaultHex();
    }
}
function hslToHex(hsl) {
    try {
        const rgb = convert.hslToRGB(hsl);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`hslToHex error: ${error}`);
        return defaults.defaultHex();
    }
}
function hsvToHex(hsv) {
    try {
        const rgb = convert.hsvToRGB(hsv);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`hsvToHex error: ${error}`);
        return defaults.defaultHex();
    }
}
function labToHex(lab) {
    try {
        const rgb = convert.labToRGB(lab);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`labToHex error: ${error}`);
        return defaults.defaultHex();
    }
}
function rgbToHex(rgb) {
    try {
        if ([rgb.value.red, rgb.value.green, rgb.value.blue].some(v => isNaN(v) || v < 0 || v > 255)) {
            console.warn(`Invalid RGB values: R=${rgb.value.red}, G=${rgb.value.green}, B=${rgb.value.blue}`);
            return { value: { hex: '#000000' }, format: 'hex' };
        }
        return {
            value: {
                hex: `#${transforms.componentToHex(rgb.value.red)}${transforms.componentToHex(rgb.value.green)}${transforms.componentToHex(rgb.value.blue)}`
            },
            format: 'hex'
        };
    }
    catch (error) {
        console.warn(`rgbToHex error: ${error}`);
        return defaults.defaultHex();
    }
}
function xyzToHex(xyz) {
    try {
        return conversionHelpers.xyzToHexHelper(xyz);
    }
    catch (error) {
        console.warn(`xyzToHex error: ${error}`);
        return defaults.defaultHex();
    }
}
export const toHex = {
    cmykToHex,
    hslToHex,
    hsvToHex,
    labToHex,
    rgbToHex,
    xyzToHex
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9IZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sb3ItY29udmVyc2lvbi90b0hleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRCxTQUFTLFNBQVMsQ0FBQyxJQUFnQjtJQUNsQyxJQUFJLENBQUM7UUFDSixNQUFNLEdBQUcsR0FBYyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUMsT0FBTyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDOUIsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFjO0lBQy9CLElBQUksQ0FBQztRQUNKLE1BQU0sR0FBRyxHQUFjLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM5QixDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEdBQWM7SUFDL0IsSUFBSSxDQUFDO1FBQ0osTUFBTSxHQUFHLEdBQWMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzlCLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBYztJQUMvQixJQUFJLENBQUM7UUFDSixNQUFNLEdBQUcsR0FBYyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDekMsT0FBTyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDOUIsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFjO0lBQy9CLElBQUksQ0FBQztRQUNKLElBQ0MsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDcEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUNqQyxFQUNBLENBQUM7WUFDRixPQUFPLENBQUMsSUFBSSxDQUNYLHlCQUF5QixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUNuRixDQUFDO1lBQ0YsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDckQsQ0FBQztRQUVELE9BQU87WUFDTixLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7YUFDNUk7WUFDRCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzlCLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBYztJQUMvQixJQUFJLENBQUM7UUFDSixPQUFPLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzlCLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFvQjtJQUNyQyxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7Q0FDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydCB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbi1pbmRleCc7XG5pbXBvcnQgeyBjb252ZXJzaW9uSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMvY29udmVyc2lvbic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleC90eXBlcyc7XG5pbXBvcnQgKiBhcyBmbk9iamVjdHMgZnJvbSAnLi4vaW5kZXgvZm4tb2JqZWN0cyc7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gJy4uL3V0aWxzL2RlZmF1bHRzJztcbmltcG9ydCB7IHRyYW5zZm9ybXMgfSBmcm9tICcuLi91dGlscy90cmFuc2Zvcm1zJztcblxuZnVuY3Rpb24gY215a1RvSGV4KGNteWs6IHR5cGVzLkNNWUspOiB0eXBlcy5IZXgge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJnYjogdHlwZXMuUkdCID0gY29udmVydC5jbXlrVG9SR0IoY215ayk7XG5cdFx0cmV0dXJuIHJnYlRvSGV4KHJnYik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS53YXJuKGBjbXlrVG9IZXggZXJyb3I6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bHRzLmRlZmF1bHRIZXgoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBoc2xUb0hleChoc2w6IHR5cGVzLkhTTCk6IHR5cGVzLkhleCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmdiOiB0eXBlcy5SR0IgPSBjb252ZXJ0LmhzbFRvUkdCKGhzbCk7XG5cdFx0cmV0dXJuIHJnYlRvSGV4KHJnYik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS53YXJuKGBoc2xUb0hleCBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdEhleCgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGhzdlRvSGV4KGhzdjogdHlwZXMuSFNWKTogdHlwZXMuSGV4IHtcblx0dHJ5IHtcblx0XHRjb25zdCByZ2I6IHR5cGVzLlJHQiA9IGNvbnZlcnQuaHN2VG9SR0IoaHN2KTtcblx0XHRyZXR1cm4gcmdiVG9IZXgocmdiKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLndhcm4oYGhzdlRvSGV4IGVycm9yOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0cy5kZWZhdWx0SGV4KCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gbGFiVG9IZXgobGFiOiB0eXBlcy5MQUIpOiB0eXBlcy5IZXgge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJnYjogdHlwZXMuUkdCID0gY29udmVydC5sYWJUb1JHQihsYWIpO1xuXG5cdFx0cmV0dXJuIHJnYlRvSGV4KHJnYik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS53YXJuKGBsYWJUb0hleCBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdEhleCgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJnYlRvSGV4KHJnYjogdHlwZXMuUkdCKTogdHlwZXMuSGV4IHtcblx0dHJ5IHtcblx0XHRpZiAoXG5cdFx0XHRbcmdiLnZhbHVlLnJlZCwgcmdiLnZhbHVlLmdyZWVuLCByZ2IudmFsdWUuYmx1ZV0uc29tZShcblx0XHRcdFx0diA9PiBpc05hTih2KSB8fCB2IDwgMCB8fCB2ID4gMjU1XG5cdFx0XHQpXG5cdFx0KSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdGBJbnZhbGlkIFJHQiB2YWx1ZXM6IFI9JHtyZ2IudmFsdWUucmVkfSwgRz0ke3JnYi52YWx1ZS5ncmVlbn0sIEI9JHtyZ2IudmFsdWUuYmx1ZX1gXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHsgdmFsdWU6IHsgaGV4OiAnIzAwMDAwMCcgfSwgZm9ybWF0OiAnaGV4JyB9O1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRoZXg6IGAjJHt0cmFuc2Zvcm1zLmNvbXBvbmVudFRvSGV4KHJnYi52YWx1ZS5yZWQpfSR7dHJhbnNmb3Jtcy5jb21wb25lbnRUb0hleChyZ2IudmFsdWUuZ3JlZW4pfSR7dHJhbnNmb3Jtcy5jb21wb25lbnRUb0hleChyZ2IudmFsdWUuYmx1ZSl9YFxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hleCdcblx0XHR9O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUud2FybihgcmdiVG9IZXggZXJyb3I6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIGRlZmF1bHRzLmRlZmF1bHRIZXgoKTtcblx0fVxufVxuXG5mdW5jdGlvbiB4eXpUb0hleCh4eXo6IHR5cGVzLlhZWik6IHR5cGVzLkhleCB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGNvbnZlcnNpb25IZWxwZXJzLnh5elRvSGV4SGVscGVyKHh5eik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS53YXJuKGB4eXpUb0hleCBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdEhleCgpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCB0b0hleDogZm5PYmplY3RzLlRvSGV4ID0ge1xuXHRjbXlrVG9IZXgsXG5cdGhzbFRvSGV4LFxuXHRoc3ZUb0hleCxcblx0bGFiVG9IZXgsXG5cdHJnYlRvSGV4LFxuXHR4eXpUb0hleFxufTtcbiJdfQ==