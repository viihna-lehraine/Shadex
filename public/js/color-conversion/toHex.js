import { convert } from '../color-conversion/conversion-index.js';
import { componentToHex } from '../utils/transforms.js';
import { conversionHelpers } from '../helpers/conversion.js';
export function hslToHex(hsl) {
    try {
        const rgb = convert.hslToRGB(hsl);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`hslToHex error: ${error}`);
        return { hex: '#000000', format: 'hex' };
    }
}
export function hsvToHex(hsv) {
    try {
        const rgb = convert.hsvToRGB(hsv);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`hsvToHex error: ${error}`);
        return { hex: '#000000', format: 'hex' };
    }
}
export function cmykToHex(cmyk) {
    try {
        const rgb = convert.cmykToRGB(cmyk);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`cmykToHex error: ${error}`);
        return { hex: '#000000', format: 'hex' };
    }
}
export function labToHex(lab) {
    try {
        const rgb = convert.labToRGB(lab);
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`labToHex error: ${error}`);
        return { hex: '#000000', format: 'hex' };
    }
}
export function rgbToHex(rgb) {
    try {
        if ([rgb.red, rgb.green, rgb.blue].some(v => isNaN(v) || v < 0 || v > 255)) {
            console.warn(`Invalid RGB values: R=${rgb.red}, G=${rgb.green}, B=${rgb.blue}`);
            return { hex: '#000000', format: 'hex' };
        }
        return {
            hex: `#${componentToHex(rgb.red)}${componentToHex(rgb.green)}${componentToHex(rgb.blue)}`,
            format: 'hex'
        };
    }
    catch (error) {
        console.warn(`rgbToHex error: ${error}`);
        return { hex: '#000000', format: 'hex' };
    }
}
export function xyzToHex(xyz) {
    try {
        return conversionHelpers.xyzToHexTryCaseHelper(xyz);
    }
    catch (error) {
        console.warn(`xyzToHex error: ${error}`);
        return { hex: '#000000', format: 'hex' };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9IZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sb3ItY29udmVyc2lvbi90b0hleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE1BQU0sVUFBVSxRQUFRLENBQUMsR0FBYztJQUN0QyxJQUFJLENBQUM7UUFDSixNQUFNLEdBQUcsR0FBYyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzFDLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxHQUFjO0lBQ3RDLElBQUksQ0FBQztRQUNKLE1BQU0sR0FBRyxHQUFjLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDMUMsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLElBQWdCO0lBQ3pDLElBQUksQ0FBQztRQUNKLE1BQU0sR0FBRyxHQUFjLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDMUMsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQWM7SUFDdEMsSUFBSSxDQUFDO1FBQ0osTUFBTSxHQUFHLEdBQWMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsR0FBYztJQUN0QyxJQUFJLENBQUM7UUFDSixJQUNDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ2xDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FDakMsRUFDQSxDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FDWCx5QkFBeUIsR0FBRyxDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsS0FBSyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FDakUsQ0FBQztZQUNGLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUMxQyxDQUFDO1FBRUQsT0FBTztZQUNOLEdBQUcsRUFBRSxJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pGLE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzFDLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxHQUFjO0lBQ3RDLElBQUksQ0FBQztRQUNKLE9BQU8saUJBQWlCLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDMUMsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSAnLi4vY29sb3ItY29udmVyc2lvbi9jb252ZXJzaW9uLWluZGV4JztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGNvbXBvbmVudFRvSGV4IH0gZnJvbSAnLi4vdXRpbHMvdHJhbnNmb3Jtcyc7XG5pbXBvcnQgeyBjb252ZXJzaW9uSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMvY29udmVyc2lvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb0hleChoc2w6IHR5cGVzLkhTTCk6IHR5cGVzLkhleCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmdiOiB0eXBlcy5SR0IgPSBjb252ZXJ0LmhzbFRvUkdCKGhzbCk7XG5cdFx0cmV0dXJuIHJnYlRvSGV4KHJnYik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS53YXJuKGBoc2xUb0hleCBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4geyBoZXg6ICcjMDAwMDAwJywgZm9ybWF0OiAnaGV4JyB9O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc3ZUb0hleChoc3Y6IHR5cGVzLkhTVik6IHR5cGVzLkhleCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmdiOiB0eXBlcy5SR0IgPSBjb252ZXJ0LmhzdlRvUkdCKGhzdik7XG5cdFx0cmV0dXJuIHJnYlRvSGV4KHJnYik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS53YXJuKGBoc3ZUb0hleCBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4geyBoZXg6ICcjMDAwMDAwJywgZm9ybWF0OiAnaGV4JyB9O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbXlrVG9IZXgoY215azogdHlwZXMuQ01ZSyk6IHR5cGVzLkhleCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmdiOiB0eXBlcy5SR0IgPSBjb252ZXJ0LmNteWtUb1JHQihjbXlrKTtcblx0XHRyZXR1cm4gcmdiVG9IZXgocmdiKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLndhcm4oYGNteWtUb0hleCBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4geyBoZXg6ICcjMDAwMDAwJywgZm9ybWF0OiAnaGV4JyB9O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYWJUb0hleChsYWI6IHR5cGVzLkxBQik6IHR5cGVzLkhleCB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmdiOiB0eXBlcy5SR0IgPSBjb252ZXJ0LmxhYlRvUkdCKGxhYik7XG5cblx0XHRyZXR1cm4gcmdiVG9IZXgocmdiKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLndhcm4oYGxhYlRvSGV4IGVycm9yOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiB7IGhleDogJyMwMDAwMDAnLCBmb3JtYXQ6ICdoZXgnIH07XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KHJnYjogdHlwZXMuUkdCKTogdHlwZXMuSGV4IHtcblx0dHJ5IHtcblx0XHRpZiAoXG5cdFx0XHRbcmdiLnJlZCwgcmdiLmdyZWVuLCByZ2IuYmx1ZV0uc29tZShcblx0XHRcdFx0diA9PiBpc05hTih2KSB8fCB2IDwgMCB8fCB2ID4gMjU1XG5cdFx0XHQpXG5cdFx0KSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdGBJbnZhbGlkIFJHQiB2YWx1ZXM6IFI9JHtyZ2IucmVkfSwgRz0ke3JnYi5ncmVlbn0sIEI9JHtyZ2IuYmx1ZX1gXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHsgaGV4OiAnIzAwMDAwMCcsIGZvcm1hdDogJ2hleCcgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0aGV4OiBgIyR7Y29tcG9uZW50VG9IZXgocmdiLnJlZCl9JHtjb21wb25lbnRUb0hleChyZ2IuZ3JlZW4pfSR7Y29tcG9uZW50VG9IZXgocmdiLmJsdWUpfWAsXG5cdFx0XHRmb3JtYXQ6ICdoZXgnXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLndhcm4oYHJnYlRvSGV4IGVycm9yOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiB7IGhleDogJyMwMDAwMDAnLCBmb3JtYXQ6ICdoZXgnIH07XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHh5elRvSGV4KHh5ejogdHlwZXMuWFlaKTogdHlwZXMuSGV4IHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gY29udmVyc2lvbkhlbHBlcnMueHl6VG9IZXhUcnlDYXNlSGVscGVyKHh5eik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS53YXJuKGB4eXpUb0hleCBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4geyBoZXg6ICcjMDAwMDAwJywgZm9ybWF0OiAnaGV4JyB9O1xuXHR9XG59XG4iXX0=