import { convert } from '../color-conversion/conversion-index.js';
import { conversionHelpers } from '../helpers/conversion.js';
import { paletteHelpers } from '../helpers/palette.js';
import { defaults } from '../utils/defaults.js';
import { core } from '../utils/core.js';
import { transforms } from '../utils/transforms.js';
function cmykToHex(cmyk) {
    try {
        if (!paletteHelpers.validateColorValues(cmyk)) {
            console.error(`Invalid hex value ${JSON.stringify(cmyk)}`);
            return core.clone(defaults.defaultHex());
        }
        const rgb = convert.cmykToRGB(core.clone(cmyk));
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`cmykToHex error: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
function hslToHex(hsl) {
    try {
        if (!paletteHelpers.validateColorValues(hsl)) {
            console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.defaultHex());
        }
        const rgb = convert.hslToRGB(core.clone(hsl));
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`hslToHex error: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
function hsvToHex(hsv) {
    try {
        if (!paletteHelpers.validateColorValues(hsv)) {
            console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
            return core.clone(defaults.defaultHex());
        }
        const rgb = convert.hsvToRGB(core.clone(hsv));
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`hsvToHex error: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
function labToHex(lab) {
    try {
        if (!paletteHelpers.validateColorValues(lab)) {
            console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
            return core.clone(defaults.defaultHex());
        }
        const rgb = convert.labToRGB(core.clone(lab));
        return rgbToHex(rgb);
    }
    catch (error) {
        console.warn(`labToHex error: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
function rgbToHex(rgb) {
    try {
        if (!paletteHelpers.validateColorValues(rgb)) {
            console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
            return core.clone(defaults.defaultHex());
        }
        const clonedRGB = core.clone(rgb);
        if ([
            clonedRGB.value.red,
            clonedRGB.value.green,
            clonedRGB.value.blue
        ].some(v => isNaN(v) || v < 0 || v > 255)) {
            console.warn(`Invalid RGB values: R=${JSON.stringify(clonedRGB.value.red)}, G=${JSON.stringify(clonedRGB.value.green)}, B=${JSON.stringify(clonedRGB.value.blue)}`);
            return { value: { hex: '#000000' }, format: 'hex' };
        }
        return {
            value: {
                hex: `#${transforms.componentToHex(clonedRGB.value.red)}${transforms.componentToHex(clonedRGB.value.green)}${transforms.componentToHex(clonedRGB.value.blue)}`
            },
            format: 'hex'
        };
    }
    catch (error) {
        console.warn(`rgbToHex error: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
function xyzToHex(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultHex());
        }
        return conversionHelpers.xyzToHexHelper(core.clone(xyz));
    }
    catch (error) {
        console.warn(`xyzToHex error: ${error}`);
        return core.clone(defaults.defaultHex());
    }
}
export const toHex = {
    cmykToHex,
    hslToHex,
    hsvToHex,
    labToHex,
    rgbToHex,
    xyzToHex
};
//# sourceMappingURL=data:application/json;base64,