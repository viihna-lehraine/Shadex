import { conversionHelpers } from '../helpers/conversion.js';
import { paletteHelpers } from '../helpers/palette.js';
import { core } from '../utils/core.js';
import { defaults } from '../utils/defaults.js';
function hexToCMYK(hex) {
    try {
        if (!paletteHelpers.validateColorValues(hex)) {
            console.error(`Invalid hex value ${JSON.stringify(hex)}`);
            return core.clone(defaults.defaultCMYK());
        }
        return conversionHelpers.hexToCMYKHelper(core.clone(hex));
    }
    catch (error) {
        console.error(`Error converting hex to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function hslToCMYK(hsl) {
    try {
        if (!paletteHelpers.validateColorValues(hsl)) {
            console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.defaultCMYK());
        }
        return conversionHelpers.hslToCMYKHelper(core.clone(hsl));
    }
    catch (error) {
        console.error(`Error converting HSL to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function hsvToCMYK(hsv) {
    try {
        if (!paletteHelpers.validateColorValues(hsv)) {
            console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
            return core.clone(defaults.defaultCMYK());
        }
        return conversionHelpers.hsvToCMYKHelper(core.clone(hsv));
    }
    catch (error) {
        console.error(`Error converting HSV to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function labToCMYK(lab) {
    try {
        if (!paletteHelpers.validateColorValues(lab)) {
            console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
            return core.clone(defaults.defaultCMYK());
        }
        return conversionHelpers.labToCMYKHelper(core.clone(lab));
    }
    catch (error) {
        console.error(`Error converting Lab to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function rgbToCMYK(rgb) {
    try {
        if (!paletteHelpers.validateColorValues(rgb)) {
            console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
            return core.clone(defaults.defaultCMYK());
        }
        const clonedRGB = core.clone(rgb);
        const redPrime = clonedRGB.value.red / 255;
        const greenPrime = clonedRGB.value.green / 255;
        const bluePrime = clonedRGB.value.blue / 255;
        const key = 1 - Math.max(redPrime, greenPrime, bluePrime);
        const cyan = (1 - redPrime - key) / (1 - key) || 0;
        const magenta = (1 - greenPrime - key) / (1 - key) || 0;
        const yellow = (1 - bluePrime - key) / (1 - key) || 0;
        return {
            value: {
                cyan: Math.round(cyan * 100),
                magenta: Math.round(magenta * 100),
                yellow: Math.round(yellow * 100),
                key: Math.round(key * 100)
            },
            format: 'cmyk'
        };
    }
    catch (error) {
        console.error(`Error converting RGB to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
function xyzToCMYK(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultCMYK());
        }
        return conversionHelpers.xyzToCMYKHelper(core.clone(xyz));
    }
    catch (error) {
        console.error(`Error converting XYZ to CMYK: ${error}`);
        return core.clone(defaults.defaultCMYK());
    }
}
export const toCMYK = {
    hexToCMYK,
    hslToCMYK,
    hsvToCMYK,
    labToCMYK,
    rgbToCMYK,
    xyzToCMYK
};
//# sourceMappingURL=data:application/json;base64,