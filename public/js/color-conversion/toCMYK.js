import { conversionHelpers } from '../helpers/conversion.js';
import { defaults } from '../utils/defaults.js';
function hexToCMYK(hex) {
    try {
        return conversionHelpers.hexToCMYKHelper(hex);
    }
    catch (error) {
        console.error(`Error converting hex to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function hslToCMYK(hsl) {
    try {
        return conversionHelpers.hslToCMYKHelper(hsl);
    }
    catch (error) {
        console.error(`Error converting HSL to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function hsvToCMYK(hsv) {
    try {
        return conversionHelpers.hsvToCMYKHelper(hsv);
    }
    catch (error) {
        console.error(`Error converting HSV to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function labToCMYK(lab) {
    try {
        return conversionHelpers.labToCMYKHelper(lab);
    }
    catch (error) {
        console.error(`Error converting Lab to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function rgbToCMYK(rgb) {
    try {
        const redPrime = rgb.value.red / 255;
        const greenPrime = rgb.value.green / 255;
        const bluePrime = rgb.value.blue / 255;
        const key = 1 - Math.max(redPrime, greenPrime, bluePrime);
        const cyan = (1 - redPrime - key) / (1 - key) || 0;
        const magenta = (1 - greenPrime - key) / (1 - key) || 0;
        const yellow = (1 - bluePrime - key) / (1 - key) || 0;
        return {
            value: {
                cyan: Math.round(cyan * 100),
                magenta: Math.round(magenta * 100),
                yellow: Math.round(yellow * 100),
                key: Math.round(key * 100)
            },
            format: 'cmyk'
        };
    }
    catch (error) {
        console.error(`Error converting RGB to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
function xyzToCMYK(xyz) {
    try {
        const cmyk = conversionHelpers.xyzToCMYKHelper(xyz);
        return cmyk;
    }
    catch (error) {
        console.error(`Error converting XYZ to CMYK: ${error}`);
        return defaults.defaultCMYK();
    }
}
export const toCMYK = {
    hexToCMYK,
    hslToCMYK,
    hsvToCMYK,
    labToCMYK,
    rgbToCMYK,
    xyzToCMYK
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9DTVlLLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbG9yLWNvbnZlcnNpb24vdG9DTVlLLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzFELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxTQUFTLFNBQVMsQ0FBQyxHQUFjO0lBQ2hDLElBQUksQ0FBQztRQUNKLE9BQU8saUJBQWlCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFjO0lBQ2hDLElBQUksQ0FBQztRQUNKLE9BQU8saUJBQWlCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFjO0lBQ2hDLElBQUksQ0FBQztRQUNKLE9BQU8saUJBQWlCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFjO0lBQ2hDLElBQUksQ0FBQztRQUNKLE9BQU8saUJBQWlCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFjO0lBQ2hDLElBQUksQ0FBQztRQUNKLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNyQyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDekMsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBRXZDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDMUQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEQsT0FBTztZQUNOLEtBQUssRUFBRTtnQkFDTixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO2dCQUM1QixPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO2dCQUNsQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO2dCQUNoQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO2FBQzFCO1lBQ0QsTUFBTSxFQUFFLE1BQU07U0FDZCxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4RCxPQUFPLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQWM7SUFDaEMsSUFBSSxDQUFDO1FBQ0osTUFBTSxJQUFJLEdBQWUsaUJBQWlCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4RCxPQUFPLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBcUI7SUFDdkMsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0NBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnNpb25IZWxwZXJzIH0gZnJvbSAnLi4vaGVscGVycy9jb252ZXJzaW9uJztcbmltcG9ydCAqIGFzIGZuT2JqZWN0cyBmcm9tICcuLi9pbmRleC9mbi1vYmplY3RzJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4L3R5cGVzJztcbmltcG9ydCB7IGRlZmF1bHRzIH0gZnJvbSAnLi4vdXRpbHMvZGVmYXVsdHMnO1xuXG5mdW5jdGlvbiBoZXhUb0NNWUsoaGV4OiB0eXBlcy5IZXgpOiB0eXBlcy5DTVlLIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gY29udmVyc2lvbkhlbHBlcnMuaGV4VG9DTVlLSGVscGVyKGhleCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBoZXggdG8gQ01ZSzogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdENNWUsoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBoc2xUb0NNWUsoaHNsOiB0eXBlcy5IU0wpOiB0eXBlcy5DTVlLIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gY29udmVyc2lvbkhlbHBlcnMuaHNsVG9DTVlLSGVscGVyKGhzbCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBIU0wgdG8gQ01ZSzogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdENNWUsoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBoc3ZUb0NNWUsoaHN2OiB0eXBlcy5IU1YpOiB0eXBlcy5DTVlLIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gY29udmVyc2lvbkhlbHBlcnMuaHN2VG9DTVlLSGVscGVyKGhzdik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBIU1YgdG8gQ01ZSzogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdENNWUsoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBsYWJUb0NNWUsobGFiOiB0eXBlcy5MQUIpOiB0eXBlcy5DTVlLIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gY29udmVyc2lvbkhlbHBlcnMubGFiVG9DTVlLSGVscGVyKGxhYik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBMYWIgdG8gQ01ZSzogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZGVmYXVsdHMuZGVmYXVsdENNWUsoKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZ2JUb0NNWUsocmdiOiB0eXBlcy5SR0IpOiB0eXBlcy5DTVlLIHtcblx0dHJ5IHtcblx0XHRjb25zdCByZWRQcmltZSA9IHJnYi52YWx1ZS5yZWQgLyAyNTU7XG5cdFx0Y29uc3QgZ3JlZW5QcmltZSA9IHJnYi52YWx1ZS5ncmVlbiAvIDI1NTtcblx0XHRjb25zdCBibHVlUHJpbWUgPSByZ2IudmFsdWUuYmx1ZSAvIDI1NTtcblxuXHRcdGNvbnN0IGtleSA9IDEgLSBNYXRoLm1heChyZWRQcmltZSwgZ3JlZW5QcmltZSwgYmx1ZVByaW1lKTtcblx0XHRjb25zdCBjeWFuID0gKDEgLSByZWRQcmltZSAtIGtleSkgLyAoMSAtIGtleSkgfHwgMDtcblx0XHRjb25zdCBtYWdlbnRhID0gKDEgLSBncmVlblByaW1lIC0ga2V5KSAvICgxIC0ga2V5KSB8fCAwO1xuXHRcdGNvbnN0IHllbGxvdyA9ICgxIC0gYmx1ZVByaW1lIC0ga2V5KSAvICgxIC0ga2V5KSB8fCAwO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGN5YW46IE1hdGgucm91bmQoY3lhbiAqIDEwMCksXG5cdFx0XHRcdG1hZ2VudGE6IE1hdGgucm91bmQobWFnZW50YSAqIDEwMCksXG5cdFx0XHRcdHllbGxvdzogTWF0aC5yb3VuZCh5ZWxsb3cgKiAxMDApLFxuXHRcdFx0XHRrZXk6IE1hdGgucm91bmQoa2V5ICogMTAwKVxuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2NteWsnXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIFJHQiB0byBDTVlLOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0cy5kZWZhdWx0Q01ZSygpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHh5elRvQ01ZSyh4eXo6IHR5cGVzLlhZWik6IHR5cGVzLkNNWUsge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNteWs6IHR5cGVzLkNNWUsgPSBjb252ZXJzaW9uSGVscGVycy54eXpUb0NNWUtIZWxwZXIoeHl6KTtcblx0XHRyZXR1cm4gY215aztcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIFhZWiB0byBDTVlLOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiBkZWZhdWx0cy5kZWZhdWx0Q01ZSygpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCB0b0NNWUs6IGZuT2JqZWN0cy5Ub0NNWUsgPSB7XG5cdGhleFRvQ01ZSyxcblx0aHNsVG9DTVlLLFxuXHRoc3ZUb0NNWUssXG5cdGxhYlRvQ01ZSyxcblx0cmdiVG9DTVlLLFxuXHR4eXpUb0NNWUtcbn07XG4iXX0=