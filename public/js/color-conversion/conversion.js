import { convert } from './conversion-index.js';
import { wrappers } from '../helpers/wrappers.js';
import { guards } from '../utils/type-guards.js';
import { colorToColorObject } from '../utils/transforms.js';
import { defaults } from '../utils/defaults.js';
export function getConversionFn(from, to) {
    const fromMap = conversionMap[from];
    if (!fromMap || !(to in fromMap))
        return undefined;
    // Ensure the value parameter is correctly typed and used
    return (value) => {
        const conversionFn = fromMap[to];
        return conversionFn(value); // Now `value` is properly used
    };
}
export const conversionMap = {
    cmyk: {
        hex: convert.cmykToHex,
        hsl: convert.cmykToHSL,
        hsv: convert.cmykToHSV,
        lab: convert.cmykToLAB,
        rgb: convert.cmykToRGB,
        xyz: convert.cmykToXYZ
    },
    hex: {
        cmyk: wrappers.hexToCMYKWrapper,
        hsl: wrappers.hexToHSLWrapper,
        hsv: wrappers.hexToHSVWrapper,
        lab: wrappers.hexToLABWrapper,
        rgb: wrappers.hexToRGBWrapper,
        xyz: wrappers.hexToXYZWrapper
    },
    hsl: {
        cmyk: convert.hslToCMYK,
        hex: convert.hslToHex,
        hsv: convert.hslToHSV,
        lab: convert.hslToLAB,
        rgb: convert.hslToRGB,
        xyz: convert.hslToXYZ
    },
    hsv: {
        cmyk: convert.hsvToCMYK,
        hex: convert.hsvToHex,
        hsl: convert.hsvToHSL,
        lab: convert.hsvToLAB,
        rgb: convert.hsvToRGB,
        xyz: convert.hsvToXYZ
    },
    lab: {
        cmyk: convert.labToCMYK,
        hex: convert.labToHex,
        hsl: convert.labToHSL,
        hsv: convert.labToHSV,
        rgb: convert.labToRGB,
        xyz: convert.labToXYZ
    },
    rgb: {
        cmyk: convert.rgbToCMYK,
        hex: convert.rgbToHex,
        hsl: convert.rgbToHSL,
        hsv: convert.rgbToHSV,
        lab: convert.rgbToLAB,
        xyz: convert.rgbToXYZ
    },
    xyz: {
        cmyk: convert.xyzToCMYK,
        hex: convert.xyzToHex,
        hsl: convert.xyzToHSL,
        hsv: convert.xyzToHSV,
        lab: convert.xyzToLAB,
        rgb: convert.xyzToRGB
    }
};
export function genAllColorValues(color) {
    const colorObject = guards.isColorObjectData(color)
        ? color
        : colorToColorObject(color);
    if (!colorObject) {
        throw new Error(`Invalid color data: ${JSON.stringify(color)}`);
    }
    const result = {};
    switch (color.format) {
        case 'cmyk': {
            const cmykValue = colorObject.value;
            result.cmyk = cmykValue;
            result.hex = convert.cmykToHex(cmykValue);
            result.hsl = convert.cmykToHSL(cmykValue);
            result.hsv = convert.cmykToHSV(cmykValue);
            result.lab = convert.cmykToLAB(cmykValue);
            result.rgb = convert.cmykToRGB(cmykValue);
            break;
        }
        case 'hex': {
            const hexValue = colorObject.value;
            result.hex = hexValue;
            result.cmyk = convert.hexToCMYK(hexValue);
            result.hsl = convert.hexToHSL(hexValue);
            result.hsv = convert.hexToHSV(hexValue);
            result.lab = convert.hexToLAB(hexValue);
            result.rgb = convert.hexToRGB(hexValue);
            break;
        }
        case 'hsl': {
            const hslValue = colorObject.value;
            result.cmyk = convert.hslToCMYK(hslValue);
            result.hex = convert.hslToHex(hslValue);
            result.hsl = hslValue;
            result.hsv = convert.hslToHSV(hslValue);
            result.lab = convert.hslToLAB(hslValue);
            result.rgb = convert.hslToRGB(hslValue);
            break;
        }
        case 'hsv': {
            const hsvValue = colorObject.value;
            result.cmyk = convert.hsvToCMYK(hsvValue);
            result.hex = convert.hsvToHex(hsvValue);
            result.hsl = convert.hsvToHSL(hsvValue);
            result.hsv = hsvValue;
            result.lab = convert.hsvToLAB(hsvValue);
            result.rgb = convert.hsvToRGB(hsvValue);
            break;
        }
        case 'lab': {
            const labValue = colorObject.value;
            result.cmyk = convert.labToCMYK(labValue);
            result.hex = convert.labToHex(labValue);
            result.hsl = convert.labToHSL(labValue);
            result.hsv = convert.labToHSV(labValue);
            result.lab = labValue;
            result.rgb = convert.labToRGB(labValue);
            break;
        }
        case 'rgb': {
            const rgbValue = colorObject.value;
            result.cmyk = convert.rgbToCMYK(rgbValue);
            result.hex = convert.rgbToHex(rgbValue);
            result.hsl = convert.rgbToHSL(rgbValue);
            result.hsv = convert.rgbToHSV(rgbValue);
            result.lab = convert.rgbToLAB(rgbValue);
            result.rgb = rgbValue;
            break;
        }
        default:
            throw new Error(`Unsupported color format: ${color.format}`);
    }
    return {
        cmyk: result.cmyk || defaults.defaultCMYK(),
        hex: result.hex || defaults.defaultHex(),
        hsl: result.hsl || defaults.defaultHSL(),
        hsv: result.hsv || defaults.defaultHSV(),
        lab: result.lab || defaults.defaultLAB(),
        rgb: result.rgb || defaults.defaultRGB()
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2xvci1jb252ZXJzaW9uL2NvbnZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTdDLE1BQU0sVUFBVSxlQUFlLENBSTlCLElBQVUsRUFDVixFQUFNO0lBSU4sTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXBDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztJQUVuRCx5REFBeUQ7SUFDekQsT0FBTyxDQUFDLEtBQXFDLEVBQUUsRUFBRTtRQUNoRCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsRUFBRSxDQUVFLENBQUM7UUFFbEMsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQywrQkFBK0I7SUFDNUQsQ0FBQyxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBd0I7SUFDakQsSUFBSSxFQUFFO1FBQ0wsR0FBRyxFQUFFLE9BQU8sQ0FBQyxTQUFTO1FBQ3RCLEdBQUcsRUFBRSxPQUFPLENBQUMsU0FBUztRQUN0QixHQUFHLEVBQUUsT0FBTyxDQUFDLFNBQVM7UUFDdEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxTQUFTO1FBQ3RCLEdBQUcsRUFBRSxPQUFPLENBQUMsU0FBUztRQUN0QixHQUFHLEVBQUUsT0FBTyxDQUFDLFNBQVM7S0FDdEI7SUFDRCxHQUFHLEVBQUU7UUFDSixJQUFJLEVBQUUsUUFBUSxDQUFDLGdCQUFnQjtRQUMvQixHQUFHLEVBQUUsUUFBUSxDQUFDLGVBQWU7UUFDN0IsR0FBRyxFQUFFLFFBQVEsQ0FBQyxlQUFlO1FBQzdCLEdBQUcsRUFBRSxRQUFRLENBQUMsZUFBZTtRQUM3QixHQUFHLEVBQUUsUUFBUSxDQUFDLGVBQWU7UUFDN0IsR0FBRyxFQUFFLFFBQVEsQ0FBQyxlQUFlO0tBQzdCO0lBQ0QsR0FBRyxFQUFFO1FBQ0osSUFBSSxFQUFFLE9BQU8sQ0FBQyxTQUFTO1FBQ3ZCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNyQixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDckIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNyQixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7S0FDckI7SUFDRCxHQUFHLEVBQUU7UUFDSixJQUFJLEVBQUUsT0FBTyxDQUFDLFNBQVM7UUFDdkIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNyQixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDckIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtLQUNyQjtJQUNELEdBQUcsRUFBRTtRQUNKLElBQUksRUFBRSxPQUFPLENBQUMsU0FBUztRQUN2QixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDckIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNyQixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDckIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO0tBQ3JCO0lBQ0QsR0FBRyxFQUFFO1FBQ0osSUFBSSxFQUFFLE9BQU8sQ0FBQyxTQUFTO1FBQ3ZCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNyQixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDckIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNyQixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7S0FDckI7SUFDRCxHQUFHLEVBQUU7UUFDSixJQUFJLEVBQUUsT0FBTyxDQUFDLFNBQVM7UUFDdkIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNyQixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDckIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQ3JCLEdBQUcsRUFBRSxPQUFPLENBQUMsUUFBUTtLQUNyQjtDQUNELENBQUM7QUFFRixNQUFNLFVBQVUsaUJBQWlCLENBQ2hDLEtBQThDO0lBRTlDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7UUFDbEQsQ0FBQyxDQUFDLEtBQUs7UUFDUCxDQUFDLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFN0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBeUQsRUFBRSxDQUFDO0lBRXhFLFFBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3RCLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxLQUFtQixDQUFDO1lBQ2xELE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDMUMsTUFBTTtRQUNQLENBQUM7UUFDRCxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDWixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsS0FBa0IsQ0FBQztZQUNoRCxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztZQUN0QixNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU07UUFDUCxDQUFDO1FBQ0QsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEtBQWtCLENBQUM7WUFDaEQsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztZQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNO1FBQ1AsQ0FBQztRQUNELEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNaLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxLQUFrQixDQUFDO1lBQ2hELE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsTUFBTTtRQUNQLENBQUM7UUFDRCxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDWixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsS0FBa0IsQ0FBQztZQUNoRCxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7WUFDdEIsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU07UUFDUCxDQUFDO1FBQ0QsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEtBQWtCLENBQUM7WUFDaEQsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztZQUN0QixNQUFNO1FBQ1AsQ0FBQztRQUNEO1lBQ0MsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELE9BQU87UUFDTixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO1FBQzNDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDeEMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUN4QyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ3hDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDeEMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRTtLQUN4QyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuL2NvbnZlcnNpb24taW5kZXgnO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgd3JhcHBlcnMgfSBmcm9tICcuLi9oZWxwZXJzL3dyYXBwZXJzJztcbmltcG9ydCB7IGd1YXJkcyB9IGZyb20gJy4uL3V0aWxzL3R5cGUtZ3VhcmRzJztcbmltcG9ydCB7IGNvbG9yVG9Db2xvck9iamVjdCB9IGZyb20gJy4uL3V0aWxzL3RyYW5zZm9ybXMnO1xuaW1wb3J0IHsgZGVmYXVsdHMgfSBmcm9tICcuLi91dGlscy9kZWZhdWx0cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb252ZXJzaW9uRm48XG5cdEZyb20gZXh0ZW5kcyBrZXlvZiB0eXBlcy5Db2xvckRhdGFJbnRlcmZhY2UsXG5cdFRvIGV4dGVuZHMga2V5b2YgdHlwZXMuQ29sb3JEYXRhSW50ZXJmYWNlXG4+KFxuXHRmcm9tOiBGcm9tLFxuXHR0bzogVG9cbik6XG5cdHwgKCh2YWx1ZTogdHlwZXMuQ29sb3JEYXRhSW50ZXJmYWNlW0Zyb21dKSA9PiB0eXBlcy5Db2xvckRhdGFJbnRlcmZhY2VbVG9dKVxuXHR8IHVuZGVmaW5lZCB7XG5cdGNvbnN0IGZyb21NYXAgPSBjb252ZXJzaW9uTWFwW2Zyb21dO1xuXG5cdGlmICghZnJvbU1hcCB8fCAhKHRvIGluIGZyb21NYXApKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdC8vIEVuc3VyZSB0aGUgdmFsdWUgcGFyYW1ldGVyIGlzIGNvcnJlY3RseSB0eXBlZCBhbmQgdXNlZFxuXHRyZXR1cm4gKHZhbHVlOiB0eXBlcy5Db2xvckRhdGFJbnRlcmZhY2VbRnJvbV0pID0+IHtcblx0XHRjb25zdCBjb252ZXJzaW9uRm4gPSBmcm9tTWFwW3RvXSBhcyAoXG5cdFx0XHRfaW5wdXQ6IHR5cGVzLkNvbG9yRGF0YUludGVyZmFjZVtGcm9tXVxuXHRcdCkgPT4gdHlwZXMuQ29sb3JEYXRhSW50ZXJmYWNlW1RvXTtcblxuXHRcdHJldHVybiBjb252ZXJzaW9uRm4odmFsdWUpOyAvLyBOb3cgYHZhbHVlYCBpcyBwcm9wZXJseSB1c2VkXG5cdH07XG59XG5cbmV4cG9ydCBjb25zdCBjb252ZXJzaW9uTWFwOiB0eXBlcy5Db252ZXJzaW9uTWFwID0ge1xuXHRjbXlrOiB7XG5cdFx0aGV4OiBjb252ZXJ0LmNteWtUb0hleCxcblx0XHRoc2w6IGNvbnZlcnQuY215a1RvSFNMLFxuXHRcdGhzdjogY29udmVydC5jbXlrVG9IU1YsXG5cdFx0bGFiOiBjb252ZXJ0LmNteWtUb0xBQixcblx0XHRyZ2I6IGNvbnZlcnQuY215a1RvUkdCLFxuXHRcdHh5ejogY29udmVydC5jbXlrVG9YWVpcblx0fSxcblx0aGV4OiB7XG5cdFx0Y215azogd3JhcHBlcnMuaGV4VG9DTVlLV3JhcHBlcixcblx0XHRoc2w6IHdyYXBwZXJzLmhleFRvSFNMV3JhcHBlcixcblx0XHRoc3Y6IHdyYXBwZXJzLmhleFRvSFNWV3JhcHBlcixcblx0XHRsYWI6IHdyYXBwZXJzLmhleFRvTEFCV3JhcHBlcixcblx0XHRyZ2I6IHdyYXBwZXJzLmhleFRvUkdCV3JhcHBlcixcblx0XHR4eXo6IHdyYXBwZXJzLmhleFRvWFlaV3JhcHBlclxuXHR9LFxuXHRoc2w6IHtcblx0XHRjbXlrOiBjb252ZXJ0LmhzbFRvQ01ZSyxcblx0XHRoZXg6IGNvbnZlcnQuaHNsVG9IZXgsXG5cdFx0aHN2OiBjb252ZXJ0LmhzbFRvSFNWLFxuXHRcdGxhYjogY29udmVydC5oc2xUb0xBQixcblx0XHRyZ2I6IGNvbnZlcnQuaHNsVG9SR0IsXG5cdFx0eHl6OiBjb252ZXJ0LmhzbFRvWFlaXG5cdH0sXG5cdGhzdjoge1xuXHRcdGNteWs6IGNvbnZlcnQuaHN2VG9DTVlLLFxuXHRcdGhleDogY29udmVydC5oc3ZUb0hleCxcblx0XHRoc2w6IGNvbnZlcnQuaHN2VG9IU0wsXG5cdFx0bGFiOiBjb252ZXJ0LmhzdlRvTEFCLFxuXHRcdHJnYjogY29udmVydC5oc3ZUb1JHQixcblx0XHR4eXo6IGNvbnZlcnQuaHN2VG9YWVpcblx0fSxcblx0bGFiOiB7XG5cdFx0Y215azogY29udmVydC5sYWJUb0NNWUssXG5cdFx0aGV4OiBjb252ZXJ0LmxhYlRvSGV4LFxuXHRcdGhzbDogY29udmVydC5sYWJUb0hTTCxcblx0XHRoc3Y6IGNvbnZlcnQubGFiVG9IU1YsXG5cdFx0cmdiOiBjb252ZXJ0LmxhYlRvUkdCLFxuXHRcdHh5ejogY29udmVydC5sYWJUb1hZWlxuXHR9LFxuXHRyZ2I6IHtcblx0XHRjbXlrOiBjb252ZXJ0LnJnYlRvQ01ZSyxcblx0XHRoZXg6IGNvbnZlcnQucmdiVG9IZXgsXG5cdFx0aHNsOiBjb252ZXJ0LnJnYlRvSFNMLFxuXHRcdGhzdjogY29udmVydC5yZ2JUb0hTVixcblx0XHRsYWI6IGNvbnZlcnQucmdiVG9MQUIsXG5cdFx0eHl6OiBjb252ZXJ0LnJnYlRvWFlaXG5cdH0sXG5cdHh5ejoge1xuXHRcdGNteWs6IGNvbnZlcnQueHl6VG9DTVlLLFxuXHRcdGhleDogY29udmVydC54eXpUb0hleCxcblx0XHRoc2w6IGNvbnZlcnQueHl6VG9IU0wsXG5cdFx0aHN2OiBjb252ZXJ0Lnh5elRvSFNWLFxuXHRcdGxhYjogY29udmVydC54eXpUb0xBQixcblx0XHRyZ2I6IGNvbnZlcnQueHl6VG9SR0Jcblx0fVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkFsbENvbG9yVmFsdWVzKFxuXHRjb2xvcjogdHlwZXMuQ29sb3JPYmplY3REYXRhIHwgdHlwZXMuQ29sb3JEYXRhXG4pOiBQYXJ0aWFsPFJlY29yZDx0eXBlcy5Db2xvckZvcm1hdHMsIHR5cGVzLkNvbG9yRGF0YT4+IHtcblx0Y29uc3QgY29sb3JPYmplY3QgPSBndWFyZHMuaXNDb2xvck9iamVjdERhdGEoY29sb3IpXG5cdFx0PyBjb2xvclxuXHRcdDogY29sb3JUb0NvbG9yT2JqZWN0KGNvbG9yKTtcblxuXHRpZiAoIWNvbG9yT2JqZWN0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbG9yIGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoY29sb3IpfWApO1xuXHR9XG5cblx0Y29uc3QgcmVzdWx0OiBQYXJ0aWFsPFJlY29yZDx0eXBlcy5Db2xvckZvcm1hdHMsIHR5cGVzLkNvbG9yRGF0YT4+ID0ge307XG5cblx0c3dpdGNoIChjb2xvci5mb3JtYXQpIHtcblx0XHRjYXNlICdjbXlrJzoge1xuXHRcdFx0Y29uc3QgY215a1ZhbHVlID0gY29sb3JPYmplY3QudmFsdWUgYXMgdHlwZXMuQ01ZSztcblx0XHRcdHJlc3VsdC5jbXlrID0gY215a1ZhbHVlO1xuXHRcdFx0cmVzdWx0LmhleCA9IGNvbnZlcnQuY215a1RvSGV4KGNteWtWYWx1ZSk7XG5cdFx0XHRyZXN1bHQuaHNsID0gY29udmVydC5jbXlrVG9IU0woY215a1ZhbHVlKTtcblx0XHRcdHJlc3VsdC5oc3YgPSBjb252ZXJ0LmNteWtUb0hTVihjbXlrVmFsdWUpO1xuXHRcdFx0cmVzdWx0LmxhYiA9IGNvbnZlcnQuY215a1RvTEFCKGNteWtWYWx1ZSk7XG5cdFx0XHRyZXN1bHQucmdiID0gY29udmVydC5jbXlrVG9SR0IoY215a1ZhbHVlKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRjYXNlICdoZXgnOiB7XG5cdFx0XHRjb25zdCBoZXhWYWx1ZSA9IGNvbG9yT2JqZWN0LnZhbHVlIGFzIHR5cGVzLkhleDtcblx0XHRcdHJlc3VsdC5oZXggPSBoZXhWYWx1ZTtcblx0XHRcdHJlc3VsdC5jbXlrID0gY29udmVydC5oZXhUb0NNWUsoaGV4VmFsdWUpO1xuXHRcdFx0cmVzdWx0LmhzbCA9IGNvbnZlcnQuaGV4VG9IU0woaGV4VmFsdWUpO1xuXHRcdFx0cmVzdWx0LmhzdiA9IGNvbnZlcnQuaGV4VG9IU1YoaGV4VmFsdWUpO1xuXHRcdFx0cmVzdWx0LmxhYiA9IGNvbnZlcnQuaGV4VG9MQUIoaGV4VmFsdWUpO1xuXHRcdFx0cmVzdWx0LnJnYiA9IGNvbnZlcnQuaGV4VG9SR0IoaGV4VmFsdWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGNhc2UgJ2hzbCc6IHtcblx0XHRcdGNvbnN0IGhzbFZhbHVlID0gY29sb3JPYmplY3QudmFsdWUgYXMgdHlwZXMuSFNMO1xuXHRcdFx0cmVzdWx0LmNteWsgPSBjb252ZXJ0LmhzbFRvQ01ZSyhoc2xWYWx1ZSk7XG5cdFx0XHRyZXN1bHQuaGV4ID0gY29udmVydC5oc2xUb0hleChoc2xWYWx1ZSk7XG5cdFx0XHRyZXN1bHQuaHNsID0gaHNsVmFsdWU7XG5cdFx0XHRyZXN1bHQuaHN2ID0gY29udmVydC5oc2xUb0hTVihoc2xWYWx1ZSk7XG5cdFx0XHRyZXN1bHQubGFiID0gY29udmVydC5oc2xUb0xBQihoc2xWYWx1ZSk7XG5cdFx0XHRyZXN1bHQucmdiID0gY29udmVydC5oc2xUb1JHQihoc2xWYWx1ZSk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Y2FzZSAnaHN2Jzoge1xuXHRcdFx0Y29uc3QgaHN2VmFsdWUgPSBjb2xvck9iamVjdC52YWx1ZSBhcyB0eXBlcy5IU1Y7XG5cdFx0XHRyZXN1bHQuY215ayA9IGNvbnZlcnQuaHN2VG9DTVlLKGhzdlZhbHVlKTtcblx0XHRcdHJlc3VsdC5oZXggPSBjb252ZXJ0LmhzdlRvSGV4KGhzdlZhbHVlKTtcblx0XHRcdHJlc3VsdC5oc2wgPSBjb252ZXJ0LmhzdlRvSFNMKGhzdlZhbHVlKTtcblx0XHRcdHJlc3VsdC5oc3YgPSBoc3ZWYWx1ZTtcblx0XHRcdHJlc3VsdC5sYWIgPSBjb252ZXJ0LmhzdlRvTEFCKGhzdlZhbHVlKTtcblx0XHRcdHJlc3VsdC5yZ2IgPSBjb252ZXJ0LmhzdlRvUkdCKGhzdlZhbHVlKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRjYXNlICdsYWInOiB7XG5cdFx0XHRjb25zdCBsYWJWYWx1ZSA9IGNvbG9yT2JqZWN0LnZhbHVlIGFzIHR5cGVzLkxBQjtcblx0XHRcdHJlc3VsdC5jbXlrID0gY29udmVydC5sYWJUb0NNWUsobGFiVmFsdWUpO1xuXHRcdFx0cmVzdWx0LmhleCA9IGNvbnZlcnQubGFiVG9IZXgobGFiVmFsdWUpO1xuXHRcdFx0cmVzdWx0LmhzbCA9IGNvbnZlcnQubGFiVG9IU0wobGFiVmFsdWUpO1xuXHRcdFx0cmVzdWx0LmhzdiA9IGNvbnZlcnQubGFiVG9IU1YobGFiVmFsdWUpO1xuXHRcdFx0cmVzdWx0LmxhYiA9IGxhYlZhbHVlO1xuXHRcdFx0cmVzdWx0LnJnYiA9IGNvbnZlcnQubGFiVG9SR0IobGFiVmFsdWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGNhc2UgJ3JnYic6IHtcblx0XHRcdGNvbnN0IHJnYlZhbHVlID0gY29sb3JPYmplY3QudmFsdWUgYXMgdHlwZXMuUkdCO1xuXHRcdFx0cmVzdWx0LmNteWsgPSBjb252ZXJ0LnJnYlRvQ01ZSyhyZ2JWYWx1ZSk7XG5cdFx0XHRyZXN1bHQuaGV4ID0gY29udmVydC5yZ2JUb0hleChyZ2JWYWx1ZSk7XG5cdFx0XHRyZXN1bHQuaHNsID0gY29udmVydC5yZ2JUb0hTTChyZ2JWYWx1ZSk7XG5cdFx0XHRyZXN1bHQuaHN2ID0gY29udmVydC5yZ2JUb0hTVihyZ2JWYWx1ZSk7XG5cdFx0XHRyZXN1bHQubGFiID0gY29udmVydC5yZ2JUb0xBQihyZ2JWYWx1ZSk7XG5cdFx0XHRyZXN1bHQucmdiID0gcmdiVmFsdWU7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgY29sb3IgZm9ybWF0OiAke2NvbG9yLmZvcm1hdH1gKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Y215azogcmVzdWx0LmNteWsgfHwgZGVmYXVsdHMuZGVmYXVsdENNWUsoKSxcblx0XHRoZXg6IHJlc3VsdC5oZXggfHwgZGVmYXVsdHMuZGVmYXVsdEhleCgpLFxuXHRcdGhzbDogcmVzdWx0LmhzbCB8fCBkZWZhdWx0cy5kZWZhdWx0SFNMKCksXG5cdFx0aHN2OiByZXN1bHQuaHN2IHx8IGRlZmF1bHRzLmRlZmF1bHRIU1YoKSxcblx0XHRsYWI6IHJlc3VsdC5sYWIgfHwgZGVmYXVsdHMuZGVmYXVsdExBQigpLFxuXHRcdHJnYjogcmVzdWx0LnJnYiB8fCBkZWZhdWx0cy5kZWZhdWx0UkdCKClcblx0fTtcbn1cbiJdfQ==