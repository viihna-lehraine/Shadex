const KEY = 'AppStorage';
export const storage = {
    clearStorage() {
        try {
            localStorage.clear();
            document.cookie.split(';').forEach(cookie => {
                const name = cookie.split('=')[0].trim();
                document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/`;
            });
        }
        catch (error) {
            console.error(`Error clearing storage: ${error}`);
        }
    },
    getAppStorage() {
        try {
            const item = localStorage.getItem(String(KEY));
            return item ? JSON.parse(item) : null;
        }
        catch (error) {
            console.error(`Error reading from localStorage: ${error}`);
            return null;
        }
    },
    getCookie(name) {
        try {
            const match = document.cookie.match(`(?:^|;)\\s*${name}=([^;]*)`);
            if (!match)
                return null;
            const decodedValue = decodeURIComponent(match[1]);
            return JSON.parse(decodedValue);
        }
        catch (error) {
            console.error(`Error reading from cookies: ${error}`);
            return null;
        }
    },
    setAppStorage(value) {
        try {
            const serializedValue = JSON.stringify(value);
            localStorage.setItem(KEY, serializedValue);
        }
        catch (error) {
            console.error(`Error saving to localStorage: ${error}`);
        }
    },
    setCookie(name, value, days) {
        try {
            const date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            const serializedValue = encodeURIComponent(JSON.stringify(value));
            document.cookie = `${name}=${serializedValue}; expires=${date.toUTCString()}; path=/`;
        }
        catch (error) {
            console.error(`Error saving to cookies: ${error}`);
        }
    },
    updateAppStorage(updates) {
        try {
            const currentData = this.getAppStorage() || {};
            const newData = { ...currentData, ...updates };
            const serializedData = JSON.stringify(newData);
            localStorage.setItem(KEY, serializedData);
        }
        catch (error) {
            console.error(`Error updating appStorage: ${error}`);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vc3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEdBQUcsR0FBYyxZQUFxQixDQUFDO0FBRTdDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBZ0M7SUFDbkQsWUFBWTtRQUNYLElBQUksQ0FBQztZQUNKLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQixRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3pDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLGtEQUFrRCxDQUFDO1lBQzdFLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDO0lBQ0YsQ0FBQztJQUVELGFBQWE7UUFDWixJQUFJLENBQUM7WUFDSixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9DLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBMkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2xFLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDM0QsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO0lBQ0YsQ0FBQztJQUVELFNBQVMsQ0FBSSxJQUFZO1FBQ3hCLElBQUksQ0FBQztZQUNKLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsSUFBSSxVQUFVLENBQUMsQ0FBQztZQUVsRSxJQUFJLENBQUMsS0FBSztnQkFBRSxPQUFPLElBQUksQ0FBQztZQUV4QixNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVsRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFNLENBQUM7UUFDdEMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN0RCxPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7SUFDRixDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQTRCO1FBQ3pDLElBQUksQ0FBQztZQUNKLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFOUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6RCxDQUFDO0lBQ0YsQ0FBQztJQUVELFNBQVMsQ0FBSSxJQUFZLEVBQUUsS0FBUSxFQUFFLElBQVk7UUFDaEQsSUFBSSxDQUFDO1lBQ0osTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUV4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFFMUQsTUFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRWxFLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksZUFBZSxhQUFhLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDO1FBQ3ZGLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDcEQsQ0FBQztJQUNGLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxPQUF1QztRQUN2RCxJQUFJLENBQUM7WUFDSixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDO1lBQy9DLE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQztZQUMvQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRS9DLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdEQsQ0FBQztJQUNGLENBQUM7Q0FDRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaW50ZXJmYWNlcyBmcm9tICcuLi9pbmRleC9pbnRlcmZhY2VzJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4L3R5cGVzJztcblxuY29uc3QgS0VZOiB0eXBlcy5LZXkgPSAnQXBwU3RvcmFnZScgYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlOiBpbnRlcmZhY2VzLlN0b3JhZ2VJbnRlcmZhY2UgPSB7XG5cdGNsZWFyU3RvcmFnZSgpOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0bG9jYWxTdG9yYWdlLmNsZWFyKCk7XG5cdFx0XHRkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKS5mb3JFYWNoKGNvb2tpZSA9PiB7XG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBjb29raWUuc3BsaXQoJz0nKVswXS50cmltKCk7XG5cdFx0XHRcdGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PTsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIFVUQzsgcGF0aD0vYDtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBjbGVhcmluZyBzdG9yYWdlOiAke2Vycm9yfWApO1xuXHRcdH1cblx0fSxcblxuXHRnZXRBcHBTdG9yYWdlKCk6IGludGVyZmFjZXMuQXBwU3RvcmFnZSB8IG51bGwge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU3RyaW5nKEtFWSkpO1xuXHRcdFx0cmV0dXJuIGl0ZW0gPyAoSlNPTi5wYXJzZShpdGVtKSBhcyBpbnRlcmZhY2VzLkFwcFN0b3JhZ2UpIDogbnVsbDtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgcmVhZGluZyBmcm9tIGxvY2FsU3RvcmFnZTogJHtlcnJvcn1gKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fSxcblxuXHRnZXRDb29raWU8VD4obmFtZTogc3RyaW5nKTogVCB8IG51bGwge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChgKD86Xnw7KVxcXFxzKiR7bmFtZX09KFteO10qKWApO1xuXG5cdFx0XHRpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0Y29uc3QgZGVjb2RlZFZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdKTtcblxuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlZFZhbHVlKSBhcyBUO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciByZWFkaW5nIGZyb20gY29va2llczogJHtlcnJvcn1gKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fSxcblxuXHRzZXRBcHBTdG9yYWdlKHZhbHVlOiBpbnRlcmZhY2VzLkFwcFN0b3JhZ2UpOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3Qgc2VyaWFsaXplZFZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVksIHNlcmlhbGl6ZWRWYWx1ZSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHNhdmluZyB0byBsb2NhbFN0b3JhZ2U6ICR7ZXJyb3J9YCk7XG5cdFx0fVxuXHR9LFxuXG5cdHNldENvb2tpZTxUPihuYW1lOiBzdHJpbmcsIHZhbHVlOiBULCBkYXlzOiBudW1iZXIpOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cblx0XHRcdGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcblxuXHRcdFx0Y29uc3Qgc2VyaWFsaXplZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG5cblx0XHRcdGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PSR7c2VyaWFsaXplZFZhbHVlfTsgZXhwaXJlcz0ke2RhdGUudG9VVENTdHJpbmcoKX07IHBhdGg9L2A7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHNhdmluZyB0byBjb29raWVzOiAke2Vycm9yfWApO1xuXHRcdH1cblx0fSxcblxuXHR1cGRhdGVBcHBTdG9yYWdlKHVwZGF0ZXM6IFBhcnRpYWw8aW50ZXJmYWNlcy5BcHBTdG9yYWdlPik6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBjdXJyZW50RGF0YSA9IHRoaXMuZ2V0QXBwU3RvcmFnZSgpIHx8IHt9O1xuXHRcdFx0Y29uc3QgbmV3RGF0YSA9IHsgLi4uY3VycmVudERhdGEsIC4uLnVwZGF0ZXMgfTtcblx0XHRcdGNvbnN0IHNlcmlhbGl6ZWREYXRhID0gSlNPTi5zdHJpbmdpZnkobmV3RGF0YSk7XG5cblx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKEtFWSwgc2VyaWFsaXplZERhdGEpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciB1cGRhdGluZyBhcHBTdG9yYWdlOiAke2Vycm9yfWApO1xuXHRcdH1cblx0fVxufTtcbiJdfQ==