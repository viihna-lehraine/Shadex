const KEY = 'AppStorage';
export const storage = {
    clearStorage() {
        localStorage.clear();
        document.cookie.split(';').forEach(cookie => {
            const name = cookie.split('=')[0].trim();
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/`;
        });
    },
    getAppStorage() {
        try {
            const item = localStorage.getItem(String(KEY));
            return item ? JSON.parse(item) : null;
        }
        catch (error) {
            console.error(`Error reading from localStorage: ${error}`);
            return null;
        }
    },
    getCookie(name) {
        const match = document.cookie.match(`(?:^|;)\\s*${name}=([^;]*)`);
        if (!match)
            return null;
        try {
            const decodedValue = decodeURIComponent(match[1]);
            return JSON.parse(decodedValue);
        }
        catch (error) {
            console.error(`Error reading from cookies: ${error}`);
            return null;
        }
    },
    setAppStorage(value) {
        try {
            const serializedValue = JSON.stringify(value);
            localStorage.setItem(KEY, serializedValue);
        }
        catch (error) {
            console.error(`Error saving to localStorage: ${error}`);
        }
    },
    setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        const serializedValue = encodeURIComponent(JSON.stringify(value));
        document.cookie = `${name}=${serializedValue}; expires=${date.toUTCString()}; path=/`;
    },
    updateAppStorage(updates) {
        try {
            const currentData = this.getAppStorage() || {};
            const newData = { ...currentData, ...updates };
            const serializedData = JSON.stringify(newData);
            localStorage.setItem(KEY, serializedData);
        }
        catch (error) {
            console.error(`Error updating appStorage: ${error}`);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vc3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEdBQUcsR0FBYyxZQUFxQixDQUFDO0FBRTdDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBMkI7SUFDOUMsWUFBWTtRQUNYLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNyQixRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxrREFBa0QsQ0FBQztRQUM3RSxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxhQUFhO1FBQ1osSUFBSSxDQUFDO1lBQ0osTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQXNCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM3RCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQzNELE9BQU8sSUFBSSxDQUFDO1FBQ2IsQ0FBQztJQUNGLENBQUM7SUFFRCxTQUFTLENBQUksSUFBWTtRQUN4QixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksVUFBVSxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQztRQUV4QixJQUFJLENBQUM7WUFDSixNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFNLENBQUM7UUFDdEMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN0RCxPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7SUFDRixDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQXVCO1FBQ3BDLElBQUksQ0FBQztZQUNKLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6RCxDQUFDO0lBQ0YsQ0FBQztJQUVELFNBQVMsQ0FBSSxJQUFZLEVBQUUsS0FBUSxFQUFFLElBQVk7UUFDaEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFMUQsTUFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxFLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksZUFBZSxhQUFhLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxPQUFrQztRQUNsRCxJQUFJLENBQUM7WUFDSixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDO1lBQy9DLE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQztZQUMvQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRS9DLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdEQsQ0FBQztJQUNGLENBQUM7Q0FDRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vaW5kZXgnO1xuXG5jb25zdCBLRVk6IHR5cGVzLktleSA9ICdBcHBTdG9yYWdlJyBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IHN0b3JhZ2U6IHR5cGVzLlN0b3JhZ2VJbnRlcmZhY2UgPSB7XG5cdGNsZWFyU3RvcmFnZSgpOiB2b2lkIHtcblx0XHRsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcblx0XHRkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKS5mb3JFYWNoKGNvb2tpZSA9PiB7XG5cdFx0XHRjb25zdCBuYW1lID0gY29va2llLnNwbGl0KCc9JylbMF0udHJpbSgpO1xuXHRcdFx0ZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgVVRDOyBwYXRoPS9gO1xuXHRcdH0pO1xuXHR9LFxuXG5cdGdldEFwcFN0b3JhZ2UoKTogdHlwZXMuQXBwU3RvcmFnZSB8IG51bGwge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU3RyaW5nKEtFWSkpO1xuXHRcdFx0cmV0dXJuIGl0ZW0gPyAoSlNPTi5wYXJzZShpdGVtKSBhcyB0eXBlcy5BcHBTdG9yYWdlKSA6IG51bGw7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlYWRpbmcgZnJvbSBsb2NhbFN0b3JhZ2U6ICR7ZXJyb3J9YCk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH0sXG5cblx0Z2V0Q29va2llPFQ+KG5hbWU6IHN0cmluZyk6IFQgfCBudWxsIHtcblx0XHRjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChgKD86Xnw7KVxcXFxzKiR7bmFtZX09KFteO10qKWApO1xuXG5cdFx0aWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZGVjb2RlZFZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdKTtcblx0XHRcdHJldHVybiBKU09OLnBhcnNlKGRlY29kZWRWYWx1ZSkgYXMgVDtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgcmVhZGluZyBmcm9tIGNvb2tpZXM6ICR7ZXJyb3J9YCk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH0sXG5cblx0c2V0QXBwU3RvcmFnZSh2YWx1ZTogdHlwZXMuQXBwU3RvcmFnZSk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBzZXJpYWxpemVkVmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVksIHNlcmlhbGl6ZWRWYWx1ZSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHNhdmluZyB0byBsb2NhbFN0b3JhZ2U6ICR7ZXJyb3J9YCk7XG5cdFx0fVxuXHR9LFxuXG5cdHNldENvb2tpZTxUPihuYW1lOiBzdHJpbmcsIHZhbHVlOiBULCBkYXlzOiBudW1iZXIpOiB2b2lkIHtcblx0XHRjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcblxuXHRcdGNvbnN0IHNlcmlhbGl6ZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuXG5cdFx0ZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09JHtzZXJpYWxpemVkVmFsdWV9OyBleHBpcmVzPSR7ZGF0ZS50b1VUQ1N0cmluZygpfTsgcGF0aD0vYDtcblx0fSxcblxuXHR1cGRhdGVBcHBTdG9yYWdlKHVwZGF0ZXM6IFBhcnRpYWw8dHlwZXMuQXBwU3RvcmFnZT4pOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgY3VycmVudERhdGEgPSB0aGlzLmdldEFwcFN0b3JhZ2UoKSB8fCB7fTtcblx0XHRcdGNvbnN0IG5ld0RhdGEgPSB7IC4uLmN1cnJlbnREYXRhLCAuLi51cGRhdGVzIH07XG5cdFx0XHRjb25zdCBzZXJpYWxpemVkRGF0YSA9IEpTT04uc3RyaW5naWZ5KG5ld0RhdGEpO1xuXG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVksIHNlcmlhbGl6ZWREYXRhKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgdXBkYXRpbmcgYXBwU3RvcmFnZTogJHtlcnJvcn1gKTtcblx0XHR9XG5cdH1cbn07XG4iXX0=