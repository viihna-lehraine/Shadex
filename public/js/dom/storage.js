const STORAGE_KEY = 'appStorage';
export const storage = {
    clearStorage() {
        localStorage.clear();
        document.cookie.split(';').forEach(cookie => {
            const name = cookie.split('=')[0].trim();
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/`;
        });
    },
    getAppStorage() {
        try {
            const item = localStorage.getItem(STORAGE_KEY);
            return item ? JSON.parse(item) : null;
        }
        catch (error) {
            console.error(`Error reading from localStorage: ${error}`);
            return null;
        }
    },
    getCookie(name) {
        const match = document.cookie.match(`(?:^|;)\\s*${name}=([^;]*)`);
        if (!match)
            return null;
        try {
            const decodedValue = decodeURIComponent(match[1]);
            return JSON.parse(decodedValue);
        }
        catch (error) {
            console.error(`Error reading from cookies: ${error}`);
            return null;
        }
    },
    setAppStorage(value) {
        try {
            const serializedValue = JSON.stringify(value);
            localStorage.setItem(STORAGE_KEY, serializedValue);
        }
        catch (error) {
            console.error(`Error saving to localStorage: ${error}`);
        }
    },
    setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        const serializedValue = encodeURIComponent(JSON.stringify(value));
        document.cookie = `${name}=${serializedValue}; expires=${date.toUTCString()}; path=/`;
    },
    updateAppStorage(updates) {
        try {
            const currentData = this.getAppStorage() || {};
            const newData = { ...currentData, ...updates };
            const serializedData = JSON.stringify(newData);
            localStorage.setItem(STORAGE_KEY, serializedData);
        }
        catch (error) {
            console.error(`Error updating appStorage: ${error}`);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vc3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFFakMsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3RCLFlBQVk7UUFDWCxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksa0RBQWtELENBQUM7UUFDN0UsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsYUFBYTtRQUNaLElBQUksQ0FBQztZQUNKLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDL0MsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFzQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDN0QsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUMzRCxPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7SUFDRixDQUFDO0lBRUQsU0FBUyxDQUFJLElBQVk7UUFDeEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxJQUFJLFVBQVUsQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFeEIsSUFBSSxDQUFDO1lBQ0osTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBTSxDQUFDO1FBQ3RDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDdEQsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO0lBQ0YsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUF1QjtRQUNwQyxJQUFJLENBQUM7WUFDSixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDekQsQ0FBQztJQUNGLENBQUM7SUFFRCxTQUFTLENBQUksSUFBWSxFQUFFLEtBQVEsRUFBRSxJQUFZO1FBQ2hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBRTFELE1BQU0sZUFBZSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVsRSxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLGVBQWUsYUFBYSxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQztJQUN2RixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsT0FBa0M7UUFDbEQsSUFBSSxDQUFDO1lBQ0osTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUMvQyxNQUFNLE9BQU8sR0FBRyxFQUFFLEdBQUcsV0FBVyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDL0MsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUvQyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELENBQUM7SUFDRixDQUFDO0NBQ0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuY29uc3QgU1RPUkFHRV9LRVkgPSAnYXBwU3RvcmFnZSc7XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlID0ge1xuXHRjbGVhclN0b3JhZ2UoKTogdm9pZCB7XG5cdFx0bG9jYWxTdG9yYWdlLmNsZWFyKCk7XG5cdFx0ZG9jdW1lbnQuY29va2llLnNwbGl0KCc7JykuZm9yRWFjaChjb29raWUgPT4ge1xuXHRcdFx0Y29uc3QgbmFtZSA9IGNvb2tpZS5zcGxpdCgnPScpWzBdLnRyaW0oKTtcblx0XHRcdGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PTsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIFVUQzsgcGF0aD0vYDtcblx0XHR9KTtcblx0fSxcblxuXHRnZXRBcHBTdG9yYWdlKCk6IHR5cGVzLkFwcFN0b3JhZ2UgfCBudWxsIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgaXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZKTtcblx0XHRcdHJldHVybiBpdGVtID8gKEpTT04ucGFyc2UoaXRlbSkgYXMgdHlwZXMuQXBwU3RvcmFnZSkgOiBudWxsO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciByZWFkaW5nIGZyb20gbG9jYWxTdG9yYWdlOiAke2Vycm9yfWApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9LFxuXG5cdGdldENvb2tpZTxUPihuYW1lOiBzdHJpbmcpOiBUIHwgbnVsbCB7XG5cdFx0Y29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2goYCg/Ol58OylcXFxccyoke25hbWV9PShbXjtdKilgKTtcblxuXHRcdGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGRlY29kZWRWYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSk7XG5cdFx0XHRyZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVkVmFsdWUpIGFzIFQ7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlYWRpbmcgZnJvbSBjb29raWVzOiAke2Vycm9yfWApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9LFxuXG5cdHNldEFwcFN0b3JhZ2UodmFsdWU6IHR5cGVzLkFwcFN0b3JhZ2UpOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3Qgc2VyaWFsaXplZFZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVksIHNlcmlhbGl6ZWRWYWx1ZSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIHNhdmluZyB0byBsb2NhbFN0b3JhZ2U6ICR7ZXJyb3J9YCk7XG5cdFx0fVxuXHR9LFxuXG5cdHNldENvb2tpZTxUPihuYW1lOiBzdHJpbmcsIHZhbHVlOiBULCBkYXlzOiBudW1iZXIpOiB2b2lkIHtcblx0XHRjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcblxuXHRcdGNvbnN0IHNlcmlhbGl6ZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuXG5cdFx0ZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09JHtzZXJpYWxpemVkVmFsdWV9OyBleHBpcmVzPSR7ZGF0ZS50b1VUQ1N0cmluZygpfTsgcGF0aD0vYDtcblx0fSxcblxuXHR1cGRhdGVBcHBTdG9yYWdlKHVwZGF0ZXM6IFBhcnRpYWw8dHlwZXMuQXBwU3RvcmFnZT4pOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgY3VycmVudERhdGEgPSB0aGlzLmdldEFwcFN0b3JhZ2UoKSB8fCB7fTtcblx0XHRcdGNvbnN0IG5ld0RhdGEgPSB7IC4uLmN1cnJlbnREYXRhLCAuLi51cGRhdGVzIH07XG5cdFx0XHRjb25zdCBzZXJpYWxpemVkRGF0YSA9IEpTT04uc3RyaW5naWZ5KG5ld0RhdGEpO1xuXG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWSwgc2VyaWFsaXplZERhdGEpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciB1cGRhdGluZyBhcHBTdG9yYWdlOiAke2Vycm9yfWApO1xuXHRcdH1cblx0fVxufTtcbiJdfQ==