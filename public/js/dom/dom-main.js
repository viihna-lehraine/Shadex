import { guards } from '../utils/type-guards.js';
import { convert } from '../color-conversion/conversion-index.js';
import { random } from '../utils/color-randomizer.js';
import { parseCustomColor } from '../utils/transforms.js';
import { getConversionFn } from '../color-conversion/conversion.js';
import { startPaletteGen } from '../palette-gen/generate.js';
export function applyFirstColorToUI(initialColorSpace) {
    const color = random.randomColor(initialColorSpace);
    const colorBox1 = document.getElementById('color-box-1');
    if (colorBox1) {
        let colorString;
        if (guards.isCMYK(color)) {
            colorString = `cmyk(${color.value.cyan}, ${color.value.magenta}, ${color.value.yellow}, ${color.value.key})`;
        }
        else if (guards.isHex(color)) {
            colorString = color.value.hex;
        }
        else if (guards.isRGB(color)) {
            colorString = `rgb(${color.value.red}, ${color.value.green}, ${color.value.blue})`;
        }
        else if (guards.isHSL(color)) {
            colorString = `hsl(${color.value.hue}, ${color.value.saturation}%, ${color.value.lightness}%)`;
        }
        else if (guards.isHSV(color)) {
            colorString = `hsv(${color.value.hue}, ${color.value.saturation}%, ${color.value.value}%)`;
        }
        else if (guards.isLAB(color)) {
            colorString = `lab(${color.value.l}, ${color.value.a}, ${color.value.b})`;
        }
        else {
            console.error('Unexpected color format');
            return color;
        }
        colorBox1.style.backgroundColor = colorString;
        if (color.format === 'hsl') {
            populateColorTextOutputBox(color, 1);
        }
        else {
            console.error('Logic not yet implemented for cases where intiialColorSpace !== hsl!');
        }
    }
    else {
        console.error('color-box-1 is null');
    }
    return color;
}
export function populateColorTextOutputBox(color, boxNumber) {
    const colorTextOutputBox = document.getElementById(`color-text-output-box-${boxNumber}`);
    if (!colorTextOutputBox)
        return;
    // convert color to Hex for display purposes
    let hexColor = null;
    if (color.format === 'cmyk') {
        hexColor = convert.cmykToHex(color);
    }
    else if (color.format === 'hex') {
        hexColor = color;
    }
    else if (color.format === 'hsl') {
        hexColor = convert.hslToHex(color);
    }
    else if (color.format === 'hsv') {
        hexColor = convert.hsvToHex(color);
    }
    else if (color.format === 'lab') {
        hexColor = convert.labToHex(color);
    }
    else if (color.format === 'rgb') {
        hexColor = convert.rgbToHex(color);
    }
    else {
        console.error('Unexpected color format');
        return;
    }
    if (hexColor) {
        colorTextOutputBox.value = hexColor.value.hex;
        colorTextOutputBox.setAttribute('data-format', 'hex');
    }
}
export function getElementsForSelectedColor(selectedColor) {
    return {
        selectedColorTextOutputBox: document.getElementById(`color-text-output-box-${selectedColor}`),
        selectedColorBox: document.getElementById(`color-box-${selectedColor}`),
        selectedColorStripe: document.getElementById(`color-stripe-${selectedColor}`)
    };
}
// *DEV NOTE: add saturation logic and function type
export function saturateColor(selectedColor) {
    getElementsForSelectedColor(selectedColor);
}
// *DEV NOTE: add desaturation logic and function type
export function desaturateColor(selectedColor) {
    getElementsForSelectedColor(selectedColor);
}
export function showTooltip(tooltipElement) {
    const tooltip = tooltipElement.querySelector('.tooltiptext');
    if (tooltip) {
        tooltip.style.visibility = 'visible';
        tooltip.style.opacity = '1';
        setTimeout(() => {
            tooltip.style.visibility = 'hidden';
            tooltip.style.opacity = '0';
        }, 1000);
    }
    console.log('execution of showTooltip complete');
}
export function showCustomColorPopupDiv() {
    const popup = document.getElementById('popup-div');
    if (popup) {
        popup.classList.toggle('show');
    }
    else {
        console.error("document.getElementById('popup-div') is undefined");
        return;
    }
}
export function applyCustomColor() {
    const customHexBase = document.getElementById('custom-color-picker').value;
    const customHex = {
        value: { hex: customHexBase },
        format: 'hex'
    };
    if (!guards.isHexColor(customHexBase)) {
        throw new Error('Invalid hex color');
    }
    const customHSL = convert.hexToHSL(customHex);
    return customHSL;
}
export function applyInitialColorSpace() {
    const initialColorSpaceValue = document.getElementById('initial-colorspace-options').value;
    return guards.isColorSpace(initialColorSpaceValue)
        ? initialColorSpaceValue
        : 'hex';
}
export function copyToClipboard(text, tooltipElement) {
    const colorValue = text.replace('Copied to clipboard!', '').trim();
    navigator.clipboard
        .writeText(colorValue)
        .then(() => {
        showTooltip(tooltipElement);
        console.log(`Copied color value: ${colorValue}`);
    })
        .catch(err => {
        console.error('Error copying to clipboard:', err);
    });
}
export function convertColors(targetFormat) {
    const colorTextOutputBoxes = document.querySelectorAll('.color-text-output-box');
    colorTextOutputBoxes.forEach(box => {
        if (!(box instanceof HTMLInputElement)) {
            console.error('Invalid input element.');
            return;
        }
        const inputBox = box;
        const colorValues = inputBox.colorValues;
        if (!colorValues) {
            console.error('Missing color values.');
            return;
        }
        const currentFormat = inputBox.getAttribute('data-format');
        if (!guards.isColorSpace(currentFormat) ||
            !guards.isColorSpace(targetFormat)) {
            console.error(`Invalid format: ${currentFormat} or ${targetFormat}`);
            return;
        }
        const convertFn = getConversionFn(currentFormat, targetFormat);
        if (!convertFn) {
            console.error(`Conversion from ${currentFormat} to ${targetFormat} is not supported.`);
            return;
        }
        if (guards.isConvertibleColor(colorValues)) {
            const newColor = convertFn(colorValues);
            if (!newColor) {
                console.error(`Conversion to ${targetFormat} failed.`);
                return;
            }
            inputBox.value = String(newColor);
            inputBox.setAttribute('data-format', targetFormat);
        }
        else {
            console.error(`Invalid color type for conversion.`);
        }
    });
}
export function getGenerateButtonParams() {
    const paletteTypeOptions = document.getElementById('palette-type-options');
    const paletteNumberOptions = document.getElementById('palette-number-options');
    const colorSpaceValue = document.getElementById('initial-colorspace-options')?.value;
    const initialColorSpace = guards.isColorSpace(colorSpaceValue)
        ? colorSpaceValue
        : 'hex';
    const customColorRaw = document.getElementById('custom-color')?.value;
    const customColor = parseCustomColor(initialColorSpace, customColorRaw);
    return {
        numBoxes: parseInt(paletteNumberOptions.value, 10),
        paletteType: parseInt(paletteTypeOptions.value, 10),
        initialColorSpace,
        customColor
    };
}
export function handleGenButtonClick() {
    const { paletteType, numBoxes, initialColorSpace: space, customColor } = getGenerateButtonParams();
    if (!paletteType || !numBoxes) {
        console.error('paletteType and/or numBoxes are undefined');
        return;
    }
    const initialColorSpace = space ?? 'hex';
    startPaletteGen(paletteType, numBoxes, initialColorSpace, customColor);
}
//# sourceMappingURL=data:application/json;base64,