import { guards } from '../utils/type-guards.js';
import { convert } from '../color-conversion/conversion-index.js';
import { paletteHelpers } from '../helpers/palette.js';
import { random } from '../utils/color-randomizer.js';
import { domHelpers } from '../helpers/dom.js';
import { genAllColorValues } from '../color-conversion/conversion.js';
import { colorToColorObject, createColorObjectData } from '../utils/transforms.js';
import { getConversionFn } from '../color-conversion/conversion.js';
export function applyFirstColorToUI(initialColorSpace) {
    const color = random.getRandomColorBySpace(initialColorSpace);
    const colorBox1 = document.getElementById('color-box-1');
    if (colorBox1) {
        let colorString;
        if (guards.isCMYK(color)) {
            colorString = `cmyk(${color.cyan}, ${color.magenta}, ${color.yellow}, ${color.key})`;
        }
        else if (guards.isHex(color)) {
            colorString = color.hex;
        }
        else if (guards.isRGB(color)) {
            colorString = `rgb(${color.red}, ${color.green}, ${color.blue})`;
        }
        else if (guards.isHSL(color)) {
            colorString = `hsl(${color.hue}, ${color.saturation}%, ${color.lightness}%)`;
        }
        else if (guards.isHSV(color)) {
            colorString = `hsv(${color.hue}, ${color.saturation}%, ${color.value}%)`;
        }
        else if (guards.isLAB(color)) {
            colorString = `lab(${color.l}, ${color.a}, ${color.b})`;
        }
        else {
            console.error('Unexpected color format');
            return color;
        }
        // set background color
        colorBox1.style.backgroundColor = colorString;
        if (color.format === 'hsl') {
            populateColorTextOutputBox(color, 1);
        }
        else {
            console.error('Logic not yet implemented fpr cases where intiialColorSpace !== hsl!');
        }
    }
    else {
        console.error('color-box-1 is null');
    }
    return color;
}
// generate paletteBox (numBoxes) # of times
export function genPaletteBox(numBoxes, colors) {
    const paletteRow = document.getElementById('palette-row');
    if (!paletteRow) {
        console.error('paletteRow is undefined');
        return;
    }
    paletteRow.innerHTML = '';
    let paletteBoxCount = 1;
    for (let i = 0; i < numBoxes; i++) {
        const colorData = colors[i];
        if (!colorData) {
            console.warn(`Color at index ${i} is undefined.`);
            continue;
        }
        const colorObject = colorToColorObject(colorData);
        if (!colorObject) {
            console.warn(`Skipping invalid color data at index ${i}.`);
            continue;
        }
        const colorValues = genAllColorValues(colorObject);
        const originalColorFormat = colorObject.format;
        if (!guards.isColorFormat(originalColorFormat)) {
            console.warn(`Skipping unsupported color format: ${originalColorFormat}`);
            continue;
        }
        const originalColorValue = colorValues[originalColorFormat];
        if (!originalColorValue) {
            throw new Error(`Failed to generate color data for format ${originalColorFormat}`);
        }
        const colorObjectData = createColorObjectData(originalColorFormat, originalColorValue);
        const { colorStripe, paletteBoxCount: newPaletteBoxCount } = domHelpers.makePaletteBox(colorObjectData, paletteBoxCount);
        paletteRow.appendChild(colorStripe);
        if (guards.isHSL(colorData)) {
            populateColorTextOutputBox(colorData, paletteBoxCount);
        }
        else {
            console.warn(`Skipping non-HSL color at index ${i}.`);
        }
        paletteBoxCount = newPaletteBoxCount;
    }
}
// populates .color-text-output-box with hex attribute
export function populateColorTextOutputBox(hsl, boxNumber) {
    const colorTextOutputBox = document.getElementById(`color-text-output-box-${boxNumber}`);
    if (colorTextOutputBox) {
        const hexColor = convert.hslToHex(hsl);
        colorTextOutputBox.value = hexColor.hex;
    }
}
// saturate and desaturate button element selection
export function getElementsForSelectedColor(selectedColor) {
    return {
        selectedColorTextOutputBox: document.getElementById(`color-text-output-box-${selectedColor}`),
        selectedColorBox: document.getElementById(`color-box-${selectedColor}`),
        selectedColorStripe: document.getElementById(`color-stripe-${selectedColor}`)
    };
}
// saturate button functionality
export function saturateColor(selectedColor) {
    getElementsForSelectedColor(selectedColor);
    // *DEV NOTE: add saturation logic here
}
// desaturate button functionality
export function desaturateColor(selectedColor) {
    getElementsForSelectedColor(selectedColor);
    // *DEV NOTE: add desaturation logic here
}
// show tooltip for copy to clipboard
export function showTooltip(tooltipElement) {
    const tooltip = tooltipElement.querySelector('.tooltiptext');
    if (tooltip) {
        tooltip.style.visibility = 'visible';
        tooltip.style.opacity = '1';
        setTimeout(() => {
            tooltip.style.visibility = 'hidden';
            tooltip.style.opacity = '0';
        }, 1000);
    }
    console.log('execution of showTooltip complete');
}
// toggle popup div
export function showCustomColorPopupDiv() {
    const popup = document.getElementById('popup-div');
    if (popup) {
        popup.classList.toggle('show');
    }
    else {
        console.error("document.getElementById('popup-div') is undefined");
        return;
    }
}
export function applyCustomColor() {
    const customHexBase = document.getElementById('custom-color-picker').value;
    const customHex = { hex: customHexBase, format: 'hex' };
    if (!guards.isHexColor(customHexBase)) {
        throw new Error('Invalid hex color');
    }
    const customHSL = convert.hexToHSL(customHex);
    return customHSL;
}
// copy color values to clipboard on click
export function copyToClipboard(text, tooltipElement) {
    const colorValue = text.replace('Copied to clipboard!', '').trim(); // clean the color value
    navigator.clipboard
        .writeText(colorValue)
        .then(() => {
        showTooltip(tooltipElement);
        console.log(`Copied color value: ${colorValue}`);
    })
        .catch(err => {
        console.error('Error copying to clipboard:', err);
    });
}
// when a conversion button is clicked, this will pull the color space type for that color and repopulate color-text-output-box with it
export function convertColors(targetFormat) {
    const colorTextOutputBoxes = document.querySelectorAll('.color-text-output-box');
    colorTextOutputBoxes.forEach(box => {
        if (!(box instanceof HTMLInputElement)) {
            console.error('Invalid input element.');
            return;
        }
        const inputBox = box;
        const colorValues = inputBox.colorValues;
        if (!colorValues) {
            console.error('Missing color values.');
            return;
        }
        const currentFormat = inputBox.getAttribute('data-format');
        if (!guards.isColorFormat(currentFormat) ||
            !guards.isColorFormat(targetFormat)) {
            console.error(`Invalid format: ${currentFormat} or ${targetFormat}`);
            return;
        }
        const convertFn = getConversionFn(currentFormat, targetFormat);
        if (!convertFn) {
            console.error(`Conversion from ${currentFormat} to ${targetFormat} is not supported.`);
            return;
        }
        const newColor = convertFn(colorValues);
        if (!newColor) {
            console.error(`Conversion to ${targetFormat} failed.`);
            return;
        }
        inputBox.value = String(newColor);
        inputBox.setAttribute('data-format', targetFormat);
    });
}
// *DEV-NOTE* add custom color input later
export function getGenerateButtonParams() {
    const paletteTypeOptions = document.getElementById('palette-type-options');
    const paletteNumberOptions = document.getElementById('palette-number-options');
    const colorSpaceValue = document.getElementById('initial-colorspace-options')?.value;
    const initialColorSpace = guards.isColorSpace(colorSpaceValue)
        ? colorSpaceValue
        : 'hex';
    // const customColorRaw = (document.getElementById(
    // 	'custom-color') as HTMLInputElement)?.value;
    return {
        numBoxes: parseInt(paletteNumberOptions.value, 10),
        paletteType: parseInt(paletteTypeOptions.value, 10),
        initialColorSpace
        // customColor
    };
}
// default behavior for generateButton click
export function handleGenButtonClick() {
    const { paletteType, numBoxes, initialColorSpace: space } = getGenerateButtonParams();
    if (!paletteType || !numBoxes) {
        console.error('paletteType and/or numBoxes are undefined');
        return;
    }
    const initialColorSpace = space ?? 'hex';
    paletteHelpers.genPalette(paletteType, numBoxes, initialColorSpace);
}
//# sourceMappingURL=data:application/json;base64,