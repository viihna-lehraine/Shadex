// File: src/dom/parse.ts
import { data } from '../data/index.js';
import { logger } from '../logger/index.js';
const domIDs = data.consts.dom.ids;
const logMode = data.mode.logging;
const mode = data.mode;
function checkbox(id) {
    const checkbox = document.getElementById(id);
    if (!checkbox) {
        if (logMode.errors && !mode.quiet) {
            logger.error(`Checkbox element ${id} not found`);
        }
        return;
    }
    if (!(checkbox instanceof HTMLInputElement)) {
        if (logMode.errors && !mode.quiet) {
            logger.error(`Element ${id} is not a checkbox`);
        }
        return;
    }
    return checkbox ? checkbox.checked : undefined;
}
function paletteExportFormat() {
    const formatSelectionMenu = document.getElementById(domIDs.exportPaletteFormatOptions);
    if (!formatSelectionMenu) {
        if (logMode.errors && !mode.quiet)
            logger.error('Export format selection dropdown not found');
    }
    const selectedFormat = formatSelectionMenu.value;
    if (selectedFormat !== 'CSS' &&
        selectedFormat !== 'JSON' &&
        selectedFormat !== 'XML') {
        if (logMode.errors && !mode.quiet)
            logger.error('Invalid export format selected');
        return;
    }
    else {
        return selectedFormat;
    }
}
export const parse = {
    checkbox,
    paletteExportFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QjtBQUd6QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTVDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUNuQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBRXZCLFNBQVMsUUFBUSxDQUFDLEVBQVU7SUFDM0IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQXFCLENBQUM7SUFFakUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2YsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxDQUFDLENBQUMsUUFBUSxZQUFZLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztRQUM3QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBRUQsT0FBTztJQUNSLENBQUM7SUFFRCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2hELENBQUM7QUFFRCxTQUFTLG1CQUFtQjtJQUMzQixNQUFNLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQ2xELE1BQU0sQ0FBQywwQkFBMEIsQ0FDWixDQUFDO0lBRXZCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzFCLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0lBRWpELElBQ0MsY0FBYyxLQUFLLEtBQUs7UUFDeEIsY0FBYyxLQUFLLE1BQU07UUFDekIsY0FBYyxLQUFLLEtBQUssRUFDdkIsQ0FBQztRQUNGLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUVoRCxPQUFPO0lBQ1IsQ0FBQztTQUFNLENBQUM7UUFDUCxPQUFPLGNBQWMsQ0FBQztJQUN2QixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBd0I7SUFDekMsUUFBUTtJQUNSLG1CQUFtQjtDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZTogc3JjL2RvbS9wYXJzZS50c1xuXG5pbXBvcnQgeyBET01QYXJzZUZuSW50ZXJmYWNlIH0gZnJvbSAnLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyL2luZGV4LmpzJztcblxuY29uc3QgZG9tSURzID0gZGF0YS5jb25zdHMuZG9tLmlkcztcbmNvbnN0IGxvZ01vZGUgPSBkYXRhLm1vZGUubG9nZ2luZztcbmNvbnN0IG1vZGUgPSBkYXRhLm1vZGU7XG5cbmZ1bmN0aW9uIGNoZWNrYm94KGlkOiBzdHJpbmcpOiBib29sZWFuIHwgdm9pZCB7XG5cdGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cblx0aWYgKCFjaGVja2JveCkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9ycyAmJiAhbW9kZS5xdWlldCkge1xuXHRcdFx0bG9nZ2VyLmVycm9yKGBDaGVja2JveCBlbGVtZW50ICR7aWR9IG5vdCBmb3VuZGApO1xuXHRcdH1cblxuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICghKGNoZWNrYm94IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMgJiYgIW1vZGUucXVpZXQpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihgRWxlbWVudCAke2lkfSBpcyBub3QgYSBjaGVja2JveGApO1xuXHRcdH1cblxuXHRcdHJldHVybjtcblx0fVxuXG5cdHJldHVybiBjaGVja2JveCA/IGNoZWNrYm94LmNoZWNrZWQgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHBhbGV0dGVFeHBvcnRGb3JtYXQoKTogc3RyaW5nIHwgdm9pZCB7XG5cdGNvbnN0IGZvcm1hdFNlbGVjdGlvbk1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcblx0XHRkb21JRHMuZXhwb3J0UGFsZXR0ZUZvcm1hdE9wdGlvbnNcblx0KSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcblxuXHRpZiAoIWZvcm1hdFNlbGVjdGlvbk1lbnUpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMgJiYgIW1vZGUucXVpZXQpXG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0V4cG9ydCBmb3JtYXQgc2VsZWN0aW9uIGRyb3Bkb3duIG5vdCBmb3VuZCcpO1xuXHR9XG5cblx0Y29uc3Qgc2VsZWN0ZWRGb3JtYXQgPSBmb3JtYXRTZWxlY3Rpb25NZW51LnZhbHVlO1xuXG5cdGlmIChcblx0XHRzZWxlY3RlZEZvcm1hdCAhPT0gJ0NTUycgJiZcblx0XHRzZWxlY3RlZEZvcm1hdCAhPT0gJ0pTT04nICYmXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdYTUwnXG5cdCkge1xuXHRcdGlmIChsb2dNb2RlLmVycm9ycyAmJiAhbW9kZS5xdWlldClcblx0XHRcdGxvZ2dlci5lcnJvcignSW52YWxpZCBleHBvcnQgZm9ybWF0IHNlbGVjdGVkJyk7XG5cblx0XHRyZXR1cm47XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHNlbGVjdGVkRm9ybWF0O1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwYXJzZTogRE9NUGFyc2VGbkludGVyZmFjZSA9IHtcblx0Y2hlY2tib3gsXG5cdHBhbGV0dGVFeHBvcnRGb3JtYXRcbn07XG4iXX0=