// File: src/dom/parse.ts
import { data } from '../data/index.js';
import { log as logger } from '../classes/logger/index.js';
const domIDs = data.consts.dom.ids;
const logMode = data.mode.logging;
const mode = data.mode;
function checkbox(id) {
    const checkbox = document.getElementById(id);
    if (!checkbox) {
        if (logMode.errors && !mode.quiet) {
            logger.error(`Checkbox element ${id} not found`);
        }
        return;
    }
    if (!(checkbox instanceof HTMLInputElement)) {
        if (logMode.errors && !mode.quiet) {
            logger.error(`Element ${id} is not a checkbox`);
        }
        return;
    }
    return checkbox ? checkbox.checked : undefined;
}
function paletteExportFormat() {
    const formatSelectionMenu = document.getElementById(domIDs.exportPaletteFormatOptions);
    if (!formatSelectionMenu) {
        if (logMode.errors && !mode.quiet)
            logger.error('Export format selection dropdown not found');
    }
    const selectedFormat = formatSelectionMenu.value;
    if (selectedFormat !== 'CSS' &&
        selectedFormat !== 'JSON' &&
        selectedFormat !== 'XML') {
        if (logMode.errors && !mode.quiet)
            logger.error('Invalid export format selected');
        return;
    }
    else {
        return selectedFormat;
    }
}
export const parse = {
    checkbox,
    paletteExportFormat
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG9tL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QjtBQUd6QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLEdBQUcsSUFBSSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUzRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDbkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUV2QixTQUFTLFFBQVEsQ0FBQyxFQUFVO0lBQzNCLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFxQixDQUFDO0lBRWpFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNmLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQyxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCxPQUFPO0lBQ1IsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFDLFFBQVEsWUFBWSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7UUFDN0MsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDakQsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO0lBRUQsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsU0FBUyxtQkFBbUI7SUFDM0IsTUFBTSxtQkFBbUIsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUNsRCxNQUFNLENBQUMsMEJBQTBCLENBQ1osQ0FBQztJQUV2QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMxQixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNoQyxNQUFNLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQztJQUVqRCxJQUNDLGNBQWMsS0FBSyxLQUFLO1FBQ3hCLGNBQWMsS0FBSyxNQUFNO1FBQ3pCLGNBQWMsS0FBSyxLQUFLLEVBQ3ZCLENBQUM7UUFDRixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNoQyxNQUFNLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFFaEQsT0FBTztJQUNSLENBQUM7U0FBTSxDQUFDO1FBQ1AsT0FBTyxjQUFjLENBQUM7SUFDdkIsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQXdCO0lBQ3pDLFFBQVE7SUFDUixtQkFBbUI7Q0FDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9kb20vcGFyc2UudHNcblxuaW1wb3J0IHsgRE9NUGFyc2VGbkludGVyZmFjZSB9IGZyb20gJy4uL2luZGV4L2luZGV4LmpzJztcbmltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi9kYXRhL2luZGV4LmpzJztcbmltcG9ydCB7IGxvZyBhcyBsb2dnZXIgfSBmcm9tICcuLi9jbGFzc2VzL2xvZ2dlci9pbmRleC5qcyc7XG5cbmNvbnN0IGRvbUlEcyA9IGRhdGEuY29uc3RzLmRvbS5pZHM7XG5jb25zdCBsb2dNb2RlID0gZGF0YS5tb2RlLmxvZ2dpbmc7XG5jb25zdCBtb2RlID0gZGF0YS5tb2RlO1xuXG5mdW5jdGlvbiBjaGVja2JveChpZDogc3RyaW5nKTogYm9vbGVhbiB8IHZvaWQge1xuXHRjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG5cdGlmICghY2hlY2tib3gpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMgJiYgIW1vZGUucXVpZXQpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihgQ2hlY2tib3ggZWxlbWVudCAke2lkfSBub3QgZm91bmRgKTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIShjaGVja2JveCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3JzICYmICFtb2RlLnF1aWV0KSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoYEVsZW1lbnQgJHtpZH0gaXMgbm90IGEgY2hlY2tib3hgKTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRyZXR1cm4gY2hlY2tib3ggPyBjaGVja2JveC5jaGVja2VkIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBwYWxldHRlRXhwb3J0Rm9ybWF0KCk6IHN0cmluZyB8IHZvaWQge1xuXHRjb25zdCBmb3JtYXRTZWxlY3Rpb25NZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0ZG9tSURzLmV4cG9ydFBhbGV0dGVGb3JtYXRPcHRpb25zXG5cdCkgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG5cblx0aWYgKCFmb3JtYXRTZWxlY3Rpb25NZW51KSB7XG5cdFx0aWYgKGxvZ01vZGUuZXJyb3JzICYmICFtb2RlLnF1aWV0KVxuXHRcdFx0bG9nZ2VyLmVycm9yKCdFeHBvcnQgZm9ybWF0IHNlbGVjdGlvbiBkcm9wZG93biBub3QgZm91bmQnKTtcblx0fVxuXG5cdGNvbnN0IHNlbGVjdGVkRm9ybWF0ID0gZm9ybWF0U2VsZWN0aW9uTWVudS52YWx1ZTtcblxuXHRpZiAoXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdDU1MnICYmXG5cdFx0c2VsZWN0ZWRGb3JtYXQgIT09ICdKU09OJyAmJlxuXHRcdHNlbGVjdGVkRm9ybWF0ICE9PSAnWE1MJ1xuXHQpIHtcblx0XHRpZiAobG9nTW9kZS5lcnJvcnMgJiYgIW1vZGUucXVpZXQpXG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0ludmFsaWQgZXhwb3J0IGZvcm1hdCBzZWxlY3RlZCcpO1xuXG5cdFx0cmV0dXJuO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBzZWxlY3RlZEZvcm1hdDtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgcGFyc2U6IERPTVBhcnNlRm5JbnRlcmZhY2UgPSB7XG5cdGNoZWNrYm94LFxuXHRwYWxldHRlRXhwb3J0Rm9ybWF0XG59O1xuIl19