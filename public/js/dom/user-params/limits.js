import { convert } from '../../color-conversion/conversion-index.js';
import { config } from '../../config/constants.js';
import { paletteHelpers } from '../../helpers/palette.js';
import { core } from '../../utils/core.js';
function isCMYKTooBright(cmyk) {
    if (!paletteHelpers.validateColorValues(cmyk)) {
        console.error(`Invalid CMYK value ${JSON.stringify(cmyk)}`);
        return false;
    }
    return (core.clone(cmyk).value.cyan < config.cmykBrightnessThreshold &&
        core.clone(cmyk).value.magenta < config.cmykBrightnessThreshold &&
        core.clone(cmyk).value.yellow < config.cmykBrightnessThreshold);
}
export function isCMYKTooDark(cmyk) {
    if (!paletteHelpers.validateColorValues(cmyk)) {
        console.error(`Invalid CMYK value ${JSON.stringify(cmyk)}`);
        return false;
    }
    return core.clone(cmyk).value.key > config.cmykDarknessThreshold;
}
function isCMYKTooGray(cmyk) {
    if (!paletteHelpers.validateColorValues(cmyk)) {
        console.error(`Invalid CMYK value ${JSON.stringify(cmyk)}`);
        return false;
    }
    return (Math.abs(core.clone(cmyk).value.cyan - core.clone(cmyk).value.magenta) <
        config.cmykGrayThreshold &&
        Math.abs(core.clone(cmyk).value.magenta - core.clone(cmyk).value.yellow) < config.cmykGrayThreshold);
}
function isHexTooBright(hex) {
    if (!paletteHelpers.validateColorValues(hex)) {
        console.error(`Invalid Hex value ${JSON.stringify(hex)}`);
        return false;
    }
    return isRGBTooBright(convert.hexToRGB(core.clone(hex)));
}
function isHexTooDark(hex) {
    if (!paletteHelpers.validateColorValues(hex)) {
        console.error(`Invalid Hex value ${JSON.stringify(hex)}`);
        return false;
    }
    return isRGBTooBright(convert.hexToRGB(core.clone(hex)));
}
function isHexTooGray(hex) {
    if (!paletteHelpers.validateColorValues(hex)) {
        console.error(`Invalid Hex value ${JSON.stringify(hex)}`);
        return false;
    }
    return isRGBTooGray(convert.hexToRGB(core.clone(hex)));
}
function isHSLTooBright(hsl) {
    if (!paletteHelpers.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.lightness > config.hslBrightnessThreshold;
}
function isHSLTooDark(hsl) {
    if (!paletteHelpers.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.lightness < config.hslDarknessThreshold;
}
function isHSLTooGray(hsl) {
    if (!paletteHelpers.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.saturation < config.hslGrayThreshold;
}
function isHSVTooBright(hsv) {
    if (!paletteHelpers.validateColorValues(hsv)) {
        console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
        return false;
    }
    return (core.clone(hsv).value.value > config.hsvBrightnessValueThreshold &&
        core.clone(hsv).value.saturation <
            config.hsvBrightnessSaturationThreshold);
}
function isHSVTooDark(hsv) {
    if (!paletteHelpers.validateColorValues(hsv)) {
        console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
        return false;
    }
    return core.clone(hsv).value.value < config.hsvDarknessThreshold;
}
function isHSVTooGray(hsv) {
    if (!paletteHelpers.validateColorValues(hsv)) {
        console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
        return false;
    }
    return core.clone(hsv).value.saturation < config.hsvGrayThreshold;
}
function isLABTooBright(lab) {
    if (!paletteHelpers.validateColorValues(lab)) {
        console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
        return false;
    }
    return core.clone(lab).value.l > config.labBrightnessThreshold;
}
function isLABTooDark(lab) {
    if (!paletteHelpers.validateColorValues(lab)) {
        console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
        return false;
    }
    return core.clone(lab).value.l < config.labDarknessThreshold;
}
function isLABTooGray(lab) {
    if (!paletteHelpers.validateColorValues(lab)) {
        console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
        return false;
    }
    return (Math.abs(core.clone(lab).value.a) < config.labGrayThreshold &&
        Math.abs(core.clone(lab).value.b) < config.labGrayThreshold);
}
function isRGBTooBright(rgb) {
    if (!paletteHelpers.validateColorValues(rgb)) {
        console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
        return false;
    }
    return ((core.clone(rgb).value.red +
        core.clone(rgb).value.green +
        core.clone(rgb).value.blue) /
        3 >
        config.rgbMaxBrightness);
}
function isRGBTooDark(rgb) {
    if (!paletteHelpers.validateColorValues(rgb)) {
        console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
        return false;
    }
    return ((core.clone(rgb).value.red +
        core.clone(rgb).value.green +
        core.clone(rgb).value.blue) /
        3 <
        config.rgbMinBrightness);
}
function isRGBTooGray(rgb) {
    if (!paletteHelpers.validateColorValues(rgb)) {
        console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
        return false;
    }
    return (Math.abs(core.clone(rgb).value.red - core.clone(rgb).value.green) <
        config.rgbGrayThreshold &&
        Math.abs(core.clone(rgb).value.green - core.clone(rgb).value.blue) <
            config.rgbGrayThreshold &&
        Math.abs(core.clone(rgb).value.red - core.clone(rgb).value.blue) <
            config.rgbGrayThreshold);
}
function getLimitChecker(limit) {
    return colorLimits[limit];
}
function isColorInBounds(colors) {
    try {
        const areAllColorsValid = Object.entries(colors).every(([key, color]) => {
            if (!paletteHelpers.validateColorValues(color)) {
                console.error(`Invalid color (${key}): ${JSON.stringify(color)}`);
                return false;
            }
            return true;
        });
        if (!areAllColorsValid)
            return false;
        return Object.entries(colors).some(([key, color]) => {
            if (!color)
                return false;
            const format = key.toUpperCase();
            const isTooGray = getLimitChecker(`is${format}TooGray`);
            const isTooDark = getLimitChecker(`is${format}TooDark`);
            const isTooBright = getLimitChecker(`is${format}TooBright`);
            return isTooGray(color) || isTooDark(color) || isTooBright(color);
        });
    }
    catch (error) {
        console.error(`Error validating color bounds: ${error}`);
        return false;
    }
}
export const colorLimits = {
    getLimitChecker,
    isCMYKTooBright,
    isCMYKTooDark,
    isCMYKTooGray,
    isColorInBounds,
    isHexTooBright,
    isHexTooDark,
    isHexTooGray,
    isHSLTooBright,
    isHSLTooDark,
    isHSLTooGray,
    isHSVTooBright,
    isHSVTooDark,
    isHSVTooGray,
    isLABTooBright,
    isLABTooDark,
    isLABTooGray,
    isRGBTooBright,
    isRGBTooDark,
    isRGBTooGray
};
//# sourceMappingURL=data:application/json;base64,