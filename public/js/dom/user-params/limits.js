import { convert } from '../../color-conversion/conversion-index.js';
export function isHexTooGray(hex) {
    const rgb = convert.hexToRGB(hex);
    return isRGBTooGray(rgb);
}
export function isHexTooDark(hex) {
    const rgb = convert.hexToRGB(hex);
    return isRGBTooDark(rgb);
}
export function isHexTooBright(hex) {
    const rgb = convert.hexToRGB(hex);
    return isRGBTooBright(rgb);
}
export function isHSLTooGray(hsl, hslGrayThreshold = 20) {
    return hsl.saturation < hslGrayThreshold;
}
export function isHSLTooDark(hsl, hslDarknessThreshold = 25) {
    return hsl.lightness < hslDarknessThreshold;
}
export function isHSLTooBright(hsl, hslBrightnessThreshold = 75) {
    return hsl.lightness > hslBrightnessThreshold;
}
export function isRGBTooGray(rgb, rgbGrayTreshold = 10) {
    return (Math.abs(rgb.red - rgb.green) < rgbGrayTreshold &&
        Math.abs(rgb.green - rgb.blue) < rgbGrayTreshold &&
        Math.abs(rgb.red - rgb.blue) < rgbGrayTreshold);
}
export function isRGBTooDark(rgb, rgbMinBrightness = 50) {
    return (rgb.red + rgb.green + rgb.blue) / 3 < rgbMinBrightness;
}
export function isRGBTooBright(rgb, rgbMaxBrightness = 200) {
    return (rgb.red + rgb.green + rgb.blue) / 3 > rgbMaxBrightness;
}
export function isHSVTooGray(hsv, hsvGrayThreshold = 10) {
    return hsv.saturation < hsvGrayThreshold;
}
export function isHSVTooDark(hsv, hsvDarknessThreshold = 10) {
    return hsv.value < hsvDarknessThreshold;
}
export function isHSVTooBright(hsv, hsvBrightnessValueThreshold = 90, hsvBrightnessSaturationThreshold = 10) {
    return (hsv.value > hsvBrightnessValueThreshold &&
        hsv.saturation < hsvBrightnessSaturationThreshold);
}
export function isCMYKTooGray(cmyk, cmykGrayThreshold = 5) {
    return (Math.abs(cmyk.cyan - cmyk.magenta) < cmykGrayThreshold &&
        Math.abs(cmyk.magenta - cmyk.yellow) < cmykGrayThreshold);
}
export function isCMYKTooDark(cmyk, cmykDarknesshreshold = 90) {
    return cmyk.key > cmykDarknesshreshold;
}
export function isCMYKTooBright(cmyk, cmykBrightnessThreshold = 10) {
    return (cmyk.cyan < cmykBrightnessThreshold &&
        cmyk.magenta < cmykBrightnessThreshold &&
        cmyk.yellow < cmykBrightnessThreshold);
}
export function isLABTooGray(lab, labGrayThreshold = 10) {
    return (Math.abs(lab.a) < labGrayThreshold && Math.abs(lab.b) < labGrayThreshold);
}
export function isLABTooDark(lab, labDarknessThreshold = 10) {
    return lab.l < labDarknessThreshold;
}
export function isLABTooBright(lab, labBrightnessThreshold = 90) {
    return lab.l > labBrightnessThreshold;
}
export function isColorInBounds(cmyk, hex, hsl, hsv, lab, rgb) {
    return (isCMYKTooGray(cmyk) ||
        isCMYKTooDark(cmyk) ||
        isCMYKTooBright(cmyk) ||
        isHexTooGray(hex) ||
        isHexTooDark(hex) ||
        isHexTooBright(hex) ||
        isHSLTooGray(hsl) ||
        isHSLTooDark(hsl) ||
        isHSLTooBright(hsl) ||
        isHSVTooGray(hsv) ||
        isHSVTooDark(hsv) ||
        isHSVTooBright(hsv) ||
        isLABTooGray(lab) ||
        isLABTooDark(lab) ||
        isLABTooBright(lab) ||
        isRGBTooGray(rgb) ||
        isRGBTooDark(rgb) ||
        isRGBTooBright(rgb));
}
export const colorLimits = {
    isCMYKTooBright,
    isCMYKTooDark,
    isCMYKTooGray,
    isHSLTooBright,
    isHSLTooDark,
    isHSLTooGray,
    isHSVTooBright,
    isHSVTooDark,
    isHSVTooGray,
    isLABTooBright,
    isLABTooDark,
    isLABTooGray,
    isRGBTooBright,
    isRGBTooDark,
    isRGBTooGray
};
//# sourceMappingURL=data:application/json;base64,