import { convert } from '../../color-conversion/conversion-index.js';
import { config } from '../../config/constants.js';
function isCMYKTooBright(cmyk) {
    return (cmyk.value.cyan < config.cmykBrightnessThreshold &&
        cmyk.value.magenta < config.cmykBrightnessThreshold &&
        cmyk.value.yellow < config.cmykBrightnessThreshold);
}
export function isCMYKTooDark(cmyk) {
    return cmyk.value.key > config.cmykDarknessThreshold;
}
function isCMYKTooGray(cmyk) {
    return (Math.abs(cmyk.value.cyan - cmyk.value.magenta) <
        config.cmykGrayThreshold &&
        Math.abs(cmyk.value.magenta - cmyk.value.yellow) <
            config.cmykGrayThreshold);
}
function isHexTooBright(hex) {
    const rgb = convert.hexToRGB(hex);
    return isRGBTooBright(rgb);
}
function isHexTooDark(hex) {
    const rgb = convert.hexToRGB(hex);
    return isRGBTooDark(rgb);
}
function isHexTooGray(hex) {
    const rgb = convert.hexToRGB(hex);
    return isRGBTooGray(rgb);
}
function isHSLTooBright(hsl) {
    return hsl.value.lightness > config.hslBrightnessThreshold;
}
function isHSLTooDark(hsl) {
    return hsl.value.lightness < config.hslDarknessThreshold;
}
function isHSLTooGray(hsl) {
    return hsl.value.saturation < config.hslGrayThreshold;
}
function isHSVTooBright(hsv) {
    return (hsv.value.value > config.hsvBrightnessValueThreshold &&
        hsv.value.saturation < config.hsvBrightnessSaturationThreshold);
}
function isHSVTooDark(hsv) {
    return hsv.value.value < config.hsvDarknessThreshold;
}
function isHSVTooGray(hsv) {
    return hsv.value.saturation < config.hsvGrayThreshold;
}
function isLABTooBright(lab) {
    return lab.value.l > config.labBrightnessThreshold;
}
function isLABTooDark(lab) {
    return lab.value.l < config.labDarknessThreshold;
}
function isLABTooGray(lab) {
    return (Math.abs(lab.value.a) < config.labGrayThreshold &&
        Math.abs(lab.value.b) < config.labGrayThreshold);
}
function isRGBTooBright(rgb) {
    return ((rgb.value.red + rgb.value.green + rgb.value.blue) / 3 >
        config.rgbMaxBrightness);
}
function isRGBTooDark(rgb) {
    return ((rgb.value.red + rgb.value.green + rgb.value.blue) / 3 <
        config.rgbMinBrightness);
}
function isRGBTooGray(rgb) {
    return (Math.abs(rgb.value.red - rgb.value.green) < config.rgbGrayThreshold &&
        Math.abs(rgb.value.green - rgb.value.blue) < config.rgbGrayThreshold &&
        Math.abs(rgb.value.red - rgb.value.blue) < config.rgbGrayThreshold);
}
function getLimitChecker(limit) {
    return colorLimits[limit];
}
function isColorInBounds(colors) {
    try {
        return Object.entries(colors).some(([key, color]) => {
            if (!color)
                return false;
            const format = key.toUpperCase();
            const isTooGray = getLimitChecker(`is${format}TooGray`);
            const isTooDark = getLimitChecker(`is${format}TooDark`);
            const isTooBright = getLimitChecker(`is${format}TooBright`);
            return isTooGray(color) || isTooDark(color) || isTooBright(color);
        });
    }
    catch (error) {
        console.error(`Error validating color bounds: ${error}`);
        return false;
    }
}
export const colorLimits = {
    getLimitChecker,
    isCMYKTooBright,
    isCMYKTooDark,
    isCMYKTooGray,
    isColorInBounds,
    isHexTooBright,
    isHexTooDark,
    isHexTooGray,
    isHSLTooBright,
    isHSLTooDark,
    isHSLTooGray,
    isHSVTooBright,
    isHSVTooDark,
    isHSVTooGray,
    isLABTooBright,
    isLABTooDark,
    isLABTooGray,
    isRGBTooBright,
    isRGBTooDark,
    isRGBTooGray
};
//# sourceMappingURL=data:application/json;base64,