// File: src/dom/buttons.js
import { core, superUtils } from '../common/index.js';
import { data } from '../data/index.js';
import { mode } from '../data/mode/index.js';
import { start } from '../palette/index.js';
const buttonDebounce = data.consts.debounce.button || 300;
function addEventListener(id, eventType, callback) {
    const button = document.getElementById(id);
    if (button) {
        button.addEventListener(eventType, callback);
    }
    else if (mode.warnLogs) {
        if ((mode.debug || mode.verbose) && mode.warnLogs)
            console.warn(`Button with id "${id}" not found.`);
    }
}
const handlePaletteGen = core.base.debounce(() => {
    try {
        const params = superUtils.dom.getGenButtonArgs();
        if (!params) {
            console.error('Failed to retrieve generateButton parameters');
            return;
        }
        const { numBoxes, customColor, paletteType, enableAlpha, limitDarkness, limitGrayness, limitLightness } = params;
        if (!paletteType || !numBoxes) {
            console.error('paletteType and/or numBoxes are undefined');
            return;
        }
        const options = {
            numBoxes,
            customColor,
            paletteType,
            enableAlpha,
            limitDarkness,
            limitGrayness,
            limitLightness
        };
        start.genPalette(options);
    }
    catch (error) {
        console.error(`Failed to handle generate button click: ${error}`);
    }
}, buttonDebounce);
export const buttons = {
    addEventListener,
    handlePaletteGen
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vYnV0dG9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkI7QUFHM0IsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU1QyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDO0FBRTFELFNBQVMsZ0JBQWdCLENBQ3hCLEVBQVUsRUFDVixTQUFZLEVBQ1osUUFBOEM7SUFFOUMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUzQyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ1osTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO1NBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRO1lBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtJQUNoRCxJQUFJLENBQUM7UUFDSixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFakQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1lBRTlELE9BQU87UUFDUixDQUFDO1FBRUQsTUFBTSxFQUNMLFFBQVEsRUFDUixXQUFXLEVBQ1gsV0FBVyxFQUNYLFdBQVcsRUFDWCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGNBQWMsRUFDZCxHQUFHLE1BQU0sQ0FBQztRQUVYLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMvQixPQUFPLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7WUFFM0QsT0FBTztRQUNSLENBQUM7UUFFRCxNQUFNLE9BQU8sR0FBbUI7WUFDL0IsUUFBUTtZQUNSLFdBQVc7WUFDWCxXQUFXO1lBQ1gsV0FBVztZQUNYLGFBQWE7WUFDYixhQUFhO1lBQ2IsY0FBYztTQUNkLENBQUM7UUFFRixLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkNBQTJDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQztBQUNGLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUVuQixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQTBCO0lBQzdDLGdCQUFnQjtJQUNoQixnQkFBZ0I7Q0FDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9kb20vYnV0dG9ucy5qc1xuXG5pbXBvcnQgeyBET01CdXR0b25zRm5JbnRlcmZhY2UsIFBhbGV0dGVPcHRpb25zIH0gZnJvbSAnLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgY29yZSwgc3VwZXJVdGlscyB9IGZyb20gJy4uL2NvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBtb2RlIH0gZnJvbSAnLi4vZGF0YS9tb2RlL2luZGV4LmpzJztcbmltcG9ydCB7IHN0YXJ0IH0gZnJvbSAnLi4vcGFsZXR0ZS9pbmRleC5qcyc7XG5cbmNvbnN0IGJ1dHRvbkRlYm91bmNlID0gZGF0YS5jb25zdHMuZGVib3VuY2UuYnV0dG9uIHx8IDMwMDtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcD4oXG5cdGlkOiBzdHJpbmcsXG5cdGV2ZW50VHlwZTogSyxcblx0Y2FsbGJhY2s6IChldjogSFRNTEVsZW1lbnRFdmVudE1hcFtLXSkgPT4gdm9pZFxuKTogdm9pZCB7XG5cdGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuXHRpZiAoYnV0dG9uKSB7XG5cdFx0YnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjayk7XG5cdH0gZWxzZSBpZiAobW9kZS53YXJuTG9ncykge1xuXHRcdGlmICgobW9kZS5kZWJ1ZyB8fCBtb2RlLnZlcmJvc2UpICYmIG1vZGUud2FybkxvZ3MpXG5cdFx0XHRjb25zb2xlLndhcm4oYEJ1dHRvbiB3aXRoIGlkIFwiJHtpZH1cIiBub3QgZm91bmQuYCk7XG5cdH1cbn1cblxuY29uc3QgaGFuZGxlUGFsZXR0ZUdlbiA9IGNvcmUuYmFzZS5kZWJvdW5jZSgoKSA9PiB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcGFyYW1zID0gc3VwZXJVdGlscy5kb20uZ2V0R2VuQnV0dG9uQXJncygpO1xuXG5cdFx0aWYgKCFwYXJhbXMpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZXRyaWV2ZSBnZW5lcmF0ZUJ1dHRvbiBwYXJhbWV0ZXJzJyk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCB7XG5cdFx0XHRudW1Cb3hlcyxcblx0XHRcdGN1c3RvbUNvbG9yLFxuXHRcdFx0cGFsZXR0ZVR5cGUsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRsaW1pdEdyYXluZXNzLFxuXHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHR9ID0gcGFyYW1zO1xuXG5cdFx0aWYgKCFwYWxldHRlVHlwZSB8fCAhbnVtQm94ZXMpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ3BhbGV0dGVUeXBlIGFuZC9vciBudW1Cb3hlcyBhcmUgdW5kZWZpbmVkJyk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBvcHRpb25zOiBQYWxldHRlT3B0aW9ucyA9IHtcblx0XHRcdG51bUJveGVzLFxuXHRcdFx0Y3VzdG9tQ29sb3IsXG5cdFx0XHRwYWxldHRlVHlwZSxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXREYXJrbmVzcyxcblx0XHRcdGxpbWl0R3JheW5lc3MsXG5cdFx0XHRsaW1pdExpZ2h0bmVzc1xuXHRcdH07XG5cblx0XHRzdGFydC5nZW5QYWxldHRlKG9wdGlvbnMpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBoYW5kbGUgZ2VuZXJhdGUgYnV0dG9uIGNsaWNrOiAke2Vycm9yfWApO1xuXHR9XG59LCBidXR0b25EZWJvdW5jZSk7XG5cbmV4cG9ydCBjb25zdCBidXR0b25zOiBET01CdXR0b25zRm5JbnRlcmZhY2UgPSB7XG5cdGFkZEV2ZW50TGlzdGVuZXIsXG5cdGhhbmRsZVBhbGV0dGVHZW5cbn07XG4iXX0=