let dragSrcEl = null;
export function attachDragAndDropEventListeners(element) {
    if (element) {
        element.addEventListener('dragstart', handleDragStart);
        element.addEventListener('dragover', handleDragOver);
        element.addEventListener('drop', handleDrop);
        element.addEventListener('dragend', handleDragEnd);
    }
}
export function handleDragStart(e) {
    console.log('executing handleDragStart');
    dragSrcEl = e.currentTarget;
    if (e.dataTransfer) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', dragSrcEl.outerHTML);
    }
    console.log('handleDragStart complete');
}
export function handleDragOver(e) {
    console.log('executing handleDragOver');
    e.preventDefault();
    if (e.dataTransfer) {
        e.dataTransfer.dropEffect = 'move';
    }
    console.log('handleDragOver complete');
    return false;
}
export function handleDrop(e) {
    console.log('executing handleDrop');
    e.stopPropagation(); // prevents default drop action
    const target = e.currentTarget;
    if (dragSrcEl && dragSrcEl !== target) {
        const dragSrcId = dragSrcEl.id;
        const dropTargetId = target.id;
        const dragSrcText = dragSrcEl.querySelector('.color-text-output-box').value;
        const dropTargetText = target.querySelector('.color-text-output-box').value;
        const dragSrcOuterHTML = dragSrcEl.outerHTML;
        const dropTargetOuterHTML = target.outerHTML;
        dragSrcEl.outerHTML = dropTargetOuterHTML;
        target.outerHTML = dragSrcOuterHTML;
        const newDragSrcEl = document.getElementById(dropTargetId);
        const newDropTargetEl = document.getElementById(dragSrcId);
        newDragSrcEl.id = dragSrcId;
        newDropTargetEl.id = dropTargetId;
        newDragSrcEl.querySelector('.color-text-output-box').value = dropTargetText;
        newDropTargetEl.querySelector('.color-text-output-box').value = dragSrcText;
        console.log('calling attachDragAndDropEventListeners for new elements');
        attachDragAndDropEventListeners(newDragSrcEl);
        attachDragAndDropEventListeners(newDropTargetEl);
    }
    console.log('handleDrop complete');
}
export function handleDragEnd(e) {
    console.log('executing handleDragEnd');
    const target = e.currentTarget;
    target.classList.remove('dragging');
    document.querySelectorAll('.color-stripe').forEach(el => {
        el.classList.remove('dragging');
    });
    console.log('handleDragEnd complete');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vZHJhZy1hbmQtZHJvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFNBQVMsR0FBdUIsSUFBSSxDQUFDO0FBRXpDLE1BQU0sVUFBVSwrQkFBK0IsQ0FDOUMsT0FBMkI7SUFFM0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNyRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDcEQsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLENBQVk7SUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBRXpDLFNBQVMsR0FBRyxDQUFDLENBQUMsYUFBNEIsQ0FBQztJQUMzQyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7UUFDdEMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLENBQVk7SUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBRXhDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUVuQixJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7SUFDcEMsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN2QyxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLENBQVk7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBRXBDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLCtCQUErQjtJQUVwRCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsYUFBNEIsQ0FBQztJQUU5QyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssTUFBTSxFQUFFLENBQUM7UUFDdkMsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUMvQixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQy9CLE1BQU0sV0FBVyxHQUNoQixTQUFTLENBQUMsYUFBYSxDQUN0Qix3QkFBd0IsQ0FFekIsQ0FBQyxLQUFLLENBQUM7UUFDUixNQUFNLGNBQWMsR0FDbkIsTUFBTSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FDN0MsQ0FBQyxLQUFLLENBQUM7UUFDUixNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDN0MsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBRTdDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUM7UUFDMUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztRQUVwQyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUMzQyxZQUFZLENBQ0csQ0FBQztRQUNqQixNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUM5QyxTQUFTLENBQ00sQ0FBQztRQUVqQixZQUFZLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztRQUM1QixlQUFlLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQztRQUdqQyxZQUFZLENBQUMsYUFBYSxDQUN6Qix3QkFBd0IsQ0FFekIsQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDO1FBRXhCLGVBQWUsQ0FBQyxhQUFhLENBQzVCLHdCQUF3QixDQUV6QixDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7UUFFdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1FBQ3hFLCtCQUErQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlDLCtCQUErQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsQ0FBWTtJQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFFdkMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGFBQTRCLENBQUM7SUFDOUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFcEMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUN2RCxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUN2QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGRyYWdTcmNFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaERyYWdBbmREcm9wRXZlbnRMaXN0ZW5lcnMoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbFxuKTogdm9pZCB7XG5cdGlmIChlbGVtZW50KSB7XG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBoYW5kbGVEcmFnU3RhcnQpO1xuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBoYW5kbGVEcmFnT3Zlcik7XG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgaGFuZGxlRHJhZ0VuZCk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydChlOiBEcmFnRXZlbnQpOiB2b2lkIHtcblx0Y29uc29sZS5sb2coJ2V4ZWN1dGluZyBoYW5kbGVEcmFnU3RhcnQnKTtcblxuXHRkcmFnU3JjRWwgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdGlmIChlLmRhdGFUcmFuc2Zlcikge1xuXHRcdGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG5cdFx0ZS5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9odG1sJywgZHJhZ1NyY0VsLm91dGVySFRNTCk7XG5cdH1cblxuXHRjb25zb2xlLmxvZygnaGFuZGxlRHJhZ1N0YXJ0IGNvbXBsZXRlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVEcmFnT3ZlcihlOiBEcmFnRXZlbnQpOiBib29sZWFuIHtcblx0Y29uc29sZS5sb2coJ2V4ZWN1dGluZyBoYW5kbGVEcmFnT3ZlcicpO1xuXG5cdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRpZiAoZS5kYXRhVHJhbnNmZXIpIHtcblx0XHRlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuXHR9XG5cblx0Y29uc29sZS5sb2coJ2hhbmRsZURyYWdPdmVyIGNvbXBsZXRlJyk7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZURyb3AoZTogRHJhZ0V2ZW50KTogdm9pZCB7XG5cdGNvbnNvbGUubG9nKCdleGVjdXRpbmcgaGFuZGxlRHJvcCcpO1xuXG5cdGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIHByZXZlbnRzIGRlZmF1bHQgZHJvcCBhY3Rpb25cblxuXHRjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cblx0aWYgKGRyYWdTcmNFbCAmJiBkcmFnU3JjRWwgIT09IHRhcmdldCkge1xuXHRcdGNvbnN0IGRyYWdTcmNJZCA9IGRyYWdTcmNFbC5pZDtcblx0XHRjb25zdCBkcm9wVGFyZ2V0SWQgPSB0YXJnZXQuaWQ7XG5cdFx0Y29uc3QgZHJhZ1NyY1RleHQgPSAoXG5cdFx0XHRkcmFnU3JjRWwucXVlcnlTZWxlY3Rvcihcblx0XHRcdFx0Jy5jb2xvci10ZXh0LW91dHB1dC1ib3gnXG5cdFx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnRcblx0XHQpLnZhbHVlO1xuXHRcdGNvbnN0IGRyb3BUYXJnZXRUZXh0ID0gKFxuXHRcdFx0dGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5jb2xvci10ZXh0LW91dHB1dC1ib3gnKSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cdFx0KS52YWx1ZTtcblx0XHRjb25zdCBkcmFnU3JjT3V0ZXJIVE1MID0gZHJhZ1NyY0VsLm91dGVySFRNTDtcblx0XHRjb25zdCBkcm9wVGFyZ2V0T3V0ZXJIVE1MID0gdGFyZ2V0Lm91dGVySFRNTDtcblxuXHRcdGRyYWdTcmNFbC5vdXRlckhUTUwgPSBkcm9wVGFyZ2V0T3V0ZXJIVE1MO1xuXHRcdHRhcmdldC5vdXRlckhUTUwgPSBkcmFnU3JjT3V0ZXJIVE1MO1xuXG5cdFx0Y29uc3QgbmV3RHJhZ1NyY0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0XHRkcm9wVGFyZ2V0SWRcblx0XHQpIGFzIEhUTUxFbGVtZW50O1xuXHRcdGNvbnN0IG5ld0Ryb3BUYXJnZXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuXHRcdFx0ZHJhZ1NyY0lkXG5cdFx0KSBhcyBIVE1MRWxlbWVudDtcblxuXHRcdG5ld0RyYWdTcmNFbC5pZCA9IGRyYWdTcmNJZDtcblx0XHRuZXdEcm9wVGFyZ2V0RWwuaWQgPSBkcm9wVGFyZ2V0SWQ7XG5cblx0XHQoXG5cdFx0XHRuZXdEcmFnU3JjRWwucXVlcnlTZWxlY3Rvcihcblx0XHRcdFx0Jy5jb2xvci10ZXh0LW91dHB1dC1ib3gnXG5cdFx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnRcblx0XHQpLnZhbHVlID0gZHJvcFRhcmdldFRleHQ7XG5cdFx0KFxuXHRcdFx0bmV3RHJvcFRhcmdldEVsLnF1ZXJ5U2VsZWN0b3IoXG5cdFx0XHRcdCcuY29sb3ItdGV4dC1vdXRwdXQtYm94J1xuXHRcdFx0KSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cdFx0KS52YWx1ZSA9IGRyYWdTcmNUZXh0O1xuXG5cdFx0Y29uc29sZS5sb2coJ2NhbGxpbmcgYXR0YWNoRHJhZ0FuZERyb3BFdmVudExpc3RlbmVycyBmb3IgbmV3IGVsZW1lbnRzJyk7XG5cdFx0YXR0YWNoRHJhZ0FuZERyb3BFdmVudExpc3RlbmVycyhuZXdEcmFnU3JjRWwpO1xuXHRcdGF0dGFjaERyYWdBbmREcm9wRXZlbnRMaXN0ZW5lcnMobmV3RHJvcFRhcmdldEVsKTtcblx0fVxuXG5cdGNvbnNvbGUubG9nKCdoYW5kbGVEcm9wIGNvbXBsZXRlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVEcmFnRW5kKGU6IERyYWdFdmVudCk6IHZvaWQge1xuXHRjb25zb2xlLmxvZygnZXhlY3V0aW5nIGhhbmRsZURyYWdFbmQnKTtcblxuXHRjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2xvci1zdHJpcGUnKS5mb3JFYWNoKGVsID0+IHtcblx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuXHR9KTtcblxuXHRjb25zb2xlLmxvZygnaGFuZGxlRHJhZ0VuZCBjb21wbGV0ZScpO1xufVxuIl19