import { domHelpers } from '../helpers/dom.js';
let dragSrcEl = null;
function handleDragStart(e) {
    try {
        dragSrcEl = e.currentTarget;
        if (e.dataTransfer) {
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', dragSrcEl.outerHTML);
        }
        console.log('handleDragStart complete');
    }
    catch (error) {
        console.error(`Error in handleDragStart: ${error}`);
    }
}
function handleDragOver(e) {
    try {
        e.preventDefault();
        if (e.dataTransfer) {
            e.dataTransfer.dropEffect = 'move';
        }
        console.log('handleDragOver complete');
        return false;
    }
    catch (error) {
        console.error(`Error in handleDragOver: ${error}`);
        return false;
    }
}
function handleDragEnd(e) {
    try {
        const target = e.currentTarget;
        target.classList.remove('dragging');
        document.querySelectorAll('.color-stripe').forEach(el => {
            el.classList.remove('dragging');
        });
        console.log('handleDragEnd complete');
    }
    catch (error) {
        console.error(`Error in handleDragEnd: ${error}`);
    }
}
function handleDrop(e) {
    try {
        e.stopPropagation();
        const target = e.currentTarget;
        if (dragSrcEl && dragSrcEl !== target) {
            const dragSrcId = dragSrcEl.id;
            const dropTargetId = target.id;
            const dragSrcText = dragSrcEl.querySelector('.color-text-output-box').value;
            const dropTargetText = target.querySelector('.color-text-output-box').value;
            const dragSrcOuterHTML = dragSrcEl.outerHTML;
            const dropTargetOuterHTML = target.outerHTML;
            dragSrcEl.outerHTML = dropTargetOuterHTML;
            target.outerHTML = dragSrcOuterHTML;
            const newDragSrcEl = document.getElementById(dropTargetId);
            const newDropTargetEl = document.getElementById(dragSrcId);
            newDragSrcEl.id = dragSrcId;
            newDropTargetEl.id = dropTargetId;
            newDragSrcEl.querySelector('.color-text-output-box').value = dropTargetText;
            newDropTargetEl.querySelector('.color-text-output-box').value = dragSrcText;
            console.log('calling attachDragAndDropEventListeners for new elements');
            domHelpers.attachDragAndDropEventListeners(newDragSrcEl);
            domHelpers.attachDragAndDropEventListeners(newDropTargetEl);
        }
        console.log('handleDrop complete');
    }
    catch (error) {
        console.error(`Error in handleDrop: ${error}`);
    }
}
export const dragAndDrop = {
    handleDragEnd,
    handleDragOver,
    handleDragStart,
    handleDrop
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vZHJhZy1hbmQtZHJvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHNUMsSUFBSSxTQUFTLEdBQXVCLElBQUksQ0FBQztBQUV6QyxTQUFTLGVBQWUsQ0FBQyxDQUFZO0lBQ3BDLElBQUksQ0FBQztRQUNKLFNBQVMsR0FBRyxDQUFDLENBQUMsYUFBNEIsQ0FBQztRQUUzQyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQixDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7WUFDdEMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztBQUNGLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxDQUFZO0lBQ25DLElBQUksQ0FBQztRQUNKLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVuQixJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQixDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFDcEMsQ0FBQztRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUN2QyxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDbkQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLENBQVk7SUFDbEMsSUFBSSxDQUFDO1FBQ0osTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGFBQTRCLENBQUM7UUFDOUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN2RCxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUEyQixLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsQ0FBWTtJQUMvQixJQUFJLENBQUM7UUFDSixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFcEIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGFBQTRCLENBQUM7UUFFOUMsSUFBSSxTQUFTLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUM7WUFDL0IsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUMvQixNQUFNLFdBQVcsR0FDaEIsU0FBUyxDQUFDLGFBQWEsQ0FDdEIsd0JBQXdCLENBRXpCLENBQUMsS0FBSyxDQUFDO1lBQ1IsTUFBTSxjQUFjLEdBQ25CLE1BQU0sQ0FBQyxhQUFhLENBQ25CLHdCQUF3QixDQUV6QixDQUFDLEtBQUssQ0FBQztZQUNSLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztZQUM3QyxNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFFN0MsU0FBUyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQztZQUMxQyxNQUFNLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1lBRXBDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQzNDLFlBQVksQ0FDRyxDQUFDO1lBQ2pCLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQzlDLFNBQVMsQ0FDTSxDQUFDO1lBRWpCLFlBQVksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO1lBQzVCLGVBQWUsQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDO1lBR2pDLFlBQVksQ0FBQyxhQUFhLENBQ3pCLHdCQUF3QixDQUV6QixDQUFDLEtBQUssR0FBRyxjQUFjLENBQUM7WUFFeEIsZUFBZSxDQUFDLGFBQWEsQ0FDNUIsd0JBQXdCLENBRXpCLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztZQUV0QixPQUFPLENBQUMsR0FBRyxDQUNWLDBEQUEwRCxDQUMxRCxDQUFDO1lBQ0YsVUFBVSxDQUFDLCtCQUErQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3pELFVBQVUsQ0FBQywrQkFBK0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQTBCO0lBQ2pELGFBQWE7SUFDYixjQUFjO0lBQ2QsZUFBZTtJQUNmLFVBQVU7Q0FDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG9tSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMvZG9tJztcbmltcG9ydCAqIGFzIGZuT2JqZWN0cyBmcm9tICcuLi9pbmRleC9mbi1vYmplY3RzJztcblxubGV0IGRyYWdTcmNFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGU6IERyYWdFdmVudCk6IHZvaWQge1xuXHR0cnkge1xuXHRcdGRyYWdTcmNFbCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudDtcblxuXHRcdGlmIChlLmRhdGFUcmFuc2Zlcikge1xuXHRcdFx0ZS5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcblx0XHRcdGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvaHRtbCcsIGRyYWdTcmNFbC5vdXRlckhUTUwpO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKCdoYW5kbGVEcmFnU3RhcnQgY29tcGxldGUnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBpbiBoYW5kbGVEcmFnU3RhcnQ6ICR7ZXJyb3J9YCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRHJhZ092ZXIoZTogRHJhZ0V2ZW50KTogYm9vbGVhbiB7XG5cdHRyeSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYgKGUuZGF0YVRyYW5zZmVyKSB7XG5cdFx0XHRlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKCdoYW5kbGVEcmFnT3ZlciBjb21wbGV0ZScpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBpbiBoYW5kbGVEcmFnT3ZlcjogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRHJhZ0VuZChlOiBEcmFnRXZlbnQpOiB2b2lkIHtcblx0dHJ5IHtcblx0XHRjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0dGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nJyk7XG5cblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29sb3Itc3RyaXBlJykuZm9yRWFjaChlbCA9PiB7XG5cdFx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuXHRcdH0pO1xuXG5cdFx0Y29uc29sZS5sb2coJ2hhbmRsZURyYWdFbmQgY29tcGxldGUnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBpbiBoYW5kbGVEcmFnRW5kOiAke2Vycm9yfWApO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURyb3AoZTogRHJhZ0V2ZW50KTogdm9pZCB7XG5cdHRyeSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHRcdGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudDtcblxuXHRcdGlmIChkcmFnU3JjRWwgJiYgZHJhZ1NyY0VsICE9PSB0YXJnZXQpIHtcblx0XHRcdGNvbnN0IGRyYWdTcmNJZCA9IGRyYWdTcmNFbC5pZDtcblx0XHRcdGNvbnN0IGRyb3BUYXJnZXRJZCA9IHRhcmdldC5pZDtcblx0XHRcdGNvbnN0IGRyYWdTcmNUZXh0ID0gKFxuXHRcdFx0XHRkcmFnU3JjRWwucXVlcnlTZWxlY3Rvcihcblx0XHRcdFx0XHQnLmNvbG9yLXRleHQtb3V0cHV0LWJveCdcblx0XHRcdFx0KSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cdFx0XHQpLnZhbHVlO1xuXHRcdFx0Y29uc3QgZHJvcFRhcmdldFRleHQgPSAoXG5cdFx0XHRcdHRhcmdldC5xdWVyeVNlbGVjdG9yKFxuXHRcdFx0XHRcdCcuY29sb3ItdGV4dC1vdXRwdXQtYm94J1xuXHRcdFx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnRcblx0XHRcdCkudmFsdWU7XG5cdFx0XHRjb25zdCBkcmFnU3JjT3V0ZXJIVE1MID0gZHJhZ1NyY0VsLm91dGVySFRNTDtcblx0XHRcdGNvbnN0IGRyb3BUYXJnZXRPdXRlckhUTUwgPSB0YXJnZXQub3V0ZXJIVE1MO1xuXG5cdFx0XHRkcmFnU3JjRWwub3V0ZXJIVE1MID0gZHJvcFRhcmdldE91dGVySFRNTDtcblx0XHRcdHRhcmdldC5vdXRlckhUTUwgPSBkcmFnU3JjT3V0ZXJIVE1MO1xuXG5cdFx0XHRjb25zdCBuZXdEcmFnU3JjRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcblx0XHRcdFx0ZHJvcFRhcmdldElkXG5cdFx0XHQpIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0Y29uc3QgbmV3RHJvcFRhcmdldEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0XHRcdGRyYWdTcmNJZFxuXHRcdFx0KSBhcyBIVE1MRWxlbWVudDtcblxuXHRcdFx0bmV3RHJhZ1NyY0VsLmlkID0gZHJhZ1NyY0lkO1xuXHRcdFx0bmV3RHJvcFRhcmdldEVsLmlkID0gZHJvcFRhcmdldElkO1xuXG5cdFx0XHQoXG5cdFx0XHRcdG5ld0RyYWdTcmNFbC5xdWVyeVNlbGVjdG9yKFxuXHRcdFx0XHRcdCcuY29sb3ItdGV4dC1vdXRwdXQtYm94J1xuXHRcdFx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnRcblx0XHRcdCkudmFsdWUgPSBkcm9wVGFyZ2V0VGV4dDtcblx0XHRcdChcblx0XHRcdFx0bmV3RHJvcFRhcmdldEVsLnF1ZXJ5U2VsZWN0b3IoXG5cdFx0XHRcdFx0Jy5jb2xvci10ZXh0LW91dHB1dC1ib3gnXG5cdFx0XHRcdCkgYXMgSFRNTElucHV0RWxlbWVudFxuXHRcdFx0KS52YWx1ZSA9IGRyYWdTcmNUZXh0O1xuXG5cdFx0XHRjb25zb2xlLmxvZyhcblx0XHRcdFx0J2NhbGxpbmcgYXR0YWNoRHJhZ0FuZERyb3BFdmVudExpc3RlbmVycyBmb3IgbmV3IGVsZW1lbnRzJ1xuXHRcdFx0KTtcblx0XHRcdGRvbUhlbHBlcnMuYXR0YWNoRHJhZ0FuZERyb3BFdmVudExpc3RlbmVycyhuZXdEcmFnU3JjRWwpO1xuXHRcdFx0ZG9tSGVscGVycy5hdHRhY2hEcmFnQW5kRHJvcEV2ZW50TGlzdGVuZXJzKG5ld0Ryb3BUYXJnZXRFbCk7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coJ2hhbmRsZURyb3AgY29tcGxldGUnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBpbiBoYW5kbGVEcm9wOiAke2Vycm9yfWApO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBkcmFnQW5kRHJvcDogZm5PYmplY3RzLkRyYWdBbmREcm9wID0ge1xuXHRoYW5kbGVEcmFnRW5kLFxuXHRoYW5kbGVEcmFnT3Zlcixcblx0aGFuZGxlRHJhZ1N0YXJ0LFxuXHRoYW5kbGVEcm9wXG59O1xuIl19