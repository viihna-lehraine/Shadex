let dragSrcEl = null;
export function attachDragAndDropEventListeners(element) {
    if (element) {
        element.addEventListener('dragstart', handleDragStart);
        element.addEventListener('dragover', handleDragOver);
        element.addEventListener('drop', handleDrop);
        element.addEventListener('dragend', handleDragEnd);
    }
}
export function handleDragStart(e) {
    console.log('executing handleDragStart');
    dragSrcEl = e.currentTarget;
    if (e.dataTransfer) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', dragSrcEl.outerHTML);
    }
    console.log('handleDragStart complete');
}
export function handleDragOver(e) {
    console.log('executing handleDragOver');
    e.preventDefault(); // allow dropping by preventing default behavior
    if (e.dataTransfer) {
        e.dataTransfer.dropEffect = 'move';
    }
    console.log('handleDragOver complete');
    return false;
}
export function handleDrop(e) {
    console.log('executing handleDrop');
    e.stopPropagation(); // prevents default drop action
    const target = e.currentTarget;
    if (dragSrcEl && dragSrcEl !== target) {
        const dragSrcId = dragSrcEl.id;
        const dropTargetId = target.id;
        const dragSrcText = dragSrcEl.querySelector('.color-text-output-box').value;
        const dropTargetText = target.querySelector('.color-text-output-box').value;
        const dragSrcOuterHTML = dragSrcEl.outerHTML;
        const dropTargetOuterHTML = target.outerHTML;
        dragSrcEl.outerHTML = dropTargetOuterHTML;
        target.outerHTML = dragSrcOuterHTML;
        const newDragSrcEl = document.getElementById(dropTargetId);
        const newDropTargetEl = document.getElementById(dragSrcId);
        newDragSrcEl.id = dragSrcId;
        newDropTargetEl.id = dropTargetId;
        newDragSrcEl.querySelector('.color-text-output-box').value = dropTargetText;
        newDropTargetEl.querySelector('.color-text-output-box').value = dragSrcText;
        console.log('calling attachDragAndDropEventListeners for new elements');
        attachDragAndDropEventListeners(newDragSrcEl);
        attachDragAndDropEventListeners(newDropTargetEl);
    }
    console.log('handleDrop complete');
}
export function handleDragEnd(e) {
    console.log('executing handleDragEnd');
    const target = e.currentTarget;
    target.classList.remove('dragging');
    document.querySelectorAll('.color-stripe').forEach(el => {
        el.classList.remove('dragging');
    });
    console.log('handleDragEnd complete');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kb20vZHJhZy1hbmQtZHJvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFNBQVMsR0FBdUIsSUFBSSxDQUFDO0FBRXpDLE1BQU0sVUFBVSwrQkFBK0IsQ0FBQyxPQUEyQjtJQUMxRSxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0MsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNwRCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsQ0FBWTtJQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFFekMsU0FBUyxHQUFHLENBQUMsQ0FBQyxhQUE0QixDQUFDO0lBQzNDLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztRQUN0QyxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsQ0FBWTtJQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFFeEMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsZ0RBQWdEO0lBRXBFLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztJQUNwQyxDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsQ0FBWTtJQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFFcEMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsK0JBQStCO0lBRXBELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxhQUE0QixDQUFDO0lBRTlDLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUN2QyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQy9CLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDL0IsTUFBTSxXQUFXLEdBQ2hCLFNBQVMsQ0FBQyxhQUFhLENBQ3RCLHdCQUF3QixDQUV6QixDQUFDLEtBQUssQ0FBQztRQUNSLE1BQU0sY0FBYyxHQUNuQixNQUFNLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUM3QyxDQUFDLEtBQUssQ0FBQztRQUNSLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUM3QyxNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFFN0MsU0FBUyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQztRQUMxQyxNQUFNLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBRXBDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQzNDLFlBQVksQ0FDRyxDQUFDO1FBQ2pCLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQzlDLFNBQVMsQ0FDTSxDQUFDO1FBRWpCLFlBQVksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO1FBQzVCLGVBQWUsQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDO1FBR2pDLFlBQVksQ0FBQyxhQUFhLENBQ3pCLHdCQUF3QixDQUV6QixDQUFDLEtBQUssR0FBRyxjQUFjLENBQUM7UUFFeEIsZUFBZSxDQUFDLGFBQWEsQ0FDNUIsd0JBQXdCLENBRXpCLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztRQUV0QixPQUFPLENBQUMsR0FBRyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7UUFDeEUsK0JBQStCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDOUMsK0JBQStCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxDQUFZO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUV2QyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsYUFBNEIsQ0FBQztJQUM5QyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVwQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3ZELEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZHJhZ1NyY0VsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoRHJhZ0FuZERyb3BFdmVudExpc3RlbmVycyhlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwpIHtcblx0aWYgKGVsZW1lbnQpIHtcblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIGhhbmRsZURyYWdTdGFydCk7XG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGhhbmRsZURyYWdPdmVyKTtcblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wKTtcblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCBoYW5kbGVEcmFnRW5kKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGU6IERyYWdFdmVudCk6IHZvaWQge1xuXHRjb25zb2xlLmxvZygnZXhlY3V0aW5nIGhhbmRsZURyYWdTdGFydCcpO1xuXG5cdGRyYWdTcmNFbCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudDtcblx0aWYgKGUuZGF0YVRyYW5zZmVyKSB7XG5cdFx0ZS5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcblx0XHRlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L2h0bWwnLCBkcmFnU3JjRWwub3V0ZXJIVE1MKTtcblx0fVxuXG5cdGNvbnNvbGUubG9nKCdoYW5kbGVEcmFnU3RhcnQgY29tcGxldGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZURyYWdPdmVyKGU6IERyYWdFdmVudCk6IGJvb2xlYW4ge1xuXHRjb25zb2xlLmxvZygnZXhlY3V0aW5nIGhhbmRsZURyYWdPdmVyJyk7XG5cblx0ZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBhbGxvdyBkcm9wcGluZyBieSBwcmV2ZW50aW5nIGRlZmF1bHQgYmVoYXZpb3JcblxuXHRpZiAoZS5kYXRhVHJhbnNmZXIpIHtcblx0XHRlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuXHR9XG5cblx0Y29uc29sZS5sb2coJ2hhbmRsZURyYWdPdmVyIGNvbXBsZXRlJyk7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZURyb3AoZTogRHJhZ0V2ZW50KTogdm9pZCB7XG5cdGNvbnNvbGUubG9nKCdleGVjdXRpbmcgaGFuZGxlRHJvcCcpO1xuXG5cdGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIHByZXZlbnRzIGRlZmF1bHQgZHJvcCBhY3Rpb25cblxuXHRjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cblx0aWYgKGRyYWdTcmNFbCAmJiBkcmFnU3JjRWwgIT09IHRhcmdldCkge1xuXHRcdGNvbnN0IGRyYWdTcmNJZCA9IGRyYWdTcmNFbC5pZDtcblx0XHRjb25zdCBkcm9wVGFyZ2V0SWQgPSB0YXJnZXQuaWQ7XG5cdFx0Y29uc3QgZHJhZ1NyY1RleHQgPSAoXG5cdFx0XHRkcmFnU3JjRWwucXVlcnlTZWxlY3Rvcihcblx0XHRcdFx0Jy5jb2xvci10ZXh0LW91dHB1dC1ib3gnXG5cdFx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnRcblx0XHQpLnZhbHVlO1xuXHRcdGNvbnN0IGRyb3BUYXJnZXRUZXh0ID0gKFxuXHRcdFx0dGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5jb2xvci10ZXh0LW91dHB1dC1ib3gnKSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cdFx0KS52YWx1ZTtcblx0XHRjb25zdCBkcmFnU3JjT3V0ZXJIVE1MID0gZHJhZ1NyY0VsLm91dGVySFRNTDtcblx0XHRjb25zdCBkcm9wVGFyZ2V0T3V0ZXJIVE1MID0gdGFyZ2V0Lm91dGVySFRNTDtcblxuXHRcdGRyYWdTcmNFbC5vdXRlckhUTUwgPSBkcm9wVGFyZ2V0T3V0ZXJIVE1MO1xuXHRcdHRhcmdldC5vdXRlckhUTUwgPSBkcmFnU3JjT3V0ZXJIVE1MO1xuXG5cdFx0Y29uc3QgbmV3RHJhZ1NyY0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG5cdFx0XHRkcm9wVGFyZ2V0SWRcblx0XHQpIGFzIEhUTUxFbGVtZW50O1xuXHRcdGNvbnN0IG5ld0Ryb3BUYXJnZXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuXHRcdFx0ZHJhZ1NyY0lkXG5cdFx0KSBhcyBIVE1MRWxlbWVudDtcblxuXHRcdG5ld0RyYWdTcmNFbC5pZCA9IGRyYWdTcmNJZDtcblx0XHRuZXdEcm9wVGFyZ2V0RWwuaWQgPSBkcm9wVGFyZ2V0SWQ7XG5cblx0XHQoXG5cdFx0XHRuZXdEcmFnU3JjRWwucXVlcnlTZWxlY3Rvcihcblx0XHRcdFx0Jy5jb2xvci10ZXh0LW91dHB1dC1ib3gnXG5cdFx0XHQpIGFzIEhUTUxJbnB1dEVsZW1lbnRcblx0XHQpLnZhbHVlID0gZHJvcFRhcmdldFRleHQ7XG5cdFx0KFxuXHRcdFx0bmV3RHJvcFRhcmdldEVsLnF1ZXJ5U2VsZWN0b3IoXG5cdFx0XHRcdCcuY29sb3ItdGV4dC1vdXRwdXQtYm94J1xuXHRcdFx0KSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cdFx0KS52YWx1ZSA9IGRyYWdTcmNUZXh0O1xuXG5cdFx0Y29uc29sZS5sb2coJ2NhbGxpbmcgYXR0YWNoRHJhZ0FuZERyb3BFdmVudExpc3RlbmVycyBmb3IgbmV3IGVsZW1lbnRzJyk7XG5cdFx0YXR0YWNoRHJhZ0FuZERyb3BFdmVudExpc3RlbmVycyhuZXdEcmFnU3JjRWwpO1xuXHRcdGF0dGFjaERyYWdBbmREcm9wRXZlbnRMaXN0ZW5lcnMobmV3RHJvcFRhcmdldEVsKTtcblx0fVxuXG5cdGNvbnNvbGUubG9nKCdoYW5kbGVEcm9wIGNvbXBsZXRlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVEcmFnRW5kKGU6IERyYWdFdmVudCk6IHZvaWQge1xuXHRjb25zb2xlLmxvZygnZXhlY3V0aW5nIGhhbmRsZURyYWdFbmQnKTtcblxuXHRjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2xvci1zdHJpcGUnKS5mb3JFYWNoKGVsID0+IHtcblx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuXHR9KTtcblxuXHRjb25zb2xlLmxvZygnaGFuZGxlRHJhZ0VuZCBjb21wbGV0ZScpO1xufVxuIl19