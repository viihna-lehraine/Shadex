// File: src/dom/events/base.js
import { core, superUtils, utils } from '../../common/index.js';
import { data } from '../../data/index.js';
import { domUtils } from '../utils/index.js';
import { IDBManager } from '../../idb/index.js';
import { mode } from '../../data/mode/index.js';
import { start } from '../../palette/index.js';
const buttonDebounce = data.consts.debounce.button || 300;
const domIDs = data.consts.dom.ids;
const uiElements = data.consts.dom.elements;
const idb = IDBManager.getInstance();
function addEventListener(id, eventType, callback) {
    const element = document.getElementById(id);
    if (element) {
        element.addEventListener(eventType, callback);
    }
    else if (mode.warnLogs) {
        if ((mode.debug || mode.verbose) && mode.warnLogs)
            console.warn(`Element with id "${id}" not found.`);
    }
}
const handlePaletteGen = core.base.debounce(() => {
    try {
        const params = superUtils.dom.getGenButtonArgs();
        if (!params) {
            console.error('Failed to retrieve generateButton parameters');
            return;
        }
        const { numBoxes, customColor, paletteType, enableAlpha, limitDarkness, limitGrayness, limitLightness } = params;
        if (!paletteType || !numBoxes) {
            console.error('paletteType and/or numBoxes are undefined');
            return;
        }
        const options = {
            numBoxes,
            customColor,
            paletteType,
            enableAlpha,
            limitDarkness,
            limitGrayness,
            limitLightness
        };
        start.genPalette(options);
    }
    catch (error) {
        console.error(`Failed to handle generate button click: ${error}`);
    }
}, buttonDebounce);
function initializeEventListeners() {
    const addConversionListener = (id, colorSpace) => {
        const button = document.getElementById(id);
        if (button) {
            if (core.guards.isColorSpace(colorSpace)) {
                button.addEventListener('click', () => superUtils.dom.switchColorSpace(colorSpace));
            }
        }
        else {
            if (mode.warnLogs)
                console.warn(`Element with id "${id}" not found.`);
        }
    };
    addConversionListener('show-as-cmyk-button', 'cmyk');
    addConversionListener('show-as-hex-button', 'hex');
    addConversionListener('show-as-hsl-button', 'hsl');
    addConversionListener('show-as-hsv-button', 'hsv');
    addConversionListener('show-as-lab-button', 'lab');
    addConversionListener('show-as-rgb-button', 'rgb');
    addEventListener(domIDs.advancedMenuButton, 'click', async (e) => {
        e.preventDefault();
        uiElements.advancedMenu?.classList.remove('hidden');
        uiElements.advancedMenu?.setAttribute('aria-hidden', 'false');
    });
    addEventListener(domIDs.applyCustomColorButton, 'click', async (e) => {
        e.preventDefault();
        const customHSLColor = domUtils.applyCustomColor();
        const customHSLColorClone = core.base.clone(customHSLColor);
        await idb.saveData('customColor', 'appSettings', customHSLColorClone);
        if (!mode.quiet)
            console.log('Custom color saved to IndexedDB');
        // *DEV-NOTE* unfinished, I think? Double-check this
    });
    addEventListener(domIDs.clearCustomColorButton, 'click', async (e) => {
        e.preventDefault();
        uiElements.customColorInput.value = '#ff0000';
        if (!mode.quiet)
            console.log('Custom color cleared');
    });
    addEventListener(domIDs.customColorMenuButton, 'click', async (e) => {
        e.preventDefault();
        uiElements.customColorMenu?.classList.add('hidden');
        uiElements.customColorMenu?.setAttribute('aria-hidden', 'true');
    });
    if (!uiElements.customColorInput)
        throw new Error('Custom color input element not found');
    uiElements.customColorInput.addEventListener('input', () => {
        if (!uiElements.customColorDisplay)
            throw new Error('Custom color display element not found');
        uiElements.customColorDisplay.textContent =
            uiElements.customColorInput.value;
    });
    addEventListener(domIDs.deleteDatabaseButton, 'click', async (e) => {
        e.preventDefault();
        // only allow if application is in development mode
        if (mode.app !== 'dev') {
            if (mode.infoLogs) {
                console.info('Cannot delete database in production mode.');
            }
            return;
        }
        const confirmDelete = confirm('Are you sure you want to delete the entire database? This action cannot be undone.');
        if (!confirmDelete)
            return;
        try {
            await IDBManager.getInstance().deleteDatabase();
            alert('Database deleted successfully!');
        }
        catch (error) {
            if (mode.errorLogs)
                console.error(`Failed to delete database: ${error}`);
            alert('Failed to delete database.');
        }
    });
    addEventListener(domIDs.desaturateButton, 'click', async (e) => {
        e.preventDefault();
        const selectedColor = uiElements.selectedColorOption
            ? parseInt(uiElements.selectedColorOption.value, 10)
            : 0;
        if (!mode.quiet)
            console.log('desaturateButton clicked');
        domUtils.desaturateColor(selectedColor);
    });
    addEventListener(domIDs.developerMenuButton, 'click', async (e) => {
        e.preventDefault();
        if (mode.app !== 'dev') {
            if (!mode.quiet)
                console.error('Cannot access developer menu in production mode.');
            return;
        }
        uiElements.developerMenu?.classList.remove('hidden');
        uiElements.developerMenu?.setAttribute('aria-hidden', 'false');
    });
    addEventListener(domIDs.generateButton, 'click', async (e) => {
        e.preventDefault();
        // captures data from UI at the time the Generate Button is clicked
        const { paletteType, numBoxes, enableAlpha, limitDarkness, limitGrayness, limitLightness } = domUtils.pullParamsFromUI();
        if (mode.verbose)
            console.log('Generate Button click event: Retrieved parameters from UI.');
        let customColor = (await idb.getCustomColor());
        if (!customColor) {
            customColor = utils.random.hsl(true);
        }
        else {
            if (mode.debug)
                console.log(`User-generated Custom Color found in IndexedDB: ${JSON.stringify(customColor)}`);
        }
        const paletteOptions = {
            paletteType,
            numBoxes,
            customColor: core.base.clone(customColor),
            enableAlpha,
            limitDarkness,
            limitGrayness,
            limitLightness
        };
        if (mode.debug) {
            console.log(`paletteOptions object data:`);
            console.log(`paletteType: ${paletteOptions.paletteType}`);
            console.log(`numBoxes: ${paletteOptions.numBoxes}`);
            console.log(`customColor: ${JSON.stringify(paletteOptions.customColor)}`);
            console.log(`enableAlpha: ${paletteOptions.enableAlpha}`);
            console.log(`limitDarkness: ${paletteOptions.limitDarkness}`);
            console.log(`limitGrayness: ${paletteOptions.limitGrayness}`);
            console.log(`limitLightness: ${paletteOptions.limitLightness}`);
        }
        await start.genPalette(paletteOptions);
    });
    addEventListener(domIDs.helpMenuButton, 'click', async (e) => {
        e.preventDefault();
        uiElements.helpMenu?.classList.remove('hidden');
        uiElements.helpMenu?.setAttribute('aria-hidden', 'false');
    });
    addEventListener(domIDs.historyMenuButton, 'click', async (e) => {
        e.preventDefault();
        uiElements.historyMenu?.classList.remove('hidden');
        uiElements.historyMenu?.setAttribute('aria-hidden', 'false');
    });
    addEventListener(domIDs.resetDatabaseButton, 'click', async (e) => {
        e.preventDefault();
        const confirmReset = confirm('Are you sure you want to reset the database?');
        if (!confirmReset)
            return;
        try {
            IDBManager.getInstance().resetDatabase();
            if (!mode.quiet)
                console.log('Database has been successfully reset.');
            alert('IndexedDB successfully reset!');
        }
        catch (error) {
            if (mode.errorLogs)
                console.error(`Failed to reset database: ${error}`);
            alert('Failed to reset database.');
        }
    });
    addEventListener(domIDs.resetPaletteIDButton, 'click', async (e) => {
        e.preventDefault();
        if (mode.app !== 'dev') {
            if (!mode.quiet)
                console.error('Cannot reset palette ID in production mode.');
            return;
        }
        const confirmReset = confirm('Are you sure you want to reset the palette ID?');
        if (!confirmReset)
            return;
        try {
            await idb.resetPaletteID();
            if (!mode.quiet)
                console.log('Palette ID has been successfully reset.');
            alert('Palette ID reset successfully!');
        }
        catch (error) {
            if (mode.errorLogs)
                console.error(`Failed to reset palette ID: ${error}`);
            alert('Failed to reset palette ID.');
        }
    });
    addEventListener(domIDs.saturateButton, 'click', async (e) => {
        e.preventDefault();
        const selectedColor = uiElements.selectedColorOption
            ? parseInt(uiElements.selectedColorOption.value, 10)
            : 0;
        domUtils.saturateColor(selectedColor);
    });
    window.addEventListener('click', async (e) => {
        if (uiElements.advancedMenu)
            if (e.target === uiElements.advancedMenu) {
                uiElements.advancedMenu.classList.add('hidden');
                uiElements.advancedMenu.setAttribute('aria-hidden', 'true');
            }
    });
    window.addEventListener('click', async (e) => {
        if (uiElements.customColorMenu)
            if (e.target === uiElements.customColorMenu) {
                uiElements.customColorMenu.classList.add('hidden');
                uiElements.customColorMenu.setAttribute('aria-hidden', 'true');
            }
    });
    window.addEventListener('click', async (e) => {
        if (uiElements.developerMenu)
            if (e.target === uiElements.developerMenu) {
                uiElements.developerMenu.classList.add('hidden');
                uiElements.developerMenu.setAttribute('aria-hidden', 'true');
            }
    });
    window.addEventListener('click', async (e) => {
        if (uiElements.helpMenu)
            if (e.target === uiElements.helpMenu) {
                uiElements.helpMenu.classList.add('hidden');
                uiElements.helpMenu.setAttribute('aria-hidden', 'true');
            }
    });
    window.addEventListener('click', async (e) => {
        if (uiElements.historyMenu)
            if (e.target === uiElements.historyMenu) {
                uiElements.historyMenu.classList.add('hidden');
                uiElements.historyMenu.setAttribute('aria-hidden', 'true');
            }
    });
}
export const base = {
    addEventListener,
    handlePaletteGen,
    initializeEventListeners
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kb20vZXZlbnRzL2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBRy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFL0MsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztBQUMxRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDbkMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBRTVDLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVyQyxTQUFTLGdCQUFnQixDQUN4QixFQUFVLEVBQ1YsU0FBWSxFQUNaLFFBQThDO0lBRTlDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFNUMsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0MsQ0FBQztTQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxJQUFJLENB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O1FBQ3hELElBQUksVUFBVSxDQUFDLFdBQVc7WUFDekIsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDekMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMvQyxVQUFVLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUQsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBdUI7SUFDdkMsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQix3QkFBd0I7Q0FDeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGU6IHNyYy9kb20vZXZlbnRzL2Jhc2UuanNcblxuaW1wb3J0IHsgRE9NRXZlbnRzSW50ZXJmYWNlLCBIU0wsIFBhbGV0dGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgY29yZSwgc3VwZXJVdGlscywgdXRpbHMgfSBmcm9tICcuLi8uLi9jb21tb24vaW5kZXguanMnO1xuaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uLy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgZG9tVXRpbHMgfSBmcm9tICcuLi91dGlscy9pbmRleC5qcyc7XG5pbXBvcnQgeyBJREJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vaWRiL2luZGV4LmpzJztcbmltcG9ydCB7IG1vZGUgfSBmcm9tICcuLi8uLi9kYXRhL21vZGUvaW5kZXguanMnO1xuaW1wb3J0IHsgc3RhcnQgfSBmcm9tICcuLi8uLi9wYWxldHRlL2luZGV4LmpzJztcblxuY29uc3QgYnV0dG9uRGVib3VuY2UgPSBkYXRhLmNvbnN0cy5kZWJvdW5jZS5idXR0b24gfHwgMzAwO1xuY29uc3QgZG9tSURzID0gZGF0YS5jb25zdHMuZG9tLmlkcztcbmNvbnN0IHVpRWxlbWVudHMgPSBkYXRhLmNvbnN0cy5kb20uZWxlbWVudHM7XG5cbmNvbnN0IGlkYiA9IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcD4oXG5cdGlkOiBzdHJpbmcsXG5cdGV2ZW50VHlwZTogSyxcblx0Y2FsbGJhY2s6IChldjogSFRNTEVsZW1lbnRFdmVudE1hcFtLXSkgPT4gdm9pZFxuKTogdm9pZCB7XG5cdGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cblx0aWYgKGVsZW1lbnQpIHtcblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjayk7XG5cdH0gZWxzZSBpZiAobW9kZS53YXJuTG9ncykge1xuXHRcdGlmICgobW9kZS5kZWJ1ZyB8fCBtb2RlLnZlcmJvc2UpICYmIG1vZGUud2FybkxvZ3MpXG5cdFx0XHRjb25zb2xlLndhcm4oYEVsZW1lbnQgd2l0aCBpZCBcIiR7aWR9XCIgbm90IGZvdW5kLmApO1xuXHR9XG59XG5cbmNvbnN0IGhhbmRsZVBhbGV0dGVHZW4gPSBjb3JlLmJhc2UuZGVib3VuY2UoKCkgPT4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IHBhcmFtcyA9IHN1cGVyVXRpbHMuZG9tLmdldEdlbkJ1dHRvbkFyZ3MoKTtcblxuXHRcdGlmICghcGFyYW1zKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgZ2VuZXJhdGVCdXR0b24gcGFyYW1ldGVycycpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3Qge1xuXHRcdFx0bnVtQm94ZXMsXG5cdFx0XHRjdXN0b21Db2xvcixcblx0XHRcdHBhbGV0dGVUeXBlLFxuXHRcdFx0ZW5hYmxlQWxwaGEsXG5cdFx0XHRsaW1pdERhcmtuZXNzLFxuXHRcdFx0bGltaXRHcmF5bmVzcyxcblx0XHRcdGxpbWl0TGlnaHRuZXNzXG5cdFx0fSA9IHBhcmFtcztcblxuXHRcdGlmICghcGFsZXR0ZVR5cGUgfHwgIW51bUJveGVzKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdwYWxldHRlVHlwZSBhbmQvb3IgbnVtQm94ZXMgYXJlIHVuZGVmaW5lZCcpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3B0aW9uczogUGFsZXR0ZU9wdGlvbnMgPSB7XG5cdFx0XHRudW1Cb3hlcyxcblx0XHRcdGN1c3RvbUNvbG9yLFxuXHRcdFx0cGFsZXR0ZVR5cGUsXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRsaW1pdEdyYXluZXNzLFxuXHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHR9O1xuXG5cdFx0c3RhcnQuZ2VuUGFsZXR0ZShvcHRpb25zKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gaGFuZGxlIGdlbmVyYXRlIGJ1dHRvbiBjbGljazogJHtlcnJvcn1gKTtcblx0fVxufSwgYnV0dG9uRGVib3VuY2UpO1xuXG5mdW5jdGlvbiBpbml0aWFsaXplRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG5cdGNvbnN0IGFkZENvbnZlcnNpb25MaXN0ZW5lciA9IChpZDogc3RyaW5nLCBjb2xvclNwYWNlOiBzdHJpbmcpID0+IHtcblx0XHRjb25zdCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXG5cdFx0aWYgKGJ1dHRvbikge1xuXHRcdFx0aWYgKGNvcmUuZ3VhcmRzLmlzQ29sb3JTcGFjZShjb2xvclNwYWNlKSkge1xuXHRcdFx0XHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PlxuXHRcdFx0XHRcdHN1cGVyVXRpbHMuZG9tLnN3aXRjaENvbG9yU3BhY2UoY29sb3JTcGFjZSlcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG1vZGUud2FybkxvZ3MpXG5cdFx0XHRcdGNvbnNvbGUud2FybihgRWxlbWVudCB3aXRoIGlkIFwiJHtpZH1cIiBub3QgZm91bmQuYCk7XG5cdFx0fVxuXHR9O1xuXG5cdGFkZENvbnZlcnNpb25MaXN0ZW5lcignc2hvdy1hcy1jbXlrLWJ1dHRvbicsICdjbXlrJyk7XG5cdGFkZENvbnZlcnNpb25MaXN0ZW5lcignc2hvdy1hcy1oZXgtYnV0dG9uJywgJ2hleCcpO1xuXHRhZGRDb252ZXJzaW9uTGlzdGVuZXIoJ3Nob3ctYXMtaHNsLWJ1dHRvbicsICdoc2wnKTtcblx0YWRkQ29udmVyc2lvbkxpc3RlbmVyKCdzaG93LWFzLWhzdi1idXR0b24nLCAnaHN2Jyk7XG5cdGFkZENvbnZlcnNpb25MaXN0ZW5lcignc2hvdy1hcy1sYWItYnV0dG9uJywgJ2xhYicpO1xuXHRhZGRDb252ZXJzaW9uTGlzdGVuZXIoJ3Nob3ctYXMtcmdiLWJ1dHRvbicsICdyZ2InKTtcblxuXHRhZGRFdmVudExpc3RlbmVyKFxuXHRcdGRvbUlEcy5hZHZhbmNlZE1lbnVCdXR0b24sXG5cdFx0J2NsaWNrJyxcblx0XHRhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR1aUVsZW1lbnRzLmFkdmFuY2VkTWVudT8uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG5cdFx0XHR1aUVsZW1lbnRzLmFkdmFuY2VkTWVudT8uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXHRcdH1cblx0KTtcblxuXHRhZGRFdmVudExpc3RlbmVyKFxuXHRcdGRvbUlEcy5hcHBseUN1c3RvbUNvbG9yQnV0dG9uLFxuXHRcdCdjbGljaycsXG5cdFx0YXN5bmMgKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Y29uc3QgY3VzdG9tSFNMQ29sb3IgPSBkb21VdGlscy5hcHBseUN1c3RvbUNvbG9yKCk7XG5cdFx0XHRjb25zdCBjdXN0b21IU0xDb2xvckNsb25lID0gY29yZS5iYXNlLmNsb25lKGN1c3RvbUhTTENvbG9yKTtcblxuXHRcdFx0YXdhaXQgaWRiLnNhdmVEYXRhKFxuXHRcdFx0XHQnY3VzdG9tQ29sb3InLFxuXHRcdFx0XHQnYXBwU2V0dGluZ3MnLFxuXHRcdFx0XHRjdXN0b21IU0xDb2xvckNsb25lXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAoIW1vZGUucXVpZXQpIGNvbnNvbGUubG9nKCdDdXN0b20gY29sb3Igc2F2ZWQgdG8gSW5kZXhlZERCJyk7XG5cblx0XHRcdC8vICpERVYtTk9URSogdW5maW5pc2hlZCwgSSB0aGluaz8gRG91YmxlLWNoZWNrIHRoaXNcblx0XHR9XG5cdCk7XG5cblx0YWRkRXZlbnRMaXN0ZW5lcihcblx0XHRkb21JRHMuY2xlYXJDdXN0b21Db2xvckJ1dHRvbixcblx0XHQnY2xpY2snLFxuXHRcdGFzeW5jIChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHVpRWxlbWVudHMuY3VzdG9tQ29sb3JJbnB1dCEudmFsdWUgPSAnI2ZmMDAwMCc7XG5cblx0XHRcdGlmICghbW9kZS5xdWlldCkgY29uc29sZS5sb2coJ0N1c3RvbSBjb2xvciBjbGVhcmVkJyk7XG5cdFx0fVxuXHQpO1xuXG5cdGFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0ZG9tSURzLmN1c3RvbUNvbG9yTWVudUJ1dHRvbixcblx0XHQnY2xpY2snLFxuXHRcdGFzeW5jIChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHVpRWxlbWVudHMuY3VzdG9tQ29sb3JNZW51Py5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcblx0XHRcdHVpRWxlbWVudHMuY3VzdG9tQ29sb3JNZW51Py5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblx0XHR9XG5cdCk7XG5cblx0aWYgKCF1aUVsZW1lbnRzLmN1c3RvbUNvbG9ySW5wdXQpXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDdXN0b20gY29sb3IgaW5wdXQgZWxlbWVudCBub3QgZm91bmQnKTtcblxuXHR1aUVsZW1lbnRzLmN1c3RvbUNvbG9ySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG5cdFx0aWYgKCF1aUVsZW1lbnRzLmN1c3RvbUNvbG9yRGlzcGxheSlcblx0XHRcdHRocm93IG5ldyBFcnJvcignQ3VzdG9tIGNvbG9yIGRpc3BsYXkgZWxlbWVudCBub3QgZm91bmQnKTtcblxuXHRcdHVpRWxlbWVudHMuY3VzdG9tQ29sb3JEaXNwbGF5LnRleHRDb250ZW50ID1cblx0XHRcdHVpRWxlbWVudHMuY3VzdG9tQ29sb3JJbnB1dCEudmFsdWU7XG5cdH0pO1xuXG5cdGFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0ZG9tSURzLmRlbGV0ZURhdGFiYXNlQnV0dG9uLFxuXHRcdCdjbGljaycsXG5cdFx0YXN5bmMgKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gb25seSBhbGxvdyBpZiBhcHBsaWNhdGlvbiBpcyBpbiBkZXZlbG9wbWVudCBtb2RlXG5cdFx0XHRpZiAobW9kZS5hcHAgIT09ICdkZXYnKSB7XG5cdFx0XHRcdGlmIChtb2RlLmluZm9Mb2dzKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5pbmZvKCdDYW5ub3QgZGVsZXRlIGRhdGFiYXNlIGluIHByb2R1Y3Rpb24gbW9kZS4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY29uZmlybURlbGV0ZSA9IGNvbmZpcm0oXG5cdFx0XHRcdCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBlbnRpcmUgZGF0YWJhc2U/IFRoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmUuJ1xuXHRcdFx0KTtcblxuXHRcdFx0aWYgKCFjb25maXJtRGVsZXRlKSByZXR1cm47XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGF3YWl0IElEQk1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5kZWxldGVEYXRhYmFzZSgpO1xuXG5cdFx0XHRcdGFsZXJ0KCdEYXRhYmFzZSBkZWxldGVkIHN1Y2Nlc3NmdWxseSEnKTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZGVsZXRlIGRhdGFiYXNlOiAke2Vycm9yfWApO1xuXHRcdFx0XHRhbGVydCgnRmFpbGVkIHRvIGRlbGV0ZSBkYXRhYmFzZS4nKTtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG5cblx0YWRkRXZlbnRMaXN0ZW5lcihcblx0XHRkb21JRHMuZGVzYXR1cmF0ZUJ1dHRvbixcblx0XHQnY2xpY2snLFxuXHRcdGFzeW5jIChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGNvbnN0IHNlbGVjdGVkQ29sb3IgPSB1aUVsZW1lbnRzLnNlbGVjdGVkQ29sb3JPcHRpb25cblx0XHRcdFx0PyBwYXJzZUludCh1aUVsZW1lbnRzLnNlbGVjdGVkQ29sb3JPcHRpb24udmFsdWUsIDEwKVxuXHRcdFx0XHQ6IDA7XG5cblx0XHRcdGlmICghbW9kZS5xdWlldCkgY29uc29sZS5sb2coJ2Rlc2F0dXJhdGVCdXR0b24gY2xpY2tlZCcpO1xuXG5cdFx0XHRkb21VdGlscy5kZXNhdHVyYXRlQ29sb3Ioc2VsZWN0ZWRDb2xvcik7XG5cdFx0fVxuXHQpO1xuXG5cdGFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0ZG9tSURzLmRldmVsb3Blck1lbnVCdXR0b24sXG5cdFx0J2NsaWNrJyxcblx0XHRhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRpZiAobW9kZS5hcHAgIT09ICdkZXYnKSB7XG5cdFx0XHRcdGlmICghbW9kZS5xdWlldClcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRcdFx0J0Nhbm5vdCBhY2Nlc3MgZGV2ZWxvcGVyIG1lbnUgaW4gcHJvZHVjdGlvbiBtb2RlLidcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dWlFbGVtZW50cy5kZXZlbG9wZXJNZW51Py5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcblx0XHRcdHVpRWxlbWVudHMuZGV2ZWxvcGVyTWVudT8uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXHRcdH1cblx0KTtcblxuXHRhZGRFdmVudExpc3RlbmVyKGRvbUlEcy5nZW5lcmF0ZUJ1dHRvbiwgJ2NsaWNrJywgYXN5bmMgKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHQvLyBjYXB0dXJlcyBkYXRhIGZyb20gVUkgYXQgdGhlIHRpbWUgdGhlIEdlbmVyYXRlIEJ1dHRvbiBpcyBjbGlja2VkXG5cdFx0Y29uc3Qge1xuXHRcdFx0cGFsZXR0ZVR5cGUsXG5cdFx0XHRudW1Cb3hlcyxcblx0XHRcdGVuYWJsZUFscGhhLFxuXHRcdFx0bGltaXREYXJrbmVzcyxcblx0XHRcdGxpbWl0R3JheW5lc3MsXG5cdFx0XHRsaW1pdExpZ2h0bmVzc1xuXHRcdH0gPSBkb21VdGlscy5wdWxsUGFyYW1zRnJvbVVJKCk7XG5cblx0XHRpZiAobW9kZS52ZXJib3NlKVxuXHRcdFx0Y29uc29sZS5sb2coXG5cdFx0XHRcdCdHZW5lcmF0ZSBCdXR0b24gY2xpY2sgZXZlbnQ6IFJldHJpZXZlZCBwYXJhbWV0ZXJzIGZyb20gVUkuJ1xuXHRcdFx0KTtcblxuXHRcdGxldCBjdXN0b21Db2xvciA9IChhd2FpdCBpZGIuZ2V0Q3VzdG9tQ29sb3IoKSkgYXMgSFNMIHwgbnVsbDtcblxuXHRcdGlmICghY3VzdG9tQ29sb3IpIHtcblx0XHRcdGN1c3RvbUNvbG9yID0gdXRpbHMucmFuZG9tLmhzbCh0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG1vZGUuZGVidWcpXG5cdFx0XHRcdGNvbnNvbGUubG9nKFxuXHRcdFx0XHRcdGBVc2VyLWdlbmVyYXRlZCBDdXN0b20gQ29sb3IgZm91bmQgaW4gSW5kZXhlZERCOiAke0pTT04uc3RyaW5naWZ5KFxuXHRcdFx0XHRcdFx0Y3VzdG9tQ29sb3Jcblx0XHRcdFx0XHQpfWBcblx0XHRcdFx0KTtcblx0XHR9XG5cblx0XHRjb25zdCBwYWxldHRlT3B0aW9uczogUGFsZXR0ZU9wdGlvbnMgPSB7XG5cdFx0XHRwYWxldHRlVHlwZSxcblx0XHRcdG51bUJveGVzLFxuXHRcdFx0Y3VzdG9tQ29sb3I6IGNvcmUuYmFzZS5jbG9uZShjdXN0b21Db2xvciksXG5cdFx0XHRlbmFibGVBbHBoYSxcblx0XHRcdGxpbWl0RGFya25lc3MsXG5cdFx0XHRsaW1pdEdyYXluZXNzLFxuXHRcdFx0bGltaXRMaWdodG5lc3Ncblx0XHR9O1xuXG5cdFx0aWYgKG1vZGUuZGVidWcpIHtcblx0XHRcdGNvbnNvbGUubG9nKGBwYWxldHRlT3B0aW9ucyBvYmplY3QgZGF0YTpgKTtcblx0XHRcdGNvbnNvbGUubG9nKGBwYWxldHRlVHlwZTogJHtwYWxldHRlT3B0aW9ucy5wYWxldHRlVHlwZX1gKTtcblx0XHRcdGNvbnNvbGUubG9nKGBudW1Cb3hlczogJHtwYWxldHRlT3B0aW9ucy5udW1Cb3hlc31gKTtcblx0XHRcdGNvbnNvbGUubG9nKFxuXHRcdFx0XHRgY3VzdG9tQ29sb3I6ICR7SlNPTi5zdHJpbmdpZnkocGFsZXR0ZU9wdGlvbnMuY3VzdG9tQ29sb3IpfWBcblx0XHRcdCk7XG5cdFx0XHRjb25zb2xlLmxvZyhgZW5hYmxlQWxwaGE6ICR7cGFsZXR0ZU9wdGlvbnMuZW5hYmxlQWxwaGF9YCk7XG5cdFx0XHRjb25zb2xlLmxvZyhgbGltaXREYXJrbmVzczogJHtwYWxldHRlT3B0aW9ucy5saW1pdERhcmtuZXNzfWApO1xuXHRcdFx0Y29uc29sZS5sb2coYGxpbWl0R3JheW5lc3M6ICR7cGFsZXR0ZU9wdGlvbnMubGltaXRHcmF5bmVzc31gKTtcblx0XHRcdGNvbnNvbGUubG9nKGBsaW1pdExpZ2h0bmVzczogJHtwYWxldHRlT3B0aW9ucy5saW1pdExpZ2h0bmVzc31gKTtcblx0XHR9XG5cblx0XHRhd2FpdCBzdGFydC5nZW5QYWxldHRlKHBhbGV0dGVPcHRpb25zKTtcblx0fSk7XG5cblx0YWRkRXZlbnRMaXN0ZW5lcihkb21JRHMuaGVscE1lbnVCdXR0b24sICdjbGljaycsIGFzeW5jIChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0dWlFbGVtZW50cy5oZWxwTWVudT8uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG5cdFx0dWlFbGVtZW50cy5oZWxwTWVudT8uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXHR9KTtcblxuXHRhZGRFdmVudExpc3RlbmVyKFxuXHRcdGRvbUlEcy5oaXN0b3J5TWVudUJ1dHRvbixcblx0XHQnY2xpY2snLFxuXHRcdGFzeW5jIChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHVpRWxlbWVudHMuaGlzdG9yeU1lbnU/LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXHRcdFx0dWlFbGVtZW50cy5oaXN0b3J5TWVudT8uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXHRcdH1cblx0KTtcblxuXHRhZGRFdmVudExpc3RlbmVyKFxuXHRcdGRvbUlEcy5yZXNldERhdGFiYXNlQnV0dG9uLFxuXHRcdCdjbGljaycsXG5cdFx0YXN5bmMgKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Y29uc3QgY29uZmlybVJlc2V0ID0gY29uZmlybShcblx0XHRcdFx0J0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZXNldCB0aGUgZGF0YWJhc2U/J1xuXHRcdFx0KTtcblxuXHRcdFx0aWYgKCFjb25maXJtUmVzZXQpIHJldHVybjtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0SURCTWFuYWdlci5nZXRJbnN0YW5jZSgpLnJlc2V0RGF0YWJhc2UoKTtcblxuXHRcdFx0XHRpZiAoIW1vZGUucXVpZXQpXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ0RhdGFiYXNlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSByZXNldC4nKTtcblxuXHRcdFx0XHRhbGVydCgnSW5kZXhlZERCIHN1Y2Nlc3NmdWxseSByZXNldCEnKTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGlmIChtb2RlLmVycm9yTG9ncylcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcmVzZXQgZGF0YWJhc2U6ICR7ZXJyb3J9YCk7XG5cblx0XHRcdFx0YWxlcnQoJ0ZhaWxlZCB0byByZXNldCBkYXRhYmFzZS4nKTtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG5cblx0YWRkRXZlbnRMaXN0ZW5lcihcblx0XHRkb21JRHMucmVzZXRQYWxldHRlSURCdXR0b24sXG5cdFx0J2NsaWNrJyxcblx0XHRhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRpZiAobW9kZS5hcHAgIT09ICdkZXYnKSB7XG5cdFx0XHRcdGlmICghbW9kZS5xdWlldClcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRcdFx0J0Nhbm5vdCByZXNldCBwYWxldHRlIElEIGluIHByb2R1Y3Rpb24gbW9kZS4nXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNvbmZpcm1SZXNldCA9IGNvbmZpcm0oXG5cdFx0XHRcdCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVzZXQgdGhlIHBhbGV0dGUgSUQ/J1xuXHRcdFx0KTtcblxuXHRcdFx0aWYgKCFjb25maXJtUmVzZXQpIHJldHVybjtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YXdhaXQgaWRiLnJlc2V0UGFsZXR0ZUlEKCk7XG5cblx0XHRcdFx0aWYgKCFtb2RlLnF1aWV0KVxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdQYWxldHRlIElEIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSByZXNldC4nKTtcblxuXHRcdFx0XHRhbGVydCgnUGFsZXR0ZSBJRCByZXNldCBzdWNjZXNzZnVsbHkhJyk7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRpZiAobW9kZS5lcnJvckxvZ3MpXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJlc2V0IHBhbGV0dGUgSUQ6ICR7ZXJyb3J9YCk7XG5cblx0XHRcdFx0YWxlcnQoJ0ZhaWxlZCB0byByZXNldCBwYWxldHRlIElELicpO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcblxuXHRhZGRFdmVudExpc3RlbmVyKGRvbUlEcy5zYXR1cmF0ZUJ1dHRvbiwgJ2NsaWNrJywgYXN5bmMgKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRjb25zdCBzZWxlY3RlZENvbG9yID0gdWlFbGVtZW50cy5zZWxlY3RlZENvbG9yT3B0aW9uXG5cdFx0XHQ/IHBhcnNlSW50KHVpRWxlbWVudHMuc2VsZWN0ZWRDb2xvck9wdGlvbi52YWx1ZSwgMTApXG5cdFx0XHQ6IDA7XG5cblx0XHRkb21VdGlscy5zYXR1cmF0ZUNvbG9yKHNlbGVjdGVkQ29sb3IpO1xuXHR9KTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdGlmICh1aUVsZW1lbnRzLmFkdmFuY2VkTWVudSlcblx0XHRcdGlmIChlLnRhcmdldCA9PT0gdWlFbGVtZW50cy5hZHZhbmNlZE1lbnUpIHtcblx0XHRcdFx0dWlFbGVtZW50cy5hZHZhbmNlZE1lbnUuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG5cdFx0XHRcdHVpRWxlbWVudHMuYWR2YW5jZWRNZW51LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXHRcdFx0fVxuXHR9KTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdGlmICh1aUVsZW1lbnRzLmN1c3RvbUNvbG9yTWVudSlcblx0XHRcdGlmIChlLnRhcmdldCA9PT0gdWlFbGVtZW50cy5jdXN0b21Db2xvck1lbnUpIHtcblx0XHRcdFx0dWlFbGVtZW50cy5jdXN0b21Db2xvck1lbnUuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG5cdFx0XHRcdHVpRWxlbWVudHMuY3VzdG9tQ29sb3JNZW51LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXHRcdFx0fVxuXHR9KTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdGlmICh1aUVsZW1lbnRzLmRldmVsb3Blck1lbnUpXG5cdFx0XHRpZiAoZS50YXJnZXQgPT09IHVpRWxlbWVudHMuZGV2ZWxvcGVyTWVudSkge1xuXHRcdFx0XHR1aUVsZW1lbnRzLmRldmVsb3Blck1lbnUuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG5cdFx0XHRcdHVpRWxlbWVudHMuZGV2ZWxvcGVyTWVudS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblx0XHRcdH1cblx0fSk7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRpZiAodWlFbGVtZW50cy5oZWxwTWVudSlcblx0XHRcdGlmIChlLnRhcmdldCA9PT0gdWlFbGVtZW50cy5oZWxwTWVudSkge1xuXHRcdFx0XHR1aUVsZW1lbnRzLmhlbHBNZW51LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuXHRcdFx0XHR1aUVsZW1lbnRzLmhlbHBNZW51LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXHRcdFx0fVxuXHR9KTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdGlmICh1aUVsZW1lbnRzLmhpc3RvcnlNZW51KVxuXHRcdFx0aWYgKGUudGFyZ2V0ID09PSB1aUVsZW1lbnRzLmhpc3RvcnlNZW51KSB7XG5cdFx0XHRcdHVpRWxlbWVudHMuaGlzdG9yeU1lbnUuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG5cdFx0XHRcdHVpRWxlbWVudHMuaGlzdG9yeU1lbnUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cdFx0XHR9XG5cdH0pO1xufVxuXG5leHBvcnQgY29uc3QgYmFzZTogRE9NRXZlbnRzSW50ZXJmYWNlID0ge1xuXHRhZGRFdmVudExpc3RlbmVyLFxuXHRoYW5kbGVQYWxldHRlR2VuLFxuXHRpbml0aWFsaXplRXZlbnRMaXN0ZW5lcnNcbn07XG4iXX0=