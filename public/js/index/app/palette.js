// File: src/index/app/palette.js
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbmRleC9hcHAvcGFsZXR0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvaW5kZXgvYXBwL3BhbGV0dGUuanNcblxuaW1wb3J0IHtcblx0Q29sb3JTcGFjZSxcblx0SFNMLFxuXHRQYWxldHRlLFxuXHRQYWxldHRlSXRlbSxcblx0UGFsZXR0ZU9wdGlvbnNcbn0gZnJvbSAnLi4vaW5kZXguanMnO1xuXG4vLyAqKioqKioqKiBTT1JUIE1FICoqKioqKioqXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFsZXR0ZURlc2VyaWFsaXplRm5JbnRlcmZhY2Uge1xuXHRmcm9tQ1NTKGRhdGE6IHN0cmluZyk6IFBhbGV0dGU7XG5cdGZyb21KU09OKGRhdGE6IHN0cmluZyk6IFBhbGV0dGU7XG5cdGZyb21YTUwoZGF0YTogc3RyaW5nKTogUGFsZXR0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlU2VyaWFsaXplRm5JbnRlcmZhY2Uge1xuXHR0b0NTUyhwYWxldHRlOiBQYWxldHRlLCBjb2xvclNwYWNlOiBDb2xvclNwYWNlKTogc3RyaW5nO1xuXHR0b0pTT04ocGFsZXR0ZTogUGFsZXR0ZSk6IHN0cmluZztcblx0dG9YTUwocGFsZXR0ZTogUGFsZXR0ZSk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlRm5JT0ludGVyZmFjZSB7XG5cdGRlc2VyaWFsaXplOiBQYWxldHRlRGVzZXJpYWxpemVGbkludGVyZmFjZTtcblx0c2VyaWFsaXplOiBQYWxldHRlU2VyaWFsaXplRm5JbnRlcmZhY2U7XG59XG5cbi8vICoqKioqKioqIENPTU1PTiBVVElMSVRJRVMgKioqKioqKipcblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlQ29tbW9uX0hlbHBlcnNfTGltaXRzIHtcblx0aXNDb2xvckluQm91bmRzKGhzbDogSFNMKTogYm9vbGVhbjtcblx0aXNUb29EYXJrKGhzbDogSFNMKTogYm9vbGVhbjtcblx0aXNUb29HcmF5KGhzbDogSFNMKTogYm9vbGVhbjtcblx0aXNUb29MaWdodChoc2w6IEhTTCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFsZXR0ZUNvbW1vbl9IZWxwZXJzX1VwZGF0ZSB7XG5cdGNvbG9yQm94KGNvbG9yOiBIU0wsIGluZGV4OiBudW1iZXIpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhbGV0dGVDb21tb25fU3VwZXJVdGlsc19DcmVhdGUge1xuXHRiYXNlQ29sb3IoY3VzdG9tQ29sb3I6IEhTTCB8IG51bGwsIGVuYWJsZUFscGhhOiBib29sZWFuKTogSFNMO1xuXHRwYWxldHRlSXRlbShjb2xvcjogSFNMLCBlbmFibGVBbHBoYTogYm9vbGVhbik6IFByb21pc2U8UGFsZXR0ZUl0ZW0+O1xuXHRwYWxldHRlSXRlbUFycmF5KFxuXHRcdGJhc2VDb2xvcjogSFNMLFxuXHRcdGh1ZXM6IG51bWJlcltdLFxuXHRcdGVuYWJsZUFscGhhOiBib29sZWFuLFxuXHRcdGxpbWl0RGFyazogYm9vbGVhbixcblx0XHRsaW1pdEdyYXk6IGJvb2xlYW4sXG5cdFx0bGltaXRMaWdodDogYm9vbGVhblxuXHQpOiBQcm9taXNlPFBhbGV0dGVJdGVtW10+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhbGV0dGVDb21tb25fU3VwZXJVdGlsc19HZW5IdWVzIHtcblx0YW5hbG9nb3VzKGNvbG9yOiBIU0wsIG51bUJveGVzOiBudW1iZXIpOiBudW1iZXJbXTtcblx0ZGlhZGljKGJhc2VIdWU6IG51bWJlcik6IG51bWJlcltdO1xuXHRoZXhhZGljKGNvbG9yOiBIU0wpOiBudW1iZXJbXTtcblx0c3BsaXRDb21wbGVtZW50YXJ5KGJhc2VIdWU6IG51bWJlcik6IG51bWJlcltdO1xuXHR0ZXRyYWRpYyhiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXTtcblx0dHJpYWRpYyhiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlQ29tbW9uX1V0aWxzX0FkanVzdCB7XG5cdHNsKGNvbG9yOiBIU0wpOiBIU0w7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFsZXR0ZUNvbW1vbl9VdGlsc19Qcm9iYWJpbGl0eSB7XG5cdGdldFdlaWdodGVkUmFuZG9tSW50ZXJ2YWwoKTogbnVtYmVyO1xufVxuXG4vLyAqKioqKioqKiBIRUxQRVJTLCBVVElMUywgU1VQRVJVVElMUyBCVU5ETEVTICoqKioqKioqXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFsZXR0ZUNvbW1vbl9IZWxwZXJzIHtcblx0bGltaXRzOiBQYWxldHRlQ29tbW9uX0hlbHBlcnNfTGltaXRzO1xuXHR1cGRhdGU6IFBhbGV0dGVDb21tb25fSGVscGVyc19VcGRhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFsZXR0ZUNvbW1vbl9TdXBlclV0aWxzIHtcblx0Y3JlYXRlOiBQYWxldHRlQ29tbW9uX1N1cGVyVXRpbHNfQ3JlYXRlO1xuXHRnZW5IdWVzOiBQYWxldHRlQ29tbW9uX1N1cGVyVXRpbHNfR2VuSHVlcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlQ29tbW9uX1V0aWxzIHtcblx0YWRqdXN0OiBQYWxldHRlQ29tbW9uX1V0aWxzX0FkanVzdDtcblx0cHJvYmFiaWxpdHk6IFBhbGV0dGVDb21tb25fVXRpbHNfUHJvYmFiaWxpdHk7XG59XG5cbi8vICoqKioqKioqIENPTU1PTiBVVElMUyBCVU5ETEUgKioqKioqKipcblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlQ29tbW9uIHtcblx0aGVscGVyczogUGFsZXR0ZUNvbW1vbl9IZWxwZXJzO1xuXHRzdXBlclV0aWxzOiBQYWxldHRlQ29tbW9uX1N1cGVyVXRpbHM7XG5cdHV0aWxzOiBQYWxldHRlQ29tbW9uX1V0aWxzO1xufVxuXG4vLyAqKioqKioqKiBNQUlOIE1PRFVMRVMgKioqKioqKipcblxuZXhwb3J0IGludGVyZmFjZSBHZW5QYWxldHRlQXJncyB7XG5cdG51bUJveGVzOiBudW1iZXI7XG5cdGN1c3RvbUNvbG9yOiBIU0wgfCBudWxsO1xuXHRlbmFibGVBbHBoYTogYm9vbGVhbjtcblx0bGltaXREYXJrOiBib29sZWFuO1xuXHRsaW1pdEdyYXk6IGJvb2xlYW47XG5cdGxpbWl0TGlnaHQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuUGFsZXR0ZUZuSW50ZXJmYWNlIHtcblx0YW5hbG9nb3VzKGFyZ3M6IEdlblBhbGV0dGVBcmdzKTogUHJvbWlzZTxQYWxldHRlPjtcblx0Y29tcGxlbWVudGFyeShhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT47XG5cdGRpYWRpYyhhcmdzOiBHZW5QYWxldHRlQXJncyk6IFByb21pc2U8UGFsZXR0ZT47XG5cdGhleGFkaWMoYXJnczogR2VuUGFsZXR0ZUFyZ3MpOiBQcm9taXNlPFBhbGV0dGU+O1xuXHRtb25vY2hyb21hdGljKGFyZ3M6IEdlblBhbGV0dGVBcmdzKTogUHJvbWlzZTxQYWxldHRlPjtcblx0cmFuZG9tKGFyZ3M6IEdlblBhbGV0dGVBcmdzKTogUHJvbWlzZTxQYWxldHRlPjtcblx0c3BsaXRDb21wbGVtZW50YXJ5KGFyZ3M6IEdlblBhbGV0dGVBcmdzKTogUHJvbWlzZTxQYWxldHRlPjtcblx0dGV0cmFkaWMoYXJnczogR2VuUGFsZXR0ZUFyZ3MpOiBQcm9taXNlPFBhbGV0dGU+O1xuXHR0cmlhZGljKGFyZ3M6IEdlblBhbGV0dGVBcmdzKTogUHJvbWlzZTxQYWxldHRlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlR2VuZXJhdGVGbkludGVyZmFjZSB7XG5cdGxpbWl0ZWRIU0woXG5cdFx0YmFzZUh1ZTogbnVtYmVyLFxuXHRcdGxpbWl0RGFyazogYm9vbGVhbixcblx0XHRsaW1pdEdyYXk6IGJvb2xlYW4sXG5cdFx0bGltaXRMaWdodDogYm9vbGVhbixcblx0XHRhbHBoYVZhbHVlOiBudW1iZXIgfCBudWxsXG5cdCk6IEhTTDtcblx0c2VsZWN0ZWRQYWxldHRlKG9wdGlvbnM6IFBhbGV0dGVPcHRpb25zKTogUHJvbWlzZTxQYWxldHRlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWxldHRlU3RhcnRGbkludGVyZmFjZSB7XG5cdGdlblBhbGV0dGUob3B0aW9uczogUGFsZXR0ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuXHRnZW5QYWxldHRlRE9NQm94KFxuXHRcdGl0ZW1zOiBQYWxldHRlSXRlbVtdLFxuXHRcdG51bUJveGVzOiBudW1iZXIsXG5cdFx0dGFibGVJZDogc3RyaW5nXG5cdCk6IFByb21pc2U8dm9pZD47XG59XG5cbi8vICoqKioqKioqIFRPUC1MRVZFTCBCVU5ETEUgSU5URVJGQUNFICoqKioqKioqXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFsZXR0ZUZuTWFzdGVySW50ZXJmYWNlIHtcblx0Z2VuZXJhdGU6IFBhbGV0dGVHZW5lcmF0ZUZuSW50ZXJmYWNlO1xuXHRzZXJpYWxpemU6IFBhbGV0dGVTZXJpYWxpemVGbkludGVyZmFjZTtcblx0c3RhcnQ6IFBhbGV0dGVTdGFydEZuSW50ZXJmYWNlO1xufVxuIl19