// File: src/index/data.js
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"data.js","sourceRoot":"","sources":["../../../../src/index/app/data.ts"],"names":[],"mappings":"AAAA,0BAA0B","sourcesContent":["// File: src/index/data.js\n\nimport {\n\tCMYKUnbranded,\n\tCMYKString,\n\tHexUnbranded,\n\tHSLString,\n\tHSLUnbranded,\n\tHSVUnbranded,\n\tHSVString,\n\tLABString,\n\tLABUnbranded,\n\tMutationLog,\n\tPaletteItemUnbranded,\n\tPaletteUnbranded,\n\tSettings,\n\tSLString,\n\tSLUnbranded,\n\tSVString,\n\tSVUnbranded,\n\tRGBString,\n\tRGBUnbranded,\n\tStoredPaletteUnbranded,\n\tXYZString,\n\tXYZUnbranded\n} from '../index.js';\n\nexport interface AdjustmentsData {\n\tslaValue: number;\n}\n\nexport interface DebounceData {\n\tbutton: number;\n\tinput: number;\n}\n\nexport interface DefaultBaseColorsData {\n\tcmyk: CMYKUnbranded;\n\thex: HexUnbranded;\n\thsl: HSLUnbranded;\n\thsv: HSVUnbranded;\n\tlab: LABUnbranded;\n\trgb: RGBUnbranded;\n\tsl: SLUnbranded;\n\tsv: SVUnbranded;\n\txyz: XYZUnbranded;\n}\n\nexport interface DefaultColorStringsData {\n\tcmyk: CMYKString;\n\thsl: HSLString;\n\thsv: HSVString;\n\tlab: LABString;\n\trgb: RGBString;\n\tsl: SLString;\n\tsv: SVString;\n\txyz: XYZString;\n}\n\nexport interface DOMElementData {\n\tadvancedMenuButton: HTMLButtonElement | null;\n\tapplyCustomColorButton: HTMLButtonElement | null;\n\tclearCustomColorButton: HTMLButtonElement | null;\n\tcloseAdvancedMenuButton: HTMLButtonElement | null;\n\tcloseCustomColorMenuButton: HTMLButtonElement | null;\n\tcloseHelpMenuButton: HTMLButtonElement | null;\n\tcloseHistoryMenuButton: HTMLButtonElement | null;\n\tcustomColorElement: HTMLInputElement | null;\n\tcustomColorMenuButton: HTMLButtonElement | null;\n\tdesaturateButton: HTMLButtonElement | null;\n\tenableAlphaCheckbox: HTMLInputElement | null;\n\tgenerateButton: HTMLButtonElement | null;\n\thelpMenuButton: HTMLButtonElement | null;\n\thistoryMenuButton: HTMLButtonElement | null;\n\tlimitDarknessCheckbox: HTMLInputElement | null;\n\tlimitGraynessCheckbox: HTMLInputElement | null;\n\tlimitLightnessCheckbox: HTMLInputElement | null;\n\tpaletteNumberOptions: HTMLInputElement | null;\n\tpaletteTypeOptions: HTMLSelectElement | null;\n\tsaturateButton: HTMLButtonElement | null;\n\tselectedColorOption: HTMLSelectElement | null;\n\tshowAsCMYKButton: HTMLButtonElement | null;\n\tshowAsHexButton: HTMLButtonElement | null;\n\tshowAsHSLButton: HTMLButtonElement | null;\n\tshowAsHSVButton: HTMLButtonElement | null;\n\tshowAsLABButton: HTMLButtonElement | null;\n\tshowAsRGBButton: HTMLButtonElement | null;\n}\n\nexport type DOMFilesData = readonly [\n\t'./html/advanced-menu.html',\n\t'./html/custom-color-menu.html',\n\t'./html/help-menu.html',\n\t'./html/history-menu.html'\n];\n\nexport interface DOM_ID_Data {\n\tadvancedMenuButton: string;\n\tapplyCustomColorButton: string;\n\tclearCustomColorButton: string;\n\tcloseAdvancedMenuButton: string;\n\tcloseCustomColorMenuButton: string;\n\tcloseHelpMenuButton: string;\n\tcloseHistoryMenuButton: string;\n\tcustomColorElement: string;\n\tcustomColorMenuButton: string;\n\tdesaturateButton: string;\n\tenableAlphaCheckbox: string;\n\tgenerateButton: string;\n\thelpMenuButton: string;\n\thistoryMenuButton: string;\n\tlimitDarknessCheckbox: string;\n\tlimitGraynessCheckbox: string;\n\tlimitLightnessCheckbox: string;\n\tpaletteNumberOptions: string;\n\tpaletteTypeOptions: string;\n\tsaturateButton: string;\n\tselectedColorOption: string;\n\tshowAsCMYKButton: string;\n\tshowAsHexButton: string;\n\tshowAsHSLButton: string;\n\tshowAsHSVButton: string;\n\tshowAsLABButton: string;\n\tshowAsRGBButton: string;\n}\n\nexport interface IDB_DEFAULT_KEYS_Data {\n\tAPP_SETTINGS: string;\n\tCUSTOM_COLOR: string;\n}\n\nexport interface IDB_STORE_NAMES_Data {\n\tCUSTOM_COLOR: string;\n\tMUTATIONS: string;\n\tPALLETES: string;\n\tSETTINGS: string;\n\tTABLES: string;\n}\n\nexport interface LimitsData {\n\txyz: {\n\t\tmax: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t\tz: number;\n\t\t};\n\t\tmin: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t\tz: number;\n\t\t};\n\t};\n}\n\nexport interface ModeData {\n\tdebug: boolean;\n\terrorLogs: boolean;\n\tgracefulErrors: boolean;\n\tinfoLogs: boolean;\n\tquiet: boolean;\n\tverbose: boolean;\n\twarnLogs: boolean;\n}\n\nexport interface PaletteRangesData {\n\tcomp: {\n\t\thueShift: number;\n\t\tlightShift: null;\n\t\tsatShift: null;\n\t};\n\tdiadic: {\n\t\thueShift: number;\n\t\tlightShift: number;\n\t\tsatShift: number;\n\t};\n\thexad: {\n\t\thueShift: null;\n\t\tlightShift: number;\n\t\tsatShift: number;\n\t};\n\trandom: {\n\t\thueShift: null;\n\t\tlightShift: null;\n\t\tsatShift: null;\n\t};\n\tsplitComp: {\n\t\thueShift: number;\n\t\tlightShift: number;\n\t\tsatShift: number;\n\t};\n\ttetra: {\n\t\thueShift: null;\n\t\tlightShift: number;\n\t\tsatShift: number;\n\t};\n\ttriad: {\n\t\thueShift: null;\n\t\tlightShift: number;\n\t\tsatShift: number;\n\t};\n}\n\nexport interface ProbabilitiesData {\n\tvalues: number[];\n\tweights: number[];\n}\n\nexport interface SetsData {\n\tAlphaRange: readonly [0, 1];\n\tByteRange: readonly [0, 255];\n\tHexComponent: 'HexComponent';\n\tHexSet: 'HexSet';\n\tLAB_L: readonly [0, 100];\n\tLAB_A: readonly [-128, 127];\n\tLAB_B: readonly [-128, 127];\n\tPercentile: readonly [0, 100];\n\tRadial: readonly [0, 360];\n\tXYZ_X: readonly [number, number];\n\tXYZ_Y: readonly [number, number];\n\tXYZ_Z: readonly [number, number];\n}\n\nexport interface ThresholdsData {\n\tdark: number;\n\tgray: number;\n\tlight: number;\n}\n\nexport interface TimeoutsData {\n\tcopyButtonText: number;\n\ttoast: number;\n\ttooltip: number;\n}\n\n// ******** INNER BUNDLE INTERFACES ********\n\nexport interface DOMData {\n\telements: DOMElementData;\n\tids: DOM_ID_Data;\n\tfiles: DOMFilesData;\n}\n\n// ******** BUNDLE INTERFACES ********\n\nexport interface ConstsData {\n\tadjustments: AdjustmentsData;\n\tdebounce: DebounceData;\n\tdom: DOMData;\n\tlimits: LimitsData;\n\tpaletteRanges: PaletteRangesData;\n\tprobabilities: ProbabilitiesData;\n\tthresholds: ThresholdsData;\n\ttimeouts: TimeoutsData;\n}\n\nexport interface DefaultColorsData {\n\tcmyk: CMYKUnbranded;\n\thex: HexUnbranded;\n\thsl: HSLUnbranded;\n\thsv: HSVUnbranded;\n\tlab: LABUnbranded;\n\trgb: RGBUnbranded;\n\tsl: SLUnbranded;\n\tsv: SVUnbranded;\n\txyz: XYZUnbranded;\n\tstrings: DefaultColorStringsData;\n}\n\nexport interface Defaults {\n\tcolors: DefaultBaseColorsData;\n\tcolorStrings: DefaultColorStringsData;\n\tidb: IDBDefaultsData;\n\tpalette: PaletteDefaultsData;\n}\n\nexport interface IDBData {\n\tDEFAULT_KEYS: IDB_DEFAULT_KEYS_Data;\n\tSTORE_NAMES: IDB_STORE_NAMES_Data;\n}\n\nexport interface IDBDefaultsData {\n\tsettings: Settings;\n\tmutation: MutationLog;\n}\n\nexport interface PaletteDefaultsData {\n\tunbrandedData: PaletteUnbranded;\n\tunbrandedItem: PaletteItemUnbranded;\n\tunbrandedStored: StoredPaletteUnbranded;\n}\n\n// ******** FINAL BUNDLE ********\n\nexport interface DataInterface {\n\tconsts: ConstsData;\n\tdefaults: Defaults;\n\tidb: IDBData;\n\tmode: ModeData;\n\tsets: SetsData;\n}\n"]}