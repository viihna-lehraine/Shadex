import { conversionMap } from '../color-conversion/conversion.js';
function isCMYK(color) {
    return color.format === 'cmyk';
}
function isHex(color) {
    return color.format === 'hex';
}
function isHSL(color) {
    return color.format === 'hsl';
}
function isHSV(color) {
    return color.format === 'hsv';
}
function isLAB(color) {
    return color.format === 'lab';
}
function isRGB(color) {
    return color.format === 'rgb';
}
function isXYZ(color) {
    return color.format === 'xyz';
}
// ***** SECTION 2 *****
function isHexColor(value) {
    return (typeof value === 'object' &&
        value !== null &&
        'format' in value &&
        value.format === 'hex' &&
        'value' in value &&
        typeof value.value.hex === 'string');
}
// ***** SECTION 3 *****
function ensureHash(value) {
    return value.startsWith('#') ? value : `#${value}`;
}
function isFormat(format) {
    return (typeof format === 'string' &&
        ['cmyk', 'hex', 'hsl', 'hsv', 'lab', 'rgb', 'sl', 'sv', 'xyz'].includes(format));
}
function isColorSpace(value) {
    return ['cmyk', 'hex', 'hsl', 'hsv', 'lab', 'rgb', 'xyz'].includes(value);
}
function isConvertibleColor(color) {
    return (color.format === 'cmyk' ||
        color.format === 'hex' ||
        color.format === 'hsl' ||
        color.format === 'hsv' ||
        color.format === 'lab' ||
        color.format === 'rgb');
}
function isInputElement(element) {
    return element instanceof HTMLInputElement;
}
function isConversion(from, to) {
    return from in conversionMap && to in conversionMap[from];
}
export const guards = {
    ensureHash,
    isCMYK,
    isHex,
    isHSL,
    isHSV,
    isLAB,
    isRGB,
    isXYZ,
    isHexColor,
    isColorSpace,
    isConversion,
    isConvertibleColor,
    isFormat,
    isInputElement
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1ndWFyZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvdHlwZS1ndWFyZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSS9ELFNBQVMsTUFBTSxDQUFDLEtBQWtCO0lBQ2pDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUM7QUFDaEMsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELHdCQUF3QjtBQUV4QixTQUFTLFVBQVUsQ0FBQyxLQUFjO0lBQ2pDLE9BQU8sQ0FDTixPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLEtBQUssS0FBSyxJQUFJO1FBQ2QsUUFBUSxJQUFJLEtBQUs7UUFDaEIsS0FBbUIsQ0FBQyxNQUFNLEtBQUssS0FBSztRQUNyQyxPQUFPLElBQUksS0FBSztRQUNoQixPQUFRLEtBQW1CLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxRQUFRLENBQ2xELENBQUM7QUFDSCxDQUFDO0FBRUQsd0JBQXdCO0FBRXhCLFNBQVMsVUFBVSxDQUFDLEtBQWE7SUFDaEMsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDcEQsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLE1BQWU7SUFDaEMsT0FBTyxDQUNOLE9BQU8sTUFBTSxLQUFLLFFBQVE7UUFDMUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FDdEUsTUFBTSxDQUNOLENBQ0QsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxLQUFhO0lBQ2xDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0UsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQzFCLEtBQWtCO0lBUWxCLE9BQU8sQ0FDTixLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU07UUFDdkIsS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLO1FBQ3RCLEtBQUssQ0FBQyxNQUFNLEtBQUssS0FBSztRQUN0QixLQUFLLENBQUMsTUFBTSxLQUFLLEtBQUs7UUFDdEIsS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLO1FBQ3RCLEtBQUssQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUN0QixDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLE9BQTJCO0lBQ2xELE9BQU8sT0FBTyxZQUFZLGdCQUFnQixDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FDcEIsSUFBK0IsRUFDL0IsRUFBcUI7SUFFckIsT0FBTyxJQUFJLElBQUksYUFBYSxJQUFJLEVBQUUsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBcUI7SUFDdkMsVUFBVTtJQUNWLE1BQU07SUFDTixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxVQUFVO0lBQ1YsWUFBWTtJQUNaLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLGNBQWM7Q0FDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVyc2lvbk1hcCB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbic7XG5pbXBvcnQgKiBhcyBmbk9iamVjdHMgZnJvbSAnLi4vaW5kZXgvZm4tb2JqZWN0cyc7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleC90eXBlcyc7XG5cbmZ1bmN0aW9uIGlzQ01ZSyhjb2xvcjogdHlwZXMuQ29sb3IpOiBjb2xvciBpcyB0eXBlcy5DTVlLIHtcblx0cmV0dXJuIGNvbG9yLmZvcm1hdCA9PT0gJ2NteWsnO1xufVxuXG5mdW5jdGlvbiBpc0hleChjb2xvcjogdHlwZXMuQ29sb3IpOiBjb2xvciBpcyB0eXBlcy5IZXgge1xuXHRyZXR1cm4gY29sb3IuZm9ybWF0ID09PSAnaGV4Jztcbn1cblxuZnVuY3Rpb24gaXNIU0woY29sb3I6IHR5cGVzLkNvbG9yKTogY29sb3IgaXMgdHlwZXMuSFNMIHtcblx0cmV0dXJuIGNvbG9yLmZvcm1hdCA9PT0gJ2hzbCc7XG59XG5cbmZ1bmN0aW9uIGlzSFNWKGNvbG9yOiB0eXBlcy5Db2xvcik6IGNvbG9yIGlzIHR5cGVzLkhTViB7XG5cdHJldHVybiBjb2xvci5mb3JtYXQgPT09ICdoc3YnO1xufVxuXG5mdW5jdGlvbiBpc0xBQihjb2xvcjogdHlwZXMuQ29sb3IpOiBjb2xvciBpcyB0eXBlcy5MQUIge1xuXHRyZXR1cm4gY29sb3IuZm9ybWF0ID09PSAnbGFiJztcbn1cblxuZnVuY3Rpb24gaXNSR0IoY29sb3I6IHR5cGVzLkNvbG9yKTogY29sb3IgaXMgdHlwZXMuUkdCIHtcblx0cmV0dXJuIGNvbG9yLmZvcm1hdCA9PT0gJ3JnYic7XG59XG5cbmZ1bmN0aW9uIGlzWFlaKGNvbG9yOiB0eXBlcy5Db2xvcik6IGNvbG9yIGlzIHR5cGVzLlhZWiB7XG5cdHJldHVybiBjb2xvci5mb3JtYXQgPT09ICd4eXonO1xufVxuXG4vLyAqKioqKiBTRUNUSU9OIDIgKioqKipcblxuZnVuY3Rpb24gaXNIZXhDb2xvcih2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIHR5cGVzLkhleCB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHZhbHVlICE9PSBudWxsICYmXG5cdFx0J2Zvcm1hdCcgaW4gdmFsdWUgJiZcblx0XHQodmFsdWUgYXMgdHlwZXMuSGV4KS5mb3JtYXQgPT09ICdoZXgnICYmXG5cdFx0J3ZhbHVlJyBpbiB2YWx1ZSAmJlxuXHRcdHR5cGVvZiAodmFsdWUgYXMgdHlwZXMuSGV4KS52YWx1ZS5oZXggPT09ICdzdHJpbmcnXG5cdCk7XG59XG5cbi8vICoqKioqIFNFQ1RJT04gMyAqKioqKlxuXG5mdW5jdGlvbiBlbnN1cmVIYXNoKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gdmFsdWUuc3RhcnRzV2l0aCgnIycpID8gdmFsdWUgOiBgIyR7dmFsdWV9YDtcbn1cblxuZnVuY3Rpb24gaXNGb3JtYXQoZm9ybWF0OiB1bmtub3duKTogZm9ybWF0IGlzIHR5cGVzLkZvcm1hdCB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycgJiZcblx0XHRbJ2NteWsnLCAnaGV4JywgJ2hzbCcsICdoc3YnLCAnbGFiJywgJ3JnYicsICdzbCcsICdzdicsICd4eXonXS5pbmNsdWRlcyhcblx0XHRcdGZvcm1hdFxuXHRcdClcblx0KTtcbn1cblxuZnVuY3Rpb24gaXNDb2xvclNwYWNlKHZhbHVlOiBzdHJpbmcpOiB2YWx1ZSBpcyB0eXBlcy5Db2xvclNwYWNlIHtcblx0cmV0dXJuIFsnY215aycsICdoZXgnLCAnaHNsJywgJ2hzdicsICdsYWInLCAncmdiJywgJ3h5eiddLmluY2x1ZGVzKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNDb252ZXJ0aWJsZUNvbG9yKFxuXHRjb2xvcjogdHlwZXMuQ29sb3Jcbik6IGNvbG9yIGlzXG5cdHwgdHlwZXMuQ01ZS1xuXHR8IHR5cGVzLkhleFxuXHR8IHR5cGVzLkhTTFxuXHR8IHR5cGVzLkhTVlxuXHR8IHR5cGVzLkxBQlxuXHR8IHR5cGVzLlJHQiB7XG5cdHJldHVybiAoXG5cdFx0Y29sb3IuZm9ybWF0ID09PSAnY215aycgfHxcblx0XHRjb2xvci5mb3JtYXQgPT09ICdoZXgnIHx8XG5cdFx0Y29sb3IuZm9ybWF0ID09PSAnaHNsJyB8fFxuXHRcdGNvbG9yLmZvcm1hdCA9PT0gJ2hzdicgfHxcblx0XHRjb2xvci5mb3JtYXQgPT09ICdsYWInIHx8XG5cdFx0Y29sb3IuZm9ybWF0ID09PSAncmdiJ1xuXHQpO1xufVxuXG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwpOiBlbGVtZW50IGlzIEhUTUxFbGVtZW50IHtcblx0cmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0NvbnZlcnNpb24oXG5cdGZyb206IGtleW9mIHR5cGVzLkNvbnZlcnNpb25NYXAsXG5cdHRvOiBrZXlvZiB0eXBlcy5Db2xvclxuKTogYm9vbGVhbiB7XG5cdHJldHVybiBmcm9tIGluIGNvbnZlcnNpb25NYXAgJiYgdG8gaW4gY29udmVyc2lvbk1hcFtmcm9tXTtcbn1cblxuZXhwb3J0IGNvbnN0IGd1YXJkczogZm5PYmplY3RzLkd1YXJkcyA9IHtcblx0ZW5zdXJlSGFzaCxcblx0aXNDTVlLLFxuXHRpc0hleCxcblx0aXNIU0wsXG5cdGlzSFNWLFxuXHRpc0xBQixcblx0aXNSR0IsXG5cdGlzWFlaLFxuXHRpc0hleENvbG9yLFxuXHRpc0NvbG9yU3BhY2UsXG5cdGlzQ29udmVyc2lvbixcblx0aXNDb252ZXJ0aWJsZUNvbG9yLFxuXHRpc0Zvcm1hdCxcblx0aXNJbnB1dEVsZW1lbnRcbn07XG4iXX0=