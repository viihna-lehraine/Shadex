import { conversionMap } from '../color-conversion/conversion.js';
function isCMYK(color) {
    return color.format === 'cmyk';
}
function isHex(color) {
    return color.format === 'hex';
}
function isHSL(color) {
    return color.format === 'hsl';
}
function isHSV(color) {
    return color.format === 'hsv';
}
function isLAB(color) {
    return color.format === 'lab';
}
function isRGB(color) {
    return color.format === 'rgb';
}
function isXYZ(color) {
    return color.format === 'xyz';
}
// ***** SECTION 2 *****
function isHexColor(value) {
    return (typeof value === 'object' &&
        value !== null &&
        'format' in value &&
        value.format === 'hex' &&
        'value' in value &&
        typeof value.value.hex === 'string');
}
// ***** SECTION 3 *****
function isFormat(format) {
    return (typeof format === 'string' &&
        ['cmyk', 'hex', 'hsl', 'hsv', 'lab', 'rgb', 'sl', 'sv', 'xyz'].includes(format));
}
function isColorSpace(value) {
    return ['cmyk', 'hex', 'hsl', 'hsv', 'lab', 'rgb', 'xyz'].includes(value);
}
function isConvertibleColor(color) {
    return (color.format === 'cmyk' ||
        color.format === 'hex' ||
        color.format === 'hsl' ||
        color.format === 'hsv' ||
        color.format === 'lab' ||
        color.format === 'rgb');
}
function isInputElement(element) {
    return element instanceof HTMLInputElement;
}
function isConversion(from, to) {
    return from in conversionMap && to in conversionMap[from];
}
export const guards = {
    isCMYK,
    isHex,
    isHSL,
    isHSV,
    isLAB,
    isRGB,
    isXYZ,
    isHexColor,
    isColorSpace,
    isConversion,
    isConvertibleColor,
    isFormat,
    isInputElement
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1ndWFyZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvdHlwZS1ndWFyZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRS9ELFNBQVMsTUFBTSxDQUFDLEtBQWtCO0lBQ2pDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUM7QUFDaEMsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWtCO0lBQ2hDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUVELHdCQUF3QjtBQUV4QixTQUFTLFVBQVUsQ0FBQyxLQUFjO0lBQ2pDLE9BQU8sQ0FDTixPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLEtBQUssS0FBSyxJQUFJO1FBQ2QsUUFBUSxJQUFJLEtBQUs7UUFDaEIsS0FBbUIsQ0FBQyxNQUFNLEtBQUssS0FBSztRQUNyQyxPQUFPLElBQUksS0FBSztRQUNoQixPQUFRLEtBQW1CLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxRQUFRLENBQ2xELENBQUM7QUFDSCxDQUFDO0FBRUQsd0JBQXdCO0FBRXhCLFNBQVMsUUFBUSxDQUFDLE1BQWU7SUFDaEMsT0FBTyxDQUNOLE9BQU8sTUFBTSxLQUFLLFFBQVE7UUFDMUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FDdEUsTUFBTSxDQUNOLENBQ0QsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxLQUFhO0lBQ2xDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0UsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQzFCLEtBQWtCO0lBUWxCLE9BQU8sQ0FDTixLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU07UUFDdkIsS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLO1FBQ3RCLEtBQUssQ0FBQyxNQUFNLEtBQUssS0FBSztRQUN0QixLQUFLLENBQUMsTUFBTSxLQUFLLEtBQUs7UUFDdEIsS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLO1FBQ3RCLEtBQUssQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUN0QixDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLE9BQTJCO0lBQ2xELE9BQU8sT0FBTyxZQUFZLGdCQUFnQixDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FDcEIsSUFBK0IsRUFDL0IsRUFBcUI7SUFFckIsT0FBTyxJQUFJLElBQUksYUFBYSxJQUFJLEVBQUUsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNyQixNQUFNO0lBQ04sS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsVUFBVTtJQUNWLFlBQVk7SUFDWixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFFBQVE7SUFDUixjQUFjO0NBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGNvbnZlcnNpb25NYXAgfSBmcm9tICcuLi9jb2xvci1jb252ZXJzaW9uL2NvbnZlcnNpb24nO1xuXG5mdW5jdGlvbiBpc0NNWUsoY29sb3I6IHR5cGVzLkNvbG9yKTogY29sb3IgaXMgdHlwZXMuQ01ZSyB7XG5cdHJldHVybiBjb2xvci5mb3JtYXQgPT09ICdjbXlrJztcbn1cblxuZnVuY3Rpb24gaXNIZXgoY29sb3I6IHR5cGVzLkNvbG9yKTogY29sb3IgaXMgdHlwZXMuSGV4IHtcblx0cmV0dXJuIGNvbG9yLmZvcm1hdCA9PT0gJ2hleCc7XG59XG5cbmZ1bmN0aW9uIGlzSFNMKGNvbG9yOiB0eXBlcy5Db2xvcik6IGNvbG9yIGlzIHR5cGVzLkhTTCB7XG5cdHJldHVybiBjb2xvci5mb3JtYXQgPT09ICdoc2wnO1xufVxuXG5mdW5jdGlvbiBpc0hTVihjb2xvcjogdHlwZXMuQ29sb3IpOiBjb2xvciBpcyB0eXBlcy5IU1Yge1xuXHRyZXR1cm4gY29sb3IuZm9ybWF0ID09PSAnaHN2Jztcbn1cblxuZnVuY3Rpb24gaXNMQUIoY29sb3I6IHR5cGVzLkNvbG9yKTogY29sb3IgaXMgdHlwZXMuTEFCIHtcblx0cmV0dXJuIGNvbG9yLmZvcm1hdCA9PT0gJ2xhYic7XG59XG5cbmZ1bmN0aW9uIGlzUkdCKGNvbG9yOiB0eXBlcy5Db2xvcik6IGNvbG9yIGlzIHR5cGVzLlJHQiB7XG5cdHJldHVybiBjb2xvci5mb3JtYXQgPT09ICdyZ2InO1xufVxuXG5mdW5jdGlvbiBpc1hZWihjb2xvcjogdHlwZXMuQ29sb3IpOiBjb2xvciBpcyB0eXBlcy5YWVoge1xuXHRyZXR1cm4gY29sb3IuZm9ybWF0ID09PSAneHl6Jztcbn1cblxuLy8gKioqKiogU0VDVElPTiAyICoqKioqXG5cbmZ1bmN0aW9uIGlzSGV4Q29sb3IodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyB0eXBlcy5IZXgge1xuXHRyZXR1cm4gKFxuXHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdCdmb3JtYXQnIGluIHZhbHVlICYmXG5cdFx0KHZhbHVlIGFzIHR5cGVzLkhleCkuZm9ybWF0ID09PSAnaGV4JyAmJlxuXHRcdCd2YWx1ZScgaW4gdmFsdWUgJiZcblx0XHR0eXBlb2YgKHZhbHVlIGFzIHR5cGVzLkhleCkudmFsdWUuaGV4ID09PSAnc3RyaW5nJ1xuXHQpO1xufVxuXG4vLyAqKioqKiBTRUNUSU9OIDMgKioqKipcblxuZnVuY3Rpb24gaXNGb3JtYXQoZm9ybWF0OiB1bmtub3duKTogZm9ybWF0IGlzIHR5cGVzLkZvcm1hdCB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycgJiZcblx0XHRbJ2NteWsnLCAnaGV4JywgJ2hzbCcsICdoc3YnLCAnbGFiJywgJ3JnYicsICdzbCcsICdzdicsICd4eXonXS5pbmNsdWRlcyhcblx0XHRcdGZvcm1hdFxuXHRcdClcblx0KTtcbn1cblxuZnVuY3Rpb24gaXNDb2xvclNwYWNlKHZhbHVlOiBzdHJpbmcpOiB2YWx1ZSBpcyB0eXBlcy5Db2xvclNwYWNlIHtcblx0cmV0dXJuIFsnY215aycsICdoZXgnLCAnaHNsJywgJ2hzdicsICdsYWInLCAncmdiJywgJ3h5eiddLmluY2x1ZGVzKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNDb252ZXJ0aWJsZUNvbG9yKFxuXHRjb2xvcjogdHlwZXMuQ29sb3Jcbik6IGNvbG9yIGlzXG5cdHwgdHlwZXMuQ01ZS1xuXHR8IHR5cGVzLkhleFxuXHR8IHR5cGVzLkhTTFxuXHR8IHR5cGVzLkhTVlxuXHR8IHR5cGVzLkxBQlxuXHR8IHR5cGVzLlJHQiB7XG5cdHJldHVybiAoXG5cdFx0Y29sb3IuZm9ybWF0ID09PSAnY215aycgfHxcblx0XHRjb2xvci5mb3JtYXQgPT09ICdoZXgnIHx8XG5cdFx0Y29sb3IuZm9ybWF0ID09PSAnaHNsJyB8fFxuXHRcdGNvbG9yLmZvcm1hdCA9PT0gJ2hzdicgfHxcblx0XHRjb2xvci5mb3JtYXQgPT09ICdsYWInIHx8XG5cdFx0Y29sb3IuZm9ybWF0ID09PSAncmdiJ1xuXHQpO1xufVxuXG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwpOiBlbGVtZW50IGlzIEhUTUxFbGVtZW50IHtcblx0cmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0NvbnZlcnNpb24oXG5cdGZyb206IGtleW9mIHR5cGVzLkNvbnZlcnNpb25NYXAsXG5cdHRvOiBrZXlvZiB0eXBlcy5Db2xvclxuKTogYm9vbGVhbiB7XG5cdHJldHVybiBmcm9tIGluIGNvbnZlcnNpb25NYXAgJiYgdG8gaW4gY29udmVyc2lvbk1hcFtmcm9tXTtcbn1cblxuZXhwb3J0IGNvbnN0IGd1YXJkcyA9IHtcblx0aXNDTVlLLFxuXHRpc0hleCxcblx0aXNIU0wsXG5cdGlzSFNWLFxuXHRpc0xBQixcblx0aXNSR0IsXG5cdGlzWFlaLFxuXHRpc0hleENvbG9yLFxuXHRpc0NvbG9yU3BhY2UsXG5cdGlzQ29udmVyc2lvbixcblx0aXNDb252ZXJ0aWJsZUNvbG9yLFxuXHRpc0Zvcm1hdCxcblx0aXNJbnB1dEVsZW1lbnRcbn07XG4iXX0=