export function stripHashFromHex(hex) {
    const hexString = hex.value.hex;
    return hex.value.hex.startsWith('#')
        ? { value: { hex: hexString.slice(1) }, format: 'hex' }
        : hex;
}
export function addHashToHex(hex) {
    return hex.value.hex.startsWith('#')
        ? hex
        : { value: { hex: `#${hex.value}}` }, format: 'hex' };
}
// converts a component (0-255) to a 2-digit hex string slice
export function componentToHex(component) {
    try {
        const hex = Math.max(0, Math.min(255, component)).toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    }
    catch (error) {
        console.error(`componentToHex error: ${error}`);
        return '00';
    }
}
export const parseColor = (colorSpace, value) => {
    switch (colorSpace) {
        case 'hex':
            return { value: { hex: value }, format: 'hex' };
        case 'rgb': {
            const [r, g, b] = value.split(',').map(Number);
            return { value: { red: r, green: g, blue: b }, format: 'rgb' };
        }
        case 'hsl': {
            const [h, s, l] = value.split(',').map(Number);
            return {
                value: { hue: h, saturation: s, lightness: l },
                format: 'hsl'
            };
        }
        default:
            throw new Error(`Unsupported color format: ${colorSpace}`);
    }
};
export function parseCustomColor(colorSpace, rawValue) {
    console.log(`Parsing custom color: ${rawValue}`);
    switch (colorSpace) {
        case 'hex':
            if (!rawValue.startsWith('#')) {
                return addHashToHex({
                    value: { hex: rawValue },
                    format: 'hex'
                });
            }
            else {
                return { value: { hex: rawValue }, format: 'hex' };
            }
        case 'hsl': {
            const match = rawValue.match(/hsl\((\d+),\s*(\d+)%,\s*(\d+)%\)/);
            if (match) {
                const [, hue, saturation, lightness] = match.map(Number);
                return {
                    value: { hue, saturation, lightness },
                    format: 'hsl'
                };
            }
            break;
        }
        default:
            console.warn(`Unsupported color space: ${colorSpace}`);
            return null;
    }
    console.error(`Failed to parse custom color: ${rawValue}`);
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy90cmFuc2Zvcm1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxHQUFjO0lBQzlDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBRWhDLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUNuQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFjLEVBQUU7UUFDaEUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNSLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEdBQWM7SUFDMUMsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxHQUFHO1FBQ0wsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQWMsRUFBRSxDQUFDO0FBQ2pFLENBQUM7QUFFRCw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLGNBQWMsQ0FBQyxTQUFpQjtJQUMvQyxJQUFJLENBQUM7UUFDSixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FB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LEtBQUssQ0FBQyxpQ0FBaUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMzRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEhhc2hGcm9tSGV4KGhleDogdHlwZXMuSGV4KTogdHlwZXMuSGV4IHtcblx0Y29uc3QgaGV4U3RyaW5nID0gaGV4LnZhbHVlLmhleDtcblxuXHRyZXR1cm4gaGV4LnZhbHVlLmhleC5zdGFydHNXaXRoKCcjJylcblx0XHQ/IHsgdmFsdWU6IHsgaGV4OiBoZXhTdHJpbmcuc2xpY2UoMSkgfSwgZm9ybWF0OiAnaGV4JyBhcyBjb25zdCB9XG5cdFx0OiBoZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRIYXNoVG9IZXgoaGV4OiB0eXBlcy5IZXgpOiB0eXBlcy5IZXgge1xuXHRyZXR1cm4gaGV4LnZhbHVlLmhleC5zdGFydHNXaXRoKCcjJylcblx0XHQ/IGhleFxuXHRcdDogeyB2YWx1ZTogeyBoZXg6IGAjJHtoZXgudmFsdWV9fWAgfSwgZm9ybWF0OiAnaGV4JyBhcyBjb25zdCB9O1xufVxuXG4vLyBjb252ZXJ0cyBhIGNvbXBvbmVudCAoMC0yNTUpIHRvIGEgMi1kaWdpdCBoZXggc3RyaW5nIHNsaWNlXG5leHBvcnQgZnVuY3Rpb24gY29tcG9uZW50VG9IZXgoY29tcG9uZW50OiBudW1iZXIpOiBzdHJpbmcge1xuXHR0cnkge1xuXHRcdGNvbnN0IGhleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgY29tcG9uZW50KSkudG9TdHJpbmcoMTYpO1xuXHRcdHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gJzAnICsgaGV4IDogaGV4O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYGNvbXBvbmVudFRvSGV4IGVycm9yOiAke2Vycm9yfWApO1xuXHRcdHJldHVybiAnMDAnO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBwYXJzZUNvbG9yID0gKFxuXHRjb2xvclNwYWNlOiB0eXBlcy5Db2xvclNwYWNlLFxuXHR2YWx1ZTogc3RyaW5nXG4pOiB0eXBlcy5Db2xvciA9PiB7XG5cdHN3aXRjaCAoY29sb3JTcGFjZSkge1xuXHRcdGNhc2UgJ2hleCc6XG5cdFx0XHRyZXR1cm4geyB2YWx1ZTogeyBoZXg6IHZhbHVlIH0sIGZvcm1hdDogJ2hleCcgfTtcblx0XHRjYXNlICdyZ2InOiB7XG5cdFx0XHRjb25zdCBbciwgZywgYl0gPSB2YWx1ZS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuXHRcdFx0cmV0dXJuIHsgdmFsdWU6IHsgcmVkOiByLCBncmVlbjogZywgYmx1ZTogYiB9LCBmb3JtYXQ6ICdyZ2InIH07XG5cdFx0fVxuXHRcdGNhc2UgJ2hzbCc6IHtcblx0XHRcdGNvbnN0IFtoLCBzLCBsXSA9IHZhbHVlLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR2YWx1ZTogeyBodWU6IGgsIHNhdHVyYXRpb246IHMsIGxpZ2h0bmVzczogbCB9LFxuXHRcdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBjb2xvciBmb3JtYXQ6ICR7Y29sb3JTcGFjZX1gKTtcblx0fVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3VzdG9tQ29sb3IoXG5cdGNvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UsXG5cdHJhd1ZhbHVlOiBzdHJpbmdcbik6IHR5cGVzLkNvbG9yIHwgbnVsbCB7XG5cdGNvbnNvbGUubG9nKGBQYXJzaW5nIGN1c3RvbSBjb2xvcjogJHtyYXdWYWx1ZX1gKTtcblxuXHRzd2l0Y2ggKGNvbG9yU3BhY2UpIHtcblx0XHRjYXNlICdoZXgnOlxuXHRcdFx0aWYgKCFyYXdWYWx1ZS5zdGFydHNXaXRoKCcjJykpIHtcblx0XHRcdFx0cmV0dXJuIGFkZEhhc2hUb0hleCh7XG5cdFx0XHRcdFx0dmFsdWU6IHsgaGV4OiByYXdWYWx1ZSB9LFxuXHRcdFx0XHRcdGZvcm1hdDogJ2hleCdcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4geyB2YWx1ZTogeyBoZXg6IHJhd1ZhbHVlIH0sIGZvcm1hdDogJ2hleCcgfTtcblx0XHRcdH1cblx0XHRjYXNlICdoc2wnOiB7XG5cdFx0XHRjb25zdCBtYXRjaCA9IHJhd1ZhbHVlLm1hdGNoKC9oc2xcXCgoXFxkKyksXFxzKihcXGQrKSUsXFxzKihcXGQrKSVcXCkvKTtcblx0XHRcdGlmIChtYXRjaCkge1xuXHRcdFx0XHRjb25zdCBbLCBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzc10gPSBtYXRjaC5tYXAoTnVtYmVyKTtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR2YWx1ZTogeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcyB9LFxuXHRcdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKGBVbnN1cHBvcnRlZCBjb2xvciBzcGFjZTogJHtjb2xvclNwYWNlfWApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcGFyc2UgY3VzdG9tIGNvbG9yOiAke3Jhd1ZhbHVlfWApO1xuXHRyZXR1cm4gbnVsbDtcbn1cbiJdfQ==