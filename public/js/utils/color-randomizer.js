import { colorToColorObject } from './transforms.js';
function getRandomColorBySpace(initialColorSpace) {
    switch (initialColorSpace) {
        case 'cmyk':
            return random.randomCMYK();
        case 'hex':
            return random.randomHex();
        case 'hsl':
            return random.randomHSL();
        case 'hsv':
            return random.randomHSV();
        case 'lab':
            return random.randomLAB();
        case 'rgb':
            return random.randomRGB();
        default:
            return random.randomHex(); // default to hex
    }
}
function randomCMYK() {
    return {
        cyan: Math.floor(Math.random() * 101),
        magenta: Math.floor(Math.random() * 101),
        yellow: Math.floor(Math.random() * 101),
        key: Math.floor(Math.random() * 101),
        format: 'cmyk'
    };
}
function randomHex() {
    const hexDigits = '0123456789ABCDEF';
    const hexCodeArray = Array.from({ length: 6 }, () => hexDigits[Math.floor(Math.random() * hexDigits.length)]);
    return {
        format: 'hex',
        hex: `#${hexCodeArray.join('')}`
    };
}
function randomHSL() {
    let hue = Math.floor(Math.random() * 360);
    let saturation = Math.floor(Math.random() * 101);
    let lightness = Math.floor(Math.random() * 101);
    return {
        format: 'hsl',
        hue,
        saturation,
        lightness
    };
}
function randomHSV() {
    return {
        format: 'hsv',
        hue: Math.floor(Math.random() * 360),
        saturation: Math.floor(Math.random() * 101),
        value: Math.floor(Math.random() * 101)
    };
}
function randomLAB() {
    return {
        format: 'lab',
        l: Math.random() * 100,
        a: Math.random() * 256 - 128,
        b: Math.random() * 256 - 128
    };
}
function randomRGB() {
    return {
        format: 'rgb',
        red: Math.floor(Math.random() * 256),
        green: Math.floor(Math.random() * 256),
        blue: Math.floor(Math.random() * 256)
    };
}
function randomSL() {
    let saturation = Math.floor(Math.random() * 101);
    let lightness = Math.floor(Math.random() * 101);
    // if saturation or lightness are outside the range 0-100, they are redefined to do so
    if (saturation > 100)
        saturation = 100;
    if (saturation < 0)
        saturation = 0;
    if (lightness > 100)
        lightness = 100;
    if (lightness < 0)
        lightness = 0;
    let format = 'sl';
    let color = {
        saturation,
        lightness,
        format
    };
    return color;
}
function randomSV() {
    let saturation = Math.floor(Math.random() * 101);
    let value = Math.floor(Math.random() * 101);
    // if saturation or lightness are outside the range 0-100, they are redefined to do so
    if (saturation > 100)
        saturation = 100;
    if (saturation < 0)
        saturation = 0;
    if (value > 100)
        value = 100;
    if (value < 0)
        value = 0;
    let format = 'sv';
    let color = { saturation, value, format };
    return color;
}
export function randomColor(initialColorSpace = 'hex', returnType = 'flat') {
    const randomGeneratedColor = getRandomColorBySpace(initialColorSpace);
    if (returnType === 'object') {
        const colorObject = colorToColorObject(randomGeneratedColor);
        if (!colorObject) {
            throw new Error(`Failed to generate a valid color object for colorspace ${initialColorSpace}`);
        }
        return colorObject;
    }
    return randomGeneratedColor;
}
export const random = {
    getRandomColorBySpace,
    randomCMYK,
    randomColor,
    randomHex,
    randomHSL,
    randomHSV,
    randomLAB,
    randomRGB,
    randomSL,
    randomSV
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcmFuZG9taXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9jb2xvci1yYW5kb21pemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVsRCxTQUFTLHFCQUFxQixDQUFDLGlCQUF5QjtJQUN2RCxRQUFRLGlCQUFpQixFQUFFLENBQUM7UUFDM0IsS0FBSyxNQUFNO1lBQ1YsT0FBTyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUIsS0FBSyxLQUFLO1lBQ1QsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0IsS0FBSyxLQUFLO1lBQ1QsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0IsS0FBSyxLQUFLO1lBQ1QsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0IsS0FBSyxLQUFLO1lBQ1QsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0IsS0FBSyxLQUFLO1lBQ1QsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0I7WUFDQyxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQjtJQUM5QyxDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsVUFBVTtJQUNsQixPQUFPO1FBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNyQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ3hDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDdkMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1B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QUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsQixNQUFNLElBQUksS0FBSyxDQUNkLDBEQUEwRCxpQkFBaUIsRUFBRSxDQUM3RSxDQUFDO1FBQ0gsQ0FBQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxPQUFPLG9CQUFvQixDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDckIscUJBQXFCO0lBQ3JCLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtDQUNSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBjb2xvclRvQ29sb3JPYmplY3QgfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5mdW5jdGlvbiBnZXRSYW5kb21Db2xvckJ5U3BhY2UoaW5pdGlhbENvbG9yU3BhY2U6IHN0cmluZyk6IHR5cGVzLkNvbG9yRGF0YSB7XG5cdHN3aXRjaCAoaW5pdGlhbENvbG9yU3BhY2UpIHtcblx0XHRjYXNlICdjbXlrJzpcblx0XHRcdHJldHVybiByYW5kb20ucmFuZG9tQ01ZSygpO1xuXHRcdGNhc2UgJ2hleCc6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhleCgpO1xuXHRcdGNhc2UgJ2hzbCc6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhTTCgpO1xuXHRcdGNhc2UgJ2hzdic6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhTVigpO1xuXHRcdGNhc2UgJ2xhYic6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUxBQigpO1xuXHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbVJHQigpO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhleCgpOyAvLyBkZWZhdWx0IHRvIGhleFxuXHR9XG59XG5cbmZ1bmN0aW9uIHJhbmRvbUNNWUsoKTogdHlwZXMuQ01ZSyB7XG5cdHJldHVybiB7XG5cdFx0Y3lhbjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKSxcblx0XHRtYWdlbnRhOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDEpLFxuXHRcdHllbGxvdzogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKSxcblx0XHRrZXk6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSksXG5cdFx0Zm9ybWF0OiAnY215aydcblx0fTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tSGV4KCk6IHR5cGVzLkhleCB7XG5cdGNvbnN0IGhleERpZ2l0cyA9ICcwMTIzNDU2Nzg5QUJDREVGJztcblx0Y29uc3QgaGV4Q29kZUFycmF5ID0gQXJyYXkuZnJvbShcblx0XHR7IGxlbmd0aDogNiB9LFxuXHRcdCgpID0+IGhleERpZ2l0c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBoZXhEaWdpdHMubGVuZ3RoKV1cblx0KTtcblxuXHRyZXR1cm4ge1xuXHRcdGZvcm1hdDogJ2hleCcsXG5cdFx0aGV4OiBgIyR7aGV4Q29kZUFycmF5LmpvaW4oJycpfWBcblx0fTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tSFNMKCk6IHR5cGVzLkhTTCB7XG5cdGxldCBodWUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzNjApO1xuXHRsZXQgc2F0dXJhdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSk7XG5cdGxldCBsaWdodG5lc3MgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDEpO1xuXG5cdHJldHVybiB7XG5cdFx0Zm9ybWF0OiAnaHNsJyxcblx0XHRodWUsXG5cdFx0c2F0dXJhdGlvbixcblx0XHRsaWdodG5lc3Ncblx0fTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tSFNWKCk6IHR5cGVzLkhTViB7XG5cdHJldHVybiB7XG5cdFx0Zm9ybWF0OiAnaHN2Jyxcblx0XHRodWU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDM2MCksXG5cdFx0c2F0dXJhdGlvbjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKSxcblx0XHR2YWx1ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKVxuXHR9O1xufVxuXG5mdW5jdGlvbiByYW5kb21MQUIoKTogdHlwZXMuTEFCIHtcblx0cmV0dXJuIHtcblx0XHRmb3JtYXQ6ICdsYWInLFxuXHRcdGw6IE1hdGgucmFuZG9tKCkgKiAxMDAsXG5cdFx0YTogTWF0aC5yYW5kb20oKSAqIDI1NiAtIDEyOCxcblx0XHRiOiBNYXRoLnJhbmRvbSgpICogMjU2IC0gMTI4XG5cdH07XG59XG5cbmZ1bmN0aW9uIHJhbmRvbVJHQigpOiB0eXBlcy5SR0Ige1xuXHRyZXR1cm4ge1xuXHRcdGZvcm1hdDogJ3JnYicsXG5cdFx0cmVkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpLFxuXHRcdGdyZWVuOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpLFxuXHRcdGJsdWU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1Nilcblx0fTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tU0woKTogdHlwZXMuU0wge1xuXHRsZXQgc2F0dXJhdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSk7XG5cdGxldCBsaWdodG5lc3MgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDEpO1xuXG5cdC8vIGlmIHNhdHVyYXRpb24gb3IgbGlnaHRuZXNzIGFyZSBvdXRzaWRlIHRoZSByYW5nZSAwLTEwMCwgdGhleSBhcmUgcmVkZWZpbmVkIHRvIGRvIHNvXG5cdGlmIChzYXR1cmF0aW9uID4gMTAwKSBzYXR1cmF0aW9uID0gMTAwO1xuXHRpZiAoc2F0dXJhdGlvbiA8IDApIHNhdHVyYXRpb24gPSAwO1xuXHRpZiAobGlnaHRuZXNzID4gMTAwKSBsaWdodG5lc3MgPSAxMDA7XG5cdGlmIChsaWdodG5lc3MgPCAwKSBsaWdodG5lc3MgPSAwO1xuXG5cdGxldCBmb3JtYXQ6ICdzbCcgPSAnc2wnO1xuXHRsZXQgY29sb3IgPSB7XG5cdFx0c2F0dXJhdGlvbixcblx0XHRsaWdodG5lc3MsXG5cdFx0Zm9ybWF0XG5cdH07XG5cblx0cmV0dXJuIGNvbG9yO1xufVxuXG5mdW5jdGlvbiByYW5kb21TVigpOiB0eXBlcy5TViB7XG5cdGxldCBzYXR1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKTtcblx0bGV0IHZhbHVlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKTtcblxuXHQvLyBpZiBzYXR1cmF0aW9uIG9yIGxpZ2h0bmVzcyBhcmUgb3V0c2lkZSB0aGUgcmFuZ2UgMC0xMDAsIHRoZXkgYXJlIHJlZGVmaW5lZCB0byBkbyBzb1xuXHRpZiAoc2F0dXJhdGlvbiA+IDEwMCkgc2F0dXJhdGlvbiA9IDEwMDtcblx0aWYgKHNhdHVyYXRpb24gPCAwKSBzYXR1cmF0aW9uID0gMDtcblx0aWYgKHZhbHVlID4gMTAwKSB2YWx1ZSA9IDEwMDtcblx0aWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xuXG5cdGxldCBmb3JtYXQ6ICdzdicgPSAnc3YnO1xuXHRsZXQgY29sb3IgPSB7IHNhdHVyYXRpb24sIHZhbHVlLCBmb3JtYXQgfTtcblxuXHRyZXR1cm4gY29sb3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21Db2xvcihcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4Jyxcblx0cmV0dXJuVHlwZTogJ2ZsYXQnIHwgJ29iamVjdCcgPSAnZmxhdCdcbik6IHR5cGVzLkNvbG9yRGF0YSB8IHR5cGVzLkNvbG9yT2JqZWN0RGF0YSB7XG5cdGNvbnN0IHJhbmRvbUdlbmVyYXRlZENvbG9yID0gZ2V0UmFuZG9tQ29sb3JCeVNwYWNlKGluaXRpYWxDb2xvclNwYWNlKTtcblxuXHRpZiAocmV0dXJuVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRjb25zdCBjb2xvck9iamVjdCA9IGNvbG9yVG9Db2xvck9iamVjdChyYW5kb21HZW5lcmF0ZWRDb2xvcik7XG5cdFx0aWYgKCFjb2xvck9iamVjdCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGdlbmVyYXRlIGEgdmFsaWQgY29sb3Igb2JqZWN0IGZvciBjb2xvcnNwYWNlICR7aW5pdGlhbENvbG9yU3BhY2V9YFxuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGNvbG9yT2JqZWN0O1xuXHR9XG5cblx0cmV0dXJuIHJhbmRvbUdlbmVyYXRlZENvbG9yO1xufVxuXG5leHBvcnQgY29uc3QgcmFuZG9tID0ge1xuXHRnZXRSYW5kb21Db2xvckJ5U3BhY2UsXG5cdHJhbmRvbUNNWUssXG5cdHJhbmRvbUNvbG9yLFxuXHRyYW5kb21IZXgsXG5cdHJhbmRvbUhTTCxcblx0cmFuZG9tSFNWLFxuXHRyYW5kb21MQUIsXG5cdHJhbmRvbVJHQixcblx0cmFuZG9tU0wsXG5cdHJhbmRvbVNWXG59O1xuIl19