function randomCMYK() {
    return {
        value: {
            cyan: Math.floor(Math.random() * 101),
            magenta: Math.floor(Math.random() * 101),
            yellow: Math.floor(Math.random() * 101),
            key: Math.floor(Math.random() * 101)
        },
        format: 'cmyk'
    };
}
function randomColor(initialColorSpace) {
    switch (initialColorSpace) {
        case 'cmyk':
            return random.randomCMYK();
        case 'hex':
            return random.randomHex();
        case 'hsl':
            return random.randomHSL();
        case 'hsv':
            return random.randomHSV();
        case 'lab':
            return random.randomLAB();
        case 'rgb':
            return random.randomRGB();
        default:
            return random.randomHex(); // default to hex
    }
}
function randomHex() {
    const hexDigits = '0123456789ABCDEF';
    const hexCodeArray = Array.from({ length: 6 }, () => hexDigits[Math.floor(Math.random() * hexDigits.length)]);
    return {
        value: { hex: `#${hexCodeArray.join('')}` },
        format: 'hex'
    };
}
function randomHSL() {
    return {
        value: {
            hue: Math.floor(Math.random() * 360),
            saturation: Math.floor(Math.random() * 101),
            lightness: Math.floor(Math.random() * 101)
        },
        format: 'hsl'
    };
}
function randomHSV() {
    return {
        value: {
            hue: Math.floor(Math.random() * 360),
            saturation: Math.floor(Math.random() * 101),
            value: Math.floor(Math.random() * 101)
        },
        format: 'hsv'
    };
}
function randomLAB() {
    return {
        value: {
            l: Math.random() * 100,
            a: Math.random() * 256 - 128,
            b: Math.random() * 256 - 128
        },
        format: 'lab'
    };
}
function randomRGB() {
    return {
        value: {
            red: Math.floor(Math.random() * 256),
            green: Math.floor(Math.random() * 256),
            blue: Math.floor(Math.random() * 256)
        },
        format: 'rgb'
    };
}
function randomSL() {
    let saturation = Math.floor(Math.random() * 101);
    let lightness = Math.floor(Math.random() * 101);
    let format = 'sl';
    if (saturation > 100)
        saturation = 100;
    if (saturation < 0)
        saturation = 0;
    if (lightness > 100)
        lightness = 100;
    if (lightness < 0)
        lightness = 0;
    return { value: { saturation, lightness }, format };
}
function randomSV() {
    let saturation = Math.floor(Math.random() * 101);
    let value = Math.floor(Math.random() * 101);
    let format = 'sv';
    if (saturation > 100)
        saturation = 100;
    if (saturation < 0)
        saturation = 0;
    if (value > 100)
        value = 100;
    if (value < 0)
        value = 0;
    return { value: { saturation, value }, format };
}
export const random = {
    randomCMYK,
    randomColor,
    randomHex,
    randomHSL,
    randomHSV,
    randomLAB,
    randomRGB,
    randomSL,
    randomSV
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcmFuZG9taXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9jb2xvci1yYW5kb21pemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsVUFBVTtJQUNsQixPQUFPO1FBQ04sS0FBSyxFQUFFO1lBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNyQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ3hDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDdkMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQztTQUNwQztRQUNELE1BQU0sRUFBRSxNQUFNO0tBQ2QsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxpQkFBeUI7SUFDN0MsUUFBUSxpQkFBaUIsRUFBRSxDQUFDO1FBQzNCLEtBQUssTUFBTTtZQUNWLE9BQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzVCLEtBQUssS0FBSztZQUNULE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCLEtBQUssS0FBSztZQUNULE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCLEtBQUssS0FBSztZQUNULE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCLEtBQUssS0FBSztZQUNULE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCLEtBQUssS0FBSztZQUNULE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCO1lBQ0MsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFF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ZGV4JztcblxuZnVuY3Rpb24gcmFuZG9tQ01ZSygpOiB0eXBlcy5DTVlLIHtcblx0cmV0dXJuIHtcblx0XHR2YWx1ZToge1xuXHRcdFx0Y3lhbjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKSxcblx0XHRcdG1hZ2VudGE6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSksXG5cdFx0XHR5ZWxsb3c6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSksXG5cdFx0XHRrZXk6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSlcblx0XHR9LFxuXHRcdGZvcm1hdDogJ2NteWsnXG5cdH07XG59XG5cbmZ1bmN0aW9uIHJhbmRvbUNvbG9yKGluaXRpYWxDb2xvclNwYWNlOiBzdHJpbmcpOiB0eXBlcy5Db2xvciB7XG5cdHN3aXRjaCAoaW5pdGlhbENvbG9yU3BhY2UpIHtcblx0XHRjYXNlICdjbXlrJzpcblx0XHRcdHJldHVybiByYW5kb20ucmFuZG9tQ01ZSygpO1xuXHRcdGNhc2UgJ2hleCc6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhleCgpO1xuXHRcdGNhc2UgJ2hzbCc6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhTTCgpO1xuXHRcdGNhc2UgJ2hzdic6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhTVigpO1xuXHRcdGNhc2UgJ2xhYic6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUxBQigpO1xuXHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbVJHQigpO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcmFuZG9tLnJhbmRvbUhleCgpOyAvLyBkZWZhdWx0IHRvIGhleFxuXHR9XG59XG5cbmZ1bmN0aW9uIHJhbmRvbUhleCgpOiB0eXBlcy5IZXgge1xuXHRjb25zdCBoZXhEaWdpdHMgPSAnMDEyMzQ1Njc4OUFCQ0RFRic7XG5cdGNvbnN0IGhleENvZGVBcnJheSA9IEFycmF5LmZyb20oXG5cdFx0eyBsZW5ndGg6IDYgfSxcblx0XHQoKSA9PiBoZXhEaWdpdHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaGV4RGlnaXRzLmxlbmd0aCldXG5cdCk7XG5cblx0cmV0dXJuIHtcblx0XHR2YWx1ZTogeyBoZXg6IGAjJHtoZXhDb2RlQXJyYXkuam9pbignJyl9YCB9LFxuXHRcdGZvcm1hdDogJ2hleCdcblx0fTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tSFNMKCk6IHR5cGVzLkhTTCB7XG5cdHJldHVybiB7XG5cdFx0dmFsdWU6IHtcblx0XHRcdGh1ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYwKSxcblx0XHRcdHNhdHVyYXRpb246IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSksXG5cdFx0XHRsaWdodG5lc3M6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSlcblx0XHR9LFxuXHRcdGZvcm1hdDogJ2hzbCdcblx0fTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tSFNWKCk6IHR5cGVzLkhTViB7XG5cdHJldHVybiB7XG5cdFx0dmFsdWU6IHtcblx0XHRcdGh1ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYwKSxcblx0XHRcdHNhdHVyYXRpb246IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSksXG5cdFx0XHR2YWx1ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxKVxuXHRcdH0sXG5cdFx0Zm9ybWF0OiAnaHN2J1xuXHR9O1xufVxuXG5mdW5jdGlvbiByYW5kb21MQUIoKTogdHlwZXMuTEFCIHtcblx0cmV0dXJuIHtcblx0XHR2YWx1ZToge1xuXHRcdFx0bDogTWF0aC5yYW5kb20oKSAqIDEwMCxcblx0XHRcdGE6IE1hdGgucmFuZG9tKCkgKiAyNTYgLSAxMjgsXG5cdFx0XHRiOiBNYXRoLnJhbmRvbSgpICogMjU2IC0gMTI4XG5cdFx0fSxcblx0XHRmb3JtYXQ6ICdsYWInXG5cdH07XG59XG5cbmZ1bmN0aW9uIHJhbmRvbVJHQigpOiB0eXBlcy5SR0Ige1xuXHRyZXR1cm4ge1xuXHRcdHZhbHVlOiB7XG5cdFx0XHRyZWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NiksXG5cdFx0XHRncmVlbjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSxcblx0XHRcdGJsdWU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1Nilcblx0XHR9LFxuXHRcdGZvcm1hdDogJ3JnYidcblx0fTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tU0woKTogdHlwZXMuU0wge1xuXHRsZXQgc2F0dXJhdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSk7XG5cdGxldCBsaWdodG5lc3MgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDEpO1xuXHRsZXQgZm9ybWF0OiAnc2wnID0gJ3NsJztcblxuXHRpZiAoc2F0dXJhdGlvbiA+IDEwMCkgc2F0dXJhdGlvbiA9IDEwMDtcblx0aWYgKHNhdHVyYXRpb24gPCAwKSBzYXR1cmF0aW9uID0gMDtcblx0aWYgKGxpZ2h0bmVzcyA+IDEwMCkgbGlnaHRuZXNzID0gMTAwO1xuXHRpZiAobGlnaHRuZXNzIDwgMCkgbGlnaHRuZXNzID0gMDtcblxuXHRyZXR1cm4geyB2YWx1ZTogeyBzYXR1cmF0aW9uLCBsaWdodG5lc3MgfSwgZm9ybWF0IH07XG59XG5cbmZ1bmN0aW9uIHJhbmRvbVNWKCk6IHR5cGVzLlNWIHtcblx0bGV0IHNhdHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDEpO1xuXHRsZXQgdmFsdWUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDEpO1xuXHRsZXQgZm9ybWF0OiAnc3YnID0gJ3N2JztcblxuXHRpZiAoc2F0dXJhdGlvbiA+IDEwMCkgc2F0dXJhdGlvbiA9IDEwMDtcblx0aWYgKHNhdHVyYXRpb24gPCAwKSBzYXR1cmF0aW9uID0gMDtcblx0aWYgKHZhbHVlID4gMTAwKSB2YWx1ZSA9IDEwMDtcblx0aWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xuXG5cdHJldHVybiB7IHZhbHVlOiB7IHNhdHVyYXRpb24sIHZhbHVlIH0sIGZvcm1hdCB9O1xufVxuXG5leHBvcnQgY29uc3QgcmFuZG9tID0ge1xuXHRyYW5kb21DTVlLLFxuXHRyYW5kb21Db2xvcixcblx0cmFuZG9tSGV4LFxuXHRyYW5kb21IU0wsXG5cdHJhbmRvbUhTVixcblx0cmFuZG9tTEFCLFxuXHRyYW5kb21SR0IsXG5cdHJhbmRvbVNMLFxuXHRyYW5kb21TVlxufTtcbiJdfQ==