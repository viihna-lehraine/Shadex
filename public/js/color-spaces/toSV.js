import { defaults } from '../config/defaults.js';
import { conversionHelpers } from '../helpers/conversion.js';
import { paletteHelpers } from '../helpers/palette.js';
import { core } from '../utils/core.js';
const format = 'sv';
function cmykToSV(cmyk) {
    try {
        if (!paletteHelpers.validateColorValues(cmyk)) {
            console.error(`Invalid cmyk value ${JSON.stringify(cmyk)}`);
            return core.clone(defaults.defaultSV);
        }
        const hsv = conversionHelpers.cmykToHSVHelper(core.clone(cmyk));
        return {
            value: {
                saturation: hsv.value.saturation,
                value: hsv.value.value
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting cmyk to SV: ${error}`);
        return defaults.defaultSV;
    }
}
function hexToSV(hex) {
    try {
        if (!paletteHelpers.validateColorValues(hex)) {
            console.error(`Invalid hex value ${JSON.stringify(hex)}`);
            return core.clone(defaults.defaultSV);
        }
        const hsv = conversionHelpers.hexToHSVHelper(core.clone(hex));
        return {
            value: {
                saturation: hsv.value.saturation,
                value: hsv.value.value
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting hex to SV: ${error}`);
        return defaults.defaultSV;
    }
}
function hslToSV(hsl) {
    try {
        if (!paletteHelpers.validateColorValues(hsl)) {
            console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.defaultSV);
        }
        const hsv = conversionHelpers.hslToHSVHelper(core.clone(hsl));
        return {
            value: {
                saturation: hsv.value.saturation,
                value: hsv.value.value
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting HSL to SV: ${error}`);
        return defaults.defaultSV;
    }
}
function hsvToSV(hsv) {
    try {
        if (!paletteHelpers.validateColorValues(hsv)) {
            console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
            return core.clone(defaults.defaultSV);
        }
        return {
            value: {
                saturation: hsv.value.saturation,
                value: hsv.value.value
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting HSV to SV: ${error}`);
        return defaults.defaultSV;
    }
}
function labToSV(lab) {
    try {
        if (!paletteHelpers.validateColorValues(lab)) {
            console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
            return core.clone(defaults.defaultSV);
        }
        const hsv = conversionHelpers.labToHSVHelper(core.clone(lab));
        return {
            value: {
                saturation: hsv.value.saturation,
                value: hsv.value.value
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting LAB to SV: ${error}`);
        return defaults.defaultSV;
    }
}
function rgbToSV(rgb) {
    try {
        if (!paletteHelpers.validateColorValues(rgb)) {
            console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
            return core.clone(defaults.defaultSV);
        }
        const hsv = conversionHelpers.rgbToHSVHelper(core.clone(rgb));
        return {
            value: {
                saturation: hsv.value.saturation,
                value: hsv.value.value
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting RGB to SV: ${error}`);
        return defaults.defaultSV;
    }
}
function xyzToSV(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultSV);
        }
        const hsv = conversionHelpers.xyzToHSVHelper(core.clone(xyz));
        return {
            value: {
                saturation: hsv.value.saturation,
                value: hsv.value.value
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting XYZ to SV: ${error}`);
        return defaults.defaultSV;
    }
}
export const toSV = {
    cmykToSV,
    hexToSV,
    hslToSV,
    hsvToSV,
    labToSV,
    rgbToSV,
    xyzToSV
};
//# sourceMappingURL=data:application/json;base64,