import { defaults } from '../config/defaults.js';
import { conversionHelpers } from '../helpers/conversion.js';
import { paletteHelpers } from '../helpers/palette.js';
import { core } from '../utils/core.js';
const format = 'sl';
function cmykToSL(cmyk) {
    try {
        if (!paletteHelpers.validateColorValues(cmyk)) {
            console.error(`Invalid cmyk value ${JSON.stringify(cmyk)}`);
            return core.clone(defaults.defaultSL);
        }
        const hsl = conversionHelpers.cmykToHSLHelper(core.clone(cmyk));
        return {
            value: {
                saturation: hsl.value.saturation,
                lightness: hsl.value.lightness
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting cmyk to SL: ${error}`);
        return defaults.defaultSL;
    }
}
function hexToSL(hex) {
    try {
        if (!paletteHelpers.validateColorValues(hex)) {
            console.error(`Invalid hex value ${JSON.stringify(hex)}`);
            return core.clone(defaults.defaultSL);
        }
        const hsl = conversionHelpers.hexToHSLHelper(core.clone(hex));
        return {
            value: {
                saturation: hsl.value.saturation,
                lightness: hsl.value.lightness
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting hex to SL: ${error}`);
        return defaults.defaultSL;
    }
}
function hslToSL(hsl) {
    try {
        if (!paletteHelpers.validateColorValues(hsl)) {
            console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
            return core.clone(defaults.defaultSL);
        }
        return {
            value: {
                saturation: hsl.value.saturation,
                lightness: hsl.value.lightness
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting HSL to SL: ${error}`);
        return defaults.defaultSL;
    }
}
function hsvToSL(hsv) {
    try {
        if (!paletteHelpers.validateColorValues(hsv)) {
            console.error(`Invalid HSV value ${JSON.stringify(hsv)}`);
            return core.clone(defaults.defaultSL);
        }
        const hsl = conversionHelpers.hsvToHSLHelper(core.clone(hsv));
        return {
            value: {
                saturation: hsl.value.saturation,
                lightness: hsl.value.lightness
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting HSV to SL: ${error}`);
        return defaults.defaultSL;
    }
}
function labToSL(lab) {
    try {
        if (!paletteHelpers.validateColorValues(lab)) {
            console.error(`Invalid LAB value ${JSON.stringify(lab)}`);
            return core.clone(defaults.defaultSL);
        }
        const hsl = conversionHelpers.labToHSLHelper(core.clone(lab));
        return {
            value: {
                saturation: hsl.value.saturation,
                lightness: hsl.value.lightness
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting LAB to SL: ${error}`);
        return defaults.defaultSL;
    }
}
function rgbToSL(rgb) {
    try {
        if (!paletteHelpers.validateColorValues(rgb)) {
            console.error(`Invalid RGB value ${JSON.stringify(rgb)}`);
            return core.clone(defaults.defaultSL);
        }
        const hsl = conversionHelpers.rgbToHSLHelper(core.clone(rgb));
        return {
            value: {
                saturation: hsl.value.saturation,
                lightness: hsl.value.lightness
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting RGB to SL: ${error}`);
        return defaults.defaultSL;
    }
}
function xyzToSL(xyz) {
    try {
        if (!paletteHelpers.validateColorValues(xyz)) {
            console.error(`Invalid XYZ value ${JSON.stringify(xyz)}`);
            return core.clone(defaults.defaultSL);
        }
        const hsl = conversionHelpers.xyzToHSLHelper(core.clone(xyz));
        return {
            value: {
                saturation: hsl.value.saturation,
                lightness: hsl.value.lightness
            },
            format
        };
    }
    catch (error) {
        console.error(`Error converting XYZ to SL: ${error}`);
        return defaults.defaultSL;
    }
}
export const toSL = {
    cmykToSL,
    hexToSL,
    hslToSL,
    hsvToSL,
    labToSL,
    rgbToSL,
    xyzToSL
};
//# sourceMappingURL=data:application/json;base64,