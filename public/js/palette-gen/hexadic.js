import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genHexadicHues(hsl) {
    const hexadicHues = [];
    const baseHue = hsl.hue;
    const hue1 = baseHue;
    const hue2 = (hue1 + 180) % 360;
    const randomDistance = Math.floor(Math.random() * 71 + 10);
    const hue3 = (hue1 + randomDistance) % 360;
    const hue4 = (hue3 + 180) % 360;
    const hue5 = (hue1 + 360 - randomDistance) % 360;
    const hue6 = (hue5 + 180) % 360;
    hexadicHues.push(hue1, hue2, hue3, hue4, hue5, hue6);
    return hexadicHues;
}
export function genHexadicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 6) {
        window.alert('To generate a hexadic palette, please select a number of swatches greater than 5');
        return [];
    }
    const colors = [];
    let baseColorValues = customColor
        ? genAllColorValues(customColor)
        : genAllColorValues(random.randomColor(initialColorSpace));
    const baseHSL = baseColorValues.hsl;
    if (!baseHSL) {
        throw new Error('HSL values are required to generate the hexadic palette');
    }
    colors.push(baseHSL);
    const hexadicHues = genHexadicHues(baseHSL);
    for (let i = 0; i < numBoxes; i++) {
        const hue = hexadicHues[i % 6];
        let { saturation, lightness } = random.randomSL();
        const hexadicColorValues = genAllColorValues({
            hue,
            saturation,
            lightness,
            format: 'hsl'
        });
        const hexadicHSL = hexadicColorValues.hsl;
        colors.push(hexadicHSL);
        const colorBox = document.getElementById(`color-box-${i + 1}`);
        if (colorBox) {
            const hexColor = hexadicColorValues.hex;
            colorBox.style.backgroundColor = hexColor.hex;
            populateColorTextOutputBox(hexadicHSL, i + 1);
        }
    }
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4YWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi9oZXhhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEdBQWM7SUFDNUMsTUFBTSxXQUFXLEdBQWEsRUFBRSxDQUFDO0lBQ2pDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDeEIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNoQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDM0QsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQzNDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNoQyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2pELE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUVoQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFckQsT0FBTyxXQUFXLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FDaEMsUUFBZ0IsRUFDaEIsY0FBc0MsSUFBSSxFQUMxQyxvQkFBc0MsS0FBSztJQUUzQyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsS0FBSyxDQUNYLGtGQUFrRixDQUNsRixDQUFDO1FBQ0YsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQXNCLEVBQUUsQ0FBQztJQUVyQyxJQUFJLGVBQWUsR0FBRyxXQUFXO1FBQ2hDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7UUFDaEMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBRTVELE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxHQUFnQixDQUFDO0lBRWpELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNkLE1BQU0sSUFBSSxLQUFLLENBQ2QseURBQXlELENBQ3pELENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVyQixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFNUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ25DLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFbEQsTUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztZQUM1QyxHQUFHO1lBQ0gsVUFBVTtZQUNWLFNBQVM7WUFDVCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUMsQ0FBQztRQUNILE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLEdBQWdCLENBQUM7UUFFdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV4QixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFL0QsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNkLE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDLEdBQWdCLENBQUM7WUFDckQsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUU5QywwQkFBMEIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9DLENBQUM7SUFDRixDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuQWxsQ29sb3JWYWx1ZXMgfSBmcm9tICcuLi9jb2xvci1jb252ZXJzaW9uL2NvbnZlcnNpb24nO1xuaW1wb3J0IHsgcG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3ggfSBmcm9tICcuLi9kb20vZG9tLW1haW4nO1xuaW1wb3J0IHsgcmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvY29sb3ItcmFuZG9taXplcic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5IZXhhZGljSHVlcyhoc2w6IHR5cGVzLkhTTCk6IG51bWJlcltdIHtcblx0Y29uc3QgaGV4YWRpY0h1ZXM6IG51bWJlcltdID0gW107XG5cdGNvbnN0IGJhc2VIdWUgPSBoc2wuaHVlO1xuXHRjb25zdCBodWUxID0gYmFzZUh1ZTtcblx0Y29uc3QgaHVlMiA9IChodWUxICsgMTgwKSAlIDM2MDtcblx0Y29uc3QgcmFuZG9tRGlzdGFuY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA3MSArIDEwKTtcblx0Y29uc3QgaHVlMyA9IChodWUxICsgcmFuZG9tRGlzdGFuY2UpICUgMzYwO1xuXHRjb25zdCBodWU0ID0gKGh1ZTMgKyAxODApICUgMzYwO1xuXHRjb25zdCBodWU1ID0gKGh1ZTEgKyAzNjAgLSByYW5kb21EaXN0YW5jZSkgJSAzNjA7XG5cdGNvbnN0IGh1ZTYgPSAoaHVlNSArIDE4MCkgJSAzNjA7XG5cblx0aGV4YWRpY0h1ZXMucHVzaChodWUxLCBodWUyLCBodWUzLCBodWU0LCBodWU1LCBodWU2KTtcblxuXHRyZXR1cm4gaGV4YWRpY0h1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5IZXhhZGljUGFsZXR0ZShcblx0bnVtQm94ZXM6IG51bWJlcixcblx0Y3VzdG9tQ29sb3I6IHR5cGVzLkNvbG9yRGF0YSB8IG51bGwgPSBudWxsLFxuXHRpbml0aWFsQ29sb3JTcGFjZTogdHlwZXMuQ29sb3JTcGFjZSA9ICdoZXgnXG4pOiB0eXBlcy5Db2xvckRhdGFbXSB7XG5cdGlmIChudW1Cb3hlcyA8IDYpIHtcblx0XHR3aW5kb3cuYWxlcnQoXG5cdFx0XHQnVG8gZ2VuZXJhdGUgYSBoZXhhZGljIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYSBudW1iZXIgb2Ygc3dhdGNoZXMgZ3JlYXRlciB0aGFuIDUnXG5cdFx0KTtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjb25zdCBjb2xvcnM6IHR5cGVzLkNvbG9yRGF0YVtdID0gW107XG5cblx0bGV0IGJhc2VDb2xvclZhbHVlcyA9IGN1c3RvbUNvbG9yXG5cdFx0PyBnZW5BbGxDb2xvclZhbHVlcyhjdXN0b21Db2xvcilcblx0XHQ6IGdlbkFsbENvbG9yVmFsdWVzKHJhbmRvbS5yYW5kb21Db2xvcihpbml0aWFsQ29sb3JTcGFjZSkpO1xuXG5cdGNvbnN0IGJhc2VIU0wgPSBiYXNlQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRpZiAoIWJhc2VIU0wpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHQnSFNMIHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gZ2VuZXJhdGUgdGhlIGhleGFkaWMgcGFsZXR0ZSdcblx0XHQpO1xuXHR9XG5cblx0Y29sb3JzLnB1c2goYmFzZUhTTCk7XG5cblx0Y29uc3QgaGV4YWRpY0h1ZXMgPSBnZW5IZXhhZGljSHVlcyhiYXNlSFNMKTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IG51bUJveGVzOyBpKyspIHtcblx0XHRjb25zdCBodWUgPSBoZXhhZGljSHVlc1tpICUgNl07XG5cdFx0bGV0IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH0gPSByYW5kb20ucmFuZG9tU0woKTtcblxuXHRcdGNvbnN0IGhleGFkaWNDb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdGh1ZSxcblx0XHRcdHNhdHVyYXRpb24sXG5cdFx0XHRsaWdodG5lc3MsXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSk7XG5cdFx0Y29uc3QgaGV4YWRpY0hTTCA9IGhleGFkaWNDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMO1xuXG5cdFx0Y29sb3JzLnB1c2goaGV4YWRpY0hTTCk7XG5cblx0XHRjb25zdCBjb2xvckJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjb2xvci1ib3gtJHtpICsgMX1gKTtcblxuXHRcdGlmIChjb2xvckJveCkge1xuXHRcdFx0Y29uc3QgaGV4Q29sb3IgPSBoZXhhZGljQ29sb3JWYWx1ZXMuaGV4IGFzIHR5cGVzLkhleDtcblx0XHRcdGNvbG9yQm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGhleENvbG9yLmhleDtcblxuXHRcdFx0cG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3goaGV4YWRpY0hTTCwgaSArIDEpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xvcnM7XG59XG4iXX0=