import { genAllColorValues } from '../color-conversion/conversion.js';
import { dom } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genHexadicHues(color) {
    try {
        const colorValues = genAllColorValues(color);
        const baseHSL = colorValues.hsl;
        if (!baseHSL) {
            throw new Error('Unable to generate hexadic hues - missing HSL values');
        }
        const hexadicHues = [];
        const baseHue = baseHSL.value.hue;
        const hue1 = baseHue;
        const hue2 = (hue1 + 180) % 360;
        const randomDistance = Math.floor(Math.random() * 71 + 10);
        const hue3 = (hue1 + randomDistance) % 360;
        const hue4 = (hue3 + 180) % 360;
        const hue5 = (hue1 + 360 - randomDistance) % 360;
        const hue6 = (hue5 + 180) % 360;
        hexadicHues.push(hue1, hue2, hue3, hue4, hue5, hue6);
        return hexadicHues;
    }
    catch (error) {
        console.error(`Error generating hexadic hues: ${error}`);
        return [];
    }
}
export function genHexadicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    try {
        if (numBoxes < 6) {
            window.alert('To generate a hexadic palette, please select a number of swatches greater than 5');
            return [];
        }
        const colors = [];
        const baseColorValues = genAllColorValues(customColor ?? random.randomColor(initialColorSpace));
        const baseHSL = baseColorValues.hsl;
        if (!baseHSL) {
            throw new Error('HSL values are required to generate the hexadic palette');
        }
        colors.push(baseHSL);
        const hexadicHues = genHexadicHues(baseHSL);
        for (let i = 0; i < numBoxes; i++) {
            const hue = hexadicHues[i % 6];
            const { value: { saturation, lightness } } = random.randomSL();
            const newColorValues = genAllColorValues({
                value: { hue, saturation, lightness },
                format: 'hsl'
            });
            const newHSL = newColorValues.hsl;
            colors.push(newHSL);
            const colorBox = document.getElementById(`color-box-${i + 1}`);
            if (colorBox) {
                const hexColor = newColorValues.hex;
                colorBox.style.backgroundColor = hexColor.value.hex;
                dom.populateColorTextOutputBox(newHSL, i + 1);
            }
        }
        return colors;
    }
    catch (error) {
        console.error(`Error generating hexadic palette: ${error}`);
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4YWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi9oZXhhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbkQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxLQUFrQjtJQUNoRCxJQUFJLENBQUM7UUFDSixNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBZ0IsQ0FBQztRQUU3QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZCxNQUFNLElBQUksS0FBSyxDQUNkLHNEQUFzRCxDQUN0RCxDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztRQUNqQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUVsQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUM7UUFDckIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMzRCxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDM0MsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDakQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRWhDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVyRCxPQUFPLFdBQVcsQ0FBQztJQUNwQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQ2hDLFFBQWdCLEVBQ2hCLGNBQWtDLElBQUksRUFDdEMsb0JBQXNDLEtBQUs7SUFFM0MsSUFBSSxDQUFDO1FBQ0osSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxrRkFBa0YsQ0FDbEYsQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1FBQ1gsQ0FBQztRQUVELE1BQU0sTUFBTSxHQUFrQixFQUFFLENBQUM7UUFFakMsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQ3hDLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQ3BELENBQUM7UUFFRixNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBZ0IsQ0FBQztRQUVqRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZCxNQUFNLElBQUksS0FBSyxDQUNkLHlEQUF5RCxDQUN6RCxDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckIsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTVDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNuQyxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sRUFDTCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEVBQ2hDLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRXRCLE1BQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDO2dCQUN4QyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtnQkFDckMsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDLENBQUM7WUFDSCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsR0FBZ0IsQ0FBQztZQUUvQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXBCLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUUvRCxJQUFJLFFBQVEsRUFBRSxDQUFDO2dCQUNkLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxHQUFnQixDQUFDO2dCQUNqRCxRQUFRLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztnQkFFcEQsR0FBRyxDQUFDLDBCQUEwQixDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0MsQ0FBQztRQUNGLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMscUNBQXFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDNUQsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbkFsbENvbG9yVmFsdWVzIH0gZnJvbSAnLi4vY29sb3ItY29udmVyc2lvbi9jb252ZXJzaW9uJztcbmltcG9ydCB7IGRvbSB9IGZyb20gJy4uL2RvbS9kb20tbWFpbic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleC90eXBlcyc7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkhleGFkaWNIdWVzKGNvbG9yOiB0eXBlcy5Db2xvcik6IG51bWJlcltdIHtcblx0dHJ5IHtcblx0XHRjb25zdCBjb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKGNvbG9yKTtcblx0XHRjb25zdCBiYXNlSFNMID0gY29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRcdGlmICghYmFzZUhTTCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHQnVW5hYmxlIHRvIGdlbmVyYXRlIGhleGFkaWMgaHVlcyAtIG1pc3NpbmcgSFNMIHZhbHVlcydcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaGV4YWRpY0h1ZXM6IG51bWJlcltdID0gW107XG5cdFx0Y29uc3QgYmFzZUh1ZSA9IGJhc2VIU0wudmFsdWUuaHVlO1xuXG5cdFx0Y29uc3QgaHVlMSA9IGJhc2VIdWU7XG5cdFx0Y29uc3QgaHVlMiA9IChodWUxICsgMTgwKSAlIDM2MDtcblx0XHRjb25zdCByYW5kb21EaXN0YW5jZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDcxICsgMTApO1xuXHRcdGNvbnN0IGh1ZTMgPSAoaHVlMSArIHJhbmRvbURpc3RhbmNlKSAlIDM2MDtcblx0XHRjb25zdCBodWU0ID0gKGh1ZTMgKyAxODApICUgMzYwO1xuXHRcdGNvbnN0IGh1ZTUgPSAoaHVlMSArIDM2MCAtIHJhbmRvbURpc3RhbmNlKSAlIDM2MDtcblx0XHRjb25zdCBodWU2ID0gKGh1ZTUgKyAxODApICUgMzYwO1xuXG5cdFx0aGV4YWRpY0h1ZXMucHVzaChodWUxLCBodWUyLCBodWUzLCBodWU0LCBodWU1LCBodWU2KTtcblxuXHRcdHJldHVybiBoZXhhZGljSHVlcztcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIGhleGFkaWMgaHVlczogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gW107XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkhleGFkaWNQYWxldHRlKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogdHlwZXMuQ29sb3IgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JbXSB7XG5cdHRyeSB7XG5cdFx0aWYgKG51bUJveGVzIDwgNikge1xuXHRcdFx0d2luZG93LmFsZXJ0KFxuXHRcdFx0XHQnVG8gZ2VuZXJhdGUgYSBoZXhhZGljIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYSBudW1iZXIgb2Ygc3dhdGNoZXMgZ3JlYXRlciB0aGFuIDUnXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IGNvbG9yczogdHlwZXMuQ29sb3JbXSA9IFtdO1xuXG5cdFx0Y29uc3QgYmFzZUNvbG9yVmFsdWVzID0gZ2VuQWxsQ29sb3JWYWx1ZXMoXG5cdFx0XHRjdXN0b21Db2xvciA/PyByYW5kb20ucmFuZG9tQ29sb3IoaW5pdGlhbENvbG9yU3BhY2UpXG5cdFx0KTtcblxuXHRcdGNvbnN0IGJhc2VIU0wgPSBiYXNlQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRcdGlmICghYmFzZUhTTCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHQnSFNMIHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gZ2VuZXJhdGUgdGhlIGhleGFkaWMgcGFsZXR0ZSdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Y29sb3JzLnB1c2goYmFzZUhTTCk7XG5cblx0XHRjb25zdCBoZXhhZGljSHVlcyA9IGdlbkhleGFkaWNIdWVzKGJhc2VIU0wpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBudW1Cb3hlczsgaSsrKSB7XG5cdFx0XHRjb25zdCBodWUgPSBoZXhhZGljSHVlc1tpICUgNl07XG5cdFx0XHRjb25zdCB7XG5cdFx0XHRcdHZhbHVlOiB7IHNhdHVyYXRpb24sIGxpZ2h0bmVzcyB9XG5cdFx0XHR9ID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cblx0XHRcdGNvbnN0IG5ld0NvbG9yVmFsdWVzID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0XHR2YWx1ZTogeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcyB9LFxuXHRcdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IG5ld0hTTCA9IG5ld0NvbG9yVmFsdWVzLmhzbCBhcyB0eXBlcy5IU0w7XG5cblx0XHRcdGNvbG9ycy5wdXNoKG5ld0hTTCk7XG5cblx0XHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNvbG9yLWJveC0ke2kgKyAxfWApO1xuXG5cdFx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdFx0Y29uc3QgaGV4Q29sb3IgPSBuZXdDb2xvclZhbHVlcy5oZXggYXMgdHlwZXMuSGV4O1xuXHRcdFx0XHRjb2xvckJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBoZXhDb2xvci52YWx1ZS5oZXg7XG5cblx0XHRcdFx0ZG9tLnBvcHVsYXRlQ29sb3JUZXh0T3V0cHV0Qm94KG5ld0hTTCwgaSArIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjb2xvcnM7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyBoZXhhZGljIHBhbGV0dGU6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG4iXX0=