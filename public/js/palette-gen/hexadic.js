import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genHexadicHues(hsl) {
    const hexadicHues = [];
    const baseHue = hsl.value.hue;
    const hue1 = baseHue;
    const hue2 = (hue1 + 180) % 360;
    const randomDistance = Math.floor(Math.random() * 71 + 10);
    const hue3 = (hue1 + randomDistance) % 360;
    const hue4 = (hue3 + 180) % 360;
    const hue5 = (hue1 + 360 - randomDistance) % 360;
    const hue6 = (hue5 + 180) % 360;
    hexadicHues.push(hue1, hue2, hue3, hue4, hue5, hue6);
    return hexadicHues;
}
export function genHexadicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 6) {
        window.alert('To generate a hexadic palette, please select a number of swatches greater than 5');
        return [];
    }
    const colors = [];
    let baseColorValues = customColor
        ? genAllColorValues(customColor)
        : genAllColorValues(random.randomColor(initialColorSpace));
    const baseHSL = baseColorValues.hsl;
    if (!baseHSL) {
        throw new Error('HSL values are required to generate the hexadic palette');
    }
    colors.push(baseHSL);
    const hexadicHues = genHexadicHues(baseHSL);
    for (let i = 0; i < numBoxes; i++) {
        const hue = hexadicHues[i % 6];
        let { value: { saturation, lightness } } = random.randomSL();
        const hexadicColorValues = genAllColorValues({
            value: { hue, saturation, lightness },
            format: 'hsl'
        });
        const hexadicHSL = hexadicColorValues.hsl;
        colors.push(hexadicHSL);
        const colorBox = document.getElementById(`color-box-${i + 1}`);
        if (colorBox) {
            const hexColor = hexadicColorValues.hex;
            colorBox.style.backgroundColor = hexColor.value.hex;
            populateColorTextOutputBox(hexadicHSL, i + 1);
        }
    }
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4YWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi9oZXhhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEdBQWM7SUFDNUMsTUFBTSxXQUFXLEdBQWEsRUFBRSxDQUFDO0lBQ2pDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzlCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQztJQUNyQixNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDaEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzNELE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzQyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDaEMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNqRCxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFFaEMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXJELE9BQU8sV0FBVyxDQUFDO0FBQ3BCLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQ2hDLFFBQWdCLEVBQ2hCLGNBQWtDLElBQUksRUFDdEMsb0JBQXNDLEtBQUs7SUFFM0MsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxrRkFBa0YsQ0FDbEYsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFrQixFQUFFLENBQUM7SUFFakMsSUFBSSxlQUFlLEdBQUcsV0FBVztRQUNoQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUU1RCxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBZ0IsQ0FBQztJQUVqRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxNQUFNLElBQUksS0FBSyxDQUNkLHlEQUF5RCxDQUN6RCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFckIsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTVDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNuQyxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksRUFDSCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEVBQ2hDLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXRCLE1BQU0sa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7WUFDNUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7WUFDckMsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDLENBQUM7UUFDSCxNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxHQUFnQixDQUFDO1FBRXZELE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFeEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRS9ELElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxNQUFNLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxHQUFnQixDQUFDO1lBQ3JELFFBQVEsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBRXBELDBCQUEwQixDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5BbGxDb2xvclZhbHVlcyB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbic7XG5pbXBvcnQgeyBwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveCB9IGZyb20gJy4uL2RvbS9kb20tbWFpbic7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkhleGFkaWNIdWVzKGhzbDogdHlwZXMuSFNMKTogbnVtYmVyW10ge1xuXHRjb25zdCBoZXhhZGljSHVlczogbnVtYmVyW10gPSBbXTtcblx0Y29uc3QgYmFzZUh1ZSA9IGhzbC52YWx1ZS5odWU7XG5cdGNvbnN0IGh1ZTEgPSBiYXNlSHVlO1xuXHRjb25zdCBodWUyID0gKGh1ZTEgKyAxODApICUgMzYwO1xuXHRjb25zdCByYW5kb21EaXN0YW5jZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDcxICsgMTApO1xuXHRjb25zdCBodWUzID0gKGh1ZTEgKyByYW5kb21EaXN0YW5jZSkgJSAzNjA7XG5cdGNvbnN0IGh1ZTQgPSAoaHVlMyArIDE4MCkgJSAzNjA7XG5cdGNvbnN0IGh1ZTUgPSAoaHVlMSArIDM2MCAtIHJhbmRvbURpc3RhbmNlKSAlIDM2MDtcblx0Y29uc3QgaHVlNiA9IChodWU1ICsgMTgwKSAlIDM2MDtcblxuXHRoZXhhZGljSHVlcy5wdXNoKGh1ZTEsIGh1ZTIsIGh1ZTMsIGh1ZTQsIGh1ZTUsIGh1ZTYpO1xuXG5cdHJldHVybiBoZXhhZGljSHVlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkhleGFkaWNQYWxldHRlKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogdHlwZXMuQ29sb3IgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JbXSB7XG5cdGlmIChudW1Cb3hlcyA8IDYpIHtcblx0XHR3aW5kb3cuYWxlcnQoXG5cdFx0XHQnVG8gZ2VuZXJhdGUgYSBoZXhhZGljIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYSBudW1iZXIgb2Ygc3dhdGNoZXMgZ3JlYXRlciB0aGFuIDUnXG5cdFx0KTtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjb25zdCBjb2xvcnM6IHR5cGVzLkNvbG9yW10gPSBbXTtcblxuXHRsZXQgYmFzZUNvbG9yVmFsdWVzID0gY3VzdG9tQ29sb3Jcblx0XHQ/IGdlbkFsbENvbG9yVmFsdWVzKGN1c3RvbUNvbG9yKVxuXHRcdDogZ2VuQWxsQ29sb3JWYWx1ZXMocmFuZG9tLnJhbmRvbUNvbG9yKGluaXRpYWxDb2xvclNwYWNlKSk7XG5cblx0Y29uc3QgYmFzZUhTTCA9IGJhc2VDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMO1xuXG5cdGlmICghYmFzZUhTTCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdCdIU0wgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBnZW5lcmF0ZSB0aGUgaGV4YWRpYyBwYWxldHRlJ1xuXHRcdCk7XG5cdH1cblxuXHRjb2xvcnMucHVzaChiYXNlSFNMKTtcblxuXHRjb25zdCBoZXhhZGljSHVlcyA9IGdlbkhleGFkaWNIdWVzKGJhc2VIU0wpO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQm94ZXM7IGkrKykge1xuXHRcdGNvbnN0IGh1ZSA9IGhleGFkaWNIdWVzW2kgJSA2XTtcblx0XHRsZXQge1xuXHRcdFx0dmFsdWU6IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH1cblx0XHR9ID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cblx0XHRjb25zdCBoZXhhZGljQ29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHR2YWx1ZTogeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcyB9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH0pO1xuXHRcdGNvbnN0IGhleGFkaWNIU0wgPSBoZXhhZGljQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRcdGNvbG9ycy5wdXNoKGhleGFkaWNIU0wpO1xuXG5cdFx0Y29uc3QgY29sb3JCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY29sb3ItYm94LSR7aSArIDF9YCk7XG5cblx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdGNvbnN0IGhleENvbG9yID0gaGV4YWRpY0NvbG9yVmFsdWVzLmhleCBhcyB0eXBlcy5IZXg7XG5cdFx0XHRjb2xvckJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBoZXhDb2xvci52YWx1ZS5oZXg7XG5cblx0XHRcdHBvcHVsYXRlQ29sb3JUZXh0T3V0cHV0Qm94KGhleGFkaWNIU0wsIGkgKyAxKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sb3JzO1xufVxuIl19