import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
import { paletteHelpers } from '../helpers/palette.js';
export function genDiadicHues(baseHue) {
    const diadicHues = [];
    const randomDistance = paletteHelpers.getWeightedRandomInterval();
    const hue1 = baseHue;
    const hue2 = (hue1 + randomDistance) % 360;
    diadicHues.push(hue1, hue2);
    return diadicHues;
}
export function genDiadicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 2) {
        window.alert('To generate a diadic palette, please select a number of swatches greater than 1');
        return [];
    }
    const colors = [];
    // generate or retrieve base color
    const baseColorValues = customColor
        ? genAllColorValues(customColor)
        : genAllColorValues(random.randomColor(initialColorSpace));
    const baseHSL = baseColorValues.hsl;
    if (!baseHSL) {
        throw new Error('Base HSL color is missing');
    }
    // add base color to the palette
    colors.push(baseHSL);
    // generate diadic hues based on the base hue
    const diadicHues = genDiadicHues(baseHSL.value.hue);
    // generate the second diadic color
    const hue = diadicHues[1];
    const sl = random.randomSL();
    const diadicColorValues = genAllColorValues({
        value: {
            hue,
            saturation: sl.value.saturation,
            lightness: sl.value.lightness
        },
        format: 'hsl'
    });
    const diadicHSL = diadicColorValues.hsl;
    colors.push(diadicHSL);
    // if additional boxes are needed, generate variations
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 2); // select base or diadic color
        const baseHue = diadicHues[baseColorIndex];
        const newHue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { value: { saturation, lightness } } = random.randomSL();
        const newColorValues = genAllColorValues({
            value: {
                hue: newHue,
                saturation,
                lightness
            },
            format: 'hsl'
        });
        const newHSL = newColorValues.hsl;
        colors.push(newHSL);
    }
    // update the DOM with generated colors
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        const colorValues = genAllColorValues(color);
        const hslColor = colorValues.hsl;
        if (!hslColor) {
            console.warn(`Skipping color at index ${index} due to missing HSL value.`);
            return;
        }
        if (colorBox) {
            const hexColor = colorValues.hex;
            colorBox.style.backgroundColor = hexColor.value.hex;
            populateColorTextOutputBox(hslColor, index + 1);
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZGljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhbGV0dGUtZ2VuL2RpYWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXBELE1BQU0sVUFBVSxhQUFhLENBQUMsT0FBZTtJQUM1QyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdEIsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFDbEUsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUUzQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUU1QixPQUFPLFVBQVUsQ0FBQztBQUNuQixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUMvQixRQUFnQixFQUNoQixjQUFrQyxJQUFJLEVBQ3RDLG9CQUFzQyxLQUFLO0lBRTNDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsaUZBQWlGLENBQ2pGLENBQUM7UUFDRixPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBa0IsRUFBRSxDQUFDO0lBRWpDLGtDQUFrQztJQUNsQyxNQUFNLGVBQWUsR0FBRyxXQUFXO1FBQ2xDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7UUFDaEMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0s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QVEsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQztJQUNGLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuQWxsQ29sb3JWYWx1ZXMgfSBmcm9tICcuLi9jb2xvci1jb252ZXJzaW9uL2NvbnZlcnNpb24nO1xuaW1wb3J0IHsgcG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3ggfSBmcm9tICcuLi9kb20vZG9tLW1haW4nO1xuaW1wb3J0IHsgcmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvY29sb3ItcmFuZG9taXplcic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBwYWxldHRlSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMvcGFsZXR0ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5EaWFkaWNIdWVzKGJhc2VIdWU6IG51bWJlcik6IG51bWJlcltdIHtcblx0Y29uc3QgZGlhZGljSHVlcyA9IFtdO1xuXHRjb25zdCByYW5kb21EaXN0YW5jZSA9IHBhbGV0dGVIZWxwZXJzLmdldFdlaWdodGVkUmFuZG9tSW50ZXJ2YWwoKTtcblx0Y29uc3QgaHVlMSA9IGJhc2VIdWU7XG5cdGNvbnN0IGh1ZTIgPSAoaHVlMSArIHJhbmRvbURpc3RhbmNlKSAlIDM2MDtcblxuXHRkaWFkaWNIdWVzLnB1c2goaHVlMSwgaHVlMik7XG5cblx0cmV0dXJuIGRpYWRpY0h1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5EaWFkaWNQYWxldHRlKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogdHlwZXMuQ29sb3IgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JbXSB7XG5cdGlmIChudW1Cb3hlcyA8IDIpIHtcblx0XHR3aW5kb3cuYWxlcnQoXG5cdFx0XHQnVG8gZ2VuZXJhdGUgYSBkaWFkaWMgcGFsZXR0ZSwgcGxlYXNlIHNlbGVjdCBhIG51bWJlciBvZiBzd2F0Y2hlcyBncmVhdGVyIHRoYW4gMSdcblx0XHQpO1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdGNvbnN0IGNvbG9yczogdHlwZXMuQ29sb3JbXSA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIG9yIHJldHJpZXZlIGJhc2UgY29sb3Jcblx0Y29uc3QgYmFzZUNvbG9yVmFsdWVzID0gY3VzdG9tQ29sb3Jcblx0XHQ/IGdlbkFsbENvbG9yVmFsdWVzKGN1c3RvbUNvbG9yKVxuXHRcdDogZ2VuQWxsQ29sb3JWYWx1ZXMocmFuZG9tLnJhbmRvbUNvbG9yKGluaXRpYWxDb2xvclNwYWNlKSk7XG5cblx0Y29uc3QgYmFzZUhTTCA9IGJhc2VDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMO1xuXG5cdGlmICghYmFzZUhTTCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQmFzZSBIU0wgY29sb3IgaXMgbWlzc2luZycpO1xuXHR9XG5cblx0Ly8gYWRkIGJhc2UgY29sb3IgdG8gdGhlIHBhbGV0dGVcblx0Y29sb3JzLnB1c2goYmFzZUhTTCk7XG5cblx0Ly8gZ2VuZXJhdGUgZGlhZGljIGh1ZXMgYmFzZWQgb24gdGhlIGJhc2UgaHVlXG5cdGNvbnN0IGRpYWRpY0h1ZXMgPSBnZW5EaWFkaWNIdWVzKGJhc2VIU0wudmFsdWUuaHVlKTtcblxuXHQvLyBnZW5lcmF0ZSB0aGUgc2Vjb25kIGRpYWRpYyBjb2xvclxuXHRjb25zdCBodWUgPSBkaWFkaWNIdWVzWzFdO1xuXHRjb25zdCBzbCA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXHRjb25zdCBkaWFkaWNDb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHR2YWx1ZToge1xuXHRcdFx0aHVlLFxuXHRcdFx0c2F0dXJhdGlvbjogc2wudmFsdWUuc2F0dXJhdGlvbixcblx0XHRcdGxpZ2h0bmVzczogc2wudmFsdWUubGlnaHRuZXNzXG5cdFx0fSxcblx0XHRmb3JtYXQ6ICdoc2wnXG5cdH0pO1xuXG5cdGNvbnN0IGRpYWRpY0hTTCA9IGRpYWRpY0NvbG9yVmFsdWVzLmhzbCBhcyB0eXBlcy5IU0w7XG5cdGNvbG9ycy5wdXNoKGRpYWRpY0hTTCk7XG5cblx0Ly8gaWYgYWRkaXRpb25hbCBib3hlcyBhcmUgbmVlZGVkLCBnZW5lcmF0ZSB2YXJpYXRpb25zXG5cdHdoaWxlIChjb2xvcnMubGVuZ3RoIDwgbnVtQm94ZXMpIHtcblx0XHRjb25zdCBiYXNlQ29sb3JJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpOyAvLyBzZWxlY3QgYmFzZSBvciBkaWFkaWMgY29sb3Jcblx0XHRjb25zdCBiYXNlSHVlID0gZGlhZGljSHVlc1tiYXNlQ29sb3JJbmRleF07XG5cblx0XHRjb25zdCBuZXdIdWUgPVxuXHRcdFx0KGJhc2VIdWUgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMSkgLSA1ICsgMzYwKSAlIDM2MDtcblx0XHRsZXQge1xuXHRcdFx0dmFsdWU6IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH1cblx0XHR9ID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cblx0XHRjb25zdCBuZXdDb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZTogbmV3SHVlLFxuXHRcdFx0XHRzYXR1cmF0aW9uLFxuXHRcdFx0XHRsaWdodG5lc3Ncblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSk7XG5cblx0XHRjb25zdCBuZXdIU0wgPSBuZXdDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMO1xuXHRcdGNvbG9ycy5wdXNoKG5ld0hTTCk7XG5cdH1cblxuXHQvLyB1cGRhdGUgdGhlIERPTSB3aXRoIGdlbmVyYXRlZCBjb2xvcnNcblx0Y29sb3JzLmZvckVhY2goKGNvbG9yLCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNvbG9yLWJveC0ke2luZGV4ICsgMX1gKTtcblx0XHRjb25zdCBjb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKGNvbG9yKTtcblx0XHRjb25zdCBoc2xDb2xvciA9IGNvbG9yVmFsdWVzLmhzbCBhcyB0eXBlcy5IU0w7XG5cblx0XHRpZiAoIWhzbENvbG9yKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdGBTa2lwcGluZyBjb2xvciBhdCBpbmRleCAke2luZGV4fSBkdWUgdG8gbWlzc2luZyBIU0wgdmFsdWUuYFxuXHRcdFx0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdGNvbnN0IGhleENvbG9yID0gY29sb3JWYWx1ZXMuaGV4IGFzIHR5cGVzLkhleDtcblx0XHRcdGNvbG9yQm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGhleENvbG9yLnZhbHVlLmhleDtcblxuXHRcdFx0cG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3goaHNsQ29sb3IsIGluZGV4ICsgMSk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gY29sb3JzO1xufVxuIl19