import { genAllColorValues } from '../color-conversion/conversion.js';
import { getWeightedRandomInterval } from '../utils/math.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genDiadicHues(baseHue) {
    const diadicHues = [];
    const randomDistance = getWeightedRandomInterval();
    const hue1 = baseHue;
    const hue2 = (hue1 + randomDistance) % 360;
    diadicHues.push(hue1, hue2);
    return diadicHues;
}
export function genDiadicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 2) {
        window.alert('To generate a diadic palette, please select a number of swatches greater than 1');
        return [];
    }
    const colors = [];
    // generate or retrieve base color
    const baseColorValues = customColor
        ? genAllColorValues(customColor)
        : genAllColorValues(random.randomColor(initialColorSpace));
    const baseHSL = baseColorValues.hsl;
    if (!baseHSL) {
        throw new Error('Base HSL color is missing');
    }
    // add base color to the palette
    colors.push(baseHSL);
    // generate diadic hues based on the base hue
    const diadicHues = genDiadicHues(baseHSL.hue);
    // generate the second diadic color
    const hue = diadicHues[1];
    const sl = random.randomSL();
    const diadicColorValues = genAllColorValues({
        hue,
        saturation: sl.saturation,
        lightness: sl.lightness,
        format: 'hsl'
    });
    const diadicHSL = diadicColorValues.hsl;
    colors.push(diadicHSL);
    // if additional boxes are needed, generate variations
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 2); // Select base or diadic color
        const baseHue = diadicHues[baseColorIndex];
        const newHue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { saturation, lightness } = random.randomSL();
        const newColorValues = genAllColorValues({
            hue: newHue,
            saturation,
            lightness,
            format: 'hsl'
        });
        const newHSL = newColorValues.hsl;
        colors.push(newHSL);
    }
    // update the DOM with generated colors
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        const colorValues = genAllColorValues(color);
        const hslColor = colorValues.hsl;
        if (!hslColor) {
            console.warn(`Skipping color at index ${index} due to missing HSL value.`);
            return;
        }
        if (colorBox) {
            const hexColor = colorValues.hex;
            colorBox.style.backgroundColor = hexColor.hex;
            populateColorTextOutputBox(hslColor, index + 1);
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZGljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhbGV0dGUtZ2VuL2RpYWRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR25ELE1BQU0sVUFBVSxhQUFhLENBQUMsT0FBZTtJQUM1QyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdEIsTUFBTSxjQUFjLEdBQUcseUJBQXlCLEVBQUUsQ0FBQztJQUNuRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUM7SUFDckIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBRTNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTVCLE9BQU8sVUFBVSxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQy9CLFFBQWdCLEVBQ2hCLGNBQXNDLElBQUksRUFDMUMsb0JBQXNDLEtBQUs7SUFFM0MsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxpRkFBaUYsQ0FDakYsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFzQixFQUFFLENBQUM7SUFFckMsa0NBQWtDO0lBQ2xDLE1BQU0sZUFBZSxHQUFHLFdBQVc7UUFDbEMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQztRQUNoQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFFNUQsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLEdBQWdCLENBQUM7SUFFakQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxnQ0FBZ0M7SUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVyQiw2Q0FBNkM7SUFDN0MsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU5QyxtQ0FBbUM7SUFDbkMsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixNQUFNLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1FBQzNDLEdBQUc7UUFDSCxVQUFVLEVBQUUsRUFBRSxDQUFDLFVBQVU7UUFDekIsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1FBQ3ZCLE1BQU0sRUFBRSxLQUFLO0tBQ2IsQ0FBQyxDQUFDO0lBRUgsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsR0FBZ0IsQ0FBQztJQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXZCLHNEQUFzRDtJQUN0RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7UUFDakMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyw4QkFBOEI7UUFDcEYsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTNDLE1BQU0sTUFBTSxHQUNYLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDNUQsSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFbEQsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUM7WUFDeEMsR0FBRyxFQUFFLE1BQU07WUFDWCxVQUFVO1lBQ1YsU0FBUztZQUNULE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLEdBQWdCLENBQUM7UUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsdUNBQXVDO0lBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFnQixDQUFDO1FBRTlDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNmLE9BQU8sQ0FBQyxJQUFJLENBQ1gsMkJBQTJCLEtBQUssNEJBQTRCLENBQzVELENBQUM7WUFDRixPQUFPO1FBQ1IsQ0FBQztRQUVELElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBZ0IsQ0FBQztZQUM5QyxRQUFRLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBRTlDLDBCQUEwQixDQUFDLFFBQVEsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQztJQUNGLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuQWxsQ29sb3JWYWx1ZXMgfSBmcm9tICcuLi9jb2xvci1jb252ZXJzaW9uL2NvbnZlcnNpb24nO1xuaW1wb3J0IHsgZ2V0V2VpZ2h0ZWRSYW5kb21JbnRlcnZhbCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuaW1wb3J0IHsgcG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3ggfSBmcm9tICcuLi9kb20vZG9tLW1haW4nO1xuaW1wb3J0IHsgcmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvY29sb3ItcmFuZG9taXplcic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5EaWFkaWNIdWVzKGJhc2VIdWU6IG51bWJlcik6IG51bWJlcltdIHtcblx0Y29uc3QgZGlhZGljSHVlcyA9IFtdO1xuXHRjb25zdCByYW5kb21EaXN0YW5jZSA9IGdldFdlaWdodGVkUmFuZG9tSW50ZXJ2YWwoKTtcblx0Y29uc3QgaHVlMSA9IGJhc2VIdWU7XG5cdGNvbnN0IGh1ZTIgPSAoaHVlMSArIHJhbmRvbURpc3RhbmNlKSAlIDM2MDtcblxuXHRkaWFkaWNIdWVzLnB1c2goaHVlMSwgaHVlMik7XG5cblx0cmV0dXJuIGRpYWRpY0h1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5EaWFkaWNQYWxldHRlKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogdHlwZXMuQ29sb3JEYXRhIHwgbnVsbCA9IG51bGwsXG5cdGluaXRpYWxDb2xvclNwYWNlOiB0eXBlcy5Db2xvclNwYWNlID0gJ2hleCdcbik6IHR5cGVzLkNvbG9yRGF0YVtdIHtcblx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdHdpbmRvdy5hbGVydChcblx0XHRcdCdUbyBnZW5lcmF0ZSBhIGRpYWRpYyBwYWxldHRlLCBwbGVhc2Ugc2VsZWN0IGEgbnVtYmVyIG9mIHN3YXRjaGVzIGdyZWF0ZXIgdGhhbiAxJ1xuXHRcdCk7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Y29uc3QgY29sb3JzOiB0eXBlcy5Db2xvckRhdGFbXSA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIG9yIHJldHJpZXZlIGJhc2UgY29sb3Jcblx0Y29uc3QgYmFzZUNvbG9yVmFsdWVzID0gY3VzdG9tQ29sb3Jcblx0XHQ/IGdlbkFsbENvbG9yVmFsdWVzKGN1c3RvbUNvbG9yKVxuXHRcdDogZ2VuQWxsQ29sb3JWYWx1ZXMocmFuZG9tLnJhbmRvbUNvbG9yKGluaXRpYWxDb2xvclNwYWNlKSk7XG5cblx0Y29uc3QgYmFzZUhTTCA9IGJhc2VDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMO1xuXG5cdGlmICghYmFzZUhTTCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQmFzZSBIU0wgY29sb3IgaXMgbWlzc2luZycpO1xuXHR9XG5cblx0Ly8gYWRkIGJhc2UgY29sb3IgdG8gdGhlIHBhbGV0dGVcblx0Y29sb3JzLnB1c2goYmFzZUhTTCk7XG5cblx0Ly8gZ2VuZXJhdGUgZGlhZGljIGh1ZXMgYmFzZWQgb24gdGhlIGJhc2UgaHVlXG5cdGNvbnN0IGRpYWRpY0h1ZXMgPSBnZW5EaWFkaWNIdWVzKGJhc2VIU0wuaHVlKTtcblxuXHQvLyBnZW5lcmF0ZSB0aGUgc2Vjb25kIGRpYWRpYyBjb2xvclxuXHRjb25zdCBodWUgPSBkaWFkaWNIdWVzWzFdO1xuXHRjb25zdCBzbCA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXHRjb25zdCBkaWFkaWNDb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRodWUsXG5cdFx0c2F0dXJhdGlvbjogc2wuc2F0dXJhdGlvbixcblx0XHRsaWdodG5lc3M6IHNsLmxpZ2h0bmVzcyxcblx0XHRmb3JtYXQ6ICdoc2wnXG5cdH0pO1xuXG5cdGNvbnN0IGRpYWRpY0hTTCA9IGRpYWRpY0NvbG9yVmFsdWVzLmhzbCBhcyB0eXBlcy5IU0w7XG5cdGNvbG9ycy5wdXNoKGRpYWRpY0hTTCk7XG5cblx0Ly8gaWYgYWRkaXRpb25hbCBib3hlcyBhcmUgbmVlZGVkLCBnZW5lcmF0ZSB2YXJpYXRpb25zXG5cdHdoaWxlIChjb2xvcnMubGVuZ3RoIDwgbnVtQm94ZXMpIHtcblx0XHRjb25zdCBiYXNlQ29sb3JJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpOyAvLyBTZWxlY3QgYmFzZSBvciBkaWFkaWMgY29sb3Jcblx0XHRjb25zdCBiYXNlSHVlID0gZGlhZGljSHVlc1tiYXNlQ29sb3JJbmRleF07XG5cblx0XHRjb25zdCBuZXdIdWUgPVxuXHRcdFx0KGJhc2VIdWUgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMSkgLSA1ICsgMzYwKSAlIDM2MDtcblx0XHRsZXQgeyBzYXR1cmF0aW9uLCBsaWdodG5lc3MgfSA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXG5cdFx0Y29uc3QgbmV3Q29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHRodWU6IG5ld0h1ZSxcblx0XHRcdHNhdHVyYXRpb24sXG5cdFx0XHRsaWdodG5lc3MsXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSk7XG5cblx0XHRjb25zdCBuZXdIU0wgPSBuZXdDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMO1xuXHRcdGNvbG9ycy5wdXNoKG5ld0hTTCk7XG5cdH1cblxuXHQvLyB1cGRhdGUgdGhlIERPTSB3aXRoIGdlbmVyYXRlZCBjb2xvcnNcblx0Y29sb3JzLmZvckVhY2goKGNvbG9yLCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNvbG9yLWJveC0ke2luZGV4ICsgMX1gKTtcblx0XHRjb25zdCBjb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKGNvbG9yKTtcblx0XHRjb25zdCBoc2xDb2xvciA9IGNvbG9yVmFsdWVzLmhzbCBhcyB0eXBlcy5IU0w7XG5cblx0XHRpZiAoIWhzbENvbG9yKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdGBTa2lwcGluZyBjb2xvciBhdCBpbmRleCAke2luZGV4fSBkdWUgdG8gbWlzc2luZyBIU0wgdmFsdWUuYFxuXHRcdFx0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdGNvbnN0IGhleENvbG9yID0gY29sb3JWYWx1ZXMuaGV4IGFzIHR5cGVzLkhleDtcblx0XHRcdGNvbG9yQm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGhleENvbG9yLmhleDtcblxuXHRcdFx0cG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3goaHNsQ29sb3IsIGluZGV4ICsgMSk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gY29sb3JzO1xufVxuIl19