import { genAllColorValues } from '../color-spaces/conversion.js';
import { conversionHelpers } from '../helpers/conversion.js';
import { paletteHelpers } from '../helpers/palette.js';
import { core } from '../utils/core.js';
function analogous(color, numBoxes) {
    try {
        if (!paletteHelpers.validateColorValues(color)) {
            console.error(`Invalid color value ${JSON.stringify(color)}`);
            return [];
        }
        const clonedColor = core.clone(color);
        const hslColor = clonedColor.format === 'hsl'
            ? clonedColor
            : conversionHelpers.convertColorToHSL(clonedColor);
        if (!hslColor) {
            console.error(`Failed to retrieve HSL color from ${color.format}`);
            return [];
        }
        const analogousHues = [];
        const baseHue = hslColor.value.hue;
        const maxTotalDistance = 60;
        const minTotalDistance = 10 + (numBoxes - 2) * 9;
        const totalIncrement = Math.floor(Math.random() * (maxTotalDistance - minTotalDistance + 1)) + minTotalDistance;
        const increment = Math.floor(totalIncrement / (numBoxes - 1));
        for (let i = 1; i < numBoxes; i++) {
            analogousHues.push((baseHue + increment * i) % 360);
        }
        return analogousHues;
    }
    catch (error) {
        console.error(`Error generating analogous hues: ${error}`);
        return [];
    }
}
function diadic(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        const diadicHues = [];
        const randomDistance = paletteHelpers.getWeightedRandomInterval();
        const hue1 = clonedBaseHue;
        const hue2 = (hue1 + randomDistance) % 360;
        diadicHues.push(hue1, hue2);
        return diadicHues;
    }
    catch (error) {
        console.error(`Error generating diadic hues: ${error}`);
        return [];
    }
}
function hexadic(color) {
    try {
        const clonedColor = core.clone(color);
        if (!paletteHelpers.validateColorValues(clonedColor)) {
            console.error(`Invalid color value ${JSON.stringify(clonedColor)}`);
            return [];
        }
        const clonedColorValues = genAllColorValues(clonedColor);
        const clonedBaseHSL = clonedColorValues.hsl;
        if (!clonedBaseHSL) {
            throw new Error('Unable to generate hexadic hues - missing HSL values');
        }
        const hexadicHues = [];
        const clonedBaseHue = clonedBaseHSL.value.hue;
        const hue1 = clonedBaseHue;
        const hue2 = (hue1 + 180) % 360;
        const randomDistance = Math.floor(Math.random() * 71 + 10);
        const hue3 = (hue1 + randomDistance) % 360;
        const hue4 = (hue3 + 180) % 360;
        const hue5 = (hue1 + 360 - randomDistance) % 360;
        const hue6 = (hue5 + 180) % 360;
        hexadicHues.push(hue1, hue2, hue3, hue4, hue5, hue6);
        return hexadicHues;
    }
    catch (error) {
        console.error(`Error generating hexadic hues: ${error}`);
        return [];
    }
}
function splitComplementary(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        const modifier = Math.floor(Math.random() * 11) + 20;
        return [
            (clonedBaseHue + 180 + modifier) % 360,
            (clonedBaseHue + 180 - modifier + 360) % 360
        ];
    }
    catch (error) {
        console.error(`Error generating split complementary hues: ${error}`);
        return [];
    }
}
function tetradic(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        const randomOffset = Math.floor(Math.random() * 46) + 20;
        const distance = 90 + (Math.random() < 0.5 ? -randomOffset : randomOffset);
        return [
            clonedBaseHue,
            (clonedBaseHue + 180) % 360,
            (clonedBaseHue + distance) % 360,
            (clonedBaseHue + distance + 180) % 360
        ];
    }
    catch (error) {
        console.error(`Error generating tetradic hues: ${error}`);
        return [];
    }
}
function triadic(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        return [120, 240].map(increment => (clonedBaseHue + increment) % 360);
    }
    catch (error) {
        console.error(`Error generating triadic hues: ${error}`);
        return [];
    }
}
export const genHues = {
    analogous,
    diadic,
    hexadic,
    splitComplementary,
    tetradic,
    triadic
};
//# sourceMappingURL=data:application/json;base64,