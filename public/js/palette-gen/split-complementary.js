import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genSplitComplementaryHues(baseHue) {
    const splitComplementaryHues = [];
    const baseComplementaryHue = (baseHue + 180) % 360;
    const modifier = Math.floor(Math.random() * 11) + 20;
    splitComplementaryHues.push((baseComplementaryHue + modifier) % 360);
    splitComplementaryHues.push((baseComplementaryHue - modifier + 360) % 360);
    return splitComplementaryHues;
}
export function genSplitComplementaryPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 3) {
        window.alert('To generate a split complementary palette, please select a number of swatches greater than 2');
        return [];
    }
    const colors = [];
    let baseColor;
    if (customColor) {
        baseColor = customColor;
    }
    else {
        const randomColor = random.randomColor(initialColorSpace);
        const colorValues = genAllColorValues(randomColor);
        baseColor = colorValues[initialColorSpace] ?? random.randomHSL(); // Safe fallback
    }
    const splitComplementaryHues = genSplitComplementaryHues(baseColor.value.hue);
    colors.push(baseColor);
    splitComplementaryHues.forEach(hue => {
        const { value: { saturation, lightness } } = random.randomSL();
        const complementaryColor = genAllColorValues({
            value: {
                hue,
                saturation,
                lightness
            },
            format: 'hsl'
        }).hsl;
        if (complementaryColor) {
            colors.push(complementaryColor);
        }
    });
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 2) + 1;
        const baseHue = splitComplementaryHues[baseColorIndex - 1];
        const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { value: { saturation, lightness } } = random.randomSL();
        saturation = Math.min(100, Math.max(0, saturation));
        lightness = Math.min(100, Math.max(0, lightness));
        const additionalColor = genAllColorValues({
            value: {
                hue,
                saturation,
                lightness
            },
            format: 'hsl'
        }).hsl;
        if (additionalColor) {
            colors.push(additionalColor);
        }
    }
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        if (colorBox) {
            const hexColor = genAllColorValues(color).hex;
            colorBox.style.backgroundColor = hexColor.value.hex;
            populateColorTextOutputBox(color, index + 1);
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi9zcGxpdC1jb21wbGVtZW50YXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsT0FBZTtJQUN4RCxNQUFNLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztJQUNsQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNuRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFckQsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLEdBQUcsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDckUsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRTNFLE9BQU8sc0JBQXNCLENBQUM7QUFDL0IsQ0FBQztBQUVELE1BQU0sVUFBVSw0QkFBNEIsQ0FDM0MsUUFBZ0IsRUFDaEIsY0FBa0MsSUFBSSxFQUN0QyxvQkFBc0MsS0FBSztJQUUzQyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsS0FBSyxDQUNYLDhGQUE4RixDQUM5RixDQUFDO1FBQ0YsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FB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Z0IsQ0FBQztZQUMzRCxRQUFRLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNwRCwwQkFBMEIsQ0FBQyxLQUFrQixFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5BbGxDb2xvclZhbHVlcyB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbic7XG5pbXBvcnQgeyBwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveCB9IGZyb20gJy4uL2RvbS9kb20tbWFpbic7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblNwbGl0Q29tcGxlbWVudGFyeUh1ZXMoYmFzZUh1ZTogbnVtYmVyKTogbnVtYmVyW10ge1xuXHRjb25zdCBzcGxpdENvbXBsZW1lbnRhcnlIdWVzID0gW107XG5cdGNvbnN0IGJhc2VDb21wbGVtZW50YXJ5SHVlID0gKGJhc2VIdWUgKyAxODApICUgMzYwO1xuXHRjb25zdCBtb2RpZmllciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDExKSArIDIwO1xuXG5cdHNwbGl0Q29tcGxlbWVudGFyeUh1ZXMucHVzaCgoYmFzZUNvbXBsZW1lbnRhcnlIdWUgKyBtb2RpZmllcikgJSAzNjApO1xuXHRzcGxpdENvbXBsZW1lbnRhcnlIdWVzLnB1c2goKGJhc2VDb21wbGVtZW50YXJ5SHVlIC0gbW9kaWZpZXIgKyAzNjApICUgMzYwKTtcblxuXHRyZXR1cm4gc3BsaXRDb21wbGVtZW50YXJ5SHVlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlblNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvciB8IG51bGwgPSBudWxsLFxuXHRpbml0aWFsQ29sb3JTcGFjZTogdHlwZXMuQ29sb3JTcGFjZSA9ICdoZXgnXG4pOiB0eXBlcy5Db2xvcltdIHtcblx0aWYgKG51bUJveGVzIDwgMykge1xuXHRcdHdpbmRvdy5hbGVydChcblx0XHRcdCdUbyBnZW5lcmF0ZSBhIHNwbGl0IGNvbXBsZW1lbnRhcnkgcGFsZXR0ZSwgcGxlYXNlIHNlbGVjdCBhIG51bWJlciBvZiBzd2F0Y2hlcyBncmVhdGVyIHRoYW4gMidcblx0XHQpO1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdGNvbnN0IGNvbG9yczogdHlwZXMuQ29sb3JbXSA9IFtdO1xuXHRsZXQgYmFzZUNvbG9yOiB0eXBlcy5Db2xvcjtcblxuXHRpZiAoY3VzdG9tQ29sb3IpIHtcblx0XHRiYXNlQ29sb3IgPSBjdXN0b21Db2xvcjtcblx0fSBlbHNlIHtcblx0XHRjb25zdCByYW5kb21Db2xvciA9IHJhbmRvbS5yYW5kb21Db2xvcihpbml0aWFsQ29sb3JTcGFjZSk7XG5cdFx0Y29uc3QgY29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyhyYW5kb21Db2xvcik7XG5cdFx0YmFzZUNvbG9yID0gY29sb3JWYWx1ZXNbaW5pdGlhbENvbG9yU3BhY2VdID8/IHJhbmRvbS5yYW5kb21IU0woKTsgLy8gU2FmZSBmYWxsYmFja1xuXHR9XG5cblx0Y29uc3Qgc3BsaXRDb21wbGVtZW50YXJ5SHVlcyA9IGdlblNwbGl0Q29tcGxlbWVudGFyeUh1ZXMoXG5cdFx0KGJhc2VDb2xvciBhcyB0eXBlcy5IU0wpLnZhbHVlLmh1ZVxuXHQpO1xuXG5cdGNvbG9ycy5wdXNoKGJhc2VDb2xvcik7XG5cblx0c3BsaXRDb21wbGVtZW50YXJ5SHVlcy5mb3JFYWNoKGh1ZSA9PiB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0dmFsdWU6IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH1cblx0XHR9ID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cdFx0Y29uc3QgY29tcGxlbWVudGFyeUNvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlLFxuXHRcdFx0XHRzYXR1cmF0aW9uLFxuXHRcdFx0XHRsaWdodG5lc3Ncblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSkuaHNsO1xuXG5cdFx0aWYgKGNvbXBsZW1lbnRhcnlDb2xvcikge1xuXHRcdFx0Y29sb3JzLnB1c2goY29tcGxlbWVudGFyeUNvbG9yKTtcblx0XHR9XG5cdH0pO1xuXG5cdHdoaWxlIChjb2xvcnMubGVuZ3RoIDwgbnVtQm94ZXMpIHtcblx0XHRjb25zdCBiYXNlQ29sb3JJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpICsgMTtcblx0XHRjb25zdCBiYXNlSHVlID0gc3BsaXRDb21wbGVtZW50YXJ5SHVlc1tiYXNlQ29sb3JJbmRleCAtIDFdO1xuXHRcdGNvbnN0IGh1ZSA9IChiYXNlSHVlICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTEpIC0gNSArIDM2MCkgJSAzNjA7XG5cblx0XHRsZXQge1xuXHRcdFx0dmFsdWU6IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH1cblx0XHR9ID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cdFx0c2F0dXJhdGlvbiA9IE1hdGgubWluKDEwMCwgTWF0aC5tYXgoMCwgc2F0dXJhdGlvbikpO1xuXHRcdGxpZ2h0bmVzcyA9IE1hdGgubWluKDEwMCwgTWF0aC5tYXgoMCwgbGlnaHRuZXNzKSk7XG5cblx0XHRjb25zdCBhZGRpdGlvbmFsQ29sb3IgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWUsXG5cdFx0XHRcdHNhdHVyYXRpb24sXG5cdFx0XHRcdGxpZ2h0bmVzc1xuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9KS5oc2w7XG5cblx0XHRpZiAoYWRkaXRpb25hbENvbG9yKSB7XG5cdFx0XHRjb2xvcnMucHVzaChhZGRpdGlvbmFsQ29sb3IpO1xuXHRcdH1cblx0fVxuXG5cdGNvbG9ycy5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHtcblx0XHRjb25zdCBjb2xvckJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjb2xvci1ib3gtJHtpbmRleCArIDF9YCk7XG5cblx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdGNvbnN0IGhleENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoY29sb3IpLmhleCBhcyB0eXBlcy5IZXg7XG5cdFx0XHRjb2xvckJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBoZXhDb2xvci52YWx1ZS5oZXg7XG5cdFx0XHRwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveChjb2xvciBhcyB0eXBlcy5IU0wsIGluZGV4ICsgMSk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gY29sb3JzO1xufVxuIl19