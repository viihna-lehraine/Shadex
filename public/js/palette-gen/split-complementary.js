import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genSplitComplementaryHues(baseHue) {
    const splitComplementaryHues = [];
    const baseComplementaryHue = (baseHue + 180) % 360;
    const modifier = Math.floor(Math.random() * 11) + 20;
    splitComplementaryHues.push((baseComplementaryHue + modifier) % 360);
    splitComplementaryHues.push((baseComplementaryHue - modifier + 360) % 360);
    return splitComplementaryHues;
}
export function genSplitComplementaryPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 3) {
        window.alert('To generate a split complementary palette, please select a number of swatches greater than 2');
        return [];
    }
    const colors = [];
    let baseColor;
    if (customColor) {
        baseColor = customColor;
    }
    else {
        const randomColor = random.randomColor(initialColorSpace);
        const colorValues = genAllColorValues(randomColor);
        baseColor = colorValues[initialColorSpace] ?? random.randomHSL(); // Safe fallback
    }
    const splitComplementaryHues = genSplitComplementaryHues(baseColor.hue);
    colors.push(baseColor);
    splitComplementaryHues.forEach(hue => {
        const { saturation, lightness } = random.randomSL();
        const complementaryColor = genAllColorValues({
            hue,
            saturation,
            lightness,
            format: 'hsl'
        }).hsl;
        if (complementaryColor) {
            colors.push(complementaryColor);
        }
    });
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 2) + 1;
        const baseHue = splitComplementaryHues[baseColorIndex - 1];
        const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { saturation, lightness } = random.randomSL();
        saturation = Math.min(100, Math.max(0, saturation));
        lightness = Math.min(100, Math.max(0, lightness));
        const additionalColor = genAllColorValues({
            hue,
            saturation,
            lightness,
            format: 'hsl'
        }).hsl;
        if (additionalColor) {
            colors.push(additionalColor);
        }
    }
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        if (colorBox) {
            const hexColor = genAllColorValues(color).hex;
            colorBox.style.backgroundColor = hexColor.hex;
            populateColorTextOutputBox(color, index + 1);
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi9zcGxpdC1jb21wbGVtZW50YXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsT0FBZTtJQUN4RCxNQUFNLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztJQUNsQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNuRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFckQsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLEdBQUcsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDckUsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRTNFLE9BQU8sc0JBQXNCLENBQUM7QUFDL0IsQ0FBQztBQUVELE1BQU0sVUFBVSw0QkFBNEIsQ0FDM0MsUUFBZ0IsRUFDaEIsY0FBc0MsSUFBSSxFQUMxQyxvQkFBc0MsS0FBSztJQUUzQyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsS0FBSyxDQUNYLDhGQUE4RixDQUM5RixDQUFDO1FBQ0YsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQXNCLEVBQUUsQ0FBQztJQUNyQyxJQUFJLFNBQTBCLENBQUM7SUFFL0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNqQixTQUFTLEdBQUcsV0FBVyxDQUFDO0lBQ3pCLENBQUM7U0FBTSxDQUFDO1FBQ1AsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25ELFNBQVMsR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0I7SUFDbkYsQ0FBQztJQUVELE1BQU0sc0JBQXNCLEdBQUcseUJBQXlCLENBQ3RELFNBQXVCLENBQUMsR0FBRyxDQUM1QixDQUFDO0lBRUYsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV2QixzQkFBc0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEMsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEQsTUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztZQUM1QyxHQUFHO1lBQ0gsVUFBVTtZQUNWLFNBQVM7WUFDVCxNQUFNLEVBQUUsS0FBSztTQUNiLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFFUCxJQUFJLGtCQUFrQixFQUFFLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUNqQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekQsTUFBTSxPQUFPLEdBQUcsc0JBQXNCLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFFdkUsSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEQsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDcEQsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFbEQsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUM7WUFDekMsR0FBRztZQUNILFVBQVU7WUFDVixTQUFTO1lBQ1QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDLENBQUMsR0FBRyxDQUFDO1FBRVAsSUFBSSxlQUFlLEVBQUUsQ0FBQztZQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDRixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUMvQixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkUsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNkLE1BQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQWdCLENBQUM7WUFDM0QsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUM5QywwQkFBMEIsQ0FBQyxLQUFrQixFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5BbGxDb2xvclZhbHVlcyB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbic7XG5pbXBvcnQgeyBwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveCB9IGZyb20gJy4uL2RvbS9kb20tbWFpbic7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblNwbGl0Q29tcGxlbWVudGFyeUh1ZXMoYmFzZUh1ZTogbnVtYmVyKTogbnVtYmVyW10ge1xuXHRjb25zdCBzcGxpdENvbXBsZW1lbnRhcnlIdWVzID0gW107XG5cdGNvbnN0IGJhc2VDb21wbGVtZW50YXJ5SHVlID0gKGJhc2VIdWUgKyAxODApICUgMzYwO1xuXHRjb25zdCBtb2RpZmllciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDExKSArIDIwO1xuXG5cdHNwbGl0Q29tcGxlbWVudGFyeUh1ZXMucHVzaCgoYmFzZUNvbXBsZW1lbnRhcnlIdWUgKyBtb2RpZmllcikgJSAzNjApO1xuXHRzcGxpdENvbXBsZW1lbnRhcnlIdWVzLnB1c2goKGJhc2VDb21wbGVtZW50YXJ5SHVlIC0gbW9kaWZpZXIgKyAzNjApICUgMzYwKTtcblxuXHRyZXR1cm4gc3BsaXRDb21wbGVtZW50YXJ5SHVlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlblNwbGl0Q29tcGxlbWVudGFyeVBhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvckRhdGEgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JEYXRhW10ge1xuXHRpZiAobnVtQm94ZXMgPCAzKSB7XG5cdFx0d2luZG93LmFsZXJ0KFxuXHRcdFx0J1RvIGdlbmVyYXRlIGEgc3BsaXQgY29tcGxlbWVudGFyeSBwYWxldHRlLCBwbGVhc2Ugc2VsZWN0IGEgbnVtYmVyIG9mIHN3YXRjaGVzIGdyZWF0ZXIgdGhhbiAyJ1xuXHRcdCk7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Y29uc3QgY29sb3JzOiB0eXBlcy5Db2xvckRhdGFbXSA9IFtdO1xuXHRsZXQgYmFzZUNvbG9yOiB0eXBlcy5Db2xvckRhdGE7XG5cblx0aWYgKGN1c3RvbUNvbG9yKSB7XG5cdFx0YmFzZUNvbG9yID0gY3VzdG9tQ29sb3I7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgcmFuZG9tQ29sb3IgPSByYW5kb20ucmFuZG9tQ29sb3IoaW5pdGlhbENvbG9yU3BhY2UpO1xuXHRcdGNvbnN0IGNvbG9yVmFsdWVzID0gZ2VuQWxsQ29sb3JWYWx1ZXMocmFuZG9tQ29sb3IpO1xuXHRcdGJhc2VDb2xvciA9IGNvbG9yVmFsdWVzW2luaXRpYWxDb2xvclNwYWNlXSA/PyByYW5kb20ucmFuZG9tSFNMKCk7IC8vIFNhZmUgZmFsbGJhY2tcblx0fVxuXG5cdGNvbnN0IHNwbGl0Q29tcGxlbWVudGFyeUh1ZXMgPSBnZW5TcGxpdENvbXBsZW1lbnRhcnlIdWVzKFxuXHRcdChiYXNlQ29sb3IgYXMgdHlwZXMuSFNMKS5odWVcblx0KTtcblxuXHRjb2xvcnMucHVzaChiYXNlQ29sb3IpO1xuXG5cdHNwbGl0Q29tcGxlbWVudGFyeUh1ZXMuZm9yRWFjaChodWUgPT4ge1xuXHRcdGNvbnN0IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH0gPSByYW5kb20ucmFuZG9tU0woKTtcblx0XHRjb25zdCBjb21wbGVtZW50YXJ5Q29sb3IgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHRodWUsXG5cdFx0XHRzYXR1cmF0aW9uLFxuXHRcdFx0bGlnaHRuZXNzLFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH0pLmhzbDtcblxuXHRcdGlmIChjb21wbGVtZW50YXJ5Q29sb3IpIHtcblx0XHRcdGNvbG9ycy5wdXNoKGNvbXBsZW1lbnRhcnlDb2xvcik7XG5cdFx0fVxuXHR9KTtcblxuXHR3aGlsZSAoY29sb3JzLmxlbmd0aCA8IG51bUJveGVzKSB7XG5cdFx0Y29uc3QgYmFzZUNvbG9ySW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKSArIDE7XG5cdFx0Y29uc3QgYmFzZUh1ZSA9IHNwbGl0Q29tcGxlbWVudGFyeUh1ZXNbYmFzZUNvbG9ySW5kZXggLSAxXTtcblx0XHRjb25zdCBodWUgPSAoYmFzZUh1ZSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDExKSAtIDUgKyAzNjApICUgMzYwO1xuXG5cdFx0bGV0IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH0gPSByYW5kb20ucmFuZG9tU0woKTtcblx0XHRzYXR1cmF0aW9uID0gTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBzYXR1cmF0aW9uKSk7XG5cdFx0bGlnaHRuZXNzID0gTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBsaWdodG5lc3MpKTtcblxuXHRcdGNvbnN0IGFkZGl0aW9uYWxDb2xvciA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdGh1ZSxcblx0XHRcdHNhdHVyYXRpb24sXG5cdFx0XHRsaWdodG5lc3MsXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSkuaHNsO1xuXG5cdFx0aWYgKGFkZGl0aW9uYWxDb2xvcikge1xuXHRcdFx0Y29sb3JzLnB1c2goYWRkaXRpb25hbENvbG9yKTtcblx0XHR9XG5cdH1cblxuXHRjb2xvcnMuZm9yRWFjaCgoY29sb3IsIGluZGV4KSA9PiB7XG5cdFx0Y29uc3QgY29sb3JCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY29sb3ItYm94LSR7aW5kZXggKyAxfWApO1xuXG5cdFx0aWYgKGNvbG9yQm94KSB7XG5cdFx0XHRjb25zdCBoZXhDb2xvciA9IGdlbkFsbENvbG9yVmFsdWVzKGNvbG9yKS5oZXggYXMgdHlwZXMuSGV4O1xuXHRcdFx0Y29sb3JCb3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gaGV4Q29sb3IuaGV4O1xuXHRcdFx0cG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3goY29sb3IgYXMgdHlwZXMuSFNMLCBpbmRleCArIDEpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIGNvbG9ycztcbn1cbiJdfQ==