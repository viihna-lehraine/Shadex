import { genAllColorValues } from '../color-conversion/conversion.js';
import { dom } from '../dom/dom-main.js';
import { paletteHelpers } from '../helpers/palette.js';
import { random } from '../utils/color-randomizer.js';
import { core } from '../utils/core.js';
export function genSplitComplementaryHues(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        const modifier = Math.floor(Math.random() * 11) + 20;
        return [
            (clonedBaseHue + 180 + modifier) % 360,
            (clonedBaseHue + 180 - modifier + 360) % 360
        ];
    }
    catch (error) {
        console.error(`Error generating split complementary hues: ${error}`);
        return [];
    }
}
export function genSplitComplementaryPalette(numBoxes, customColor = null, colorSpace = 'hex') {
    try {
        let clonedCustomColor = null;
        if (customColor) {
            if (!paletteHelpers.validateColorValues(customColor)) {
                console.error(`Invalid custom color value ${JSON.stringify(customColor)}`);
                return [];
            }
            clonedCustomColor = core.clone(customColor);
        }
        if (numBoxes < 3) {
            window.alert('To generate a split complementary palette, please select at least 3 swatches.');
            return [];
        }
        const colors = [];
        let baseColor;
        baseColor = clonedCustomColor ?? random.randomColor(colorSpace);
        const baseColorValues = genAllColorValues(baseColor);
        const baseHSL = baseColorValues.hsl;
        if (!baseHSL) {
            throw new Error('Base HSL color is required for this palette.');
        }
        colors.push(baseHSL);
        const splitHues = genSplitComplementaryHues(baseHSL.value.hue);
        splitHues.forEach(hue => {
            const sl = random.randomSL();
            const complementaryColor = genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
            if (complementaryColor) {
                colors.push(complementaryColor);
            }
        });
        while (colors.length < numBoxes) {
            const randomIndex = Math.floor(Math.random() * 2) + 1;
            const baseHue = splitHues[randomIndex - 1];
            const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
            const sl = random.randomSL();
            const additionalColor = genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
            if (additionalColor) {
                colors.push(additionalColor);
            }
        }
        colors.forEach((color, index) => {
            const colorBox = document.getElementById(`color-box-${index + 1}`);
            if (colorBox) {
                const hexColor = genAllColorValues(color).hex;
                colorBox.style.backgroundColor = hexColor.value.hex;
                dom.populateColorTextOutputBox(color, index + 1);
            }
        });
        console.log(`Generated split complementary palette: ${JSON.stringify(colors)}`);
        return colors;
    }
    catch (error) {
        console.error('Error generating split complementary palette:', error);
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,