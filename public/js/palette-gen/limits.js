import { config } from '../config/constants.js';
import { commonUtils } from '../utils/common-utils.js';
import { core } from '../utils/core-utils.js';
function isColorInBounds(hsl) {
    if (!commonUtils.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return isTooGray(hsl) || isTooDark(hsl) || isTooBright(hsl);
}
function isTooBright(hsl) {
    if (!commonUtils.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.lightness > config.brightnessThreshold;
}
function isTooDark(hsl) {
    if (!commonUtils.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.lightness < config.darknessThreshold;
}
function isTooGray(hsl) {
    if (!commonUtils.validateColorValues(hsl)) {
        console.error(`Invalid HSL value ${JSON.stringify(hsl)}`);
        return false;
    }
    return core.clone(hsl).value.saturation < config.grayThreshold;
}
export const limits = {
    isColorInBounds,
    isTooBright,
    isTooDark,
    isTooGray
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhbGV0dGUtZ2VuL2xpbWl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUzQyxTQUFTLGVBQWUsQ0FBQyxHQUFlO0lBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMzQyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxHQUFlO0lBQ25DLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMzQyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUM7QUFDckUsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQWU7SUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTFELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztBQUNuRSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsR0FBZTtJQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDM0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFMUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUNoRSxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFxQjtJQUN2QyxlQUFlO0lBQ2YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0NBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25zdGFudHMnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJy4uL2luZGV4L2NvbG9ycyc7XG5pbXBvcnQgKiBhcyBmbk9iamVjdHMgZnJvbSAnLi4vaW5kZXgvZm4tb2JqZWN0cyc7XG5pbXBvcnQgeyBjb21tb25VdGlscyB9IGZyb20gJy4uL3V0aWxzL2NvbW1vbi11dGlscyc7XG5pbXBvcnQgeyBjb3JlIH0gZnJvbSAnLi4vdXRpbHMvY29yZS11dGlscyc7XG5cbmZ1bmN0aW9uIGlzQ29sb3JJbkJvdW5kcyhoc2w6IGNvbG9ycy5IU0wpOiBib29sZWFuIHtcblx0aWYgKCFjb21tb25VdGlscy52YWxpZGF0ZUNvbG9yVmFsdWVzKGhzbCkpIHtcblx0XHRjb25zb2xlLmVycm9yKGBJbnZhbGlkIEhTTCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGhzbCl9YCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gaXNUb29HcmF5KGhzbCkgfHwgaXNUb29EYXJrKGhzbCkgfHwgaXNUb29CcmlnaHQoaHNsKTtcbn1cblxuZnVuY3Rpb24gaXNUb29CcmlnaHQoaHNsOiBjb2xvcnMuSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29tbW9uVXRpbHMudmFsaWRhdGVDb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWApO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuY2xvbmUoaHNsKS52YWx1ZS5saWdodG5lc3MgPiBjb25maWcuYnJpZ2h0bmVzc1RocmVzaG9sZDtcbn1cblxuZnVuY3Rpb24gaXNUb29EYXJrKGhzbDogY29sb3JzLkhTTCk6IGJvb2xlYW4ge1xuXHRpZiAoIWNvbW1vblV0aWxzLnZhbGlkYXRlQ29sb3JWYWx1ZXMoaHNsKSkge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEludmFsaWQgSFNMIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoaHNsKX1gKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBjb3JlLmNsb25lKGhzbCkudmFsdWUubGlnaHRuZXNzIDwgY29uZmlnLmRhcmtuZXNzVGhyZXNob2xkO1xufVxuXG5mdW5jdGlvbiBpc1Rvb0dyYXkoaHNsOiBjb2xvcnMuSFNMKTogYm9vbGVhbiB7XG5cdGlmICghY29tbW9uVXRpbHMudmFsaWRhdGVDb2xvclZhbHVlcyhoc2wpKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgSW52YWxpZCBIU0wgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShoc2wpfWApO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvcmUuY2xvbmUoaHNsKS52YWx1ZS5zYXR1cmF0aW9uIDwgY29uZmlnLmdyYXlUaHJlc2hvbGQ7XG59XG5cbmV4cG9ydCBjb25zdCBsaW1pdHM6IGZuT2JqZWN0cy5MaW1pdHMgPSB7XG5cdGlzQ29sb3JJbkJvdW5kcyxcblx0aXNUb29CcmlnaHQsXG5cdGlzVG9vRGFyayxcblx0aXNUb29HcmF5XG59O1xuIl19