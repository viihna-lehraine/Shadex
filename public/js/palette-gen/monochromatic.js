import { genAllColorValues } from '../color-conversion/conversion.js';
import { random } from '../utils/color-randomizer.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
export function genMonochromaticPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 2) {
        window.alert('To generate a monochromatic palette, please select a number of swatches greater than 1');
        return [];
    }
    const colors = [];
    const baseColorValues = customColor
        ? genAllColorValues(customColor)
        : genAllColorValues(random.randomColor(initialColorSpace));
    const baseHSL = baseColorValues.hsl;
    if (!baseHSL) {
        throw new Error('Base HSL value is required for a monochromatic palette.');
    }
    colors.push(baseHSL);
    for (let i = 1; i < numBoxes; i++) {
        const slValues = random.randomSL();
        const monoColorValues = genAllColorValues({
            value: {
                hue: baseHSL.value.hue,
                saturation: slValues.value.saturation,
                lightness: slValues.value.lightness
            },
            format: 'hsl'
        });
        const monoHSL = monoColorValues.hsl;
        colors.push(monoHSL);
        const colorBox = document.getElementById(`color-box-${i + 1}`);
        if (colorBox) {
            const hexColor = monoColorValues.hex;
            colorBox.style.backgroundColor = hexColor.value.hex;
            populateColorTextOutputBox(monoHSL, i + 1);
        }
    }
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ub2Nocm9tYXRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi9tb25vY2hyb21hdGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUc3RCxNQUFNLFVBQVUsdUJBQXVCLENBQ3RDLFFBQWdCLEVBQ2hCLGNBQWtDLElBQUksRUFDdEMsb0JBQXNDLEtBQUs7SUFFM0MsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FDWCx3RkFBd0YsQ0FDeEYsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFrQixFQUFFLENBQUM7SUFDakMsTUFBTSxlQUFlLEdBQUcsV0FBVztRQUNsQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBZ0IsQ0FBQztJQUVqRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxNQUFNLElBQUksS0FBSyxDQUNkLHlEQUF5RCxDQUN6RCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztZQUN6QyxLQUFLLEVBQUU7Z0JBQ04sR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFDdEIsVUFBVSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVTtnQkFDckMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUzthQUNuQztZQUNELE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLEdBQWdCLENBQUM7UUFFakQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyQixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0QsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNkLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxHQUFnQixDQUFDO1lBQ2xELFFBQVEsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBRXBELDBCQUEwQixDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5BbGxDb2xvclZhbHVlcyB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbic7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCB7IHBvcHVsYXRlQ29sb3JUZXh0T3V0cHV0Qm94IH0gZnJvbSAnLi4vZG9tL2RvbS1tYWluJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbk1vbm9jaHJvbWF0aWNQYWxldHRlKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogdHlwZXMuQ29sb3IgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JbXSB7XG5cdGlmIChudW1Cb3hlcyA8IDIpIHtcblx0XHR3aW5kb3cuYWxlcnQoXG5cdFx0XHQnVG8gZ2VuZXJhdGUgYSBtb25vY2hyb21hdGljIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYSBudW1iZXIgb2Ygc3dhdGNoZXMgZ3JlYXRlciB0aGFuIDEnXG5cdFx0KTtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjb25zdCBjb2xvcnM6IHR5cGVzLkNvbG9yW10gPSBbXTtcblx0Y29uc3QgYmFzZUNvbG9yVmFsdWVzID0gY3VzdG9tQ29sb3Jcblx0XHQ/IGdlbkFsbENvbG9yVmFsdWVzKGN1c3RvbUNvbG9yKVxuXHRcdDogZ2VuQWxsQ29sb3JWYWx1ZXMocmFuZG9tLnJhbmRvbUNvbG9yKGluaXRpYWxDb2xvclNwYWNlKSk7XG5cdGNvbnN0IGJhc2VIU0wgPSBiYXNlQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRpZiAoIWJhc2VIU0wpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHQnQmFzZSBIU0wgdmFsdWUgaXMgcmVxdWlyZWQgZm9yIGEgbW9ub2Nocm9tYXRpYyBwYWxldHRlLidcblx0XHQpO1xuXHR9XG5cblx0Y29sb3JzLnB1c2goYmFzZUhTTCk7XG5cblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBudW1Cb3hlczsgaSsrKSB7XG5cdFx0Y29uc3Qgc2xWYWx1ZXMgPSByYW5kb20ucmFuZG9tU0woKTtcblx0XHRjb25zdCBtb25vQ29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IGJhc2VIU0wudmFsdWUuaHVlLFxuXHRcdFx0XHRzYXR1cmF0aW9uOiBzbFZhbHVlcy52YWx1ZS5zYXR1cmF0aW9uLFxuXHRcdFx0XHRsaWdodG5lc3M6IHNsVmFsdWVzLnZhbHVlLmxpZ2h0bmVzc1xuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9KTtcblxuXHRcdGNvbnN0IG1vbm9IU0wgPSBtb25vQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRcdGNvbG9ycy5wdXNoKG1vbm9IU0wpO1xuXG5cdFx0Y29uc3QgY29sb3JCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY29sb3ItYm94LSR7aSArIDF9YCk7XG5cdFx0aWYgKGNvbG9yQm94KSB7XG5cdFx0XHRjb25zdCBoZXhDb2xvciA9IG1vbm9Db2xvclZhbHVlcy5oZXggYXMgdHlwZXMuSGV4O1xuXHRcdFx0Y29sb3JCb3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gaGV4Q29sb3IudmFsdWUuaGV4O1xuXG5cdFx0XHRwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveChtb25vSFNMLCBpICsgMSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbG9ycztcbn1cbiJdfQ==