import { limits } from './limits.js';
import { genPalette } from './palettes.js';
import { defaults } from '../config/defaults.js';
import { database } from '../database/database.js';
import * as colors from '../index/colors.js';
import { colorUtils } from '../utils/color-utils.js';
import { commonUtils } from '../utils/common-utils.js';
import { domUtils } from '../utils/dom-utils.js';
import { randomHSL } from '../utils/random-color-utils.js';
function genLimitedHSL(baseHue, limitDark, limitLight, limitGray, alpha) {
    let hsl;
    do {
        hsl = {
            value: {
                hue: baseHue,
                saturation: Math.random() * 100,
                lightness: Math.random() * 100,
                alpha: alpha ?? 1
            },
            format: 'hsl'
        };
    } while ((limitGray && limits.isTooGray(hsl)) ||
        (limitDark && limits.isTooDark(hsl)) ||
        (limitLight && limits.isTooBright(hsl)));
    return hsl;
}
async function genSelectedPalette(options) {
    try {
        const { paletteType, numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray } = options;
        const palette = await genPalette();
        switch (paletteType) {
            case 1:
                return palette.random(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 2:
                return palette.complementary(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 3:
                return palette.triadic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 4:
                return palette.tetradic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 5:
                return palette.splitComplementary(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 6:
                return palette.analogous(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 7:
                return palette.hexadic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 8:
                return palette.diadic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            case 9:
                return palette.monochromatic(numBoxes, customColor, enableAlpha, limitBright, limitDark, limitGray);
            default:
                console.error('Invalid palette type.');
                return Promise.resolve(defaults.paletteData);
        }
    }
    catch (error) {
        console.error(`Error generating palette: ${error}`);
        return Promise.resolve(defaults.paletteData);
    }
}
async function startPaletteGen(options) {
    try {
        let { numBoxes, customColor } = options;
        if (customColor === null || customColor === undefined) {
            console.error('Custom color is null or undefined.');
            return;
        }
        const validatedCustomColor = validateAndConvertColor(customColor) ??
            randomHSL(options.enableAlpha);
        options.customColor = validatedCustomColor;
        const palette = await genSelectedPalette(options);
        if (palette.items.length === 0) {
            console.error('Colors array is empty or invalid.');
            return;
        }
        console.log(`Colors array generated: ${JSON.stringify(colors)}`);
        const tableId = await database.getNextTableID();
        await domUtils.genPaletteBox(palette.items, numBoxes, tableId);
    }
    catch (error) {
        console.error(`Error starting palette generation: ${error}`);
    }
}
function validateAndConvertColor(color) {
    if (!color)
        return null;
    const convertedColor = colorUtils.isColorString(color)
        ? colorUtils.colorStringToColor(color)
        : color;
    if (!commonUtils.validateColorValues(convertedColor)) {
        console.error(`Invalid color: ${JSON.stringify(convertedColor)}`);
        return null;
    }
    return convertedColor;
}
export const generate = {
    genLimitedHSL,
    genSelectedPalette,
    startPaletteGen,
    validateAndConvertColor
};
//# sourceMappingURL=data:application/json;base64,