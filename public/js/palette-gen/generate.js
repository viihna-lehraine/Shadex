import { palette } from './palette-index.js';
import { random } from '../utils/color-randomizer.js';
import { guards } from '../utils/type-guards.js';
import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { domHelpers } from '../helpers/dom.js';
export function genPaletteBox(numBoxes, colors) {
    const paletteRow = document.getElementById('palette-row');
    if (!paletteRow) {
        console.error('paletteRow is undefined');
        return;
    }
    paletteRow.innerHTML = ''; // clear the row
    let paletteBoxCount = 1;
    for (let i = 0; i < numBoxes; i++) {
        const color = colors[i];
        if (!color) {
            console.warn(`Color at index ${i} is undefined.`);
            continue;
        }
        const colorValues = genAllColorValues(color);
        const originalColorFormat = color.format;
        if (!guards.isFormat(originalColorFormat)) {
            console.warn(`Skipping unsupported color format: ${originalColorFormat}`);
            continue;
        }
        const originalColorValue = colorValues[originalColorFormat];
        if (!originalColorValue) {
            throw new Error(`Failed to generate color data for format ${originalColorFormat}`);
        }
        const { colorStripe, paletteBoxCount: newPaletteBoxCount } = domHelpers.makePaletteBox(color, paletteBoxCount);
        paletteRow.appendChild(colorStripe);
        populateColorTextOutputBox(color, paletteBoxCount);
        paletteBoxCount = newPaletteBoxCount;
    }
}
export function genSelectedPaletteType(paletteType, numBoxes, baseColor, customColor = null, initialColorSpace = 'hex') {
    switch (paletteType) {
        case 1:
            return palette.genRandomPalette(numBoxes, customColor, initialColorSpace);
        case 2:
            return palette.genComplementaryPalette(numBoxes, baseColor, initialColorSpace);
        case 3:
            return palette.genTriadicPalette(numBoxes, baseColor, initialColorSpace);
        case 4:
            return palette.genTetradicPalette(numBoxes, baseColor, initialColorSpace);
        case 5:
            return palette.genSplitComplementaryPalette(numBoxes, baseColor, initialColorSpace);
        case 6:
            return palette.genAnalogousPalette(numBoxes, baseColor, initialColorSpace);
        case 7:
            return palette.genHexadicPalette(numBoxes, baseColor, initialColorSpace);
        case 8:
            return palette.genDiadicPalette(numBoxes, baseColor, initialColorSpace);
        case 9:
            return palette.genMonochromaticPalette(numBoxes, baseColor, initialColorSpace);
        default:
            console.error('DEFAULT CASE > unable to determine color scheme');
            return [];
    }
}
export function startPaletteGen(paletteType, numBoxes, initialColorSpace = 'hex', customColor) {
    const baseColor = customColor ?? random.randomColor(initialColorSpace);
    const colors = genSelectedPaletteType(paletteType, numBoxes, baseColor, customColor, initialColorSpace);
    if (colors.length === 0) {
        console.error('Colors array is empty or undefined.');
        return;
    }
    else {
        console.log(`Colors array: ${colors}`);
    }
    genPaletteBox(numBoxes, colors);
}
//# sourceMappingURL=data:application/json;base64,