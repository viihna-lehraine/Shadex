import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genTriadicHues(baseHue) {
    const triadicHues = [];
    const increments = [120, 240];
    increments.forEach(increment => {
        triadicHues.push((baseHue + increment) % 360);
    });
    return triadicHues;
}
export function genTriadicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 3) {
        window.alert('To generate a triadic palette, please select a number of swatches greater than 2');
        return [];
    }
    const colors = [];
    let baseColor;
    // generate or use the custom base color
    if (customColor) {
        baseColor = customColor;
    }
    else {
        const randomColor = random.randomColor(initialColorSpace);
        const colorValues = genAllColorValues(randomColor);
        const generatedColor = colorValues[initialColorSpace];
        if (!generatedColor) {
            throw new Error(`Failed to generate a valid color in ${initialColorSpace}`);
        }
        baseColor = generatedColor;
    }
    const triadicHues = genTriadicHues(baseColor.hue);
    // add the base color to the palette
    colors.push(baseColor);
    // generate the main triadic colors
    triadicHues.forEach(hue => {
        const { saturation, lightness } = random.randomSL();
        const color = genAllColorValues({
            hue,
            saturation,
            lightness,
            format: 'hsl'
        }).hsl;
        if (color) {
            colors.push(color);
        }
    });
    // generate additional colors if needed
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 3); // randomly select one of the first three colors
        const baseHue = triadicHues[baseColorIndex];
        const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { saturation, lightness } = random.randomSL();
        saturation = Math.min(100, Math.max(0, saturation));
        lightness = Math.min(100, Math.max(0, lightness));
        const additionalColor = genAllColorValues({
            hue,
            saturation,
            lightness,
            format: 'hsl'
        }).hsl;
        if (additionalColor) {
            colors.push(additionalColor);
        }
    }
    // update the DOM with generated colors
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        if (colorBox) {
            const hexColor = genAllColorValues(color).hex;
            colorBox.style.backgroundColor = hexColor.hex;
            populateColorTextOutputBox(color, index + 1);
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi90cmlhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQWU7SUFDN0MsTUFBTSxXQUFXLEdBQWEsRUFBRSxDQUFDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTlCLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDOUIsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sV0FBVyxDQUFDO0FBQ3BCLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQ2hDLFFBQWdCLEVBQ2hCLGNBQXNDLElBQUksRUFDMUMsb0JBQXNDLEtBQUs7SUFFM0MsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxrRkFBa0YsQ0FDbEYsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFzQixFQUFFLENBQUM7SUFDckMsSUFBSSxTQUEwQixDQUFDO0lBRS9CLHdDQUF3QztJQUN4QyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2pCLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDekIsQ0FBQztTQUFNLENBQUM7UUFDUCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFD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O0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5BbGxDb2xvclZhbHVlcyB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbic7XG5pbXBvcnQgeyBwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveCB9IGZyb20gJy4uL2RvbS9kb20tbWFpbic7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblRyaWFkaWNIdWVzKGJhc2VIdWU6IG51bWJlcik6IG51bWJlcltdIHtcblx0Y29uc3QgdHJpYWRpY0h1ZXM6IG51bWJlcltdID0gW107XG5cdGNvbnN0IGluY3JlbWVudHMgPSBbMTIwLCAyNDBdO1xuXG5cdGluY3JlbWVudHMuZm9yRWFjaChpbmNyZW1lbnQgPT4ge1xuXHRcdHRyaWFkaWNIdWVzLnB1c2goKGJhc2VIdWUgKyBpbmNyZW1lbnQpICUgMzYwKTtcblx0fSk7XG5cblx0cmV0dXJuIHRyaWFkaWNIdWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuVHJpYWRpY1BhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvckRhdGEgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JEYXRhW10ge1xuXHRpZiAobnVtQm94ZXMgPCAzKSB7XG5cdFx0d2luZG93LmFsZXJ0KFxuXHRcdFx0J1RvIGdlbmVyYXRlIGEgdHJpYWRpYyBwYWxldHRlLCBwbGVhc2Ugc2VsZWN0IGEgbnVtYmVyIG9mIHN3YXRjaGVzIGdyZWF0ZXIgdGhhbiAyJ1xuXHRcdCk7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Y29uc3QgY29sb3JzOiB0eXBlcy5Db2xvckRhdGFbXSA9IFtdO1xuXHRsZXQgYmFzZUNvbG9yOiB0eXBlcy5Db2xvckRhdGE7XG5cblx0Ly8gZ2VuZXJhdGUgb3IgdXNlIHRoZSBjdXN0b20gYmFzZSBjb2xvclxuXHRpZiAoY3VzdG9tQ29sb3IpIHtcblx0XHRiYXNlQ29sb3IgPSBjdXN0b21Db2xvcjtcblx0fSBlbHNlIHtcblx0XHRjb25zdCByYW5kb21Db2xvciA9IHJhbmRvbS5yYW5kb21Db2xvcihpbml0aWFsQ29sb3JTcGFjZSk7XG5cdFx0Y29uc3QgY29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyhyYW5kb21Db2xvcik7XG5cblx0XHRjb25zdCBnZW5lcmF0ZWRDb2xvciA9IGNvbG9yVmFsdWVzW2luaXRpYWxDb2xvclNwYWNlXTtcblx0XHRpZiAoIWdlbmVyYXRlZENvbG9yKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gZ2VuZXJhdGUgYSB2YWxpZCBjb2xvciBpbiAke2luaXRpYWxDb2xvclNwYWNlfWBcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0YmFzZUNvbG9yID0gZ2VuZXJhdGVkQ29sb3I7XG5cdH1cblxuXHRjb25zdCB0cmlhZGljSHVlcyA9IGdlblRyaWFkaWNIdWVzKChiYXNlQ29sb3IgYXMgdHlwZXMuSFNMKS5odWUpO1xuXG5cdC8vIGFkZCB0aGUgYmFzZSBjb2xvciB0byB0aGUgcGFsZXR0ZVxuXHRjb2xvcnMucHVzaChiYXNlQ29sb3IpO1xuXG5cdC8vIGdlbmVyYXRlIHRoZSBtYWluIHRyaWFkaWMgY29sb3JzXG5cdHRyaWFkaWNIdWVzLmZvckVhY2goaHVlID0+IHtcblx0XHRjb25zdCB7IHNhdHVyYXRpb24sIGxpZ2h0bmVzcyB9ID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cdFx0Y29uc3QgY29sb3IgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHRodWUsXG5cdFx0XHRzYXR1cmF0aW9uLFxuXHRcdFx0bGlnaHRuZXNzLFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH0pLmhzbDtcblxuXHRcdGlmIChjb2xvcikge1xuXHRcdFx0Y29sb3JzLnB1c2goY29sb3IpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gZ2VuZXJhdGUgYWRkaXRpb25hbCBjb2xvcnMgaWYgbmVlZGVkXG5cdHdoaWxlIChjb2xvcnMubGVuZ3RoIDwgbnVtQm94ZXMpIHtcblx0XHRjb25zdCBiYXNlQ29sb3JJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMpOyAvLyByYW5kb21seSBzZWxlY3Qgb25lIG9mIHRoZSBmaXJzdCB0aHJlZSBjb2xvcnNcblx0XHRjb25zdCBiYXNlSHVlID0gdHJpYWRpY0h1ZXNbYmFzZUNvbG9ySW5kZXhdO1xuXHRcdGNvbnN0IGh1ZSA9IChiYXNlSHVlICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTEpIC0gNSArIDM2MCkgJSAzNjA7XG5cblx0XHRsZXQgeyBzYXR1cmF0aW9uLCBsaWdodG5lc3MgfSA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXHRcdHNhdHVyYXRpb24gPSBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIHNhdHVyYXRpb24pKTtcblx0XHRsaWdodG5lc3MgPSBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIGxpZ2h0bmVzcykpO1xuXG5cdFx0Y29uc3QgYWRkaXRpb25hbENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0aHVlLFxuXHRcdFx0c2F0dXJhdGlvbixcblx0XHRcdGxpZ2h0bmVzcyxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9KS5oc2w7XG5cblx0XHRpZiAoYWRkaXRpb25hbENvbG9yKSB7XG5cdFx0XHRjb2xvcnMucHVzaChhZGRpdGlvbmFsQ29sb3IpO1xuXHRcdH1cblx0fVxuXG5cdC8vIHVwZGF0ZSB0aGUgRE9NIHdpdGggZ2VuZXJhdGVkIGNvbG9yc1xuXHRjb2xvcnMuZm9yRWFjaCgoY29sb3IsIGluZGV4KSA9PiB7XG5cdFx0Y29uc3QgY29sb3JCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY29sb3ItYm94LSR7aW5kZXggKyAxfWApO1xuXHRcdGlmIChjb2xvckJveCkge1xuXHRcdFx0Y29uc3QgaGV4Q29sb3IgPSBnZW5BbGxDb2xvclZhbHVlcyhjb2xvcikuaGV4IGFzIHR5cGVzLkhleDtcblx0XHRcdGNvbG9yQm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGhleENvbG9yLmhleDtcblx0XHRcdHBvcHVsYXRlQ29sb3JUZXh0T3V0cHV0Qm94KGNvbG9yIGFzIHR5cGVzLkhTTCwgaW5kZXggKyAxKTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBjb2xvcnM7XG59XG4iXX0=