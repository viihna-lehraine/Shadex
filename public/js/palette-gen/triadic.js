import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genTriadicHues(baseHue) {
    const triadicHues = [];
    const increments = [120, 240];
    increments.forEach(increment => {
        triadicHues.push((baseHue + increment) % 360);
    });
    return triadicHues;
}
export function genTriadicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 3) {
        window.alert('To generate a triadic palette, please select a number of swatches greater than 2');
        return [];
    }
    const colors = [];
    let baseColor;
    // generate or use the custom base color
    if (customColor) {
        baseColor = customColor;
    }
    else {
        const randomColor = random.randomColor(initialColorSpace);
        const colorValues = genAllColorValues(randomColor);
        const generatedColor = colorValues[initialColorSpace];
        if (!generatedColor) {
            throw new Error(`Failed to generate a valid color in ${initialColorSpace}`);
        }
        baseColor = generatedColor;
    }
    const triadicHues = genTriadicHues(baseColor.value.hue);
    // add the base color to the palette
    colors.push(baseColor);
    // generate the main triadic colors
    triadicHues.forEach(hue => {
        const { value: { saturation, lightness } } = random.randomSL();
        const color = genAllColorValues({
            value: {
                hue,
                saturation,
                lightness
            },
            format: 'hsl'
        }).hsl;
        if (color) {
            colors.push(color);
        }
    });
    // generate additional colors if needed
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 3); // randomly select one of the first three colors
        const baseHue = triadicHues[baseColorIndex];
        const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { value: { saturation, lightness } } = random.randomSL();
        saturation = Math.min(100, Math.max(0, saturation));
        lightness = Math.min(100, Math.max(0, lightness));
        const additionalColor = genAllColorValues({
            value: {
                hue,
                saturation,
                lightness
            },
            format: 'hsl'
        }).hsl;
        if (additionalColor) {
            colors.push(additionalColor);
        }
    }
    // update the DOM with generated colors
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        if (colorBox) {
            const hexColor = genAllColorValues(color).hex;
            colorBox.style.backgroundColor = hexColor.value.hex;
            populateColorTextOutputBox(color, index + 1);
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi90cmlhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQWU7SUFDN0MsTUFBTSxXQUFXLEdBQWEsRUFBRSxDQUFDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTlCLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDOUIsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sV0FBVyxDQUFDO0FBQ3BCLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQ2hDLFFBQWdCLEVBQ2hCLGNBQWtDLElBQUksRUFDdEMsb0JBQXNDLEtBQUs7SUFFM0MsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FDWCxrRkFBa0YsQ0FDbEYsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFrQixFQUFFLENBQUM7SUFDakMsSUFBSSxTQUFzQixDQUFDO0lBRTNCLHdDQUF3QztJQUN4QyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2pCLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDekIsQ0FBQztTQUFNLENBQUM7UUFDUCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFD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QUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNwRCwwQkFBMEIsQ0FBQyxLQUFrQixFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5BbGxDb2xvclZhbHVlcyB9IGZyb20gJy4uL2NvbG9yLWNvbnZlcnNpb24vY29udmVyc2lvbic7XG5pbXBvcnQgeyBwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveCB9IGZyb20gJy4uL2RvbS9kb20tbWFpbic7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblRyaWFkaWNIdWVzKGJhc2VIdWU6IG51bWJlcik6IG51bWJlcltdIHtcblx0Y29uc3QgdHJpYWRpY0h1ZXM6IG51bWJlcltdID0gW107XG5cdGNvbnN0IGluY3JlbWVudHMgPSBbMTIwLCAyNDBdO1xuXG5cdGluY3JlbWVudHMuZm9yRWFjaChpbmNyZW1lbnQgPT4ge1xuXHRcdHRyaWFkaWNIdWVzLnB1c2goKGJhc2VIdWUgKyBpbmNyZW1lbnQpICUgMzYwKTtcblx0fSk7XG5cblx0cmV0dXJuIHRyaWFkaWNIdWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuVHJpYWRpY1BhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvciB8IG51bGwgPSBudWxsLFxuXHRpbml0aWFsQ29sb3JTcGFjZTogdHlwZXMuQ29sb3JTcGFjZSA9ICdoZXgnXG4pOiB0eXBlcy5Db2xvcltdIHtcblx0aWYgKG51bUJveGVzIDwgMykge1xuXHRcdHdpbmRvdy5hbGVydChcblx0XHRcdCdUbyBnZW5lcmF0ZSBhIHRyaWFkaWMgcGFsZXR0ZSwgcGxlYXNlIHNlbGVjdCBhIG51bWJlciBvZiBzd2F0Y2hlcyBncmVhdGVyIHRoYW4gMidcblx0XHQpO1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdGNvbnN0IGNvbG9yczogdHlwZXMuQ29sb3JbXSA9IFtdO1xuXHRsZXQgYmFzZUNvbG9yOiB0eXBlcy5Db2xvcjtcblxuXHQvLyBnZW5lcmF0ZSBvciB1c2UgdGhlIGN1c3RvbSBiYXNlIGNvbG9yXG5cdGlmIChjdXN0b21Db2xvcikge1xuXHRcdGJhc2VDb2xvciA9IGN1c3RvbUNvbG9yO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnN0IHJhbmRvbUNvbG9yID0gcmFuZG9tLnJhbmRvbUNvbG9yKGluaXRpYWxDb2xvclNwYWNlKTtcblx0XHRjb25zdCBjb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHJhbmRvbUNvbG9yKTtcblxuXHRcdGNvbnN0IGdlbmVyYXRlZENvbG9yID0gY29sb3JWYWx1ZXNbaW5pdGlhbENvbG9yU3BhY2VdO1xuXHRcdGlmICghZ2VuZXJhdGVkQ29sb3IpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0YEZhaWxlZCB0byBnZW5lcmF0ZSBhIHZhbGlkIGNvbG9yIGluICR7aW5pdGlhbENvbG9yU3BhY2V9YFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRiYXNlQ29sb3IgPSBnZW5lcmF0ZWRDb2xvcjtcblx0fVxuXG5cdGNvbnN0IHRyaWFkaWNIdWVzID0gZ2VuVHJpYWRpY0h1ZXMoKGJhc2VDb2xvciBhcyB0eXBlcy5IU0wpLnZhbHVlLmh1ZSk7XG5cblx0Ly8gYWRkIHRoZSBiYXNlIGNvbG9yIHRvIHRoZSBwYWxldHRlXG5cdGNvbG9ycy5wdXNoKGJhc2VDb2xvcik7XG5cblx0Ly8gZ2VuZXJhdGUgdGhlIG1haW4gdHJpYWRpYyBjb2xvcnNcblx0dHJpYWRpY0h1ZXMuZm9yRWFjaChodWUgPT4ge1xuXHRcdGNvbnN0IHtcblx0XHRcdHZhbHVlOiB7IHNhdHVyYXRpb24sIGxpZ2h0bmVzcyB9XG5cdFx0fSA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXHRcdGNvbnN0IGNvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlLFxuXHRcdFx0XHRzYXR1cmF0aW9uLFxuXHRcdFx0XHRsaWdodG5lc3Ncblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSkuaHNsO1xuXG5cdFx0aWYgKGNvbG9yKSB7XG5cdFx0XHRjb2xvcnMucHVzaChjb2xvcik7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBnZW5lcmF0ZSBhZGRpdGlvbmFsIGNvbG9ycyBpZiBuZWVkZWRcblx0d2hpbGUgKGNvbG9ycy5sZW5ndGggPCBudW1Cb3hlcykge1xuXHRcdGNvbnN0IGJhc2VDb2xvckluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMyk7IC8vIHJhbmRvbWx5IHNlbGVjdCBvbmUgb2YgdGhlIGZpcnN0IHRocmVlIGNvbG9yc1xuXHRcdGNvbnN0IGJhc2VIdWUgPSB0cmlhZGljSHVlc1tiYXNlQ29sb3JJbmRleF07XG5cdFx0Y29uc3QgaHVlID0gKGJhc2VIdWUgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMSkgLSA1ICsgMzYwKSAlIDM2MDtcblxuXHRcdGxldCB7XG5cdFx0XHR2YWx1ZTogeyBzYXR1cmF0aW9uLCBsaWdodG5lc3MgfVxuXHRcdH0gPSByYW5kb20ucmFuZG9tU0woKTtcblx0XHRzYXR1cmF0aW9uID0gTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBzYXR1cmF0aW9uKSk7XG5cdFx0bGlnaHRuZXNzID0gTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBsaWdodG5lc3MpKTtcblxuXHRcdGNvbnN0IGFkZGl0aW9uYWxDb2xvciA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZSxcblx0XHRcdFx0c2F0dXJhdGlvbixcblx0XHRcdFx0bGlnaHRuZXNzXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH0pLmhzbDtcblxuXHRcdGlmIChhZGRpdGlvbmFsQ29sb3IpIHtcblx0XHRcdGNvbG9ycy5wdXNoKGFkZGl0aW9uYWxDb2xvcik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gdXBkYXRlIHRoZSBET00gd2l0aCBnZW5lcmF0ZWQgY29sb3JzXG5cdGNvbG9ycy5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHtcblx0XHRjb25zdCBjb2xvckJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjb2xvci1ib3gtJHtpbmRleCArIDF9YCk7XG5cdFx0aWYgKGNvbG9yQm94KSB7XG5cdFx0XHRjb25zdCBoZXhDb2xvciA9IGdlbkFsbENvbG9yVmFsdWVzKGNvbG9yKS5oZXggYXMgdHlwZXMuSGV4O1xuXHRcdFx0Y29sb3JCb3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gaGV4Q29sb3IudmFsdWUuaGV4O1xuXHRcdFx0cG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3goY29sb3IgYXMgdHlwZXMuSFNMLCBpbmRleCArIDEpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIGNvbG9ycztcbn1cbiJdfQ==