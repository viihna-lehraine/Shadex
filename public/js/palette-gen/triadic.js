import { genAllColorValues } from '../color-conversion/conversion.js';
import { dom } from '../dom/dom-main.js';
import { paletteHelpers } from '../helpers/palette.js';
import { random } from '../utils/color-randomizer.js';
import { core } from '../utils/core.js';
export function genTriadicHues(baseHue) {
    try {
        const clonedBaseHue = core.clone(baseHue);
        return [120, 240].map(increment => (clonedBaseHue + increment) % 360);
    }
    catch (error) {
        console.error(`Error generating triadic hues: ${error}`);
        return [];
    }
}
export function genTriadicPalette(numBoxes, customColor = null, colorSpace = 'hex') {
    try {
        let clonedCustomColor = null;
        if (customColor) {
            if (!paletteHelpers.validateColorValues(customColor)) {
                console.error(`Invalid custom color value ${JSON.stringify(customColor)}`);
                return [];
            }
            clonedCustomColor = core.clone(customColor);
        }
        if (numBoxes < 3) {
            window.alert('To generate a triadic palette, please select at least 3 swatches.');
            return [];
        }
        const colors = [];
        const baseColor = clonedCustomColor ?? random.randomColor(colorSpace);
        const baseColorValues = genAllColorValues(baseColor);
        const baseHSL = baseColorValues.hsl;
        if (!baseHSL) {
            throw new Error('Base HSL value is required.');
        }
        colors.push(baseHSL);
        const triadicHues = genTriadicHues(baseHSL.value.hue);
        triadicHues.forEach(hue => {
            const sl = random.randomSL();
            const color = genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
            if (color) {
                colors.push(color);
            }
        });
        while (colors.length < numBoxes) {
            const baseHue = triadicHues[Math.floor(Math.random() * 3)];
            const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
            const sl = random.randomSL();
            const additionalColor = genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
            if (additionalColor) {
                colors.push(additionalColor);
            }
        }
        colors.forEach((color, index) => {
            const colorBox = document.getElementById(`color-box-${index + 1}`);
            if (colorBox) {
                const hexColor = genAllColorValues(color).hex;
                colorBox.style.backgroundColor = hexColor.value.hex;
                dom.populateColorTextOutputBox(color, index + 1);
            }
        });
        console.log(`Generated triadic palette: ${JSON.stringify(colors)}`);
        return colors;
    }
    catch (error) {
        console.error(`Error generating triadic palette: ${error}`);
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpYWRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi90cmlhZGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckMsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFlO0lBQzdDLElBQUksQ0FBQztRQUNKLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFMUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXpELE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQ2hDLFFBQWdCLEVBQ2hCLGNBQWtDLElBQUksRUFDdEMsYUFBK0IsS0FBSztJQUVwQyxJQUFJLENBQUM7UUFDSixJQUFJLGlCQUFpQixHQUF1QixJQUFJLENBQUM7UUFFakQsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7Z0JBQ3RELE9BQU8sQ0FBQyxLQUFLLENBQ1osOEJBQThCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FDM0QsQ0FBQztnQkFFRixPQUFPLEVBQUUsQ0FBQztZQUNYLENBQUM7WUFFRCxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFRCxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNsQixNQUFNLENBQUMsS0FBSyxDQUNYLG1FQUFtRSxDQUNuRSxDQUFDO1lBQ0YsT0FBTyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FBQztRQUNqQyxNQUFNLFNBQVMsR0FBRyxpQkFBaUIsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxHQUFnQixDQUFDO1FBRWpELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNoRCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyQixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV0RCxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM3QixNQUFNLEtBQUssR0FBRyxpQkFBaUIsQ0FBQztnQkFDL0IsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDM0IsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDLENBQUMsR0FBRyxDQUFDO1lBRVAsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztZQUNqQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxNQUFNLEdBQUcsR0FDUixDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBRTVELE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM3QixNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztnQkFDekMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDM0IsTUFBTSxFQUFFLEtBQUs7YUFDYixDQUFDLENBQUMsR0FBRyxDQUFDO1lBRVAsSUFBSSxlQUFlLEVBQUUsQ0FBQztnQkFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUM5QixDQUFDO1FBQ0YsQ0FBQztRQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRW5FLElBQUksUUFBUSxFQUFFLENBQUM7Z0JBQ2QsTUFBTSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBZ0IsQ0FBQztnQkFFM0QsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBRXBELEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xELENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXBFLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU1RCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuQWxsQ29sb3JWYWx1ZXMgfSBmcm9tICcuLi9jb2xvci1jb252ZXJzaW9uL2NvbnZlcnNpb24nO1xuaW1wb3J0IHsgZG9tIH0gZnJvbSAnLi4vZG9tL2RvbS1tYWluJztcbmltcG9ydCB7IHBhbGV0dGVIZWxwZXJzIH0gZnJvbSAnLi4vaGVscGVycy9wYWxldHRlJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4L3R5cGVzJztcbmltcG9ydCB7IHJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL2NvbG9yLXJhbmRvbWl6ZXInO1xuaW1wb3J0IHsgY29yZSB9IGZyb20gJy4uL3V0aWxzL2NvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuVHJpYWRpY0h1ZXMoYmFzZUh1ZTogbnVtYmVyKTogbnVtYmVyW10ge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNsb25lZEJhc2VIdWUgPSBjb3JlLmNsb25lKGJhc2VIdWUpO1xuXG5cdFx0cmV0dXJuIFsxMjAsIDI0MF0ubWFwKGluY3JlbWVudCA9PiAoY2xvbmVkQmFzZUh1ZSArIGluY3JlbWVudCkgJSAzNjApO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgdHJpYWRpYyBodWVzOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5UcmlhZGljUGFsZXR0ZShcblx0bnVtQm94ZXM6IG51bWJlcixcblx0Y3VzdG9tQ29sb3I6IHR5cGVzLkNvbG9yIHwgbnVsbCA9IG51bGwsXG5cdGNvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JbXSB7XG5cdHRyeSB7XG5cdFx0bGV0IGNsb25lZEN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvciB8IG51bGwgPSBudWxsO1xuXG5cdFx0aWYgKGN1c3RvbUNvbG9yKSB7XG5cdFx0XHRpZiAoIXBhbGV0dGVIZWxwZXJzLnZhbGlkYXRlQ29sb3JWYWx1ZXMoY3VzdG9tQ29sb3IpKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdFx0YEludmFsaWQgY3VzdG9tIGNvbG9yIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoY3VzdG9tQ29sb3IpfWBcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cblx0XHRcdGNsb25lZEN1c3RvbUNvbG9yID0gY29yZS5jbG9uZShjdXN0b21Db2xvcik7XG5cdFx0fVxuXG5cdFx0aWYgKG51bUJveGVzIDwgMykge1xuXHRcdFx0d2luZG93LmFsZXJ0KFxuXHRcdFx0XHQnVG8gZ2VuZXJhdGUgYSB0cmlhZGljIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYXQgbGVhc3QgMyBzd2F0Y2hlcy4nXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IGNvbG9yczogdHlwZXMuQ29sb3JbXSA9IFtdO1xuXHRcdGNvbnN0IGJhc2VDb2xvciA9IGNsb25lZEN1c3RvbUNvbG9yID8/IHJhbmRvbS5yYW5kb21Db2xvcihjb2xvclNwYWNlKTtcblx0XHRjb25zdCBiYXNlQ29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyhiYXNlQ29sb3IpO1xuXHRcdGNvbnN0IGJhc2VIU0wgPSBiYXNlQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRcdGlmICghYmFzZUhTTCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdCYXNlIEhTTCB2YWx1ZSBpcyByZXF1aXJlZC4nKTtcblx0XHR9XG5cblx0XHRjb2xvcnMucHVzaChiYXNlSFNMKTtcblxuXHRcdGNvbnN0IHRyaWFkaWNIdWVzID0gZ2VuVHJpYWRpY0h1ZXMoYmFzZUhTTC52YWx1ZS5odWUpO1xuXG5cdFx0dHJpYWRpY0h1ZXMuZm9yRWFjaChodWUgPT4ge1xuXHRcdFx0Y29uc3Qgc2wgPSByYW5kb20ucmFuZG9tU0woKTtcblx0XHRcdGNvbnN0IGNvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0XHR2YWx1ZTogeyBodWUsIC4uLnNsLnZhbHVlIH0sXG5cdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdH0pLmhzbDtcblxuXHRcdFx0aWYgKGNvbG9yKSB7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKGNvbG9yKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHdoaWxlIChjb2xvcnMubGVuZ3RoIDwgbnVtQm94ZXMpIHtcblx0XHRcdGNvbnN0IGJhc2VIdWUgPSB0cmlhZGljSHVlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKV07XG5cdFx0XHRjb25zdCBodWUgPVxuXHRcdFx0XHQoYmFzZUh1ZSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDExKSAtIDUgKyAzNjApICUgMzYwO1xuXG5cdFx0XHRjb25zdCBzbCA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXHRcdFx0Y29uc3QgYWRkaXRpb25hbENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0XHR2YWx1ZTogeyBodWUsIC4uLnNsLnZhbHVlIH0sXG5cdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdH0pLmhzbDtcblxuXHRcdFx0aWYgKGFkZGl0aW9uYWxDb2xvcikge1xuXHRcdFx0XHRjb2xvcnMucHVzaChhZGRpdGlvbmFsQ29sb3IpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbG9ycy5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHtcblx0XHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNvbG9yLWJveC0ke2luZGV4ICsgMX1gKTtcblxuXHRcdFx0aWYgKGNvbG9yQm94KSB7XG5cdFx0XHRcdGNvbnN0IGhleENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoY29sb3IpLmhleCBhcyB0eXBlcy5IZXg7XG5cblx0XHRcdFx0Y29sb3JCb3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gaGV4Q29sb3IudmFsdWUuaGV4O1xuXG5cdFx0XHRcdGRvbS5wb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveChjb2xvciwgaW5kZXggKyAxKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGNvbnNvbGUubG9nKGBHZW5lcmF0ZWQgdHJpYWRpYyBwYWxldHRlOiAke0pTT04uc3RyaW5naWZ5KGNvbG9ycyl9YCk7XG5cblx0XHRyZXR1cm4gY29sb3JzO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgdHJpYWRpYyBwYWxldHRlOiAke2Vycm9yfWApO1xuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG4iXX0=