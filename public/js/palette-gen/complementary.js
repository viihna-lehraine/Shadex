import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
import { paletteHelpers } from '../helpers/palette.js';
export function genComplementaryPalette(numBoxes, baseColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 2) {
        window.alert('To generate a complementary palette, please select a number of swatches greater than 1');
        return [];
    }
    const colors = [];
    const baseColorValues = baseColor
        ? genAllColorValues(baseColor)
        : genAllColorValues(random.randomColor(initialColorSpace));
    const baseHSL = baseColorValues.hsl;
    if (!baseHSL) {
        throw new Error('Base HSL color is missing in the generated values');
    }
    colors.push(baseHSL);
    const complementaryHue = (baseHSL.value.hue + 180) % 360;
    for (let i = 2; i <= numBoxes; i++) {
        const adjustedHSLColor = paletteHelpers.adjustSL({
            value: {
                hue: complementaryHue,
                saturation: baseHSL.value.saturation,
                lightness: baseHSL.value.lightness
            },
            format: 'hsl'
        });
        const complementaryColorValues = genAllColorValues(adjustedHSLColor);
        const complementaryHSL = complementaryColorValues.hsl;
        if (complementaryHSL) {
            colors.push(complementaryHSL);
        }
        const colorBox = document.getElementById(`color-box-${i}`);
        if (colorBox) {
            const hexValue = complementaryColorValues.hex;
            colorBox.style.backgroundColor = hexValue ? hexValue.value.hex : '';
            populateColorTextOutputBox(complementaryHSL, i);
        }
    }
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxlbWVudGFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWxldHRlLWdlbi9jb21wbGVtZW50YXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVuRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQsTUFBTSxVQUFVLHVCQUF1QixDQUN0QyxRQUFnQixFQUNoQixZQUFnQyxJQUFJLEVBQ3BDLG9CQUFzQyxLQUFLO0lBRTNDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsd0ZBQXdGLENBQ3hGLENBQUM7UUFFRixPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFFbEIsTUFBTSxlQUFlLEdBQUcsU0FBUztRQUNoQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBZ0IsQ0FBQztJQUVqRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFckIsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUV6RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDcEMsTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDO1lBQ2hELEtBQUssRUFBRTtnQkFDTixHQUFHLEVBQUUsZ0JBQWdCO2dCQUNyQixVQUFVLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVO2dCQUNwQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTO2FBQ2xDO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDLENBQUM7UUFFSCxNQUFNLHdCQUF3QixHQUFHLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckUsTUFBTSxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FBQyxHQUFnQixDQUFDO1FBRW5FLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTNELElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxNQUFNLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQyxHQUU5QixDQUFDO1lBQ2IsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBRXBFLDBCQUEwQixDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7SUFDRixDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuQWxsQ29sb3JWYWx1ZXMgfSBmcm9tICcuLi9jb2xvci1jb252ZXJzaW9uL2NvbnZlcnNpb24nO1xuaW1wb3J0IHsgcG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3ggfSBmcm9tICcuLi9kb20vZG9tLW1haW4nO1xuaW1wb3J0IHsgcmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvY29sb3ItcmFuZG9taXplcic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBwYWxldHRlSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMvcGFsZXR0ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5Db21wbGVtZW50YXJ5UGFsZXR0ZShcblx0bnVtQm94ZXM6IG51bWJlcixcblx0YmFzZUNvbG9yOiB0eXBlcy5Db2xvciB8IG51bGwgPSBudWxsLFxuXHRpbml0aWFsQ29sb3JTcGFjZTogdHlwZXMuQ29sb3JTcGFjZSA9ICdoZXgnXG4pOiB0eXBlcy5Db2xvcltdIHtcblx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdHdpbmRvdy5hbGVydChcblx0XHRcdCdUbyBnZW5lcmF0ZSBhIGNvbXBsZW1lbnRhcnkgcGFsZXR0ZSwgcGxlYXNlIHNlbGVjdCBhIG51bWJlciBvZiBzd2F0Y2hlcyBncmVhdGVyIHRoYW4gMSdcblx0XHQpO1xuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Y29uc3QgY29sb3JzID0gW107XG5cblx0Y29uc3QgYmFzZUNvbG9yVmFsdWVzID0gYmFzZUNvbG9yXG5cdFx0PyBnZW5BbGxDb2xvclZhbHVlcyhiYXNlQ29sb3IpXG5cdFx0OiBnZW5BbGxDb2xvclZhbHVlcyhyYW5kb20ucmFuZG9tQ29sb3IoaW5pdGlhbENvbG9yU3BhY2UpKTtcblx0Y29uc3QgYmFzZUhTTCA9IGJhc2VDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMO1xuXG5cdGlmICghYmFzZUhTTCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQmFzZSBIU0wgY29sb3IgaXMgbWlzc2luZyBpbiB0aGUgZ2VuZXJhdGVkIHZhbHVlcycpO1xuXHR9XG5cblx0Y29sb3JzLnB1c2goYmFzZUhTTCk7XG5cblx0Y29uc3QgY29tcGxlbWVudGFyeUh1ZSA9IChiYXNlSFNMLnZhbHVlLmh1ZSArIDE4MCkgJSAzNjA7XG5cblx0Zm9yIChsZXQgaSA9IDI7IGkgPD0gbnVtQm94ZXM7IGkrKykge1xuXHRcdGNvbnN0IGFkanVzdGVkSFNMQ29sb3IgPSBwYWxldHRlSGVscGVycy5hZGp1c3RTTCh7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRodWU6IGNvbXBsZW1lbnRhcnlIdWUsXG5cdFx0XHRcdHNhdHVyYXRpb246IGJhc2VIU0wudmFsdWUuc2F0dXJhdGlvbixcblx0XHRcdFx0bGlnaHRuZXNzOiBiYXNlSFNMLnZhbHVlLmxpZ2h0bmVzc1xuXHRcdFx0fSxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9KTtcblxuXHRcdGNvbnN0IGNvbXBsZW1lbnRhcnlDb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKGFkanVzdGVkSFNMQ29sb3IpO1xuXHRcdGNvbnN0IGNvbXBsZW1lbnRhcnlIU0wgPSBjb21wbGVtZW50YXJ5Q29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRcdGlmIChjb21wbGVtZW50YXJ5SFNMKSB7XG5cdFx0XHRjb2xvcnMucHVzaChjb21wbGVtZW50YXJ5SFNMKTtcblx0XHR9XG5cblx0XHRjb25zdCBjb2xvckJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjb2xvci1ib3gtJHtpfWApO1xuXG5cdFx0aWYgKGNvbG9yQm94KSB7XG5cdFx0XHRjb25zdCBoZXhWYWx1ZSA9IGNvbXBsZW1lbnRhcnlDb2xvclZhbHVlcy5oZXggYXNcblx0XHRcdFx0fCB0eXBlcy5IZXhcblx0XHRcdFx0fCB1bmRlZmluZWQ7XG5cdFx0XHRjb2xvckJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBoZXhWYWx1ZSA/IGhleFZhbHVlLnZhbHVlLmhleCA6ICcnO1xuXG5cdFx0XHRwb3B1bGF0ZUNvbG9yVGV4dE91dHB1dEJveChjb21wbGVtZW50YXJ5SFNMLCBpKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sb3JzO1xufVxuIl19