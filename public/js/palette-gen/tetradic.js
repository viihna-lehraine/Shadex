import { genAllColorValues } from '../color-conversion/conversion.js';
import { dom } from '../dom/dom-main.js';
import { random } from '../utils/color-randomizer.js';
export function genTetradicHues(baseHue) {
    try {
        const randomOffset = Math.floor(Math.random() * 46) + 20;
        const distance = 90 + (Math.random() < 0.5 ? -randomOffset : randomOffset);
        return [
            baseHue,
            (baseHue + 180) % 360,
            (baseHue + distance) % 360,
            (baseHue + distance + 180) % 360
        ];
    }
    catch (error) {
        console.error(`Error generating tetradic hues: ${error}`);
        return [];
    }
}
export function genTetradicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    try {
        if (numBoxes < 4) {
            window.alert('To generate a tetradic palette, please select at least 4 swatches.');
            return [];
        }
        const colors = [];
        const baseColor = customColor ?? random.randomColor(initialColorSpace);
        const baseColorValues = genAllColorValues(baseColor);
        const baseHSL = baseColorValues.hsl;
        if (!baseHSL) {
            throw new Error('Base HSL value is required.');
        }
        colors.push(baseHSL);
        const tetradicHues = genTetradicHues(baseHSL.value.hue);
        // generate the main tetradic colors (hues 2-4)
        tetradicHues.slice(1).forEach(hue => {
            const sl = random.randomSL();
            const colorValues = genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
            if (colorValues) {
                colors.push(colorValues);
            }
        });
        // generate additional colors if needed
        while (colors.length < numBoxes) {
            const baseHue = tetradicHues[Math.floor(Math.random() * 4)];
            const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
            const sl = random.randomSL();
            const additionalColor = genAllColorValues({
                value: { hue, ...sl.value },
                format: 'hsl'
            }).hsl;
            if (additionalColor) {
                colors.push(additionalColor);
            }
        }
        // update the DOM with generated colors
        colors.forEach((color, index) => {
            const colorBox = document.getElementById(`color-box-${index + 1}`);
            if (colorBox) {
                const hexColor = genAllColorValues(color).hex;
                colorBox.style.backgroundColor = hexColor.value.hex;
                dom.populateColorTextOutputBox(color, index + 1);
            }
        });
        return colors;
    }
    catch (error) {
        console.error(`Error generating tetradic palette: ${error}`);
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFkaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFsZXR0ZS1nZW4vdGV0cmFkaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXRDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVuRCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQWU7SUFDOUMsSUFBSSxDQUFDO1FBQ0osTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pELE1BQU0sUUFBUSxHQUNiLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUzRCxPQUFPO1lBQ04sT0FBTztZQUNQLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7WUFDckIsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsR0FBRztZQUMxQixDQUFDLE9BQU8sR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztTQUNoQyxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUNqQyxRQUFnQixFQUNoQixjQUFrQyxJQUFJLEVBQ3RDLG9CQUFzQyxLQUFLO0lBRTNDLElBQUksQ0FBQztRQUNKLElBQUks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Q0FBQztJQUNmLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDN0QsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbkFsbENvbG9yVmFsdWVzIH0gZnJvbSAnLi4vY29sb3ItY29udmVyc2lvbi9jb252ZXJzaW9uJztcbmltcG9ydCB7IGRvbSB9IGZyb20gJy4uL2RvbS9kb20tbWFpbic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9pbmRleC90eXBlcyc7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblRldHJhZGljSHVlcyhiYXNlSHVlOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmFuZG9tT2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNDYpICsgMjA7XG5cdFx0Y29uc3QgZGlzdGFuY2UgPVxuXHRcdFx0OTAgKyAoTWF0aC5yYW5kb20oKSA8IDAuNSA/IC1yYW5kb21PZmZzZXQgOiByYW5kb21PZmZzZXQpO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdGJhc2VIdWUsXG5cdFx0XHQoYmFzZUh1ZSArIDE4MCkgJSAzNjAsXG5cdFx0XHQoYmFzZUh1ZSArIGRpc3RhbmNlKSAlIDM2MCxcblx0XHRcdChiYXNlSHVlICsgZGlzdGFuY2UgKyAxODApICUgMzYwXG5cdFx0XTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciBnZW5lcmF0aW5nIHRldHJhZGljIGh1ZXM6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5UZXRyYWRpY1BhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvciB8IG51bGwgPSBudWxsLFxuXHRpbml0aWFsQ29sb3JTcGFjZTogdHlwZXMuQ29sb3JTcGFjZSA9ICdoZXgnXG4pOiB0eXBlcy5Db2xvcltdIHtcblx0dHJ5IHtcblx0XHRpZiAobnVtQm94ZXMgPCA0KSB7XG5cdFx0XHR3aW5kb3cuYWxlcnQoXG5cdFx0XHRcdCdUbyBnZW5lcmF0ZSBhIHRldHJhZGljIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYXQgbGVhc3QgNCBzd2F0Y2hlcy4nXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IGNvbG9yczogdHlwZXMuQ29sb3JbXSA9IFtdO1xuXHRcdGNvbnN0IGJhc2VDb2xvciA9IGN1c3RvbUNvbG9yID8/IHJhbmRvbS5yYW5kb21Db2xvcihpbml0aWFsQ29sb3JTcGFjZSk7XG5cblx0XHRjb25zdCBiYXNlQ29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyhiYXNlQ29sb3IpO1xuXHRcdGNvbnN0IGJhc2VIU0wgPSBiYXNlQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTDtcblxuXHRcdGlmICghYmFzZUhTTCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdCYXNlIEhTTCB2YWx1ZSBpcyByZXF1aXJlZC4nKTtcblx0XHR9XG5cblx0XHRjb2xvcnMucHVzaChiYXNlSFNMKTtcblxuXHRcdGNvbnN0IHRldHJhZGljSHVlcyA9IGdlblRldHJhZGljSHVlcyhiYXNlSFNMLnZhbHVlLmh1ZSk7XG5cblx0XHQvLyBnZW5lcmF0ZSB0aGUgbWFpbiB0ZXRyYWRpYyBjb2xvcnMgKGh1ZXMgMi00KVxuXHRcdHRldHJhZGljSHVlcy5zbGljZSgxKS5mb3JFYWNoKGh1ZSA9PiB7XG5cdFx0XHRjb25zdCBzbCA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXHRcdFx0Y29uc3QgY29sb3JWYWx1ZXMgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHRcdHZhbHVlOiB7IGh1ZSwgLi4uc2wudmFsdWUgfSxcblx0XHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdFx0fSkuaHNsO1xuXG5cdFx0XHRpZiAoY29sb3JWYWx1ZXMpIHtcblx0XHRcdFx0Y29sb3JzLnB1c2goY29sb3JWYWx1ZXMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgYWRkaXRpb25hbCBjb2xvcnMgaWYgbmVlZGVkXG5cdFx0d2hpbGUgKGNvbG9ycy5sZW5ndGggPCBudW1Cb3hlcykge1xuXHRcdFx0Y29uc3QgYmFzZUh1ZSA9IHRldHJhZGljSHVlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0KV07XG5cdFx0XHRjb25zdCBodWUgPVxuXHRcdFx0XHQoYmFzZUh1ZSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDExKSAtIDUgKyAzNjApICUgMzYwO1xuXG5cdFx0XHRjb25zdCBzbCA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXHRcdFx0Y29uc3QgYWRkaXRpb25hbENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0XHR2YWx1ZTogeyBodWUsIC4uLnNsLnZhbHVlIH0sXG5cdFx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHRcdH0pLmhzbDtcblxuXHRcdFx0aWYgKGFkZGl0aW9uYWxDb2xvcikge1xuXHRcdFx0XHRjb2xvcnMucHVzaChhZGRpdGlvbmFsQ29sb3IpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSB0aGUgRE9NIHdpdGggZ2VuZXJhdGVkIGNvbG9yc1xuXHRcdGNvbG9ycy5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHtcblx0XHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNvbG9yLWJveC0ke2luZGV4ICsgMX1gKTtcblxuXHRcdFx0aWYgKGNvbG9yQm94KSB7XG5cdFx0XHRcdGNvbnN0IGhleENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoY29sb3IpLmhleCBhcyB0eXBlcy5IZXg7XG5cdFx0XHRcdGNvbG9yQm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGhleENvbG9yLnZhbHVlLmhleDtcblxuXHRcdFx0XHRkb20ucG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3goY29sb3IsIGluZGV4ICsgMSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY29sb3JzO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgdGV0cmFkaWMgcGFsZXR0ZTogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gW107XG5cdH1cbn1cbiJdfQ==