import { random } from '../utils/color-randomizer.js';
import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
export function genTetradicHues(baseHue) {
    const tetradicHues = [];
    const hue1 = baseHue;
    const hue2 = (hue1 + 180) % 360;
    const randomOffset = Math.floor(Math.random() * 46) + 20;
    const distance = 90 + (Math.random() < 0.5 ? -randomOffset : randomOffset);
    const hue3 = (hue1 + distance) % 360;
    const hue4 = (hue3 + 180) % 360;
    tetradicHues.push(hue1, hue2, hue3, hue4);
    console.log('tetradicHues: ', tetradicHues);
    return tetradicHues;
}
export function genTetradicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 4) {
        window.alert('To generate a tetradic palette, please select a number of swatches greater than 3');
        return [];
    }
    const colors = [];
    let baseColor;
    if (customColor) {
        baseColor = customColor;
    }
    else {
        const randomColor = random.randomColor(initialColorSpace);
        const colorValues = genAllColorValues(randomColor);
        baseColor =
            colorValues[initialColorSpace] ?? Object.values(colorValues)[0];
        if (!baseColor) {
            throw new Error(`Failed to generate a valid color in ${initialColorSpace}`);
        }
    }
    const tetradicHues = genTetradicHues(baseColor.value.hue);
    // add the base color
    colors.push(baseColor);
    // generate main tetradic colors (2-4)
    tetradicHues.slice(1).forEach(hue => {
        const { value: { saturation, lightness } } = random.randomSL();
        const tetradicColor = genAllColorValues({
            value: {
                hue,
                saturation,
                lightness
            },
            format: 'hsl'
        }).hsl;
        if (tetradicColor) {
            colors.push(tetradicColor);
        }
    });
    // generate additional variations if needed
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 4);
        const baseHue = tetradicHues[baseColorIndex];
        const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { value: { saturation, lightness } } = random.randomSL();
        saturation = Math.min(100, Math.max(0, saturation));
        lightness = Math.min(100, Math.max(0, lightness));
        const additionalColor = genAllColorValues({
            value: {
                hue,
                saturation,
                lightness
            },
            format: 'hsl'
        }).hsl;
        if (additionalColor) {
            colors.push(additionalColor);
        }
    }
    // update the DOM with generated colors
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        if (colorBox) {
            const hexColor = genAllColorValues(color).hex;
            colorBox.style.backgroundColor = hexColor.value.hex;
            if (color.format === 'hsl') {
                populateColorTextOutputBox(color, index + 1);
            }
            else {
                console.warn(`Skipping non-HSL color at index ${index + 1}`);
            }
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFkaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFsZXR0ZS1nZW4vdGV0cmFkaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzdELE1BQU0sVUFBVSxlQUFlLENBQUMsT0FBZTtJQUM5QyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekQsTUFBTSxRQUFRLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNFLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNyQyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFFaEMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUUxQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRTVDLE9BQU8sWUFBWSxDQUFDO0FBQ3JCLENBQUM7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UzthQUNUO1lBQ0QsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDLENBQUMsR0FBRyxDQUFDO1FBRVAsSUFBSSxlQUFlLEVBQUUsQ0FBQztZQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDRixDQUFDO0lBRUQsdUNBQXVDO0lBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLElBQUksUUFBUSxFQUFFLENBQUM7WUFDZCxNQUFNLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFnQixDQUFDO1lBQzNELFFBQVEsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBRXBELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztnQkFDNUIsMEJBQTBCLENBQUMsS0FBa0IsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0QsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUNBQW1DLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlELENBQUM7UUFDRixDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCB7IGdlbkFsbENvbG9yVmFsdWVzIH0gZnJvbSAnLi4vY29sb3ItY29udmVyc2lvbi9jb252ZXJzaW9uJztcbmltcG9ydCB7IHBvcHVsYXRlQ29sb3JUZXh0T3V0cHV0Qm94IH0gZnJvbSAnLi4vZG9tL2RvbS1tYWluJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblRldHJhZGljSHVlcyhiYXNlSHVlOiBudW1iZXIpIHtcblx0Y29uc3QgdGV0cmFkaWNIdWVzID0gW107XG5cdGNvbnN0IGh1ZTEgPSBiYXNlSHVlO1xuXHRjb25zdCBodWUyID0gKGh1ZTEgKyAxODApICUgMzYwO1xuXHRjb25zdCByYW5kb21PZmZzZXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0NikgKyAyMDtcblx0Y29uc3QgZGlzdGFuY2UgPSA5MCArIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gLXJhbmRvbU9mZnNldCA6IHJhbmRvbU9mZnNldCk7XG5cdGNvbnN0IGh1ZTMgPSAoaHVlMSArIGRpc3RhbmNlKSAlIDM2MDtcblx0Y29uc3QgaHVlNCA9IChodWUzICsgMTgwKSAlIDM2MDtcblxuXHR0ZXRyYWRpY0h1ZXMucHVzaChodWUxLCBodWUyLCBodWUzLCBodWU0KTtcblxuXHRjb25zb2xlLmxvZygndGV0cmFkaWNIdWVzOiAnLCB0ZXRyYWRpY0h1ZXMpO1xuXG5cdHJldHVybiB0ZXRyYWRpY0h1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5UZXRyYWRpY1BhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvciB8IG51bGwgPSBudWxsLFxuXHRpbml0aWFsQ29sb3JTcGFjZTogdHlwZXMuQ29sb3JTcGFjZSA9ICdoZXgnXG4pOiB0eXBlcy5Db2xvcltdIHtcblx0aWYgKG51bUJveGVzIDwgNCkge1xuXHRcdHdpbmRvdy5hbGVydChcblx0XHRcdCdUbyBnZW5lcmF0ZSBhIHRldHJhZGljIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYSBudW1iZXIgb2Ygc3dhdGNoZXMgZ3JlYXRlciB0aGFuIDMnXG5cdFx0KTtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjb25zdCBjb2xvcnM6IHR5cGVzLkNvbG9yW10gPSBbXTtcblx0bGV0IGJhc2VDb2xvcjogdHlwZXMuQ29sb3I7XG5cblx0aWYgKGN1c3RvbUNvbG9yKSB7XG5cdFx0YmFzZUNvbG9yID0gY3VzdG9tQ29sb3I7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgcmFuZG9tQ29sb3IgPSByYW5kb20ucmFuZG9tQ29sb3IoaW5pdGlhbENvbG9yU3BhY2UpO1xuXHRcdGNvbnN0IGNvbG9yVmFsdWVzID0gZ2VuQWxsQ29sb3JWYWx1ZXMocmFuZG9tQ29sb3IpO1xuXG5cdFx0YmFzZUNvbG9yID1cblx0XHRcdGNvbG9yVmFsdWVzW2luaXRpYWxDb2xvclNwYWNlXSA/PyBPYmplY3QudmFsdWVzKGNvbG9yVmFsdWVzKVswXTtcblxuXHRcdGlmICghYmFzZUNvbG9yKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gZ2VuZXJhdGUgYSB2YWxpZCBjb2xvciBpbiAke2luaXRpYWxDb2xvclNwYWNlfWBcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0Y29uc3QgdGV0cmFkaWNIdWVzID0gZ2VuVGV0cmFkaWNIdWVzKChiYXNlQ29sb3IgYXMgdHlwZXMuSFNMKS52YWx1ZS5odWUpO1xuXG5cdC8vIGFkZCB0aGUgYmFzZSBjb2xvclxuXHRjb2xvcnMucHVzaChiYXNlQ29sb3IpO1xuXG5cdC8vIGdlbmVyYXRlIG1haW4gdGV0cmFkaWMgY29sb3JzICgyLTQpXG5cdHRldHJhZGljSHVlcy5zbGljZSgxKS5mb3JFYWNoKGh1ZSA9PiB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0dmFsdWU6IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH1cblx0XHR9ID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cdFx0Y29uc3QgdGV0cmFkaWNDb2xvciA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGh1ZSxcblx0XHRcdFx0c2F0dXJhdGlvbixcblx0XHRcdFx0bGlnaHRuZXNzXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH0pLmhzbDtcblxuXHRcdGlmICh0ZXRyYWRpY0NvbG9yKSB7XG5cdFx0XHRjb2xvcnMucHVzaCh0ZXRyYWRpY0NvbG9yKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIGdlbmVyYXRlIGFkZGl0aW9uYWwgdmFyaWF0aW9ucyBpZiBuZWVkZWRcblx0d2hpbGUgKGNvbG9ycy5sZW5ndGggPCBudW1Cb3hlcykge1xuXHRcdGNvbnN0IGJhc2VDb2xvckluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCk7XG5cdFx0Y29uc3QgYmFzZUh1ZSA9IHRldHJhZGljSHVlc1tiYXNlQ29sb3JJbmRleF07XG5cdFx0Y29uc3QgaHVlID0gKGJhc2VIdWUgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMSkgLSA1ICsgMzYwKSAlIDM2MDtcblxuXHRcdGxldCB7XG5cdFx0XHR2YWx1ZTogeyBzYXR1cmF0aW9uLCBsaWdodG5lc3MgfVxuXHRcdH0gPSByYW5kb20ucmFuZG9tU0woKTtcblxuXHRcdHNhdHVyYXRpb24gPSBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIHNhdHVyYXRpb24pKTtcblx0XHRsaWdodG5lc3MgPSBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIGxpZ2h0bmVzcykpO1xuXG5cdFx0Y29uc3QgYWRkaXRpb25hbENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0aHVlLFxuXHRcdFx0XHRzYXR1cmF0aW9uLFxuXHRcdFx0XHRsaWdodG5lc3Ncblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0fSkuaHNsO1xuXG5cdFx0aWYgKGFkZGl0aW9uYWxDb2xvcikge1xuXHRcdFx0Y29sb3JzLnB1c2goYWRkaXRpb25hbENvbG9yKTtcblx0XHR9XG5cdH1cblxuXHQvLyB1cGRhdGUgdGhlIERPTSB3aXRoIGdlbmVyYXRlZCBjb2xvcnNcblx0Y29sb3JzLmZvckVhY2goKGNvbG9yLCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNvbG9yLWJveC0ke2luZGV4ICsgMX1gKTtcblxuXHRcdGlmIChjb2xvckJveCkge1xuXHRcdFx0Y29uc3QgaGV4Q29sb3IgPSBnZW5BbGxDb2xvclZhbHVlcyhjb2xvcikuaGV4IGFzIHR5cGVzLkhleDtcblx0XHRcdGNvbG9yQm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGhleENvbG9yLnZhbHVlLmhleDtcblxuXHRcdFx0aWYgKGNvbG9yLmZvcm1hdCA9PT0gJ2hzbCcpIHtcblx0XHRcdFx0cG9wdWxhdGVDb2xvclRleHRPdXRwdXRCb3goY29sb3IgYXMgdHlwZXMuSFNMLCBpbmRleCArIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGBTa2lwcGluZyBub24tSFNMIGNvbG9yIGF0IGluZGV4ICR7aW5kZXggKyAxfWApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIGNvbG9ycztcbn1cbiJdfQ==