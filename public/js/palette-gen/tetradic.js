import { random } from '../utils/color-randomizer.js';
import { genAllColorValues } from '../color-conversion/conversion.js';
import { populateColorTextOutputBox } from '../dom/dom-main.js';
export function genTetradicHues(baseHue) {
    const tetradicHues = [];
    const hue1 = baseHue;
    const hue2 = (hue1 + 180) % 360;
    const randomOffset = Math.floor(Math.random() * 46) + 20;
    const distance = 90 + (Math.random() < 0.5 ? -randomOffset : randomOffset);
    const hue3 = (hue1 + distance) % 360;
    const hue4 = (hue3 + 180) % 360;
    tetradicHues.push(hue1, hue2, hue3, hue4);
    console.log('tetradicHues: ', tetradicHues);
    return tetradicHues;
}
export function genTetradicPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 4) {
        window.alert('To generate a tetradic palette, please select a number of swatches greater than 3');
        return [];
    }
    const colors = [];
    let baseColor;
    if (customColor) {
        baseColor = customColor;
    }
    else {
        const randomColor = random.randomColor(initialColorSpace);
        const colorValues = genAllColorValues(randomColor);
        baseColor =
            colorValues[initialColorSpace] ?? Object.values(colorValues)[0];
        if (!baseColor) {
            throw new Error(`Failed to generate a valid color in ${initialColorSpace}`);
        }
    }
    const tetradicHues = genTetradicHues(baseColor.hue);
    // add the base color
    colors.push(baseColor);
    // generate main tetradic colors (2-4)
    tetradicHues.slice(1).forEach(hue => {
        const { saturation, lightness } = random.randomSL();
        const tetradicColor = genAllColorValues({
            hue,
            saturation,
            lightness,
            format: 'hsl'
        }).hsl;
        if (tetradicColor) {
            colors.push(tetradicColor);
        }
    });
    // generate additional variations if needed
    while (colors.length < numBoxes) {
        const baseColorIndex = Math.floor(Math.random() * 4);
        const baseHue = tetradicHues[baseColorIndex];
        const hue = (baseHue + Math.floor(Math.random() * 11) - 5 + 360) % 360;
        let { saturation, lightness } = random.randomSL();
        saturation = Math.min(100, Math.max(0, saturation));
        lightness = Math.min(100, Math.max(0, lightness));
        const additionalColor = genAllColorValues({
            hue,
            saturation,
            lightness,
            format: 'hsl'
        }).hsl;
        if (additionalColor) {
            colors.push(additionalColor);
        }
    }
    // update the DOM with generated colors
    colors.forEach((color, index) => {
        const colorBox = document.getElementById(`color-box-${index + 1}`);
        if (colorBox) {
            const hexColor = genAllColorValues(color).hex;
            colorBox.style.backgroundColor = hexColor.hex;
            if (color.format === 'hsl') {
                populateColorTextOutputBox(color, index + 1);
            }
            else {
                console.warn(`Skipping non-HSL color at index ${index + 1}`);
            }
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV0cmFkaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFsZXR0ZS1nZW4vdGV0cmFkaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzdELE1BQU0sVUFBVSxlQUFlLENBQUMsT0FBZTtJQUM5QyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekQsTUFBTSxRQUFRLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNFLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNyQyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFFaEMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUUxQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRTVDLE9BQU8sWUFBWSxDQUFDO0FBQ3JCLENBQUM7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Q0FBQyxlQUFlLENBQUMsQ0FBQztRQUM5QixDQUFDO0lBQ0YsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQy9CLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVuRSxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ2QsTUFBTSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBZ0IsQ0FBQztZQUMzRCxRQUFRLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBRTlDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztnQkFDNUIsMEJBQTBCLENBQUMsS0FBa0IsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0QsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUNBQW1DLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlELENBQUM7UUFDRixDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCB7IGdlbkFsbENvbG9yVmFsdWVzIH0gZnJvbSAnLi4vY29sb3ItY29udmVyc2lvbi9jb252ZXJzaW9uJztcbmltcG9ydCB7IHBvcHVsYXRlQ29sb3JUZXh0T3V0cHV0Qm94IH0gZnJvbSAnLi4vZG9tL2RvbS1tYWluJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblRldHJhZGljSHVlcyhiYXNlSHVlOiBudW1iZXIpIHtcblx0Y29uc3QgdGV0cmFkaWNIdWVzID0gW107XG5cdGNvbnN0IGh1ZTEgPSBiYXNlSHVlO1xuXHRjb25zdCBodWUyID0gKGh1ZTEgKyAxODApICUgMzYwO1xuXHRjb25zdCByYW5kb21PZmZzZXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0NikgKyAyMDtcblx0Y29uc3QgZGlzdGFuY2UgPSA5MCArIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gLXJhbmRvbU9mZnNldCA6IHJhbmRvbU9mZnNldCk7XG5cdGNvbnN0IGh1ZTMgPSAoaHVlMSArIGRpc3RhbmNlKSAlIDM2MDtcblx0Y29uc3QgaHVlNCA9IChodWUzICsgMTgwKSAlIDM2MDtcblxuXHR0ZXRyYWRpY0h1ZXMucHVzaChodWUxLCBodWUyLCBodWUzLCBodWU0KTtcblxuXHRjb25zb2xlLmxvZygndGV0cmFkaWNIdWVzOiAnLCB0ZXRyYWRpY0h1ZXMpO1xuXG5cdHJldHVybiB0ZXRyYWRpY0h1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5UZXRyYWRpY1BhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvckRhdGEgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JEYXRhW10ge1xuXHRpZiAobnVtQm94ZXMgPCA0KSB7XG5cdFx0d2luZG93LmFsZXJ0KFxuXHRcdFx0J1RvIGdlbmVyYXRlIGEgdGV0cmFkaWMgcGFsZXR0ZSwgcGxlYXNlIHNlbGVjdCBhIG51bWJlciBvZiBzd2F0Y2hlcyBncmVhdGVyIHRoYW4gMydcblx0XHQpO1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdGNvbnN0IGNvbG9yczogdHlwZXMuQ29sb3JEYXRhW10gPSBbXTtcblx0bGV0IGJhc2VDb2xvcjogdHlwZXMuQ29sb3JEYXRhO1xuXG5cdGlmIChjdXN0b21Db2xvcikge1xuXHRcdGJhc2VDb2xvciA9IGN1c3RvbUNvbG9yO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnN0IHJhbmRvbUNvbG9yID0gcmFuZG9tLnJhbmRvbUNvbG9yKGluaXRpYWxDb2xvclNwYWNlKTtcblx0XHRjb25zdCBjb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHJhbmRvbUNvbG9yKTtcblxuXHRcdGJhc2VDb2xvciA9XG5cdFx0XHRjb2xvclZhbHVlc1tpbml0aWFsQ29sb3JTcGFjZV0gPz8gT2JqZWN0LnZhbHVlcyhjb2xvclZhbHVlcylbMF07XG5cblx0XHRpZiAoIWJhc2VDb2xvcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGdlbmVyYXRlIGEgdmFsaWQgY29sb3IgaW4gJHtpbml0aWFsQ29sb3JTcGFjZX1gXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IHRldHJhZGljSHVlcyA9IGdlblRldHJhZGljSHVlcygoYmFzZUNvbG9yIGFzIHR5cGVzLkhTTCkuaHVlKTtcblxuXHQvLyBhZGQgdGhlIGJhc2UgY29sb3Jcblx0Y29sb3JzLnB1c2goYmFzZUNvbG9yKTtcblxuXHQvLyBnZW5lcmF0ZSBtYWluIHRldHJhZGljIGNvbG9ycyAoMi00KVxuXHR0ZXRyYWRpY0h1ZXMuc2xpY2UoMSkuZm9yRWFjaChodWUgPT4ge1xuXHRcdGNvbnN0IHsgc2F0dXJhdGlvbiwgbGlnaHRuZXNzIH0gPSByYW5kb20ucmFuZG9tU0woKTtcblx0XHRjb25zdCB0ZXRyYWRpY0NvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoe1xuXHRcdFx0aHVlLFxuXHRcdFx0c2F0dXJhdGlvbixcblx0XHRcdGxpZ2h0bmVzcyxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9KS5oc2w7XG5cblx0XHRpZiAodGV0cmFkaWNDb2xvcikge1xuXHRcdFx0Y29sb3JzLnB1c2godGV0cmFkaWNDb2xvcik7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBnZW5lcmF0ZSBhZGRpdGlvbmFsIHZhcmlhdGlvbnMgaWYgbmVlZGVkXG5cdHdoaWxlIChjb2xvcnMubGVuZ3RoIDwgbnVtQm94ZXMpIHtcblx0XHRjb25zdCBiYXNlQ29sb3JJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpO1xuXHRcdGNvbnN0IGJhc2VIdWUgPSB0ZXRyYWRpY0h1ZXNbYmFzZUNvbG9ySW5kZXhdO1xuXHRcdGNvbnN0IGh1ZSA9IChiYXNlSHVlICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTEpIC0gNSArIDM2MCkgJSAzNjA7XG5cblx0XHRsZXQgeyBzYXR1cmF0aW9uLCBsaWdodG5lc3MgfSA9IHJhbmRvbS5yYW5kb21TTCgpO1xuXG5cdFx0c2F0dXJhdGlvbiA9IE1hdGgubWluKDEwMCwgTWF0aC5tYXgoMCwgc2F0dXJhdGlvbikpO1xuXHRcdGxpZ2h0bmVzcyA9IE1hdGgubWluKDEwMCwgTWF0aC5tYXgoMCwgbGlnaHRuZXNzKSk7XG5cblx0XHRjb25zdCBhZGRpdGlvbmFsQ29sb3IgPSBnZW5BbGxDb2xvclZhbHVlcyh7XG5cdFx0XHRodWUsXG5cdFx0XHRzYXR1cmF0aW9uLFxuXHRcdFx0bGlnaHRuZXNzLFxuXHRcdFx0Zm9ybWF0OiAnaHNsJ1xuXHRcdH0pLmhzbDtcblxuXHRcdGlmIChhZGRpdGlvbmFsQ29sb3IpIHtcblx0XHRcdGNvbG9ycy5wdXNoKGFkZGl0aW9uYWxDb2xvcik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gdXBkYXRlIHRoZSBET00gd2l0aCBnZW5lcmF0ZWQgY29sb3JzXG5cdGNvbG9ycy5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHtcblx0XHRjb25zdCBjb2xvckJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjb2xvci1ib3gtJHtpbmRleCArIDF9YCk7XG5cblx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdGNvbnN0IGhleENvbG9yID0gZ2VuQWxsQ29sb3JWYWx1ZXMoY29sb3IpLmhleCBhcyB0eXBlcy5IZXg7XG5cdFx0XHRjb2xvckJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBoZXhDb2xvci5oZXg7XG5cblx0XHRcdGlmIChjb2xvci5mb3JtYXQgPT09ICdoc2wnKSB7XG5cdFx0XHRcdHBvcHVsYXRlQ29sb3JUZXh0T3V0cHV0Qm94KGNvbG9yIGFzIHR5cGVzLkhTTCwgaW5kZXggKyAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgU2tpcHBpbmcgbm9uLUhTTCBjb2xvciBhdCBpbmRleCAke2luZGV4ICsgMX1gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBjb2xvcnM7XG59XG4iXX0=