import { random } from '../utils/color-randomizer.js';
import { genAllColorValues } from '../color-conversion/conversion.js';
export function genAnalogousHues(color, numBoxes) {
    const analogousHues = [];
    const baseHue = color.hue;
    const maxTotalDistance = 60;
    const minTotalDistance = 10 + (numBoxes - 2) * 9;
    const totalIncrement = Math.floor(Math.random() * (maxTotalDistance - minTotalDistance + 1)) +
        minTotalDistance;
    const increment = Math.floor(totalIncrement / (numBoxes - 1));
    for (let i = 1; i < numBoxes; i++) {
        analogousHues.push((baseHue + increment * i) % 360);
    }
    return analogousHues;
}
export function genAnalogousPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    if (numBoxes < 2) {
        window.alert('To generate an analogous palette, please select a number of swatches greater than 1');
        return [];
    }
    const colors = [];
    const baseColorValues = customColor
        ? genAllColorValues(customColor)
        : genAllColorValues(random.randomColor(initialColorSpace));
    const baseColor = baseColorValues[initialColorSpace];
    if (!baseColor) {
        throw new Error('Base color is missin in the generated values');
    }
    colors.push(baseColor);
    const analogousHues = genAnalogousHues(baseColorValues.hsl, numBoxes);
    analogousHues.forEach((hue, i) => {
        const sl = random.randomSL();
        const analogousColorValues = genAllColorValues({
            hue,
            saturation: sl.saturation,
            lightness: sl.lightness,
            format: 'hsl'
        });
        const analogousColor = analogousColorValues.hsl;
        if (analogousColor) {
            colors.push(analogousColor);
        }
        const colorBox = document.getElementById(`color-box-${i + 2}`);
        if (colorBox) {
            const hexValue = analogousColorValues.hex;
            colorBox.style.backgroundColor = hexValue ? hexValue.hex : '';
        }
    });
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbG9nb3VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhbGV0dGUtZ2VuL2FuYWxvZ291cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFbkUsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEtBQWdCLEVBQUUsUUFBZ0I7SUFDbEUsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDMUIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFDNUIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sY0FBYyxHQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLGdCQUFnQixDQUFDO0lBQ2xCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ25DLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxPQUFPLGFBQWEsQ0FBQztBQUN0QixDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUNsQyxRQUFnQixFQUNoQixjQUFzQyxJQUFJLEVBQzFDLG9CQUFzQyxLQUFLO0lBRTNDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQ1gscUZBQXFGLENBQ3JGLENBQUM7UUFFRixPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBc0IsRUFBRSxDQUFDO0lBQ3JDLE1BQU0sZUFBZSxHQUFHLFdBQVc7UUFDbEMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQztRQUNoQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFckQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV2QixNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FDckMsZUFBZSxDQUFDLEdBQWdCLEVBQ2hDLFFBQVEsQ0FDUixDQUFDO0lBRUYsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNoQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDN0IsTUFBTSxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FBQztZQUM5QyxHQUFHO1lBQ0gsVUFBVSxFQUFFLEVBQUUsQ0FBQyxVQUFVO1lBQ3pCLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUztZQUN2QixNQUFNLEVBQUUsS0FBSztTQUNiLENBQUMsQ0FBQztRQUVILE1BQU0sY0FBYyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsQ0FBQztRQUVoRCxJQUFJLGNBQWMsRUFBRSxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0IsQ0FBQztRQUVELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUvRCxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ2QsTUFBTSxRQUFRLEdBQUcsb0JBQW9CLENBQUMsR0FBNEIsQ0FBQztZQUNuRSxRQUFRLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMvRCxDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByYW5kb20gfSBmcm9tICcuLi91dGlscy9jb2xvci1yYW5kb21pemVyJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGdlbkFsbENvbG9yVmFsdWVzIH0gZnJvbSAnLi4vY29sb3ItY29udmVyc2lvbi9jb252ZXJzaW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkFuYWxvZ291c0h1ZXMoY29sb3I6IHR5cGVzLkhTTCwgbnVtQm94ZXM6IG51bWJlcik6IG51bWJlcltdIHtcblx0Y29uc3QgYW5hbG9nb3VzSHVlcyA9IFtdO1xuXHRjb25zdCBiYXNlSHVlID0gY29sb3IuaHVlO1xuXHRjb25zdCBtYXhUb3RhbERpc3RhbmNlID0gNjA7XG5cdGNvbnN0IG1pblRvdGFsRGlzdGFuY2UgPSAxMCArIChudW1Cb3hlcyAtIDIpICogOTtcblx0Y29uc3QgdG90YWxJbmNyZW1lbnQgPVxuXHRcdE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhUb3RhbERpc3RhbmNlIC0gbWluVG90YWxEaXN0YW5jZSArIDEpKSArXG5cdFx0bWluVG90YWxEaXN0YW5jZTtcblx0Y29uc3QgaW5jcmVtZW50ID0gTWF0aC5mbG9vcih0b3RhbEluY3JlbWVudCAvIChudW1Cb3hlcyAtIDEpKTtcblxuXHRmb3IgKGxldCBpID0gMTsgaSA8IG51bUJveGVzOyBpKyspIHtcblx0XHRhbmFsb2dvdXNIdWVzLnB1c2goKGJhc2VIdWUgKyBpbmNyZW1lbnQgKiBpKSAlIDM2MCk7XG5cdH1cblxuXHRyZXR1cm4gYW5hbG9nb3VzSHVlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkFuYWxvZ291c1BhbGV0dGUoXG5cdG51bUJveGVzOiBudW1iZXIsXG5cdGN1c3RvbUNvbG9yOiB0eXBlcy5Db2xvckRhdGEgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JEYXRhW10ge1xuXHRpZiAobnVtQm94ZXMgPCAyKSB7XG5cdFx0d2luZG93LmFsZXJ0KFxuXHRcdFx0J1RvIGdlbmVyYXRlIGFuIGFuYWxvZ291cyBwYWxldHRlLCBwbGVhc2Ugc2VsZWN0IGEgbnVtYmVyIG9mIHN3YXRjaGVzIGdyZWF0ZXIgdGhhbiAxJ1xuXHRcdCk7XG5cblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjb25zdCBjb2xvcnM6IHR5cGVzLkNvbG9yRGF0YVtdID0gW107XG5cdGNvbnN0IGJhc2VDb2xvclZhbHVlcyA9IGN1c3RvbUNvbG9yXG5cdFx0PyBnZW5BbGxDb2xvclZhbHVlcyhjdXN0b21Db2xvcilcblx0XHQ6IGdlbkFsbENvbG9yVmFsdWVzKHJhbmRvbS5yYW5kb21Db2xvcihpbml0aWFsQ29sb3JTcGFjZSkpO1xuXHRjb25zdCBiYXNlQ29sb3IgPSBiYXNlQ29sb3JWYWx1ZXNbaW5pdGlhbENvbG9yU3BhY2VdO1xuXG5cdGlmICghYmFzZUNvbG9yKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdCYXNlIGNvbG9yIGlzIG1pc3NpbiBpbiB0aGUgZ2VuZXJhdGVkIHZhbHVlcycpO1xuXHR9XG5cblx0Y29sb3JzLnB1c2goYmFzZUNvbG9yKTtcblxuXHRjb25zdCBhbmFsb2dvdXNIdWVzID0gZ2VuQW5hbG9nb3VzSHVlcyhcblx0XHRiYXNlQ29sb3JWYWx1ZXMuaHNsIGFzIHR5cGVzLkhTTCxcblx0XHRudW1Cb3hlc1xuXHQpO1xuXG5cdGFuYWxvZ291c0h1ZXMuZm9yRWFjaCgoaHVlLCBpKSA9PiB7XG5cdFx0Y29uc3Qgc2wgPSByYW5kb20ucmFuZG9tU0woKTtcblx0XHRjb25zdCBhbmFsb2dvdXNDb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdGh1ZSxcblx0XHRcdHNhdHVyYXRpb246IHNsLnNhdHVyYXRpb24sXG5cdFx0XHRsaWdodG5lc3M6IHNsLmxpZ2h0bmVzcyxcblx0XHRcdGZvcm1hdDogJ2hzbCdcblx0XHR9KTtcblxuXHRcdGNvbnN0IGFuYWxvZ291c0NvbG9yID0gYW5hbG9nb3VzQ29sb3JWYWx1ZXMuaHNsO1xuXG5cdFx0aWYgKGFuYWxvZ291c0NvbG9yKSB7XG5cdFx0XHRjb2xvcnMucHVzaChhbmFsb2dvdXNDb2xvcik7XG5cdFx0fVxuXG5cdFx0Y29uc3QgY29sb3JCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY29sb3ItYm94LSR7aSArIDJ9YCk7XG5cblx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdGNvbnN0IGhleFZhbHVlID0gYW5hbG9nb3VzQ29sb3JWYWx1ZXMuaGV4IGFzIHR5cGVzLkhleCB8IHVuZGVmaW5lZDtcblx0XHRcdGNvbG9yQm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGhleFZhbHVlID8gaGV4VmFsdWUuaGV4IDogJyc7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gY29sb3JzO1xufVxuIl19