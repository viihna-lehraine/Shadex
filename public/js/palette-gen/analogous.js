import { genAllColorValues } from '../color-conversion/conversion.js';
import { conversionHelpers } from '../helpers/conversion.js';
import { random } from '../utils/color-randomizer.js';
export function genAnalogousHues(color, numBoxes) {
    try {
        const hslColor = color.format === 'hsl'
            ? color
            : conversionHelpers.convertColorToHSL(color);
        if (!hslColor) {
            console.error(`Failed to retrieve HSL color from ${color.format}`);
            return [];
        }
        const analogousHues = [];
        const baseHue = hslColor.value.hue;
        const maxTotalDistance = 60;
        const minTotalDistance = 10 + (numBoxes - 2) * 9;
        const totalIncrement = Math.floor(Math.random() * (maxTotalDistance - minTotalDistance + 1)) + minTotalDistance;
        const increment = Math.floor(totalIncrement / (numBoxes - 1));
        for (let i = 1; i < numBoxes; i++) {
            analogousHues.push((baseHue + increment * i) % 360);
        }
        return analogousHues;
    }
    catch (error) {
        console.error(`Error generating analogous hues: ${error}`);
        return [];
    }
}
export function genAnalogousPalette(numBoxes, customColor = null, initialColorSpace = 'hex') {
    try {
        if (numBoxes < 2) {
            window.alert('To generate an analogous palette, please select a number of swatches greater than 1');
            return [];
        }
        const colors = [];
        const baseColorValues = customColor
            ? genAllColorValues(customColor)
            : genAllColorValues(random.randomColor(initialColorSpace));
        const baseColor = baseColorValues[initialColorSpace];
        if (!baseColor) {
            throw new Error('Base color is missin in the generated values');
        }
        colors.push(baseColor);
        const analogousHues = genAnalogousHues(baseColorValues.hsl, numBoxes);
        analogousHues.forEach((hue, i) => {
            const sl = random.randomSL();
            const analogousColorValues = genAllColorValues({
                value: {
                    hue,
                    saturation: sl.value.saturation,
                    lightness: sl.value.lightness
                },
                format: 'hsl'
            });
            const analogousColor = analogousColorValues.hsl;
            if (analogousColor) {
                colors.push(analogousColor);
            }
            const colorBox = document.getElementById(`color-box-${i + 2}`);
            if (colorBox) {
                const hexValue = analogousColorValues.hex;
                colorBox.style.backgroundColor = hexValue
                    ? hexValue.value.hex
                    : '';
            }
        });
        return colors;
    }
    catch (error) {
        console.error(`Error generating analogous palette: ${error}`);
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbG9nb3VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhbGV0dGUtZ2VuL2FuYWxvZ291cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbkQsTUFBTSxVQUFVLGdCQUFnQixDQUMvQixLQUFrQixFQUNsQixRQUFnQjtJQUVoQixJQUFJLENBQUM7UUFDSixNQUFNLFFBQVEsR0FDYixLQUFLLENBQUMsTUFBTSxLQUFLLEtBQUs7WUFDckIsQ0FBQyxDQUFFLEtBQW1CO1lBQ3RCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUNuRSxPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFFRCxNQUFNLGFBQWEsR0FBYSxFQUFFLENBQUM7UUFDbkMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDbkMsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDNUIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sY0FBYyxHQUNuQixJQUFJLENBQUMsS0FBSyxDQUNULElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUN6RCxHQUFHLGdCQUFnQixDQUFDO1FBQ3RCLE1BQU0sU0FBUyxH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T0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbkFsbENvbG9yVmFsdWVzIH0gZnJvbSAnLi4vY29sb3ItY29udmVyc2lvbi9jb252ZXJzaW9uJztcbmltcG9ydCB7IGNvbnZlcnNpb25IZWxwZXJzIH0gZnJvbSAnLi4vaGVscGVycy9jb252ZXJzaW9uJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2luZGV4L3R5cGVzJztcbmltcG9ydCB7IHJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL2NvbG9yLXJhbmRvbWl6ZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuQW5hbG9nb3VzSHVlcyhcblx0Y29sb3I6IHR5cGVzLkNvbG9yLFxuXHRudW1Cb3hlczogbnVtYmVyXG4pOiBudW1iZXJbXSB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgaHNsQ29sb3IgPVxuXHRcdFx0Y29sb3IuZm9ybWF0ID09PSAnaHNsJ1xuXHRcdFx0XHQ/IChjb2xvciBhcyB0eXBlcy5IU0wpXG5cdFx0XHRcdDogY29udmVyc2lvbkhlbHBlcnMuY29udmVydENvbG9yVG9IU0woY29sb3IpO1xuXG5cdFx0aWYgKCFoc2xDb2xvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJldHJpZXZlIEhTTCBjb2xvciBmcm9tICR7Y29sb3IuZm9ybWF0fWApO1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFuYWxvZ291c0h1ZXM6IG51bWJlcltdID0gW107XG5cdFx0Y29uc3QgYmFzZUh1ZSA9IGhzbENvbG9yLnZhbHVlLmh1ZTtcblx0XHRjb25zdCBtYXhUb3RhbERpc3RhbmNlID0gNjA7XG5cdFx0Y29uc3QgbWluVG90YWxEaXN0YW5jZSA9IDEwICsgKG51bUJveGVzIC0gMikgKiA5O1xuXHRcdGNvbnN0IHRvdGFsSW5jcmVtZW50ID1cblx0XHRcdE1hdGguZmxvb3IoXG5cdFx0XHRcdE1hdGgucmFuZG9tKCkgKiAobWF4VG90YWxEaXN0YW5jZSAtIG1pblRvdGFsRGlzdGFuY2UgKyAxKVxuXHRcdFx0KSArIG1pblRvdGFsRGlzdGFuY2U7XG5cdFx0Y29uc3QgaW5jcmVtZW50ID0gTWF0aC5mbG9vcih0b3RhbEluY3JlbWVudCAvIChudW1Cb3hlcyAtIDEpKTtcblxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgbnVtQm94ZXM7IGkrKykge1xuXHRcdFx0YW5hbG9nb3VzSHVlcy5wdXNoKChiYXNlSHVlICsgaW5jcmVtZW50ICogaSkgJSAzNjApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhbmFsb2dvdXNIdWVzO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGdlbmVyYXRpbmcgYW5hbG9nb3VzIGh1ZXM6ICR7ZXJyb3J9YCk7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5BbmFsb2dvdXNQYWxldHRlKFxuXHRudW1Cb3hlczogbnVtYmVyLFxuXHRjdXN0b21Db2xvcjogdHlwZXMuQ29sb3IgfCBudWxsID0gbnVsbCxcblx0aW5pdGlhbENvbG9yU3BhY2U6IHR5cGVzLkNvbG9yU3BhY2UgPSAnaGV4J1xuKTogdHlwZXMuQ29sb3JbXSB7XG5cdHRyeSB7XG5cdFx0aWYgKG51bUJveGVzIDwgMikge1xuXHRcdFx0d2luZG93LmFsZXJ0KFxuXHRcdFx0XHQnVG8gZ2VuZXJhdGUgYW4gYW5hbG9nb3VzIHBhbGV0dGUsIHBsZWFzZSBzZWxlY3QgYSBudW1iZXIgb2Ygc3dhdGNoZXMgZ3JlYXRlciB0aGFuIDEnXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXG5cdFx0Y29uc3QgY29sb3JzOiB0eXBlcy5Db2xvcltdID0gW107XG5cdFx0Y29uc3QgYmFzZUNvbG9yVmFsdWVzID0gY3VzdG9tQ29sb3Jcblx0XHRcdD8gZ2VuQWxsQ29sb3JWYWx1ZXMoY3VzdG9tQ29sb3IpXG5cdFx0XHQ6IGdlbkFsbENvbG9yVmFsdWVzKHJhbmRvbS5yYW5kb21Db2xvcihpbml0aWFsQ29sb3JTcGFjZSkpO1xuXHRcdGNvbnN0IGJhc2VDb2xvciA9IGJhc2VDb2xvclZhbHVlc1tpbml0aWFsQ29sb3JTcGFjZV07XG5cblx0XHRpZiAoIWJhc2VDb2xvcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdCYXNlIGNvbG9yIGlzIG1pc3NpbiBpbiB0aGUgZ2VuZXJhdGVkIHZhbHVlcycpO1xuXHRcdH1cblxuXHRcdGNvbG9ycy5wdXNoKGJhc2VDb2xvcik7XG5cblx0XHRjb25zdCBhbmFsb2dvdXNIdWVzID0gZ2VuQW5hbG9nb3VzSHVlcyhcblx0XHRcdGJhc2VDb2xvclZhbHVlcy5oc2wgYXMgdHlwZXMuSFNMLFxuXHRcdFx0bnVtQm94ZXNcblx0XHQpO1xuXG5cdFx0YW5hbG9nb3VzSHVlcy5mb3JFYWNoKChodWUsIGkpID0+IHtcblx0XHRcdGNvbnN0IHNsID0gcmFuZG9tLnJhbmRvbVNMKCk7XG5cdFx0XHRjb25zdCBhbmFsb2dvdXNDb2xvclZhbHVlcyA9IGdlbkFsbENvbG9yVmFsdWVzKHtcblx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRodWUsXG5cdFx0XHRcdFx0c2F0dXJhdGlvbjogc2wudmFsdWUuc2F0dXJhdGlvbixcblx0XHRcdFx0XHRsaWdodG5lc3M6IHNsLnZhbHVlLmxpZ2h0bmVzc1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRmb3JtYXQ6ICdoc2wnXG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3QgYW5hbG9nb3VzQ29sb3IgPSBhbmFsb2dvdXNDb2xvclZhbHVlcy5oc2w7XG5cblx0XHRcdGlmIChhbmFsb2dvdXNDb2xvcikge1xuXHRcdFx0XHRjb2xvcnMucHVzaChhbmFsb2dvdXNDb2xvcik7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNvbG9yQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNvbG9yLWJveC0ke2kgKyAyfWApO1xuXG5cdFx0XHRpZiAoY29sb3JCb3gpIHtcblx0XHRcdFx0Y29uc3QgaGV4VmFsdWUgPSBhbmFsb2dvdXNDb2xvclZhbHVlcy5oZXggYXNcblx0XHRcdFx0XHR8IHR5cGVzLkhleFxuXHRcdFx0XHRcdHwgdW5kZWZpbmVkO1xuXHRcdFx0XHRjb2xvckJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBoZXhWYWx1ZVxuXHRcdFx0XHRcdD8gaGV4VmFsdWUudmFsdWUuaGV4XG5cdFx0XHRcdFx0OiAnJztcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBjb2xvcnM7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyBhbmFsb2dvdXMgcGFsZXR0ZTogJHtlcnJvcn1gKTtcblx0XHRyZXR1cm4gW107XG5cdH1cbn1cbiJdfQ==