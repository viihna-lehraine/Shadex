// File: src/data/consts/dom/elements.js
import { domUtils } from '../../../common/dom/index.js';
const getElement = domUtils.getElement;
const advancedMenuButton = getElement('advanced-menu-button');
const applyCustomColorButton = getElement('apply-custom-color-button');
const clearCustomColorButton = getElement('clear-custom-color-button');
const closeCustomColorMenuButton = getElement('close-custom-color-menu-button');
const closeAdvancedMenuButton = getElement('close-advanced-menu-button');
const closeHelpMenuButton = getElement('close-help-menu-button');
const closeHistoryMenuButton = getElement('close-history-menu-button');
const customColorElement = getElement('custom-color');
const customColorMenuButton = getElement('custom-color-menu-button');
const desaturateButton = getElement('desaturate-button');
const enableAlphaCheckbox = getElement('enable-alpha-checkbox');
const generateButton = getElement('generate-button');
const helpMenuButton = getElement('help-menu-button');
const historyMenuButton = getElement('history-menu-button');
const limitDarknessCheckbox = getElement('limit-darkness-checkbox');
const limitGraynessCheckbox = getElement('limit-grayness-checkbox');
const limitLightnessCheckbox = getElement('limit-lightness-checkbox');
const paletteNumberOptions = getElement('palette-number-options');
const paletteTypeOptions = getElement('palette-type-options');
const saturateButton = getElement('saturate-button');
const selectedColorOption = getElement('selected-color-option');
const showAsCMYKButton = getElement('show-as-cmyk-button');
const showAsHexButton = getElement('show-as-hex-button');
const showAsHSLButton = getElement('show-as-hsl-button');
const showAsHSVButton = getElement('show-as-hsv-button');
const showAsLABButton = getElement('show-as-lab-button');
const showAsRGBButton = getElement('show-as-rgb-button');
export const domElements = {
    advancedMenuButton,
    applyCustomColorButton,
    clearCustomColorButton,
    closeAdvancedMenuButton,
    closeCustomColorMenuButton,
    closeHelpMenuButton,
    closeHistoryMenuButton,
    customColorElement,
    customColorMenuButton,
    desaturateButton,
    enableAlphaCheckbox,
    generateButton,
    helpMenuButton,
    historyMenuButton,
    limitDarknessCheckbox,
    limitGraynessCheckbox,
    limitLightnessCheckbox,
    paletteNumberOptions,
    paletteTypeOptions,
    saturateButton,
    selectedColorOption,
    showAsCMYKButton,
    showAsHexButton,
    showAsHSLButton,
    showAsHSVButton,
    showAsLABButton,
    showAsRGBButton
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZGF0YS9jb25zdHMvZG9tL2VsZW1lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdDQUF3QztBQUd4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFeEQsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztBQUV2QyxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FDcEMsc0JBQXNCLENBQ3RCLENBQUM7QUFDRixNQUFNLHNCQUFzQixHQUFHLFVBQVUsQ0FDeEMsMkJBQTJCLENBQzNCLENBQUM7QUFDRixNQUFNLHNCQUFzQixHQUFHLFVBQVUsQ0FDeEMsMkJBQTJCLENBQzNCLENBQUM7QUFDRixNQUFNLDBCQUEwQixHQUFHLFVBQVUsQ0FDNUMsZ0NBQWdDLENBQ2hDLENBQUM7QUFDRixNQUFNLHVCQUF1QixHQUFHLFVBQVUsQ0FDekMsNEJBQTRCLENBQzVCLENBQUM7QUFDRixNQUFNLG1CQUFtQixHQUFHLFVBQVUsQ0FDckMsd0JBQXdCLENBQ3hCLENBQUM7QUFDRixNQUFNLHNCQUFzQixHQUFHLFVBQVUsQ0FDeEMsMkJBQTJCLENBQzNCLENBQUM7QUFDRixNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBbUIsY0FBYyxDQUFDLENBQUM7QUFDeEUsTUFBTSxxQkFBcUIsR0FBRyxVQUFVLENBQ3ZDLDBCQUEwQixDQUMxQixDQUFDO0FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQW9CLG1CQUFtQixDQUFDLENBQUM7QUFDNUUsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQ3JDLHVCQUF1QixDQUN2QixDQUFDO0FBQ0YsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFvQixpQkFBaUIsQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBb0Isa0JBQWtCLENBQUMsQ0FBQztBQUN6RSxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBb0IscUJBQXFCLENBQUMsQ0FBQztBQUMvRSxNQUFNLHFCQUFxQixHQUFHLFVBQVUsQ0FDdkMseUJBQXlCLENBQ3pCLENBQUM7QUFDRixNQUFNLHFCQUFxQixHQUFHLFVBQVUsQ0FDdkMseUJBQXlCLENBQ3pCLENBQUM7QUFDRixNQUFNLHNCQUFzQixHQUFHLFVBQVUsQ0FDeEMsMEJBQTBCLENBQzFCLENBQUM7QUFDRixNQUFNLG9CQUFvQixHQUFHLFVBQVUsQ0FDdEMsd0JBQXdCLENBQ3hCLENBQUM7QUFDRixNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FDcEMsc0JBQXNCLENBQ3RCLENBQUM7QUFDRixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQW9CLGlCQUFpQixDQUFDLENBQUM7QUFDeEUsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQ3JDLHVCQUF1QixDQUN2QixDQUFDO0FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQW9CLHFCQUFxQixDQUFDLENBQUM7QUFDOUUsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBQzVFLE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBb0Isb0JBQW9CLENBQUMsQ0FBQztBQUM1RSxNQUFNLGVBQWUsR0FBRyxVQUFVLENBQW9CLG9CQUFvQixDQUFDLENBQUM7QUFDNUUsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBQzVFLE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBb0Isb0JBQW9CLENBQUMsQ0FBQztBQUU1RSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQW1CO0lBQzFDLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLHVCQUF1QjtJQUN2QiwwQkFBMEI7SUFDMUIsbUJBQW1CO0lBQ25CLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsY0FBYztJQUNkLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2YsZUFBZTtJQUNmLGVBQWU7SUFDZixlQUFlO0lBQ2YsZUFBZTtDQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBzcmMvZGF0YS9jb25zdHMvZG9tL2VsZW1lbnRzLmpzXG5cbmltcG9ydCB7IERPTUVsZW1lbnREYXRhIH0gZnJvbSAnLi4vLi4vLi4vaW5kZXgvaW5kZXguanMnO1xuaW1wb3J0IHsgZG9tVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZG9tL2luZGV4LmpzJztcblxuY29uc3QgZ2V0RWxlbWVudCA9IGRvbVV0aWxzLmdldEVsZW1lbnQ7XG5cbmNvbnN0IGFkdmFuY2VkTWVudUJ1dHRvbiA9IGdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnYWR2YW5jZWQtbWVudS1idXR0b24nXG4pO1xuY29uc3QgYXBwbHlDdXN0b21Db2xvckJ1dHRvbiA9IGdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnYXBwbHktY3VzdG9tLWNvbG9yLWJ1dHRvbidcbik7XG5jb25zdCBjbGVhckN1c3RvbUNvbG9yQnV0dG9uID0gZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdCdjbGVhci1jdXN0b20tY29sb3ItYnV0dG9uJ1xuKTtcbmNvbnN0IGNsb3NlQ3VzdG9tQ29sb3JNZW51QnV0dG9uID0gZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oXG5cdCdjbG9zZS1jdXN0b20tY29sb3ItbWVudS1idXR0b24nXG4pO1xuY29uc3QgY2xvc2VBZHZhbmNlZE1lbnVCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pihcblx0J2Nsb3NlLWFkdmFuY2VkLW1lbnUtYnV0dG9uJ1xuKTtcbmNvbnN0IGNsb3NlSGVscE1lbnVCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pihcblx0J2Nsb3NlLWhlbHAtbWVudS1idXR0b24nXG4pO1xuY29uc3QgY2xvc2VIaXN0b3J5TWVudUJ1dHRvbiA9IGdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnY2xvc2UtaGlzdG9yeS1tZW51LWJ1dHRvbidcbik7XG5jb25zdCBjdXN0b21Db2xvckVsZW1lbnQgPSBnZXRFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KCdjdXN0b20tY29sb3InKTtcbmNvbnN0IGN1c3RvbUNvbG9yTWVudUJ1dHRvbiA9IGdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxuXHQnY3VzdG9tLWNvbG9yLW1lbnUtYnV0dG9uJ1xuKTtcbmNvbnN0IGRlc2F0dXJhdGVCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50PignZGVzYXR1cmF0ZS1idXR0b24nKTtcbmNvbnN0IGVuYWJsZUFscGhhQ2hlY2tib3ggPSBnZXRFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KFxuXHQnZW5hYmxlLWFscGhhLWNoZWNrYm94J1xuKTtcbmNvbnN0IGdlbmVyYXRlQnV0dG9uID0gZ2V0RWxlbWVudDxIVE1MQnV0dG9uRWxlbWVudD4oJ2dlbmVyYXRlLWJ1dHRvbicpO1xuY29uc3QgaGVscE1lbnVCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50PignaGVscC1tZW51LWJ1dHRvbicpO1xuY29uc3QgaGlzdG9yeU1lbnVCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50PignaGlzdG9yeS1tZW51LWJ1dHRvbicpO1xuY29uc3QgbGltaXREYXJrbmVzc0NoZWNrYm94ID0gZ2V0RWxlbWVudDxIVE1MSW5wdXRFbGVtZW50Pihcblx0J2xpbWl0LWRhcmtuZXNzLWNoZWNrYm94J1xuKTtcbmNvbnN0IGxpbWl0R3JheW5lc3NDaGVja2JveCA9IGdldEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG5cdCdsaW1pdC1ncmF5bmVzcy1jaGVja2JveCdcbik7XG5jb25zdCBsaW1pdExpZ2h0bmVzc0NoZWNrYm94ID0gZ2V0RWxlbWVudDxIVE1MSW5wdXRFbGVtZW50Pihcblx0J2xpbWl0LWxpZ2h0bmVzcy1jaGVja2JveCdcbik7XG5jb25zdCBwYWxldHRlTnVtYmVyT3B0aW9ucyA9IGdldEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG5cdCdwYWxldHRlLW51bWJlci1vcHRpb25zJ1xuKTtcbmNvbnN0IHBhbGV0dGVUeXBlT3B0aW9ucyA9IGdldEVsZW1lbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KFxuXHQncGFsZXR0ZS10eXBlLW9wdGlvbnMnXG4pO1xuY29uc3Qgc2F0dXJhdGVCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2F0dXJhdGUtYnV0dG9uJyk7XG5jb25zdCBzZWxlY3RlZENvbG9yT3B0aW9uID0gZ2V0RWxlbWVudDxIVE1MU2VsZWN0RWxlbWVudD4oXG5cdCdzZWxlY3RlZC1jb2xvci1vcHRpb24nXG4pO1xuY29uc3Qgc2hvd0FzQ01ZS0J1dHRvbiA9IGdldEVsZW1lbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KCdzaG93LWFzLWNteWstYnV0dG9uJyk7XG5jb25zdCBzaG93QXNIZXhCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2hvdy1hcy1oZXgtYnV0dG9uJyk7XG5jb25zdCBzaG93QXNIU0xCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2hvdy1hcy1oc2wtYnV0dG9uJyk7XG5jb25zdCBzaG93QXNIU1ZCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2hvdy1hcy1oc3YtYnV0dG9uJyk7XG5jb25zdCBzaG93QXNMQUJCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2hvdy1hcy1sYWItYnV0dG9uJyk7XG5jb25zdCBzaG93QXNSR0JCdXR0b24gPSBnZXRFbGVtZW50PEhUTUxCdXR0b25FbGVtZW50Pignc2hvdy1hcy1yZ2ItYnV0dG9uJyk7XG5cbmV4cG9ydCBjb25zdCBkb21FbGVtZW50czogRE9NRWxlbWVudERhdGEgPSB7XG5cdGFkdmFuY2VkTWVudUJ1dHRvbixcblx0YXBwbHlDdXN0b21Db2xvckJ1dHRvbixcblx0Y2xlYXJDdXN0b21Db2xvckJ1dHRvbixcblx0Y2xvc2VBZHZhbmNlZE1lbnVCdXR0b24sXG5cdGNsb3NlQ3VzdG9tQ29sb3JNZW51QnV0dG9uLFxuXHRjbG9zZUhlbHBNZW51QnV0dG9uLFxuXHRjbG9zZUhpc3RvcnlNZW51QnV0dG9uLFxuXHRjdXN0b21Db2xvckVsZW1lbnQsXG5cdGN1c3RvbUNvbG9yTWVudUJ1dHRvbixcblx0ZGVzYXR1cmF0ZUJ1dHRvbixcblx0ZW5hYmxlQWxwaGFDaGVja2JveCxcblx0Z2VuZXJhdGVCdXR0b24sXG5cdGhlbHBNZW51QnV0dG9uLFxuXHRoaXN0b3J5TWVudUJ1dHRvbixcblx0bGltaXREYXJrbmVzc0NoZWNrYm94LFxuXHRsaW1pdEdyYXluZXNzQ2hlY2tib3gsXG5cdGxpbWl0TGlnaHRuZXNzQ2hlY2tib3gsXG5cdHBhbGV0dGVOdW1iZXJPcHRpb25zLFxuXHRwYWxldHRlVHlwZU9wdGlvbnMsXG5cdHNhdHVyYXRlQnV0dG9uLFxuXHRzZWxlY3RlZENvbG9yT3B0aW9uLFxuXHRzaG93QXNDTVlLQnV0dG9uLFxuXHRzaG93QXNIZXhCdXR0b24sXG5cdHNob3dBc0hTTEJ1dHRvbixcblx0c2hvd0FzSFNWQnV0dG9uLFxuXHRzaG93QXNMQUJCdXR0b24sXG5cdHNob3dBc1JHQkJ1dHRvblxufSBhcyBjb25zdDtcbiJdfQ==